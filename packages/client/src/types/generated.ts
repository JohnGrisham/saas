import { GraphQLClient } from 'graphql-request';
import { RequestInit } from 'graphql-request/dist/types.dom';
import { useQuery, UseQueryOptions } from 'react-query';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };

function fetcher<TData, TVariables>(client: GraphQLClient, query: string, variables?: TVariables, headers?: RequestInit['headers']) {
  return async (): Promise<TData> => client.request<TData, TVariables>(query, variables, headers);
}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  DateTime: any;
  Email: string;
  JSON: any;
};

export type CognitoUser = {
  __typename?: 'CognitoUser';
  confirmationStatus: Scalars['String'];
  email: Scalars['Email'];
  stripeId?: Maybe<Scalars['String']>;
  sub: Scalars['ID'];
  userId?: Maybe<Scalars['String']>;
};

export type Identity = {
  __typename?: 'Identity';
  /** when the model was created */
  createdAt: Scalars['DateTime'];
  /** Unique identifier */
  id: Scalars['ID'];
  sub: Scalars['String'];
  type: IdentityType;
  /** when the model was updated */
  updatedAt: Scalars['DateTime'];
  user: User;
};

export type IdentityByInput = {
  id?: InputMaybe<Scalars['ID']>;
  sub?: InputMaybe<Scalars['String']>;
};

export type IdentityConnection = {
  __typename?: 'IdentityConnection';
  edges?: Maybe<Array<Maybe<IdentityEdge>>>;
  /** Information to aid in pagination */
  pageInfo: PageInfo;
};

/** Input to create a Identity */
export type IdentityCreateInput = {
  sub: Scalars['String'];
  type: IdentityType;
  user: IdentityToUserCreateUserRelation;
};

export type IdentityCreatePayload = {
  __typename?: 'IdentityCreatePayload';
  identity?: Maybe<Identity>;
};

export type IdentityDeletePayload = {
  __typename?: 'IdentityDeletePayload';
  deletedId: Scalars['ID'];
};

export type IdentityEdge = {
  __typename?: 'IdentityEdge';
  cursor: Scalars['String'];
  node: Identity;
};

export type IdentityOrderByInput = {
  createdAt?: InputMaybe<OrderByDirection>;
};

/** Input to create a Identity for the IdentityToUser relation of User */
export type IdentityToUserCreateIdentity = {
  sub: Scalars['String'];
  type: IdentityType;
};

/** Input to link to or create a Identity for the IdentityToUser relation of User */
export type IdentityToUserCreateIdentityRelation = {
  create?: InputMaybe<IdentityToUserCreateIdentity>;
  link?: InputMaybe<Scalars['ID']>;
};

/** Input to create a User for the IdentityToUser relation of Identity */
export type IdentityToUserCreateUser = {
  email: Scalars['Email'];
  identities?: InputMaybe<Array<IdentityToUserCreateIdentityRelation>>;
  name?: InputMaybe<Scalars['String']>;
  sites?: InputMaybe<Array<InputMaybe<SiteToUserCreateSiteRelation>>>;
};

/** Input to link to or create a User for the IdentityToUser relation of Identity */
export type IdentityToUserCreateUserRelation = {
  create?: InputMaybe<IdentityToUserCreateUser>;
  link?: InputMaybe<Scalars['ID']>;
};

/** Input to link/unlink to or create a Identity for the IdentityToUser relation of User */
export type IdentityToUserUpdateIdentityRelation = {
  create?: InputMaybe<IdentityToUserCreateIdentity>;
  link?: InputMaybe<Scalars['ID']>;
  unlink?: InputMaybe<Scalars['ID']>;
};

/** Input to link/unlink to or create a User for the IdentityToUser relation of Identity */
export type IdentityToUserUpdateUserRelation = {
  create?: InputMaybe<IdentityToUserCreateUser>;
  link?: InputMaybe<Scalars['ID']>;
  unlink?: InputMaybe<Scalars['ID']>;
};

export enum IdentityType {
  Credentials = 'CREDENTIALS',
  Github = 'GITHUB',
  Google = 'GOOGLE',
  Netlify = 'NETLIFY'
}

/** Input to update a Identity */
export type IdentityUpdateInput = {
  sub?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<IdentityType>;
  user?: InputMaybe<IdentityToUserUpdateUserRelation>;
};

export type IdentityUpdatePayload = {
  __typename?: 'IdentityUpdatePayload';
  identity?: Maybe<Identity>;
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Create a Identity */
  identityCreate?: Maybe<IdentityCreatePayload>;
  /** Delete a Identity by ID or unique field */
  identityDelete?: Maybe<IdentityDeletePayload>;
  /** Update a Identity */
  identityUpdate?: Maybe<IdentityUpdatePayload>;
  /** Create a Site */
  siteCreate?: Maybe<SiteCreatePayload>;
  /** Delete a Site by ID or unique field */
  siteDelete?: Maybe<SiteDeletePayload>;
  /** Update a Site */
  siteUpdate?: Maybe<SiteUpdatePayload>;
  stripe: StripeMutation;
  /** Create a TemplateData */
  templateDataCreate?: Maybe<TemplateDataCreatePayload>;
  /** Delete a TemplateData by ID or unique field */
  templateDataDelete?: Maybe<TemplateDataDeletePayload>;
  /** Update a TemplateData */
  templateDataUpdate?: Maybe<TemplateDataUpdatePayload>;
  /** Create a User */
  userCreate?: Maybe<UserCreatePayload>;
  /** Delete a User by ID or unique field */
  userDelete?: Maybe<UserDeletePayload>;
  /** Update a User */
  userUpdate?: Maybe<UserUpdatePayload>;
};


export type MutationIdentityCreateArgs = {
  input: IdentityCreateInput;
};


export type MutationIdentityDeleteArgs = {
  by: IdentityByInput;
};


export type MutationIdentityUpdateArgs = {
  by: IdentityByInput;
  input: IdentityUpdateInput;
};


export type MutationSiteCreateArgs = {
  input: SiteCreateInput;
};


export type MutationSiteDeleteArgs = {
  by: SiteByInput;
};


export type MutationSiteUpdateArgs = {
  by: SiteByInput;
  input: SiteUpdateInput;
};


export type MutationTemplateDataCreateArgs = {
  input: TemplateDataCreateInput;
};


export type MutationTemplateDataDeleteArgs = {
  by: TemplateDataByInput;
};


export type MutationTemplateDataUpdateArgs = {
  by: TemplateDataByInput;
  input: TemplateDataUpdateInput;
};


export type MutationUserCreateArgs = {
  input: UserCreateInput;
};


export type MutationUserDeleteArgs = {
  by: UserByInput;
};


export type MutationUserUpdateArgs = {
  by: UserByInput;
  input: UserUpdateInput;
};

export enum OrderByDirection {
  Asc = 'ASC',
  Desc = 'DESC'
}

export type PageInfo = {
  __typename?: 'PageInfo';
  endCursor?: Maybe<Scalars['String']>;
  hasNextPage: Scalars['Boolean'];
  hasPreviousPage: Scalars['Boolean'];
  startCursor?: Maybe<Scalars['String']>;
};

export type Query = {
  __typename?: 'Query';
  /** Query a single Identity by an ID or a unique field */
  identity?: Maybe<Identity>;
  /** Paginated query to fetch the whole list of `Identity`. */
  identityCollection?: Maybe<IdentityConnection>;
  /** Query a single Site by an ID or a unique field */
  site?: Maybe<Site>;
  /** Paginated query to fetch the whole list of `Site`. */
  siteCollection?: Maybe<SiteConnection>;
  stripe: StripeQuery;
  /** Query a single TemplateData by an ID or a unique field */
  templateData?: Maybe<TemplateData>;
  /** Paginated query to fetch the whole list of `TemplateData`. */
  templateDataCollection?: Maybe<TemplateDataConnection>;
  /** Query a single User by an ID or a unique field */
  user?: Maybe<User>;
  /** Paginated query to fetch the whole list of `User`. */
  userCollection?: Maybe<UserConnection>;
};


export type QueryIdentityArgs = {
  by: IdentityByInput;
};


export type QueryIdentityCollectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<IdentityOrderByInput>;
};


export type QuerySiteArgs = {
  by: SiteByInput;
};


export type QuerySiteCollectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<SiteOrderByInput>;
};


export type QueryTemplateDataArgs = {
  by: TemplateDataByInput;
};


export type QueryTemplateDataCollectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<TemplateDataOrderByInput>;
};


export type QueryUserArgs = {
  by: UserByInput;
};


export type QueryUserCollectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<UserOrderByInput>;
};

export type Site = {
  __typename?: 'Site';
  /** when the model was created */
  createdAt: Scalars['DateTime'];
  customDomain: Scalars['String'];
  description: Scalars['String'];
  font?: Maybe<Scalars['String']>;
  /** Unique identifier */
  id: Scalars['ID'];
  image?: Maybe<Scalars['String']>;
  imageBlurhash?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  subdomain: Scalars['String'];
  templateData?: Maybe<TemplateData>;
  /** when the model was updated */
  updatedAt: Scalars['DateTime'];
  user?: Maybe<User>;
};

export type SiteByInput = {
  customDomain?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  subdomain?: InputMaybe<Scalars['String']>;
};

export type SiteConnection = {
  __typename?: 'SiteConnection';
  edges?: Maybe<Array<Maybe<SiteEdge>>>;
  /** Information to aid in pagination */
  pageInfo: PageInfo;
};

/** Input to create a Site */
export type SiteCreateInput = {
  customDomain: Scalars['String'];
  description: Scalars['String'];
  font?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<Scalars['String']>;
  imageBlurhash?: InputMaybe<Scalars['String']>;
  logo?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  subdomain: Scalars['String'];
  templateData?: InputMaybe<SiteToTemplateDataCreateTemplateDataRelation>;
  user?: InputMaybe<SiteToUserCreateUserRelation>;
};

export type SiteCreatePayload = {
  __typename?: 'SiteCreatePayload';
  site?: Maybe<Site>;
};

export type SiteDeletePayload = {
  __typename?: 'SiteDeletePayload';
  deletedId: Scalars['ID'];
};

export type SiteEdge = {
  __typename?: 'SiteEdge';
  cursor: Scalars['String'];
  node: Site;
};

export type SiteOrderByInput = {
  createdAt?: InputMaybe<OrderByDirection>;
};

/** Input to create a Site for the SiteToTemplateData relation of TemplateData */
export type SiteToTemplateDataCreateSite = {
  customDomain: Scalars['String'];
  description: Scalars['String'];
  font?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<Scalars['String']>;
  imageBlurhash?: InputMaybe<Scalars['String']>;
  logo?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  subdomain: Scalars['String'];
  user?: InputMaybe<SiteToUserCreateUserRelation>;
};

/** Input to link to or create a Site for the SiteToTemplateData relation of TemplateData */
export type SiteToTemplateDataCreateSiteRelation = {
  create?: InputMaybe<SiteToTemplateDataCreateSite>;
  link?: InputMaybe<Scalars['ID']>;
};

/** Input to create a TemplateData for the SiteToTemplateData relation of Site */
export type SiteToTemplateDataCreateTemplateData = {
  data: Scalars['JSON'];
};

/** Input to link to or create a TemplateData for the SiteToTemplateData relation of Site */
export type SiteToTemplateDataCreateTemplateDataRelation = {
  create?: InputMaybe<SiteToTemplateDataCreateTemplateData>;
  link?: InputMaybe<Scalars['ID']>;
};

/** Input to link/unlink to or create a Site for the SiteToTemplateData relation of TemplateData */
export type SiteToTemplateDataUpdateSiteRelation = {
  create?: InputMaybe<SiteToTemplateDataCreateSite>;
  link?: InputMaybe<Scalars['ID']>;
  unlink?: InputMaybe<Scalars['ID']>;
};

/** Input to link/unlink to or create a TemplateData for the SiteToTemplateData relation of Site */
export type SiteToTemplateDataUpdateTemplateDataRelation = {
  create?: InputMaybe<SiteToTemplateDataCreateTemplateData>;
  link?: InputMaybe<Scalars['ID']>;
  unlink?: InputMaybe<Scalars['ID']>;
};

/** Input to create a Site for the SiteToUser relation of User */
export type SiteToUserCreateSite = {
  customDomain: Scalars['String'];
  description: Scalars['String'];
  font?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<Scalars['String']>;
  imageBlurhash?: InputMaybe<Scalars['String']>;
  logo?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  subdomain: Scalars['String'];
  templateData?: InputMaybe<SiteToTemplateDataCreateTemplateDataRelation>;
};

/** Input to link to or create a Site for the SiteToUser relation of User */
export type SiteToUserCreateSiteRelation = {
  create?: InputMaybe<SiteToUserCreateSite>;
  link?: InputMaybe<Scalars['ID']>;
};

/** Input to create a User for the SiteToUser relation of Site */
export type SiteToUserCreateUser = {
  email: Scalars['Email'];
  identities?: InputMaybe<Array<IdentityToUserCreateIdentityRelation>>;
  name?: InputMaybe<Scalars['String']>;
  sites?: InputMaybe<Array<InputMaybe<SiteToUserCreateSiteRelation>>>;
};

/** Input to link to or create a User for the SiteToUser relation of Site */
export type SiteToUserCreateUserRelation = {
  create?: InputMaybe<SiteToUserCreateUser>;
  link?: InputMaybe<Scalars['ID']>;
};

/** Input to link/unlink to or create a Site for the SiteToUser relation of User */
export type SiteToUserUpdateSiteRelation = {
  create?: InputMaybe<SiteToUserCreateSite>;
  link?: InputMaybe<Scalars['ID']>;
  unlink?: InputMaybe<Scalars['ID']>;
};

/** Input to link/unlink to or create a User for the SiteToUser relation of Site */
export type SiteToUserUpdateUserRelation = {
  create?: InputMaybe<SiteToUserCreateUser>;
  link?: InputMaybe<Scalars['ID']>;
  unlink?: InputMaybe<Scalars['ID']>;
};

/** Input to update a Site */
export type SiteUpdateInput = {
  customDomain?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  font?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<Scalars['String']>;
  imageBlurhash?: InputMaybe<Scalars['String']>;
  logo?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  subdomain?: InputMaybe<Scalars['String']>;
  templateData?: InputMaybe<SiteToTemplateDataUpdateTemplateDataRelation>;
  user?: InputMaybe<SiteToUserUpdateUserRelation>;
};

export type SiteUpdatePayload = {
  __typename?: 'SiteUpdatePayload';
  site?: Maybe<Site>;
};

export type StripeAccount = {
  __typename?: 'StripeAccount';
  businessProfile?: Maybe<StripeAccountBusinessProfile>;
  businessType?: Maybe<StripeAccountBusinessType>;
  capabilities?: Maybe<StripeAccountCapabilities>;
  chargesEnabled?: Maybe<Scalars['Boolean']>;
  company?: Maybe<StripeLegalEntityCompany>;
  controller?: Maybe<StripeAccountUnificationAccountController>;
  country?: Maybe<Scalars['String']>;
  created?: Maybe<Scalars['Int']>;
  defaultCurrency?: Maybe<Scalars['String']>;
  detailsSubmitted?: Maybe<Scalars['Boolean']>;
  email?: Maybe<Scalars['String']>;
  externalAccounts?: Maybe<StripeAccountExternalAccounts>;
  futureRequirements?: Maybe<StripeAccountFutureRequirements>;
  id: Scalars['String'];
  individual?: Maybe<StripePerson>;
  metadata?: Maybe<Scalars['JSON']>;
  object: StripeAccountObject;
  payoutsEnabled?: Maybe<Scalars['Boolean']>;
  requirements?: Maybe<StripeAccountRequirements>;
  settings?: Maybe<StripeAccountSettings>;
  tosAcceptance?: Maybe<StripeAccountTosAcceptance>;
  type?: Maybe<StripeAccountType>;
};

export type StripeAccountBacsDebitPaymentsSettings = {
  __typename?: 'StripeAccountBacsDebitPaymentsSettings';
  displayName?: Maybe<Scalars['String']>;
};

export type StripeAccountBrandingSettings = {
  __typename?: 'StripeAccountBrandingSettings';
  icon?: Maybe<StripeStringOrFileUnion>;
  logo?: Maybe<StripeStringOrFileUnion>;
  primaryColor?: Maybe<Scalars['String']>;
  secondaryColor?: Maybe<Scalars['String']>;
};

export type StripeAccountBusinessProfile = {
  __typename?: 'StripeAccountBusinessProfile';
  mcc?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  productDescription?: Maybe<Scalars['String']>;
  supportAddress?: Maybe<StripeAddress>;
  supportEmail?: Maybe<Scalars['String']>;
  supportPhone?: Maybe<Scalars['String']>;
  supportUrl?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

export enum StripeAccountBusinessType {
  Company = 'COMPANY',
  GovernmentEntity = 'GOVERNMENT_ENTITY',
  Individual = 'INDIVIDUAL',
  NonProfit = 'NON_PROFIT'
}

export type StripeAccountCapabilities = {
  __typename?: 'StripeAccountCapabilities';
  acssDebitPayments?: Maybe<StripeAccountCapabilitiesAcssDebitPayments>;
  affirmPayments?: Maybe<StripeAccountCapabilitiesAffirmPayments>;
  afterpayClearpayPayments?: Maybe<StripeAccountCapabilitiesAfterpayClearpayPayments>;
  auBecsDebitPayments?: Maybe<StripeAccountCapabilitiesAuBecsDebitPayments>;
  bacsDebitPayments?: Maybe<StripeAccountCapabilitiesBacsDebitPayments>;
  bancontactPayments?: Maybe<StripeAccountCapabilitiesBancontactPayments>;
  bankTransferPayments?: Maybe<StripeAccountCapabilitiesBankTransferPayments>;
  blikPayments?: Maybe<StripeAccountCapabilitiesBlikPayments>;
  boletoPayments?: Maybe<StripeAccountCapabilitiesBoletoPayments>;
  cardIssuing?: Maybe<StripeAccountCapabilitiesCardIssuing>;
  cardPayments?: Maybe<StripeAccountCapabilitiesCardPayments>;
  cartesBancairesPayments?: Maybe<StripeAccountCapabilitiesCartesBancairesPayments>;
  cashappPayments?: Maybe<StripeAccountCapabilitiesCashappPayments>;
  epsPayments?: Maybe<StripeAccountCapabilitiesEpsPayments>;
  fpxPayments?: Maybe<StripeAccountCapabilitiesFpxPayments>;
  giropayPayments?: Maybe<StripeAccountCapabilitiesGiropayPayments>;
  grabpayPayments?: Maybe<StripeAccountCapabilitiesGrabpayPayments>;
  idealPayments?: Maybe<StripeAccountCapabilitiesIdealPayments>;
  indiaInternationalPayments?: Maybe<StripeAccountCapabilitiesIndiaInternationalPayments>;
  jcbPayments?: Maybe<StripeAccountCapabilitiesJcbPayments>;
  klarnaPayments?: Maybe<StripeAccountCapabilitiesKlarnaPayments>;
  konbiniPayments?: Maybe<StripeAccountCapabilitiesKonbiniPayments>;
  legacyPayments?: Maybe<StripeAccountCapabilitiesLegacyPayments>;
  linkPayments?: Maybe<StripeAccountCapabilitiesLinkPayments>;
  oxxoPayments?: Maybe<StripeAccountCapabilitiesOxxoPayments>;
  p24Payments?: Maybe<StripeAccountCapabilitiesP24Payments>;
  paynowPayments?: Maybe<StripeAccountCapabilitiesPaynowPayments>;
  promptpayPayments?: Maybe<StripeAccountCapabilitiesPromptpayPayments>;
  sepaDebitPayments?: Maybe<StripeAccountCapabilitiesSepaDebitPayments>;
  sofortPayments?: Maybe<StripeAccountCapabilitiesSofortPayments>;
  taxReportingUs1099K?: Maybe<StripeAccountCapabilitiesTaxReportingUs1099K>;
  taxReportingUs1099Misc?: Maybe<StripeAccountCapabilitiesTaxReportingUs1099Misc>;
  transfers?: Maybe<StripeAccountCapabilitiesTransfers>;
  treasury?: Maybe<StripeAccountCapabilitiesTreasury>;
  usBankAccountAchPayments?: Maybe<StripeAccountCapabilitiesUsBankAccountAchPayments>;
};

export enum StripeAccountCapabilitiesAcssDebitPayments {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Pending = 'PENDING'
}

export enum StripeAccountCapabilitiesAffirmPayments {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Pending = 'PENDING'
}

export enum StripeAccountCapabilitiesAfterpayClearpayPayments {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Pending = 'PENDING'
}

export enum StripeAccountCapabilitiesAuBecsDebitPayments {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Pending = 'PENDING'
}

export enum StripeAccountCapabilitiesBacsDebitPayments {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Pending = 'PENDING'
}

export enum StripeAccountCapabilitiesBancontactPayments {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Pending = 'PENDING'
}

export enum StripeAccountCapabilitiesBankTransferPayments {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Pending = 'PENDING'
}

export enum StripeAccountCapabilitiesBlikPayments {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Pending = 'PENDING'
}

export enum StripeAccountCapabilitiesBoletoPayments {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Pending = 'PENDING'
}

export enum StripeAccountCapabilitiesCardIssuing {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Pending = 'PENDING'
}

export enum StripeAccountCapabilitiesCardPayments {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Pending = 'PENDING'
}

export enum StripeAccountCapabilitiesCartesBancairesPayments {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Pending = 'PENDING'
}

export enum StripeAccountCapabilitiesCashappPayments {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Pending = 'PENDING'
}

export enum StripeAccountCapabilitiesEpsPayments {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Pending = 'PENDING'
}

export enum StripeAccountCapabilitiesFpxPayments {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Pending = 'PENDING'
}

export enum StripeAccountCapabilitiesGiropayPayments {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Pending = 'PENDING'
}

export enum StripeAccountCapabilitiesGrabpayPayments {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Pending = 'PENDING'
}

export enum StripeAccountCapabilitiesIdealPayments {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Pending = 'PENDING'
}

export enum StripeAccountCapabilitiesIndiaInternationalPayments {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Pending = 'PENDING'
}

export enum StripeAccountCapabilitiesJcbPayments {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Pending = 'PENDING'
}

export enum StripeAccountCapabilitiesKlarnaPayments {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Pending = 'PENDING'
}

export enum StripeAccountCapabilitiesKonbiniPayments {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Pending = 'PENDING'
}

export enum StripeAccountCapabilitiesLegacyPayments {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Pending = 'PENDING'
}

export enum StripeAccountCapabilitiesLinkPayments {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Pending = 'PENDING'
}

export enum StripeAccountCapabilitiesOxxoPayments {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Pending = 'PENDING'
}

export enum StripeAccountCapabilitiesP24Payments {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Pending = 'PENDING'
}

export enum StripeAccountCapabilitiesPaynowPayments {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Pending = 'PENDING'
}

export enum StripeAccountCapabilitiesPromptpayPayments {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Pending = 'PENDING'
}

export enum StripeAccountCapabilitiesSepaDebitPayments {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Pending = 'PENDING'
}

export enum StripeAccountCapabilitiesSofortPayments {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Pending = 'PENDING'
}

export enum StripeAccountCapabilitiesTaxReportingUs1099K {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Pending = 'PENDING'
}

export enum StripeAccountCapabilitiesTaxReportingUs1099Misc {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Pending = 'PENDING'
}

export enum StripeAccountCapabilitiesTransfers {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Pending = 'PENDING'
}

export enum StripeAccountCapabilitiesTreasury {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Pending = 'PENDING'
}

export enum StripeAccountCapabilitiesUsBankAccountAchPayments {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Pending = 'PENDING'
}

export type StripeAccountCapabilityFutureRequirements = {
  __typename?: 'StripeAccountCapabilityFutureRequirements';
  alternatives?: Maybe<Array<StripeAccountRequirementsAlternative>>;
  currentDeadline?: Maybe<Scalars['Int']>;
  currentlyDue: Array<Scalars['String']>;
  disabledReason?: Maybe<Scalars['String']>;
  errors: Array<StripeAccountRequirementsError>;
  eventuallyDue: Array<Scalars['String']>;
  pastDue: Array<Scalars['String']>;
  pendingVerification: Array<Scalars['String']>;
};

export type StripeAccountCapabilityRequirements = {
  __typename?: 'StripeAccountCapabilityRequirements';
  alternatives?: Maybe<Array<StripeAccountRequirementsAlternative>>;
  currentDeadline?: Maybe<Scalars['Int']>;
  currentlyDue: Array<Scalars['String']>;
  disabledReason?: Maybe<Scalars['String']>;
  errors: Array<StripeAccountRequirementsError>;
  eventuallyDue: Array<Scalars['String']>;
  pastDue: Array<Scalars['String']>;
  pendingVerification: Array<Scalars['String']>;
};

export type StripeAccountCardIssuingSettings = {
  __typename?: 'StripeAccountCardIssuingSettings';
  tosAcceptance?: Maybe<StripeCardIssuingAccountTermsOfService>;
};

export type StripeAccountCardPaymentsSettings = {
  __typename?: 'StripeAccountCardPaymentsSettings';
  declineOn?: Maybe<StripeAccountDeclineChargeOn>;
  statementDescriptorPrefix?: Maybe<Scalars['String']>;
  statementDescriptorPrefixKana?: Maybe<Scalars['String']>;
  statementDescriptorPrefixKanji?: Maybe<Scalars['String']>;
};

export type StripeAccountDashboardSettings = {
  __typename?: 'StripeAccountDashboardSettings';
  displayName?: Maybe<Scalars['String']>;
  timezone?: Maybe<Scalars['String']>;
};

export type StripeAccountDeclineChargeOn = {
  __typename?: 'StripeAccountDeclineChargeOn';
  avsFailure: Scalars['Boolean'];
  cvcFailure: Scalars['Boolean'];
};

export type StripeAccountExternalAccounts = {
  __typename?: 'StripeAccountExternalAccounts';
  data: Array<StripeCardOrBankAccountUnion>;
  hasMore: Scalars['Boolean'];
  object: StripeAccountObjectExternalAccounts;
  url: Scalars['String'];
};

export type StripeAccountFutureRequirements = {
  __typename?: 'StripeAccountFutureRequirements';
  alternatives?: Maybe<Array<StripeAccountRequirementsAlternative>>;
  currentDeadline?: Maybe<Scalars['Int']>;
  currentlyDue?: Maybe<Array<Scalars['String']>>;
  disabledReason?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<StripeAccountRequirementsError>>;
  eventuallyDue?: Maybe<Array<Scalars['String']>>;
  pastDue?: Maybe<Array<Scalars['String']>>;
  pendingVerification?: Maybe<Array<Scalars['String']>>;
};

export type StripeAccountLink = {
  __typename?: 'StripeAccountLink';
  created: Scalars['Int'];
  expiresAt: Scalars['Int'];
  object: StripeAccountLinkObject;
  url: Scalars['String'];
};

export enum StripeAccountLinkObject {
  AccountLink = 'ACCOUNT_LINK'
}

export enum StripeAccountObject {
  Account = 'ACCOUNT'
}

export enum StripeAccountObjectExternalAccounts {
  List = 'LIST'
}

export type StripeAccountPaymentsSettings = {
  __typename?: 'StripeAccountPaymentsSettings';
  statementDescriptor?: Maybe<Scalars['String']>;
  statementDescriptorKana?: Maybe<Scalars['String']>;
  statementDescriptorKanji?: Maybe<Scalars['String']>;
  statementDescriptorPrefixKana?: Maybe<Scalars['String']>;
  statementDescriptorPrefixKanji?: Maybe<Scalars['String']>;
};

export type StripeAccountPayoutSettings = {
  __typename?: 'StripeAccountPayoutSettings';
  debitNegativeBalances: Scalars['Boolean'];
  schedule: StripeTransferSchedule;
  statementDescriptor?: Maybe<Scalars['String']>;
};

export type StripeAccountRequirements = {
  __typename?: 'StripeAccountRequirements';
  alternatives?: Maybe<Array<StripeAccountRequirementsAlternative>>;
  currentDeadline?: Maybe<Scalars['Int']>;
  currentlyDue?: Maybe<Array<Scalars['String']>>;
  disabledReason?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<StripeAccountRequirementsError>>;
  eventuallyDue?: Maybe<Array<Scalars['String']>>;
  pastDue?: Maybe<Array<Scalars['String']>>;
  pendingVerification?: Maybe<Array<Scalars['String']>>;
};

export type StripeAccountRequirementsAlternative = {
  __typename?: 'StripeAccountRequirementsAlternative';
  alternativeFieldsDue: Array<Scalars['String']>;
  originalFieldsDue: Array<Scalars['String']>;
};

export type StripeAccountRequirementsError = {
  __typename?: 'StripeAccountRequirementsError';
  code: StripeAccountRequirementsErrorCode;
  reason: Scalars['String'];
  requirement: Scalars['String'];
};

export enum StripeAccountRequirementsErrorCode {
  InvalidAddressCityStatePostalCode = 'INVALID_ADDRESS_CITY_STATE_POSTAL_CODE',
  InvalidDobAgeUnder_18 = 'INVALID_DOB_AGE_UNDER_18',
  InvalidRepresentativeCountry = 'INVALID_REPRESENTATIVE_COUNTRY',
  InvalidStreetAddress = 'INVALID_STREET_ADDRESS',
  InvalidTosAcceptance = 'INVALID_TOS_ACCEPTANCE',
  InvalidValueOther = 'INVALID_VALUE_OTHER',
  VerificationDocumentAddressMismatch = 'VERIFICATION_DOCUMENT_ADDRESS_MISMATCH',
  VerificationDocumentAddressMissing = 'VERIFICATION_DOCUMENT_ADDRESS_MISSING',
  VerificationDocumentCorrupt = 'VERIFICATION_DOCUMENT_CORRUPT',
  VerificationDocumentCountryNotSupported = 'VERIFICATION_DOCUMENT_COUNTRY_NOT_SUPPORTED',
  VerificationDocumentDobMismatch = 'VERIFICATION_DOCUMENT_DOB_MISMATCH',
  VerificationDocumentDuplicateType = 'VERIFICATION_DOCUMENT_DUPLICATE_TYPE',
  VerificationDocumentExpired = 'VERIFICATION_DOCUMENT_EXPIRED',
  VerificationDocumentFailedCopy = 'VERIFICATION_DOCUMENT_FAILED_COPY',
  VerificationDocumentFailedGreyscale = 'VERIFICATION_DOCUMENT_FAILED_GREYSCALE',
  VerificationDocumentFailedOther = 'VERIFICATION_DOCUMENT_FAILED_OTHER',
  VerificationDocumentFailedTestMode = 'VERIFICATION_DOCUMENT_FAILED_TEST_MODE',
  VerificationDocumentFraudulent = 'VERIFICATION_DOCUMENT_FRAUDULENT',
  VerificationDocumentIdNumberMismatch = 'VERIFICATION_DOCUMENT_ID_NUMBER_MISMATCH',
  VerificationDocumentIdNumberMissing = 'VERIFICATION_DOCUMENT_ID_NUMBER_MISSING',
  VerificationDocumentIncomplete = 'VERIFICATION_DOCUMENT_INCOMPLETE',
  VerificationDocumentInvalid = 'VERIFICATION_DOCUMENT_INVALID',
  VerificationDocumentIssueOrExpiryDateMissing = 'VERIFICATION_DOCUMENT_ISSUE_OR_EXPIRY_DATE_MISSING',
  VerificationDocumentManipulated = 'VERIFICATION_DOCUMENT_MANIPULATED',
  VerificationDocumentMissingBack = 'VERIFICATION_DOCUMENT_MISSING_BACK',
  VerificationDocumentMissingFront = 'VERIFICATION_DOCUMENT_MISSING_FRONT',
  VerificationDocumentNameMismatch = 'VERIFICATION_DOCUMENT_NAME_MISMATCH',
  VerificationDocumentNameMissing = 'VERIFICATION_DOCUMENT_NAME_MISSING',
  VerificationDocumentNationalityMismatch = 'VERIFICATION_DOCUMENT_NATIONALITY_MISMATCH',
  VerificationDocumentNotReadable = 'VERIFICATION_DOCUMENT_NOT_READABLE',
  VerificationDocumentNotSigned = 'VERIFICATION_DOCUMENT_NOT_SIGNED',
  VerificationDocumentNotUploaded = 'VERIFICATION_DOCUMENT_NOT_UPLOADED',
  VerificationDocumentPhotoMismatch = 'VERIFICATION_DOCUMENT_PHOTO_MISMATCH',
  VerificationDocumentTooLarge = 'VERIFICATION_DOCUMENT_TOO_LARGE',
  VerificationDocumentTypeNotSupported = 'VERIFICATION_DOCUMENT_TYPE_NOT_SUPPORTED',
  VerificationFailedAddressMatch = 'VERIFICATION_FAILED_ADDRESS_MATCH',
  VerificationFailedBusinessIecNumber = 'VERIFICATION_FAILED_BUSINESS_IEC_NUMBER',
  VerificationFailedDocumentMatch = 'VERIFICATION_FAILED_DOCUMENT_MATCH',
  VerificationFailedIdNumberMatch = 'VERIFICATION_FAILED_ID_NUMBER_MATCH',
  VerificationFailedKeyedIdentity = 'VERIFICATION_FAILED_KEYED_IDENTITY',
  VerificationFailedKeyedMatch = 'VERIFICATION_FAILED_KEYED_MATCH',
  VerificationFailedNameMatch = 'VERIFICATION_FAILED_NAME_MATCH',
  VerificationFailedOther = 'VERIFICATION_FAILED_OTHER',
  VerificationFailedResidentialAddress = 'VERIFICATION_FAILED_RESIDENTIAL_ADDRESS',
  VerificationFailedTaxIdMatch = 'VERIFICATION_FAILED_TAX_ID_MATCH',
  VerificationFailedTaxIdNotIssued = 'VERIFICATION_FAILED_TAX_ID_NOT_ISSUED',
  VerificationMissingExecutives = 'VERIFICATION_MISSING_EXECUTIVES',
  VerificationMissingOwners = 'VERIFICATION_MISSING_OWNERS',
  VerificationRequiresAdditionalMemorandumOfAssociations = 'VERIFICATION_REQUIRES_ADDITIONAL_MEMORANDUM_OF_ASSOCIATIONS'
}

export type StripeAccountSepaDebitPaymentsSettings = {
  __typename?: 'StripeAccountSepaDebitPaymentsSettings';
  creditorId?: Maybe<Scalars['String']>;
};

export type StripeAccountSettings = {
  __typename?: 'StripeAccountSettings';
  bacsDebitPayments?: Maybe<StripeAccountBacsDebitPaymentsSettings>;
  branding: StripeAccountBrandingSettings;
  cardIssuing?: Maybe<StripeAccountCardIssuingSettings>;
  cardPayments: StripeAccountCardPaymentsSettings;
  dashboard: StripeAccountDashboardSettings;
  payments: StripeAccountPaymentsSettings;
  payouts?: Maybe<StripeAccountPayoutSettings>;
  sepaDebitPayments?: Maybe<StripeAccountSepaDebitPaymentsSettings>;
  treasury?: Maybe<StripeAccountTreasurySettings>;
};

export type StripeAccountTermsOfService = {
  __typename?: 'StripeAccountTermsOfService';
  date?: Maybe<Scalars['Int']>;
  ip?: Maybe<Scalars['String']>;
  userAgent?: Maybe<Scalars['String']>;
};

export type StripeAccountTosAcceptance = {
  __typename?: 'StripeAccountTosAcceptance';
  date?: Maybe<Scalars['Int']>;
  ip?: Maybe<Scalars['String']>;
  serviceAgreement?: Maybe<Scalars['String']>;
  userAgent?: Maybe<Scalars['String']>;
};

export type StripeAccountTreasurySettings = {
  __typename?: 'StripeAccountTreasurySettings';
  tosAcceptance?: Maybe<StripeAccountTermsOfService>;
};

export enum StripeAccountType {
  Custom = 'CUSTOM',
  Express = 'EXPRESS',
  Standard = 'STANDARD'
}

export type StripeAccountUnificationAccountController = {
  __typename?: 'StripeAccountUnificationAccountController';
  isController?: Maybe<Scalars['Boolean']>;
  type: StripeAccountUnificationAccountControllerType;
};

export enum StripeAccountUnificationAccountControllerType {
  Account = 'ACCOUNT',
  Application = 'APPLICATION'
}

export type StripeAddress = {
  __typename?: 'StripeAddress';
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  line1?: Maybe<Scalars['String']>;
  line2?: Maybe<Scalars['String']>;
  postalCode?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
};

export type StripeApiErrors = {
  __typename?: 'StripeApiErrors';
  charge?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  declineCode?: Maybe<Scalars['String']>;
  docUrl?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  param?: Maybe<Scalars['String']>;
  paymentIntent?: Maybe<StripePaymentIntent>;
  paymentMethod?: Maybe<StripePaymentMethod>;
  paymentMethodType?: Maybe<Scalars['String']>;
  requestLogUrl?: Maybe<Scalars['String']>;
  setupIntent?: Maybe<StripeSetupIntent>;
  source?: Maybe<StripeSourceOrCardOrBankAccountUnion>;
  type: StripeApiErrorsType;
};

export enum StripeApiErrorsType {
  ApiError = 'API_ERROR',
  CardError = 'CARD_ERROR',
  IdempotencyError = 'IDEMPOTENCY_ERROR',
  InvalidRequestError = 'INVALID_REQUEST_ERROR'
}

export type StripeApplePayDomain = {
  __typename?: 'StripeApplePayDomain';
  created: Scalars['Int'];
  domainName: Scalars['String'];
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  object: StripeApplePayDomainObject;
};

export enum StripeApplePayDomainObject {
  ApplePayDomain = 'APPLE_PAY_DOMAIN'
}

export type StripeApplication = {
  __typename?: 'StripeApplication';
  id: Scalars['String'];
  name?: Maybe<Scalars['String']>;
  object: StripeApplicationObject;
};

export type StripeApplicationFee = {
  __typename?: 'StripeApplicationFee';
  account: StripeStringOrAccountUnion;
  amount: Scalars['Int'];
  amountRefunded: Scalars['Int'];
  application: StripeStringOrApplicationUnion;
  balanceTransaction?: Maybe<StripeStringOrBalanceTransactionUnion>;
  charge: StripeStringOrChargeUnion;
  created: Scalars['Int'];
  currency: Scalars['String'];
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  object: StripeApplicationFeeObject;
  originatingTransaction?: Maybe<StripeStringOrChargeUnion>;
  refunded: Scalars['Boolean'];
  refunds: StripeApplicationFeeRefunds;
};

export enum StripeApplicationFeeObject {
  ApplicationFee = 'APPLICATION_FEE'
}

export enum StripeApplicationFeeObjectRefunds {
  List = 'LIST'
}

export type StripeApplicationFeeRefunds = {
  __typename?: 'StripeApplicationFeeRefunds';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeFeeRefund>;
  object: StripeApplicationFeeObjectRefunds;
  url: Scalars['String'];
};

export enum StripeApplicationObject {
  Application = 'APPLICATION'
}

export type StripeAppsSecret = {
  __typename?: 'StripeAppsSecret';
  created: Scalars['Int'];
  deleted?: Maybe<Scalars['Boolean']>;
  expiresAt?: Maybe<Scalars['Int']>;
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  name: Scalars['String'];
  object: StripeAppsSecretObject;
  payload?: Maybe<Scalars['String']>;
  scope: StripeSecretServiceResourceScope;
};

export enum StripeAppsSecretObject {
  AppsSecret = 'APPS_SECRET'
}

export type StripeAutomaticTax = {
  __typename?: 'StripeAutomaticTax';
  enabled: Scalars['Boolean'];
  status?: Maybe<StripeAutomaticTaxStatus>;
};

export enum StripeAutomaticTaxStatus {
  Complete = 'COMPLETE',
  Failed = 'FAILED',
  RequiresLocationInputs = 'REQUIRES_LOCATION_INPUTS'
}

export type StripeBalance = {
  __typename?: 'StripeBalance';
  available: Array<StripeBalanceAmount>;
  connectReserved?: Maybe<Array<StripeBalanceAmount>>;
  instantAvailable?: Maybe<Array<StripeBalanceAmount>>;
  issuing?: Maybe<StripeBalanceDetail>;
  livemode: Scalars['Boolean'];
  object: StripeBalanceObject;
  pending: Array<StripeBalanceAmount>;
};

export type StripeBalanceAmount = {
  __typename?: 'StripeBalanceAmount';
  amount: Scalars['Int'];
  currency: Scalars['String'];
  sourceTypes?: Maybe<StripeBalanceAmountBySourceType>;
};

export type StripeBalanceAmountBySourceType = {
  __typename?: 'StripeBalanceAmountBySourceType';
  bankAccount?: Maybe<Scalars['Int']>;
  card?: Maybe<Scalars['Int']>;
  fpx?: Maybe<Scalars['Int']>;
};

export type StripeBalanceDetail = {
  __typename?: 'StripeBalanceDetail';
  available: Array<StripeBalanceAmount>;
};

export enum StripeBalanceObject {
  Balance = 'BALANCE'
}

export type StripeBalanceTransaction = {
  __typename?: 'StripeBalanceTransaction';
  amount: Scalars['Int'];
  availableOn: Scalars['Int'];
  created: Scalars['Int'];
  currency: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  exchangeRate?: Maybe<Scalars['Float']>;
  fee: Scalars['Int'];
  feeDetails: Array<StripeFee>;
  id: Scalars['String'];
  net: Scalars['Int'];
  object: StripeBalanceTransactionObject;
  reportingCategory: Scalars['String'];
  source?: Maybe<StripeStringOrTransferReversalOrTransferOrTopupOrTaxDeductedAtSourceOrReserveTransactionOrRefundOrPlatformTaxFeeOrPayoutOrIssuingTransactionOrIssuingDisputeOrIssuingAuthorizationOrFeeRefundOrDisputeOrConnectCollectionTransferOrChargeOrApplicationFeeUnion>;
  status: Scalars['String'];
  type: StripeBalanceTransactionType;
};

export enum StripeBalanceTransactionObject {
  BalanceTransaction = 'BALANCE_TRANSACTION'
}

export enum StripeBalanceTransactionType {
  Adjustment = 'ADJUSTMENT',
  Advance = 'ADVANCE',
  AdvanceFunding = 'ADVANCE_FUNDING',
  AnticipationRepayment = 'ANTICIPATION_REPAYMENT',
  ApplicationFee = 'APPLICATION_FEE',
  ApplicationFeeRefund = 'APPLICATION_FEE_REFUND',
  Charge = 'CHARGE',
  ConnectCollectionTransfer = 'CONNECT_COLLECTION_TRANSFER',
  Contribution = 'CONTRIBUTION',
  IssuingAuthorizationHold = 'ISSUING_AUTHORIZATION_HOLD',
  IssuingAuthorizationRelease = 'ISSUING_AUTHORIZATION_RELEASE',
  IssuingDispute = 'ISSUING_DISPUTE',
  IssuingTransaction = 'ISSUING_TRANSACTION',
  Payment = 'PAYMENT',
  PaymentFailureRefund = 'PAYMENT_FAILURE_REFUND',
  PaymentRefund = 'PAYMENT_REFUND',
  Payout = 'PAYOUT',
  PayoutCancel = 'PAYOUT_CANCEL',
  PayoutFailure = 'PAYOUT_FAILURE',
  Refund = 'REFUND',
  RefundFailure = 'REFUND_FAILURE',
  ReservedFunds = 'RESERVED_FUNDS',
  ReserveTransaction = 'RESERVE_TRANSACTION',
  StripeFee = 'STRIPE_FEE',
  StripeFxFee = 'STRIPE_FX_FEE',
  TaxFee = 'TAX_FEE',
  Topup = 'TOPUP',
  TopupReversal = 'TOPUP_REVERSAL',
  Transfer = 'TRANSFER',
  TransferCancel = 'TRANSFER_CANCEL',
  TransferFailure = 'TRANSFER_FAILURE',
  TransferRefund = 'TRANSFER_REFUND'
}

export type StripeBankAccount = {
  __typename?: 'StripeBankAccount';
  account?: Maybe<StripeStringOrAccountUnion>;
  accountHolderName?: Maybe<Scalars['String']>;
  accountHolderType?: Maybe<Scalars['String']>;
  accountType?: Maybe<Scalars['String']>;
  availablePayoutMethods?: Maybe<Array<StripeBankAccountAvailablePayoutMethods>>;
  bankName?: Maybe<Scalars['String']>;
  country: Scalars['String'];
  currency: Scalars['String'];
  customer?: Maybe<StripeStringOrDeletedCustomerOrCustomerUnion>;
  defaultForCurrency?: Maybe<Scalars['Boolean']>;
  fingerprint?: Maybe<Scalars['String']>;
  futureRequirements?: Maybe<StripeExternalAccountRequirements>;
  id: Scalars['String'];
  last4: Scalars['String'];
  metadata?: Maybe<Scalars['JSON']>;
  object: StripeBankAccountObject;
  requirements?: Maybe<StripeExternalAccountRequirements>;
  routingNumber?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

export enum StripeBankAccountAvailablePayoutMethods {
  Instant = 'INSTANT',
  Standard = 'STANDARD'
}

export enum StripeBankAccountObject {
  BankAccount = 'BANK_ACCOUNT'
}

export type StripeBankConnectionsResourceAccountholder = {
  __typename?: 'StripeBankConnectionsResourceAccountholder';
  account?: Maybe<StripeStringOrAccountUnion>;
  customer?: Maybe<StripeStringOrCustomerUnion>;
  type: StripeBankConnectionsResourceAccountholderType;
};

export enum StripeBankConnectionsResourceAccountholderType {
  Account = 'ACCOUNT',
  Customer = 'CUSTOMER'
}

export type StripeBankConnectionsResourceBalance = {
  __typename?: 'StripeBankConnectionsResourceBalance';
  asOf: Scalars['Int'];
  cash?: Maybe<StripeBankConnectionsResourceBalanceApiResourceCashBalance>;
  credit?: Maybe<StripeBankConnectionsResourceBalanceApiResourceCreditBalance>;
  current: Scalars['JSON'];
  type: StripeBankConnectionsResourceBalanceType;
};

export type StripeBankConnectionsResourceBalanceApiResourceCashBalance = {
  __typename?: 'StripeBankConnectionsResourceBalanceApiResourceCashBalance';
  available?: Maybe<Scalars['JSON']>;
};

export type StripeBankConnectionsResourceBalanceApiResourceCreditBalance = {
  __typename?: 'StripeBankConnectionsResourceBalanceApiResourceCreditBalance';
  used?: Maybe<Scalars['JSON']>;
};

export type StripeBankConnectionsResourceBalanceRefresh = {
  __typename?: 'StripeBankConnectionsResourceBalanceRefresh';
  lastAttemptedAt: Scalars['Int'];
  status: StripeBankConnectionsResourceBalanceRefreshStatus;
};

export enum StripeBankConnectionsResourceBalanceRefreshStatus {
  Failed = 'FAILED',
  Pending = 'PENDING',
  Succeeded = 'SUCCEEDED'
}

export enum StripeBankConnectionsResourceBalanceType {
  Cash = 'CASH',
  Credit = 'CREDIT'
}

export type StripeBankConnectionsResourceLinkAccountSessionFilters = {
  __typename?: 'StripeBankConnectionsResourceLinkAccountSessionFilters';
  countries?: Maybe<Array<Scalars['String']>>;
};

export type StripeBankConnectionsResourceOwnershipRefresh = {
  __typename?: 'StripeBankConnectionsResourceOwnershipRefresh';
  lastAttemptedAt: Scalars['Int'];
  status: StripeBankConnectionsResourceOwnershipRefreshStatus;
};

export enum StripeBankConnectionsResourceOwnershipRefreshStatus {
  Failed = 'FAILED',
  Pending = 'PENDING',
  Succeeded = 'SUCCEEDED'
}

export type StripeBillingDetails = {
  __typename?: 'StripeBillingDetails';
  address?: Maybe<StripeAddress>;
  email?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
};

export type StripeBillingPortalConfiguration = {
  __typename?: 'StripeBillingPortalConfiguration';
  active: Scalars['Boolean'];
  application?: Maybe<StripeStringOrDeletedApplicationOrApplicationUnion>;
  businessProfile: StripePortalBusinessProfile;
  created: Scalars['Int'];
  defaultReturnUrl?: Maybe<Scalars['String']>;
  features: StripePortalFeatures;
  id: Scalars['String'];
  isDefault: Scalars['Boolean'];
  livemode: Scalars['Boolean'];
  loginPage: StripePortalLoginPage;
  metadata?: Maybe<Scalars['JSON']>;
  object: StripeBillingPortalConfigurationObject;
  updated: Scalars['Int'];
};

export enum StripeBillingPortalConfigurationObject {
  BillingPortalConfiguration = 'BILLING_PORTAL_CONFIGURATION'
}

export type StripeBillingPortalSession = {
  __typename?: 'StripeBillingPortalSession';
  configuration: StripeStringOrBillingPortalConfigurationUnion;
  created: Scalars['Int'];
  customer: Scalars['String'];
  flow?: Maybe<StripePortalFlowsFlow>;
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  locale?: Maybe<StripeBillingPortalSessionLocale>;
  object: StripeBillingPortalSessionObject;
  onBehalfOf?: Maybe<Scalars['String']>;
  returnUrl?: Maybe<Scalars['String']>;
  url: Scalars['String'];
};

export enum StripeBillingPortalSessionLocale {
  Auto = 'AUTO',
  Bg = 'BG',
  Cs = 'CS',
  Da = 'DA',
  De = 'DE',
  El = 'EL',
  En = 'EN',
  EnAu = 'EN_AU',
  EnCa = 'EN_CA',
  EnGb = 'EN_GB',
  EnIe = 'EN_IE',
  EnIn = 'EN_IN',
  EnNz = 'EN_NZ',
  EnSg = 'EN_SG',
  Es = 'ES',
  Es_419 = 'ES_419',
  Et = 'ET',
  Fi = 'FI',
  Fil = 'FIL',
  Fr = 'FR',
  FrCa = 'FR_CA',
  Hr = 'HR',
  Hu = 'HU',
  Id = 'ID',
  It = 'IT',
  Ja = 'JA',
  Ko = 'KO',
  Lt = 'LT',
  Lv = 'LV',
  Ms = 'MS',
  Mt = 'MT',
  Nb = 'NB',
  Nl = 'NL',
  Pl = 'PL',
  Pt = 'PT',
  PtBr = 'PT_BR',
  Ro = 'RO',
  Ru = 'RU',
  Sk = 'SK',
  Sl = 'SL',
  Sv = 'SV',
  Th = 'TH',
  Tr = 'TR',
  Vi = 'VI',
  Zh = 'ZH',
  ZhHk = 'ZH_HK',
  ZhTw = 'ZH_TW'
}

export enum StripeBillingPortalSessionObject {
  BillingPortalSession = 'BILLING_PORTAL_SESSION'
}

export type StripeCancellationDetails = {
  __typename?: 'StripeCancellationDetails';
  comment?: Maybe<Scalars['String']>;
  feedback?: Maybe<StripeCancellationDetailsFeedback>;
  reason?: Maybe<StripeCancellationDetailsReason>;
};

export enum StripeCancellationDetailsFeedback {
  CustomerService = 'CUSTOMER_SERVICE',
  LowQuality = 'LOW_QUALITY',
  MissingFeatures = 'MISSING_FEATURES',
  Other = 'OTHER',
  SwitchedService = 'SWITCHED_SERVICE',
  TooComplex = 'TOO_COMPLEX',
  TooExpensive = 'TOO_EXPENSIVE',
  Unused = 'UNUSED'
}

export enum StripeCancellationDetailsReason {
  CancellationRequested = 'CANCELLATION_REQUESTED',
  PaymentDisputed = 'PAYMENT_DISPUTED',
  PaymentFailed = 'PAYMENT_FAILED'
}

export type StripeCapability = {
  __typename?: 'StripeCapability';
  account: StripeStringOrAccountUnion;
  futureRequirements?: Maybe<StripeAccountCapabilityFutureRequirements>;
  id: Scalars['String'];
  object: StripeCapabilityObject;
  requested: Scalars['Boolean'];
  requestedAt?: Maybe<Scalars['Int']>;
  requirements?: Maybe<StripeAccountCapabilityRequirements>;
  status: StripeCapabilityStatus;
};

export enum StripeCapabilityObject {
  Capability = 'CAPABILITY'
}

export enum StripeCapabilityStatus {
  Active = 'ACTIVE',
  Disabled = 'DISABLED',
  Inactive = 'INACTIVE',
  Pending = 'PENDING',
  Unrequested = 'UNREQUESTED'
}

export type StripeCard = {
  __typename?: 'StripeCard';
  account?: Maybe<StripeStringOrAccountUnion>;
  addressCity?: Maybe<Scalars['String']>;
  addressCountry?: Maybe<Scalars['String']>;
  addressLine1?: Maybe<Scalars['String']>;
  addressLine1Check?: Maybe<Scalars['String']>;
  addressLine2?: Maybe<Scalars['String']>;
  addressState?: Maybe<Scalars['String']>;
  addressZip?: Maybe<Scalars['String']>;
  addressZipCheck?: Maybe<Scalars['String']>;
  availablePayoutMethods?: Maybe<Array<StripeCardAvailablePayoutMethods>>;
  brand: Scalars['String'];
  country?: Maybe<Scalars['String']>;
  currency?: Maybe<Scalars['String']>;
  customer?: Maybe<StripeStringOrDeletedCustomerOrCustomerUnion>;
  cvcCheck?: Maybe<Scalars['String']>;
  defaultForCurrency?: Maybe<Scalars['Boolean']>;
  dynamicLast4?: Maybe<Scalars['String']>;
  expMonth: Scalars['Int'];
  expYear: Scalars['Int'];
  fingerprint?: Maybe<Scalars['String']>;
  funding: Scalars['String'];
  id: Scalars['String'];
  last4: Scalars['String'];
  metadata?: Maybe<Scalars['JSON']>;
  name?: Maybe<Scalars['String']>;
  object: StripeCardObject;
  status?: Maybe<Scalars['String']>;
  tokenizationMethod?: Maybe<Scalars['String']>;
};

export enum StripeCardAvailablePayoutMethods {
  Instant = 'INSTANT',
  Standard = 'STANDARD'
}

export type StripeCardGeneratedFromPaymentMethodDetails = {
  __typename?: 'StripeCardGeneratedFromPaymentMethodDetails';
  cardPresent?: Maybe<StripePaymentMethodDetailsCardPresent>;
  type: Scalars['String'];
};

export type StripeCardIssuingAccountTermsOfService = {
  __typename?: 'StripeCardIssuingAccountTermsOfService';
  date?: Maybe<Scalars['Int']>;
  ip?: Maybe<Scalars['String']>;
  userAgent?: Maybe<Scalars['String']>;
};

export enum StripeCardObject {
  Card = 'CARD'
}

export type StripeCardOrBankAccountUnion = StripeBankAccount | StripeCard;

export type StripeCashBalance = {
  __typename?: 'StripeCashBalance';
  available?: Maybe<Scalars['JSON']>;
  customer: Scalars['String'];
  livemode: Scalars['Boolean'];
  object: StripeCashBalanceObject;
  settings: StripeCustomerBalanceCustomerBalanceSettings;
};

export enum StripeCashBalanceObject {
  CashBalance = 'CASH_BALANCE'
}

export type StripeCharge = {
  __typename?: 'StripeCharge';
  amount: Scalars['Int'];
  amountCaptured: Scalars['Int'];
  amountRefunded: Scalars['Int'];
  application?: Maybe<StripeStringOrApplicationUnion>;
  applicationFee?: Maybe<StripeStringOrApplicationFeeUnion>;
  applicationFeeAmount?: Maybe<Scalars['Int']>;
  balanceTransaction?: Maybe<StripeStringOrBalanceTransactionUnion>;
  billingDetails: StripeBillingDetails;
  calculatedStatementDescriptor?: Maybe<Scalars['String']>;
  captured: Scalars['Boolean'];
  created: Scalars['Int'];
  currency: Scalars['String'];
  customer?: Maybe<StripeStringOrDeletedCustomerOrCustomerUnion>;
  description?: Maybe<Scalars['String']>;
  disputed: Scalars['Boolean'];
  failureBalanceTransaction?: Maybe<StripeStringOrBalanceTransactionUnion>;
  failureCode?: Maybe<Scalars['String']>;
  failureMessage?: Maybe<Scalars['String']>;
  fraudDetails?: Maybe<StripeChargeFraudDetails>;
  id: Scalars['String'];
  invoice?: Maybe<StripeStringOrInvoiceUnion>;
  livemode: Scalars['Boolean'];
  metadata: Scalars['JSON'];
  object: StripeChargeObject;
  onBehalfOf?: Maybe<StripeStringOrAccountUnion>;
  outcome?: Maybe<StripeChargeOutcome>;
  paid: Scalars['Boolean'];
  paymentIntent?: Maybe<StripeStringOrPaymentIntentUnion>;
  paymentMethod?: Maybe<Scalars['String']>;
  paymentMethodDetails?: Maybe<StripePaymentMethodDetails>;
  radarOptions?: Maybe<StripeRadarRadarOptions>;
  receiptEmail?: Maybe<Scalars['String']>;
  receiptNumber?: Maybe<Scalars['String']>;
  receiptUrl?: Maybe<Scalars['String']>;
  refunded: Scalars['Boolean'];
  refunds?: Maybe<StripeChargeRefunds>;
  review?: Maybe<StripeStringOrReviewUnion>;
  shipping?: Maybe<StripeShipping>;
  sourceTransfer?: Maybe<StripeStringOrTransferUnion>;
  statementDescriptor?: Maybe<Scalars['String']>;
  statementDescriptorSuffix?: Maybe<Scalars['String']>;
  status: StripeChargeStatus;
  transfer?: Maybe<StripeStringOrTransferUnion>;
  transferData?: Maybe<StripeChargeTransferData>;
  transferGroup?: Maybe<Scalars['String']>;
};

export type StripeChargeFraudDetails = {
  __typename?: 'StripeChargeFraudDetails';
  stripeReport?: Maybe<Scalars['String']>;
  userReport?: Maybe<Scalars['String']>;
};

export enum StripeChargeObject {
  Charge = 'CHARGE'
}

export enum StripeChargeObjectRefunds {
  List = 'LIST'
}

export type StripeChargeOutcome = {
  __typename?: 'StripeChargeOutcome';
  networkStatus?: Maybe<Scalars['String']>;
  reason?: Maybe<Scalars['String']>;
  riskLevel?: Maybe<Scalars['String']>;
  riskScore?: Maybe<Scalars['Int']>;
  rule?: Maybe<StripeStringOrRuleUnion>;
  sellerMessage?: Maybe<Scalars['String']>;
  type: Scalars['String'];
};

export type StripeChargeRefunds = {
  __typename?: 'StripeChargeRefunds';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeRefund>;
  object: StripeChargeObjectRefunds;
  url: Scalars['String'];
};

export enum StripeChargeStatus {
  Failed = 'FAILED',
  Pending = 'PENDING',
  Succeeded = 'SUCCEEDED'
}

export type StripeChargeTransferData = {
  __typename?: 'StripeChargeTransferData';
  amount?: Maybe<Scalars['Int']>;
  destination: StripeStringOrAccountUnion;
};

export type StripeCheckoutAcssDebitMandateOptions = {
  __typename?: 'StripeCheckoutAcssDebitMandateOptions';
  customMandateUrl?: Maybe<Scalars['String']>;
  defaultFor?: Maybe<Array<StripeCheckoutAcssDebitMandateOptionsDefaultFor>>;
  intervalDescription?: Maybe<Scalars['String']>;
  paymentSchedule?: Maybe<StripeCheckoutAcssDebitMandateOptionsPaymentSchedule>;
  transactionType?: Maybe<StripeCheckoutAcssDebitMandateOptionsTransactionType>;
};

export enum StripeCheckoutAcssDebitMandateOptionsDefaultFor {
  Invoice = 'INVOICE',
  Subscription = 'SUBSCRIPTION'
}

export enum StripeCheckoutAcssDebitMandateOptionsPaymentSchedule {
  Combined = 'COMBINED',
  Interval = 'INTERVAL',
  Sporadic = 'SPORADIC'
}

export enum StripeCheckoutAcssDebitMandateOptionsTransactionType {
  Business = 'BUSINESS',
  Personal = 'PERSONAL'
}

export type StripeCheckoutAcssDebitPaymentMethodOptions = {
  __typename?: 'StripeCheckoutAcssDebitPaymentMethodOptions';
  currency?: Maybe<StripeCheckoutAcssDebitPaymentMethodOptionsCurrency>;
  mandateOptions?: Maybe<StripeCheckoutAcssDebitMandateOptions>;
  setupFutureUsage?: Maybe<StripeCheckoutAcssDebitPaymentMethodOptionsSetupFutureUsage>;
  verificationMethod?: Maybe<StripeCheckoutAcssDebitPaymentMethodOptionsVerificationMethod>;
};

export enum StripeCheckoutAcssDebitPaymentMethodOptionsCurrency {
  Cad = 'CAD',
  Usd = 'USD'
}

export enum StripeCheckoutAcssDebitPaymentMethodOptionsSetupFutureUsage {
  None = 'NONE',
  OffSession = 'OFF_SESSION',
  OnSession = 'ON_SESSION'
}

export enum StripeCheckoutAcssDebitPaymentMethodOptionsVerificationMethod {
  Automatic = 'AUTOMATIC',
  Instant = 'INSTANT',
  Microdeposits = 'MICRODEPOSITS'
}

export type StripeCheckoutAffirmPaymentMethodOptions = {
  __typename?: 'StripeCheckoutAffirmPaymentMethodOptions';
  setupFutureUsage?: Maybe<StripeCheckoutAffirmPaymentMethodOptionsSetupFutureUsage>;
};

export enum StripeCheckoutAffirmPaymentMethodOptionsSetupFutureUsage {
  None = 'NONE'
}

export type StripeCheckoutAfterpayClearpayPaymentMethodOptions = {
  __typename?: 'StripeCheckoutAfterpayClearpayPaymentMethodOptions';
  setupFutureUsage?: Maybe<StripeCheckoutAfterpayClearpayPaymentMethodOptionsSetupFutureUsage>;
};

export enum StripeCheckoutAfterpayClearpayPaymentMethodOptionsSetupFutureUsage {
  None = 'NONE'
}

export type StripeCheckoutAlipayPaymentMethodOptions = {
  __typename?: 'StripeCheckoutAlipayPaymentMethodOptions';
  setupFutureUsage?: Maybe<StripeCheckoutAlipayPaymentMethodOptionsSetupFutureUsage>;
};

export enum StripeCheckoutAlipayPaymentMethodOptionsSetupFutureUsage {
  None = 'NONE'
}

export type StripeCheckoutAuBecsDebitPaymentMethodOptions = {
  __typename?: 'StripeCheckoutAuBecsDebitPaymentMethodOptions';
  setupFutureUsage?: Maybe<StripeCheckoutAuBecsDebitPaymentMethodOptionsSetupFutureUsage>;
};

export enum StripeCheckoutAuBecsDebitPaymentMethodOptionsSetupFutureUsage {
  None = 'NONE'
}

export type StripeCheckoutBacsDebitPaymentMethodOptions = {
  __typename?: 'StripeCheckoutBacsDebitPaymentMethodOptions';
  setupFutureUsage?: Maybe<StripeCheckoutBacsDebitPaymentMethodOptionsSetupFutureUsage>;
};

export enum StripeCheckoutBacsDebitPaymentMethodOptionsSetupFutureUsage {
  None = 'NONE',
  OffSession = 'OFF_SESSION',
  OnSession = 'ON_SESSION'
}

export type StripeCheckoutBancontactPaymentMethodOptions = {
  __typename?: 'StripeCheckoutBancontactPaymentMethodOptions';
  setupFutureUsage?: Maybe<StripeCheckoutBancontactPaymentMethodOptionsSetupFutureUsage>;
};

export enum StripeCheckoutBancontactPaymentMethodOptionsSetupFutureUsage {
  None = 'NONE'
}

export type StripeCheckoutBoletoPaymentMethodOptions = {
  __typename?: 'StripeCheckoutBoletoPaymentMethodOptions';
  expiresAfterDays: Scalars['Int'];
  setupFutureUsage?: Maybe<StripeCheckoutBoletoPaymentMethodOptionsSetupFutureUsage>;
};

export enum StripeCheckoutBoletoPaymentMethodOptionsSetupFutureUsage {
  None = 'NONE',
  OffSession = 'OFF_SESSION',
  OnSession = 'ON_SESSION'
}

export type StripeCheckoutCardInstallmentsOptions = {
  __typename?: 'StripeCheckoutCardInstallmentsOptions';
  enabled?: Maybe<Scalars['Boolean']>;
};

export type StripeCheckoutCardPaymentMethodOptions = {
  __typename?: 'StripeCheckoutCardPaymentMethodOptions';
  installments?: Maybe<StripeCheckoutCardInstallmentsOptions>;
  setupFutureUsage?: Maybe<StripeCheckoutCardPaymentMethodOptionsSetupFutureUsage>;
  statementDescriptorSuffixKana?: Maybe<Scalars['String']>;
  statementDescriptorSuffixKanji?: Maybe<Scalars['String']>;
};

export enum StripeCheckoutCardPaymentMethodOptionsSetupFutureUsage {
  None = 'NONE',
  OffSession = 'OFF_SESSION',
  OnSession = 'ON_SESSION'
}

export type StripeCheckoutCashappPaymentMethodOptions = {
  __typename?: 'StripeCheckoutCashappPaymentMethodOptions';
  setupFutureUsage?: Maybe<StripeCheckoutCashappPaymentMethodOptionsSetupFutureUsage>;
};

export enum StripeCheckoutCashappPaymentMethodOptionsSetupFutureUsage {
  None = 'NONE'
}

export type StripeCheckoutCustomerBalanceBankTransferPaymentMethodOptions = {
  __typename?: 'StripeCheckoutCustomerBalanceBankTransferPaymentMethodOptions';
  euBankTransfer?: Maybe<StripePaymentMethodOptionsCustomerBalanceEuBankAccount>;
  requestedAddressTypes?: Maybe<Array<StripeCheckoutCustomerBalanceBankTransferPaymentMethodOptionsRequestedAddressTypes>>;
  type?: Maybe<StripeCheckoutCustomerBalanceBankTransferPaymentMethodOptionsType>;
};

export enum StripeCheckoutCustomerBalanceBankTransferPaymentMethodOptionsRequestedAddressTypes {
  Iban = 'IBAN',
  Sepa = 'SEPA',
  SortCode = 'SORT_CODE',
  Spei = 'SPEI',
  Zengin = 'ZENGIN'
}

export enum StripeCheckoutCustomerBalanceBankTransferPaymentMethodOptionsType {
  EuBankTransfer = 'EU_BANK_TRANSFER',
  GbBankTransfer = 'GB_BANK_TRANSFER',
  JpBankTransfer = 'JP_BANK_TRANSFER',
  MxBankTransfer = 'MX_BANK_TRANSFER'
}

export type StripeCheckoutCustomerBalancePaymentMethodOptions = {
  __typename?: 'StripeCheckoutCustomerBalancePaymentMethodOptions';
  bankTransfer?: Maybe<StripeCheckoutCustomerBalanceBankTransferPaymentMethodOptions>;
  fundingType?: Maybe<StripeCheckoutCustomerBalancePaymentMethodOptionsFundingType>;
  setupFutureUsage?: Maybe<StripeCheckoutCustomerBalancePaymentMethodOptionsSetupFutureUsage>;
};

export enum StripeCheckoutCustomerBalancePaymentMethodOptionsFundingType {
  BankTransfer = 'BANK_TRANSFER'
}

export enum StripeCheckoutCustomerBalancePaymentMethodOptionsSetupFutureUsage {
  None = 'NONE'
}

export type StripeCheckoutEpsPaymentMethodOptions = {
  __typename?: 'StripeCheckoutEpsPaymentMethodOptions';
  setupFutureUsage?: Maybe<StripeCheckoutEpsPaymentMethodOptionsSetupFutureUsage>;
};

export enum StripeCheckoutEpsPaymentMethodOptionsSetupFutureUsage {
  None = 'NONE'
}

export type StripeCheckoutFpxPaymentMethodOptions = {
  __typename?: 'StripeCheckoutFpxPaymentMethodOptions';
  setupFutureUsage?: Maybe<StripeCheckoutFpxPaymentMethodOptionsSetupFutureUsage>;
};

export enum StripeCheckoutFpxPaymentMethodOptionsSetupFutureUsage {
  None = 'NONE'
}

export type StripeCheckoutGiropayPaymentMethodOptions = {
  __typename?: 'StripeCheckoutGiropayPaymentMethodOptions';
  setupFutureUsage?: Maybe<StripeCheckoutGiropayPaymentMethodOptionsSetupFutureUsage>;
};

export enum StripeCheckoutGiropayPaymentMethodOptionsSetupFutureUsage {
  None = 'NONE'
}

export type StripeCheckoutGrabPayPaymentMethodOptions = {
  __typename?: 'StripeCheckoutGrabPayPaymentMethodOptions';
  setupFutureUsage?: Maybe<StripeCheckoutGrabPayPaymentMethodOptionsSetupFutureUsage>;
};

export enum StripeCheckoutGrabPayPaymentMethodOptionsSetupFutureUsage {
  None = 'NONE'
}

export type StripeCheckoutIdealPaymentMethodOptions = {
  __typename?: 'StripeCheckoutIdealPaymentMethodOptions';
  setupFutureUsage?: Maybe<StripeCheckoutIdealPaymentMethodOptionsSetupFutureUsage>;
};

export enum StripeCheckoutIdealPaymentMethodOptionsSetupFutureUsage {
  None = 'NONE'
}

export type StripeCheckoutKlarnaPaymentMethodOptions = {
  __typename?: 'StripeCheckoutKlarnaPaymentMethodOptions';
  setupFutureUsage?: Maybe<StripeCheckoutKlarnaPaymentMethodOptionsSetupFutureUsage>;
};

export enum StripeCheckoutKlarnaPaymentMethodOptionsSetupFutureUsage {
  None = 'NONE',
  OffSession = 'OFF_SESSION',
  OnSession = 'ON_SESSION'
}

export type StripeCheckoutKonbiniPaymentMethodOptions = {
  __typename?: 'StripeCheckoutKonbiniPaymentMethodOptions';
  expiresAfterDays?: Maybe<Scalars['Int']>;
  setupFutureUsage?: Maybe<StripeCheckoutKonbiniPaymentMethodOptionsSetupFutureUsage>;
};

export enum StripeCheckoutKonbiniPaymentMethodOptionsSetupFutureUsage {
  None = 'NONE'
}

export type StripeCheckoutLinkPaymentMethodOptions = {
  __typename?: 'StripeCheckoutLinkPaymentMethodOptions';
  setupFutureUsage?: Maybe<StripeCheckoutLinkPaymentMethodOptionsSetupFutureUsage>;
};

export enum StripeCheckoutLinkPaymentMethodOptionsSetupFutureUsage {
  None = 'NONE',
  OffSession = 'OFF_SESSION'
}

export type StripeCheckoutOxxoPaymentMethodOptions = {
  __typename?: 'StripeCheckoutOxxoPaymentMethodOptions';
  expiresAfterDays: Scalars['Int'];
  setupFutureUsage?: Maybe<StripeCheckoutOxxoPaymentMethodOptionsSetupFutureUsage>;
};

export enum StripeCheckoutOxxoPaymentMethodOptionsSetupFutureUsage {
  None = 'NONE'
}

export type StripeCheckoutP24PaymentMethodOptions = {
  __typename?: 'StripeCheckoutP24PaymentMethodOptions';
  setupFutureUsage?: Maybe<StripeCheckoutP24PaymentMethodOptionsSetupFutureUsage>;
};

export enum StripeCheckoutP24PaymentMethodOptionsSetupFutureUsage {
  None = 'NONE'
}

export type StripeCheckoutPaynowPaymentMethodOptions = {
  __typename?: 'StripeCheckoutPaynowPaymentMethodOptions';
  setupFutureUsage?: Maybe<StripeCheckoutPaynowPaymentMethodOptionsSetupFutureUsage>;
};

export enum StripeCheckoutPaynowPaymentMethodOptionsSetupFutureUsage {
  None = 'NONE'
}

export type StripeCheckoutPixPaymentMethodOptions = {
  __typename?: 'StripeCheckoutPixPaymentMethodOptions';
  expiresAfterSeconds?: Maybe<Scalars['Int']>;
};

export type StripeCheckoutSepaDebitPaymentMethodOptions = {
  __typename?: 'StripeCheckoutSepaDebitPaymentMethodOptions';
  setupFutureUsage?: Maybe<StripeCheckoutSepaDebitPaymentMethodOptionsSetupFutureUsage>;
};

export enum StripeCheckoutSepaDebitPaymentMethodOptionsSetupFutureUsage {
  None = 'NONE',
  OffSession = 'OFF_SESSION',
  OnSession = 'ON_SESSION'
}

export type StripeCheckoutSession = {
  __typename?: 'StripeCheckoutSession';
  afterExpiration?: Maybe<StripePaymentPagesCheckoutSessionAfterExpiration>;
  allowPromotionCodes?: Maybe<Scalars['Boolean']>;
  amountSubtotal?: Maybe<Scalars['Int']>;
  amountTotal?: Maybe<Scalars['Int']>;
  automaticTax: StripePaymentPagesCheckoutSessionAutomaticTax;
  billingAddressCollection?: Maybe<StripeCheckoutSessionBillingAddressCollection>;
  cancelUrl?: Maybe<Scalars['String']>;
  clientReferenceId?: Maybe<Scalars['String']>;
  consent?: Maybe<StripePaymentPagesCheckoutSessionConsent>;
  consentCollection?: Maybe<StripePaymentPagesCheckoutSessionConsentCollection>;
  created: Scalars['Int'];
  currency?: Maybe<Scalars['String']>;
  currencyConversion?: Maybe<StripePaymentPagesCheckoutSessionCurrencyConversion>;
  customFields: Array<StripePaymentPagesCheckoutSessionCustomFields>;
  customText: StripePaymentPagesCheckoutSessionCustomText;
  customer?: Maybe<StripeStringOrDeletedCustomerOrCustomerUnion>;
  customerCreation?: Maybe<StripeCheckoutSessionCustomerCreation>;
  customerDetails?: Maybe<StripePaymentPagesCheckoutSessionCustomerDetails>;
  customerEmail?: Maybe<Scalars['String']>;
  expiresAt: Scalars['Int'];
  id: Scalars['String'];
  invoice?: Maybe<StripeStringOrInvoiceUnion>;
  invoiceCreation?: Maybe<StripePaymentPagesCheckoutSessionInvoiceCreation>;
  lineItems?: Maybe<StripeCheckoutSessionLineItems>;
  livemode: Scalars['Boolean'];
  locale?: Maybe<StripeCheckoutSessionLocale>;
  metadata?: Maybe<Scalars['JSON']>;
  mode: StripeCheckoutSessionMode;
  object: StripeCheckoutSessionObject;
  paymentIntent?: Maybe<StripeStringOrPaymentIntentUnion>;
  paymentLink?: Maybe<StripeStringOrPaymentLinkUnion>;
  paymentMethodCollection?: Maybe<StripeCheckoutSessionPaymentMethodCollection>;
  paymentMethodOptions?: Maybe<StripeCheckoutSessionPaymentMethodOptions>;
  paymentMethodTypes: Array<Scalars['String']>;
  paymentStatus: StripeCheckoutSessionPaymentStatus;
  phoneNumberCollection?: Maybe<StripePaymentPagesCheckoutSessionPhoneNumberCollection>;
  recoveredFrom?: Maybe<Scalars['String']>;
  setupIntent?: Maybe<StripeStringOrSetupIntentUnion>;
  shippingAddressCollection?: Maybe<StripePaymentPagesCheckoutSessionShippingAddressCollection>;
  shippingCost?: Maybe<StripePaymentPagesCheckoutSessionShippingCost>;
  shippingDetails?: Maybe<StripeShipping>;
  shippingOptions: Array<StripePaymentPagesCheckoutSessionShippingOption>;
  status?: Maybe<StripeCheckoutSessionStatus>;
  submitType?: Maybe<StripeCheckoutSessionSubmitType>;
  subscription?: Maybe<StripeStringOrSubscriptionUnion>;
  successUrl: Scalars['String'];
  taxIdCollection?: Maybe<StripePaymentPagesCheckoutSessionTaxIdCollection>;
  totalDetails?: Maybe<StripePaymentPagesCheckoutSessionTotalDetails>;
  url?: Maybe<Scalars['String']>;
};

export enum StripeCheckoutSessionBillingAddressCollection {
  Auto = 'AUTO',
  Required = 'REQUIRED'
}

export enum StripeCheckoutSessionCustomerCreation {
  Always = 'ALWAYS',
  IfRequired = 'IF_REQUIRED'
}

export type StripeCheckoutSessionLineItems = {
  __typename?: 'StripeCheckoutSessionLineItems';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeItem>;
  object: StripeCheckoutSessionObjectLineItems;
  url: Scalars['String'];
};

export enum StripeCheckoutSessionLocale {
  Auto = 'AUTO',
  Bg = 'BG',
  Cs = 'CS',
  Da = 'DA',
  De = 'DE',
  El = 'EL',
  En = 'EN',
  EnGb = 'EN_GB',
  Es = 'ES',
  Es_419 = 'ES_419',
  Et = 'ET',
  Fi = 'FI',
  Fil = 'FIL',
  Fr = 'FR',
  FrCa = 'FR_CA',
  Hr = 'HR',
  Hu = 'HU',
  Id = 'ID',
  It = 'IT',
  Ja = 'JA',
  Ko = 'KO',
  Lt = 'LT',
  Lv = 'LV',
  Ms = 'MS',
  Mt = 'MT',
  Nb = 'NB',
  Nl = 'NL',
  Pl = 'PL',
  Pt = 'PT',
  PtBr = 'PT_BR',
  Ro = 'RO',
  Ru = 'RU',
  Sk = 'SK',
  Sl = 'SL',
  Sv = 'SV',
  Th = 'TH',
  Tr = 'TR',
  Vi = 'VI',
  Zh = 'ZH',
  ZhHk = 'ZH_HK',
  ZhTw = 'ZH_TW'
}

export enum StripeCheckoutSessionMode {
  Payment = 'PAYMENT',
  Setup = 'SETUP',
  Subscription = 'SUBSCRIPTION'
}

export enum StripeCheckoutSessionObject {
  CheckoutSession = 'CHECKOUT_SESSION'
}

export enum StripeCheckoutSessionObjectLineItems {
  List = 'LIST'
}

export enum StripeCheckoutSessionPaymentMethodCollection {
  Always = 'ALWAYS',
  IfRequired = 'IF_REQUIRED'
}

export type StripeCheckoutSessionPaymentMethodOptions = {
  __typename?: 'StripeCheckoutSessionPaymentMethodOptions';
  acssDebit?: Maybe<StripeCheckoutAcssDebitPaymentMethodOptions>;
  affirm?: Maybe<StripeCheckoutAffirmPaymentMethodOptions>;
  afterpayClearpay?: Maybe<StripeCheckoutAfterpayClearpayPaymentMethodOptions>;
  alipay?: Maybe<StripeCheckoutAlipayPaymentMethodOptions>;
  auBecsDebit?: Maybe<StripeCheckoutAuBecsDebitPaymentMethodOptions>;
  bacsDebit?: Maybe<StripeCheckoutBacsDebitPaymentMethodOptions>;
  bancontact?: Maybe<StripeCheckoutBancontactPaymentMethodOptions>;
  boleto?: Maybe<StripeCheckoutBoletoPaymentMethodOptions>;
  card?: Maybe<StripeCheckoutCardPaymentMethodOptions>;
  cashapp?: Maybe<StripeCheckoutCashappPaymentMethodOptions>;
  customerBalance?: Maybe<StripeCheckoutCustomerBalancePaymentMethodOptions>;
  eps?: Maybe<StripeCheckoutEpsPaymentMethodOptions>;
  fpx?: Maybe<StripeCheckoutFpxPaymentMethodOptions>;
  giropay?: Maybe<StripeCheckoutGiropayPaymentMethodOptions>;
  grabpay?: Maybe<StripeCheckoutGrabPayPaymentMethodOptions>;
  ideal?: Maybe<StripeCheckoutIdealPaymentMethodOptions>;
  klarna?: Maybe<StripeCheckoutKlarnaPaymentMethodOptions>;
  konbini?: Maybe<StripeCheckoutKonbiniPaymentMethodOptions>;
  link?: Maybe<StripeCheckoutLinkPaymentMethodOptions>;
  oxxo?: Maybe<StripeCheckoutOxxoPaymentMethodOptions>;
  p24?: Maybe<StripeCheckoutP24PaymentMethodOptions>;
  paynow?: Maybe<StripeCheckoutPaynowPaymentMethodOptions>;
  pix?: Maybe<StripeCheckoutPixPaymentMethodOptions>;
  sepaDebit?: Maybe<StripeCheckoutSepaDebitPaymentMethodOptions>;
  sofort?: Maybe<StripeCheckoutSofortPaymentMethodOptions>;
  usBankAccount?: Maybe<StripeCheckoutUsBankAccountPaymentMethodOptions>;
};

export enum StripeCheckoutSessionPaymentStatus {
  NoPaymentRequired = 'NO_PAYMENT_REQUIRED',
  Paid = 'PAID',
  Unpaid = 'UNPAID'
}

export enum StripeCheckoutSessionStatus {
  Complete = 'COMPLETE',
  Expired = 'EXPIRED',
  Open = 'OPEN'
}

export enum StripeCheckoutSessionSubmitType {
  Auto = 'AUTO',
  Book = 'BOOK',
  Donate = 'DONATE',
  Pay = 'PAY'
}

export type StripeCheckoutSofortPaymentMethodOptions = {
  __typename?: 'StripeCheckoutSofortPaymentMethodOptions';
  setupFutureUsage?: Maybe<StripeCheckoutSofortPaymentMethodOptionsSetupFutureUsage>;
};

export enum StripeCheckoutSofortPaymentMethodOptionsSetupFutureUsage {
  None = 'NONE'
}

export type StripeCheckoutUsBankAccountPaymentMethodOptions = {
  __typename?: 'StripeCheckoutUsBankAccountPaymentMethodOptions';
  financialConnections?: Maybe<StripeLinkedAccountOptionsUsBankAccount>;
  setupFutureUsage?: Maybe<StripeCheckoutUsBankAccountPaymentMethodOptionsSetupFutureUsage>;
  verificationMethod?: Maybe<StripeCheckoutUsBankAccountPaymentMethodOptionsVerificationMethod>;
};

export enum StripeCheckoutUsBankAccountPaymentMethodOptionsSetupFutureUsage {
  None = 'NONE',
  OffSession = 'OFF_SESSION',
  OnSession = 'ON_SESSION'
}

export enum StripeCheckoutUsBankAccountPaymentMethodOptionsVerificationMethod {
  Automatic = 'AUTOMATIC',
  Instant = 'INSTANT'
}

export type StripeConnectCollectionTransfer = {
  __typename?: 'StripeConnectCollectionTransfer';
  amount: Scalars['Int'];
  currency: Scalars['String'];
  destination: StripeStringOrAccountUnion;
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  object: StripeConnectCollectionTransferObject;
};

export enum StripeConnectCollectionTransferObject {
  ConnectCollectionTransfer = 'CONNECT_COLLECTION_TRANSFER'
}

export type StripeCountrySpec = {
  __typename?: 'StripeCountrySpec';
  defaultCurrency: Scalars['String'];
  id: Scalars['String'];
  object: StripeCountrySpecObject;
  supportedBankAccountCurrencies: Scalars['JSON'];
  supportedPaymentCurrencies: Array<Scalars['String']>;
  supportedPaymentMethods: Array<Scalars['String']>;
  supportedTransferCountries: Array<Scalars['String']>;
  verificationFields: StripeCountrySpecVerificationFields;
};

export enum StripeCountrySpecObject {
  CountrySpec = 'COUNTRY_SPEC'
}

export type StripeCountrySpecVerificationFieldDetails = {
  __typename?: 'StripeCountrySpecVerificationFieldDetails';
  additional: Array<Scalars['String']>;
  minimum: Array<Scalars['String']>;
};

export type StripeCountrySpecVerificationFields = {
  __typename?: 'StripeCountrySpecVerificationFields';
  company: StripeCountrySpecVerificationFieldDetails;
  individual: StripeCountrySpecVerificationFieldDetails;
};

export type StripeCoupon = {
  __typename?: 'StripeCoupon';
  amountOff?: Maybe<Scalars['Int']>;
  appliesTo?: Maybe<StripeCouponAppliesTo>;
  created: Scalars['Int'];
  currency?: Maybe<Scalars['String']>;
  currencyOptions?: Maybe<Scalars['JSON']>;
  duration: StripeCouponDuration;
  durationInMonths?: Maybe<Scalars['Int']>;
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  maxRedemptions?: Maybe<Scalars['Int']>;
  metadata?: Maybe<Scalars['JSON']>;
  name?: Maybe<Scalars['String']>;
  object: StripeCouponObject;
  percentOff?: Maybe<Scalars['Float']>;
  redeemBy?: Maybe<Scalars['Int']>;
  timesRedeemed: Scalars['Int'];
  valid: Scalars['Boolean'];
};

export type StripeCouponAppliesTo = {
  __typename?: 'StripeCouponAppliesTo';
  products: Array<Scalars['String']>;
};

export enum StripeCouponDuration {
  Forever = 'FOREVER',
  Once = 'ONCE',
  Repeating = 'REPEATING'
}

export enum StripeCouponObject {
  Coupon = 'COUPON'
}

export type StripeCreditNote = {
  __typename?: 'StripeCreditNote';
  amount: Scalars['Int'];
  amountShipping: Scalars['Int'];
  created: Scalars['Int'];
  currency: Scalars['String'];
  customer: StripeStringOrDeletedCustomerOrCustomerUnion;
  customerBalanceTransaction?: Maybe<StripeStringOrCustomerBalanceTransactionUnion>;
  discountAmount: Scalars['Int'];
  discountAmounts: Array<StripeDiscountsResourceDiscountAmount>;
  id: Scalars['String'];
  invoice: StripeStringOrInvoiceUnion;
  lines: StripeCreditNoteLines;
  livemode: Scalars['Boolean'];
  memo?: Maybe<Scalars['String']>;
  metadata?: Maybe<Scalars['JSON']>;
  number: Scalars['String'];
  object: StripeCreditNoteObject;
  outOfBandAmount?: Maybe<Scalars['Int']>;
  pdf: Scalars['String'];
  reason?: Maybe<StripeCreditNoteReason>;
  refund?: Maybe<StripeStringOrRefundUnion>;
  shippingCost?: Maybe<StripeInvoicesShippingCost>;
  status: StripeCreditNoteStatus;
  subtotal: Scalars['Int'];
  subtotalExcludingTax?: Maybe<Scalars['Int']>;
  taxAmounts: Array<StripeCreditNoteTaxAmount>;
  total: Scalars['Int'];
  totalExcludingTax?: Maybe<Scalars['Int']>;
  type: StripeCreditNoteType;
  voidedAt?: Maybe<Scalars['Int']>;
};

export type StripeCreditNoteLineItem = {
  __typename?: 'StripeCreditNoteLineItem';
  amount: Scalars['Int'];
  amountExcludingTax?: Maybe<Scalars['Int']>;
  description?: Maybe<Scalars['String']>;
  discountAmount: Scalars['Int'];
  discountAmounts: Array<StripeDiscountsResourceDiscountAmount>;
  id: Scalars['String'];
  invoiceLineItem?: Maybe<Scalars['String']>;
  livemode: Scalars['Boolean'];
  object: StripeCreditNoteLineItemObject;
  quantity?: Maybe<Scalars['Int']>;
  taxAmounts: Array<StripeCreditNoteTaxAmount>;
  taxRates: Array<StripeTaxRate>;
  type: StripeCreditNoteLineItemType;
  unitAmount?: Maybe<Scalars['Int']>;
  unitAmountDecimal?: Maybe<Scalars['String']>;
  unitAmountExcludingTax?: Maybe<Scalars['String']>;
};

export enum StripeCreditNoteLineItemObject {
  CreditNoteLineItem = 'CREDIT_NOTE_LINE_ITEM'
}

export enum StripeCreditNoteLineItemType {
  CustomLineItem = 'CUSTOM_LINE_ITEM',
  InvoiceLineItem = 'INVOICE_LINE_ITEM'
}

export type StripeCreditNoteLines = {
  __typename?: 'StripeCreditNoteLines';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeCreditNoteLineItem>;
  object: StripeCreditNoteObjectLines;
  url: Scalars['String'];
};

export enum StripeCreditNoteObject {
  CreditNote = 'CREDIT_NOTE'
}

export enum StripeCreditNoteObjectLines {
  List = 'LIST'
}

export enum StripeCreditNoteReason {
  Duplicate = 'DUPLICATE',
  Fraudulent = 'FRAUDULENT',
  OrderChange = 'ORDER_CHANGE',
  ProductUnsatisfactory = 'PRODUCT_UNSATISFACTORY'
}

export enum StripeCreditNoteStatus {
  Issued = 'ISSUED',
  Void = 'VOID'
}

export type StripeCreditNoteTaxAmount = {
  __typename?: 'StripeCreditNoteTaxAmount';
  amount: Scalars['Int'];
  inclusive: Scalars['Boolean'];
  taxRate: StripeStringOrTaxRateUnion;
  taxabilityReason?: Maybe<StripeCreditNoteTaxAmountTaxabilityReason>;
  taxableAmount?: Maybe<Scalars['Int']>;
};

export enum StripeCreditNoteTaxAmountTaxabilityReason {
  CustomerExempt = 'CUSTOMER_EXEMPT',
  NotCollecting = 'NOT_COLLECTING',
  NotSubjectToTax = 'NOT_SUBJECT_TO_TAX',
  NotSupported = 'NOT_SUPPORTED',
  PortionProductExempt = 'PORTION_PRODUCT_EXEMPT',
  PortionReducedRated = 'PORTION_REDUCED_RATED',
  PortionStandardRated = 'PORTION_STANDARD_RATED',
  ProductExempt = 'PRODUCT_EXEMPT',
  ProductExemptHoliday = 'PRODUCT_EXEMPT_HOLIDAY',
  ProportionallyRated = 'PROPORTIONALLY_RATED',
  ReducedRated = 'REDUCED_RATED',
  ReverseCharge = 'REVERSE_CHARGE',
  StandardRated = 'STANDARD_RATED',
  TaxableBasisReduced = 'TAXABLE_BASIS_REDUCED',
  ZeroRated = 'ZERO_RATED'
}

export enum StripeCreditNoteType {
  PostPayment = 'POST_PAYMENT',
  PrePayment = 'PRE_PAYMENT'
}

export type StripeCustomUnitAmount = {
  __typename?: 'StripeCustomUnitAmount';
  maximum?: Maybe<Scalars['Int']>;
  minimum?: Maybe<Scalars['Int']>;
  preset?: Maybe<Scalars['Int']>;
};

export type StripeCustomer = {
  __typename?: 'StripeCustomer';
  address?: Maybe<StripeAddress>;
  balance?: Maybe<Scalars['Int']>;
  cashBalance?: Maybe<StripeCashBalance>;
  created: Scalars['Int'];
  currency?: Maybe<Scalars['String']>;
  defaultSource?: Maybe<StripeStringOrSourceOrCardOrBankAccountUnion>;
  delinquent?: Maybe<Scalars['Boolean']>;
  description?: Maybe<Scalars['String']>;
  discount?: Maybe<StripeDiscount>;
  email?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  invoiceCreditBalance?: Maybe<Scalars['JSON']>;
  invoicePrefix?: Maybe<Scalars['String']>;
  invoiceSettings?: Maybe<StripeInvoiceSettingCustomerSetting>;
  livemode: Scalars['Boolean'];
  metadata?: Maybe<Scalars['JSON']>;
  name?: Maybe<Scalars['String']>;
  nextInvoiceSequence?: Maybe<Scalars['Int']>;
  object: StripeCustomerObject;
  phone?: Maybe<Scalars['String']>;
  preferredLocales?: Maybe<Array<Scalars['String']>>;
  shipping?: Maybe<StripeShipping>;
  sources?: Maybe<StripeCustomerSources>;
  subscriptions?: Maybe<StripeCustomerSubscriptions>;
  tax?: Maybe<StripeCustomerTax>;
  taxExempt?: Maybe<StripeCustomerTaxExempt>;
  taxIds?: Maybe<StripeCustomerTaxIds>;
  testClock?: Maybe<StripeStringOrTestHelpersTestClockUnion>;
};

export type StripeCustomerAcceptance = {
  __typename?: 'StripeCustomerAcceptance';
  acceptedAt?: Maybe<Scalars['Int']>;
  offline?: Maybe<Scalars['JSON']>;
  online?: Maybe<StripeOnlineAcceptance>;
  type: StripeCustomerAcceptanceType;
};

export enum StripeCustomerAcceptanceType {
  Offline = 'OFFLINE',
  Online = 'ONLINE'
}

export type StripeCustomerBalanceCustomerBalanceSettings = {
  __typename?: 'StripeCustomerBalanceCustomerBalanceSettings';
  reconciliationMode: StripeCustomerBalanceCustomerBalanceSettingsReconciliationMode;
  usingMerchantDefault: Scalars['Boolean'];
};

export enum StripeCustomerBalanceCustomerBalanceSettingsReconciliationMode {
  Automatic = 'AUTOMATIC',
  Manual = 'MANUAL'
}

export type StripeCustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransaction = {
  __typename?: 'StripeCustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransaction';
  paymentIntent: StripeStringOrPaymentIntentUnion;
};

export type StripeCustomerBalanceResourceCashBalanceTransactionResourceFundedTransaction = {
  __typename?: 'StripeCustomerBalanceResourceCashBalanceTransactionResourceFundedTransaction';
  bankTransfer: StripeCustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer;
};

export type StripeCustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer = {
  __typename?: 'StripeCustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer';
  euBankTransfer?: Maybe<StripeCustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransfer>;
  gbBankTransfer?: Maybe<StripeCustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceGbBankTransfer>;
  jpBankTransfer?: Maybe<StripeCustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceJpBankTransfer>;
  reference?: Maybe<Scalars['String']>;
  type: StripeCustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType;
};

export type StripeCustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransfer = {
  __typename?: 'StripeCustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransfer';
  bic?: Maybe<Scalars['String']>;
  ibanLast4?: Maybe<Scalars['String']>;
  senderName?: Maybe<Scalars['String']>;
};

export type StripeCustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceGbBankTransfer = {
  __typename?: 'StripeCustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceGbBankTransfer';
  accountNumberLast4?: Maybe<Scalars['String']>;
  senderName?: Maybe<Scalars['String']>;
  sortCode?: Maybe<Scalars['String']>;
};

export type StripeCustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceJpBankTransfer = {
  __typename?: 'StripeCustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceJpBankTransfer';
  senderBank?: Maybe<Scalars['String']>;
  senderBranch?: Maybe<Scalars['String']>;
  senderName?: Maybe<Scalars['String']>;
};

export enum StripeCustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType {
  EuBankTransfer = 'EU_BANK_TRANSFER',
  GbBankTransfer = 'GB_BANK_TRANSFER',
  JpBankTransfer = 'JP_BANK_TRANSFER',
  MxBankTransfer = 'MX_BANK_TRANSFER'
}

export type StripeCustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction = {
  __typename?: 'StripeCustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction';
  refund: StripeStringOrRefundUnion;
};

export type StripeCustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction = {
  __typename?: 'StripeCustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction';
  paymentIntent: StripeStringOrPaymentIntentUnion;
};

export type StripeCustomerBalanceTransaction = {
  __typename?: 'StripeCustomerBalanceTransaction';
  amount: Scalars['Int'];
  created: Scalars['Int'];
  creditNote?: Maybe<StripeStringOrCreditNoteUnion>;
  currency: Scalars['String'];
  customer: StripeStringOrCustomerUnion;
  description?: Maybe<Scalars['String']>;
  endingBalance: Scalars['Int'];
  id: Scalars['String'];
  invoice?: Maybe<StripeStringOrInvoiceUnion>;
  livemode: Scalars['Boolean'];
  metadata?: Maybe<Scalars['JSON']>;
  object: StripeCustomerBalanceTransactionObject;
  type: StripeCustomerBalanceTransactionType;
};

export enum StripeCustomerBalanceTransactionObject {
  CustomerBalanceTransaction = 'CUSTOMER_BALANCE_TRANSACTION'
}

export enum StripeCustomerBalanceTransactionType {
  Adjustment = 'ADJUSTMENT',
  AppliedToInvoice = 'APPLIED_TO_INVOICE',
  CreditNote = 'CREDIT_NOTE',
  Initial = 'INITIAL',
  InvoiceOverpaid = 'INVOICE_OVERPAID',
  InvoiceTooLarge = 'INVOICE_TOO_LARGE',
  InvoiceTooSmall = 'INVOICE_TOO_SMALL',
  Migration = 'MIGRATION',
  UnappliedFromInvoice = 'UNAPPLIED_FROM_INVOICE',
  UnspentReceiverCredit = 'UNSPENT_RECEIVER_CREDIT'
}

export type StripeCustomerCashBalanceTransaction = {
  __typename?: 'StripeCustomerCashBalanceTransaction';
  appliedToPayment?: Maybe<StripeCustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransaction>;
  created: Scalars['Int'];
  currency: Scalars['String'];
  customer: StripeStringOrCustomerUnion;
  endingBalance: Scalars['Int'];
  funded?: Maybe<StripeCustomerBalanceResourceCashBalanceTransactionResourceFundedTransaction>;
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  netAmount: Scalars['Int'];
  object: StripeCustomerCashBalanceTransactionObject;
  refundedFromPayment?: Maybe<StripeCustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction>;
  type: StripeCustomerCashBalanceTransactionType;
  unappliedFromPayment?: Maybe<StripeCustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction>;
};

export enum StripeCustomerCashBalanceTransactionObject {
  CustomerCashBalanceTransaction = 'CUSTOMER_CASH_BALANCE_TRANSACTION'
}

export enum StripeCustomerCashBalanceTransactionType {
  AppliedToPayment = 'APPLIED_TO_PAYMENT',
  Funded = 'FUNDED',
  FundingReversed = 'FUNDING_REVERSED',
  RefundedFromPayment = 'REFUNDED_FROM_PAYMENT',
  ReturnCanceled = 'RETURN_CANCELED',
  ReturnInitiated = 'RETURN_INITIATED',
  UnappliedFromPayment = 'UNAPPLIED_FROM_PAYMENT'
}

export enum StripeCustomerObject {
  Customer = 'CUSTOMER'
}

export enum StripeCustomerObjectSources {
  List = 'LIST'
}

export enum StripeCustomerObjectSubscriptions {
  List = 'LIST'
}

export enum StripeCustomerObjectTaxIds {
  List = 'LIST'
}

export type StripeCustomerSources = {
  __typename?: 'StripeCustomerSources';
  data: Array<StripeSourceOrCardOrBankAccountUnion>;
  hasMore: Scalars['Boolean'];
  object: StripeCustomerObjectSources;
  url: Scalars['String'];
};

export type StripeCustomerSubscriptions = {
  __typename?: 'StripeCustomerSubscriptions';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeSubscription>;
  object: StripeCustomerObjectSubscriptions;
  url: Scalars['String'];
};

export type StripeCustomerTax = {
  __typename?: 'StripeCustomerTax';
  automaticTax: StripeCustomerTaxAutomaticTax;
  ipAddress?: Maybe<Scalars['String']>;
  location?: Maybe<StripeCustomerTaxLocation>;
};

export enum StripeCustomerTaxAutomaticTax {
  Failed = 'FAILED',
  NotCollecting = 'NOT_COLLECTING',
  Supported = 'SUPPORTED',
  UnrecognizedLocation = 'UNRECOGNIZED_LOCATION'
}

export enum StripeCustomerTaxExempt {
  Exempt = 'EXEMPT',
  None = 'NONE',
  Reverse = 'REVERSE'
}

export type StripeCustomerTaxIds = {
  __typename?: 'StripeCustomerTaxIds';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeTaxId>;
  object: StripeCustomerObjectTaxIds;
  url: Scalars['String'];
};

export type StripeCustomerTaxLocation = {
  __typename?: 'StripeCustomerTaxLocation';
  country: Scalars['String'];
  source: StripeCustomerTaxLocationSource;
  state?: Maybe<Scalars['String']>;
};

export enum StripeCustomerTaxLocationSource {
  BillingAddress = 'BILLING_ADDRESS',
  IpAddress = 'IP_ADDRESS',
  PaymentMethod = 'PAYMENT_METHOD',
  ShippingDestination = 'SHIPPING_DESTINATION'
}

export type StripeDeleteCustomersCustomerBankAccountsIdInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripeDeleteCustomersCustomerCardsIdInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripeDeleteCustomersCustomerSourcesIdInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripeDeleteCustomersCustomerSubscriptionsSubscriptionExposedIdInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  invoiceNow?: InputMaybe<Scalars['Boolean']>;
  prorate?: InputMaybe<Scalars['Boolean']>;
};

export type StripeDeleteEphemeralKeysKeyInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripeDeleteSubscriptionItemsItemInput = {
  clearUsage?: InputMaybe<Scalars['Boolean']>;
  prorationBehavior?: InputMaybe<StripeDeleteSubscriptionItemsItemProrationBehavior>;
  prorationDate?: InputMaybe<Scalars['Int']>;
};

export enum StripeDeleteSubscriptionItemsItemProrationBehavior {
  AlwaysInvoice = 'ALWAYS_INVOICE',
  CreateProrations = 'CREATE_PRORATIONS',
  None = 'NONE'
}

export type StripeDeleteSubscriptionsSubscriptionExposedIdCancellationDetailsInput = {
  comment?: InputMaybe<Scalars['String']>;
  feedback?: InputMaybe<Scalars['String']>;
};

export type StripeDeleteSubscriptionsSubscriptionExposedIdInput = {
  cancellationDetails?: InputMaybe<StripeDeleteSubscriptionsSubscriptionExposedIdCancellationDetailsInput>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  invoiceNow?: InputMaybe<Scalars['Boolean']>;
  prorate?: InputMaybe<Scalars['Boolean']>;
};

export type StripeDeletedAccount = {
  __typename?: 'StripeDeletedAccount';
  deleted: Scalars['Boolean'];
  id: Scalars['String'];
  object: StripeDeletedAccountObject;
};

export enum StripeDeletedAccountObject {
  Account = 'ACCOUNT'
}

export type StripeDeletedApplePayDomain = {
  __typename?: 'StripeDeletedApplePayDomain';
  deleted: Scalars['Boolean'];
  id: Scalars['String'];
  object: StripeDeletedApplePayDomainObject;
};

export enum StripeDeletedApplePayDomainObject {
  ApplePayDomain = 'APPLE_PAY_DOMAIN'
}

export type StripeDeletedApplication = {
  __typename?: 'StripeDeletedApplication';
  deleted: Scalars['Boolean'];
  id: Scalars['String'];
  name?: Maybe<Scalars['String']>;
  object: StripeDeletedApplicationObject;
};

export enum StripeDeletedApplicationObject {
  Application = 'APPLICATION'
}

export type StripeDeletedBankAccount = {
  __typename?: 'StripeDeletedBankAccount';
  currency?: Maybe<Scalars['String']>;
  deleted: Scalars['Boolean'];
  id: Scalars['String'];
  object: StripeDeletedBankAccountObject;
};

export enum StripeDeletedBankAccountObject {
  BankAccount = 'BANK_ACCOUNT'
}

export type StripeDeletedCard = {
  __typename?: 'StripeDeletedCard';
  currency?: Maybe<Scalars['String']>;
  deleted: Scalars['Boolean'];
  id: Scalars['String'];
  object: StripeDeletedCardObject;
};

export enum StripeDeletedCardObject {
  Card = 'CARD'
}

export type StripeDeletedCoupon = {
  __typename?: 'StripeDeletedCoupon';
  deleted: Scalars['Boolean'];
  id: Scalars['String'];
  object: StripeDeletedCouponObject;
};

export enum StripeDeletedCouponObject {
  Coupon = 'COUPON'
}

export type StripeDeletedCustomer = {
  __typename?: 'StripeDeletedCustomer';
  deleted: Scalars['Boolean'];
  id: Scalars['String'];
  object: StripeDeletedCustomerObject;
};

export enum StripeDeletedCustomerObject {
  Customer = 'CUSTOMER'
}

export type StripeDeletedCustomerOrCustomerUnion = StripeCustomer | StripeDeletedCustomer;

export type StripeDeletedDiscount = {
  __typename?: 'StripeDeletedDiscount';
  checkoutSession?: Maybe<Scalars['String']>;
  coupon: StripeCoupon;
  customer?: Maybe<StripeStringOrDeletedCustomerOrCustomerUnion>;
  deleted: Scalars['Boolean'];
  id: Scalars['String'];
  invoice?: Maybe<Scalars['String']>;
  invoiceItem?: Maybe<Scalars['String']>;
  object: StripeDeletedDiscountObject;
  promotionCode?: Maybe<StripeStringOrPromotionCodeUnion>;
  start: Scalars['Int'];
  subscription?: Maybe<Scalars['String']>;
};

export enum StripeDeletedDiscountObject {
  Discount = 'DISCOUNT'
}

export type StripeDeletedExternalAccount = StripeDeletedBankAccount | StripeDeletedCard;

export type StripeDeletedInvoice = {
  __typename?: 'StripeDeletedInvoice';
  deleted: Scalars['Boolean'];
  id: Scalars['String'];
  object: StripeDeletedInvoiceObject;
};

export enum StripeDeletedInvoiceObject {
  Invoice = 'INVOICE'
}

export type StripeDeletedInvoiceitem = {
  __typename?: 'StripeDeletedInvoiceitem';
  deleted: Scalars['Boolean'];
  id: Scalars['String'];
  object: StripeDeletedInvoiceitemObject;
};

export enum StripeDeletedInvoiceitemObject {
  Invoiceitem = 'INVOICEITEM'
}

export type StripeDeletedPaymentSourceOrPaymentSourceUnion = StripeAccount | StripeBankAccount | StripeCard | StripeDeletedBankAccount | StripeDeletedCard | StripeSource;

export type StripeDeletedPerson = {
  __typename?: 'StripeDeletedPerson';
  deleted: Scalars['Boolean'];
  id: Scalars['String'];
  object: StripeDeletedPersonObject;
};

export enum StripeDeletedPersonObject {
  Person = 'PERSON'
}

export type StripeDeletedPlan = {
  __typename?: 'StripeDeletedPlan';
  deleted: Scalars['Boolean'];
  id: Scalars['String'];
  object: StripeDeletedPlanObject;
};

export enum StripeDeletedPlanObject {
  Plan = 'PLAN'
}

export type StripeDeletedPrice = {
  __typename?: 'StripeDeletedPrice';
  deleted: Scalars['Boolean'];
  id: Scalars['String'];
  object: StripeDeletedPriceObject;
};

export enum StripeDeletedPriceObject {
  Price = 'PRICE'
}

export type StripeDeletedProduct = {
  __typename?: 'StripeDeletedProduct';
  deleted: Scalars['Boolean'];
  id: Scalars['String'];
  object: StripeDeletedProductObject;
};

export enum StripeDeletedProductObject {
  Product = 'PRODUCT'
}

export type StripeDeletedRadarValueList = {
  __typename?: 'StripeDeletedRadarValueList';
  deleted: Scalars['Boolean'];
  id: Scalars['String'];
  object: StripeDeletedRadarValueListObject;
};

export type StripeDeletedRadarValueListItem = {
  __typename?: 'StripeDeletedRadarValueListItem';
  deleted: Scalars['Boolean'];
  id: Scalars['String'];
  object: StripeDeletedRadarValueListItemObject;
};

export enum StripeDeletedRadarValueListItemObject {
  RadarValueListItem = 'RADAR_VALUE_LIST_ITEM'
}

export enum StripeDeletedRadarValueListObject {
  RadarValueList = 'RADAR_VALUE_LIST'
}

export type StripeDeletedSubscriptionItem = {
  __typename?: 'StripeDeletedSubscriptionItem';
  deleted: Scalars['Boolean'];
  id: Scalars['String'];
  object: StripeDeletedSubscriptionItemObject;
};

export enum StripeDeletedSubscriptionItemObject {
  SubscriptionItem = 'SUBSCRIPTION_ITEM'
}

export type StripeDeletedTaxId = {
  __typename?: 'StripeDeletedTaxId';
  deleted: Scalars['Boolean'];
  id: Scalars['String'];
  object: StripeDeletedTaxIdObject;
};

export enum StripeDeletedTaxIdObject {
  TaxId = 'TAX_ID'
}

export type StripeDeletedTerminalConfiguration = {
  __typename?: 'StripeDeletedTerminalConfiguration';
  deleted: Scalars['Boolean'];
  id: Scalars['String'];
  object: StripeDeletedTerminalConfigurationObject;
};

export enum StripeDeletedTerminalConfigurationObject {
  TerminalConfiguration = 'TERMINAL_CONFIGURATION'
}

export type StripeDeletedTerminalConfigurationOrTerminalConfigurationUnion = StripeDeletedTerminalConfiguration | StripeTerminalConfiguration;

export type StripeDeletedTerminalLocation = {
  __typename?: 'StripeDeletedTerminalLocation';
  deleted: Scalars['Boolean'];
  id: Scalars['String'];
  object: StripeDeletedTerminalLocationObject;
};

export enum StripeDeletedTerminalLocationObject {
  TerminalLocation = 'TERMINAL_LOCATION'
}

export type StripeDeletedTerminalLocationOrTerminalLocationUnion = StripeDeletedTerminalLocation | StripeTerminalLocation;

export type StripeDeletedTerminalReader = {
  __typename?: 'StripeDeletedTerminalReader';
  deleted: Scalars['Boolean'];
  id: Scalars['String'];
  object: StripeDeletedTerminalReaderObject;
};

export enum StripeDeletedTerminalReaderObject {
  TerminalReader = 'TERMINAL_READER'
}

export type StripeDeletedTerminalReaderOrTerminalReaderUnion = StripeDeletedTerminalReader | StripeTerminalReader;

export type StripeDeletedTestHelpersTestClock = {
  __typename?: 'StripeDeletedTestHelpersTestClock';
  deleted: Scalars['Boolean'];
  id: Scalars['String'];
  object: StripeDeletedTestHelpersTestClockObject;
};

export enum StripeDeletedTestHelpersTestClockObject {
  TestHelpersTestClock = 'TEST_HELPERS_TEST_CLOCK'
}

export type StripeDeletedWebhookEndpoint = {
  __typename?: 'StripeDeletedWebhookEndpoint';
  deleted: Scalars['Boolean'];
  id: Scalars['String'];
  object: StripeDeletedWebhookEndpointObject;
};

export enum StripeDeletedWebhookEndpointObject {
  WebhookEndpoint = 'WEBHOOK_ENDPOINT'
}

export type StripeDiscount = {
  __typename?: 'StripeDiscount';
  checkoutSession?: Maybe<Scalars['String']>;
  coupon: StripeCoupon;
  customer?: Maybe<StripeStringOrDeletedCustomerOrCustomerUnion>;
  end?: Maybe<Scalars['Int']>;
  id: Scalars['String'];
  invoice?: Maybe<Scalars['String']>;
  invoiceItem?: Maybe<Scalars['String']>;
  object: StripeDiscountObject;
  promotionCode?: Maybe<StripeStringOrPromotionCodeUnion>;
  start: Scalars['Int'];
  subscription?: Maybe<Scalars['String']>;
};

export enum StripeDiscountObject {
  Discount = 'DISCOUNT'
}

export type StripeDiscountsResourceDiscountAmount = {
  __typename?: 'StripeDiscountsResourceDiscountAmount';
  amount: Scalars['Int'];
  discount: StripeStringOrDeletedDiscountOrDiscountUnion;
};

export type StripeDispute = {
  __typename?: 'StripeDispute';
  amount: Scalars['Int'];
  balanceTransactions: Array<StripeBalanceTransaction>;
  charge: StripeStringOrChargeUnion;
  created: Scalars['Int'];
  currency: Scalars['String'];
  evidence: StripeDisputeEvidence;
  evidenceDetails: StripeDisputeEvidenceDetails;
  id: Scalars['String'];
  isChargeRefundable: Scalars['Boolean'];
  livemode: Scalars['Boolean'];
  metadata: Scalars['JSON'];
  object: StripeDisputeObject;
  paymentIntent?: Maybe<StripeStringOrPaymentIntentUnion>;
  reason: Scalars['String'];
  status: StripeDisputeStatus;
};

export type StripeDisputeEvidence = {
  __typename?: 'StripeDisputeEvidence';
  accessActivityLog?: Maybe<Scalars['String']>;
  billingAddress?: Maybe<Scalars['String']>;
  cancellationPolicy?: Maybe<StripeStringOrFileUnion>;
  cancellationPolicyDisclosure?: Maybe<Scalars['String']>;
  cancellationRebuttal?: Maybe<Scalars['String']>;
  customerCommunication?: Maybe<StripeStringOrFileUnion>;
  customerEmailAddress?: Maybe<Scalars['String']>;
  customerName?: Maybe<Scalars['String']>;
  customerPurchaseIp?: Maybe<Scalars['String']>;
  customerSignature?: Maybe<StripeStringOrFileUnion>;
  duplicateChargeDocumentation?: Maybe<StripeStringOrFileUnion>;
  duplicateChargeExplanation?: Maybe<Scalars['String']>;
  duplicateChargeId?: Maybe<Scalars['String']>;
  productDescription?: Maybe<Scalars['String']>;
  receipt?: Maybe<StripeStringOrFileUnion>;
  refundPolicy?: Maybe<StripeStringOrFileUnion>;
  refundPolicyDisclosure?: Maybe<Scalars['String']>;
  refundRefusalExplanation?: Maybe<Scalars['String']>;
  serviceDate?: Maybe<Scalars['String']>;
  serviceDocumentation?: Maybe<StripeStringOrFileUnion>;
  shippingAddress?: Maybe<Scalars['String']>;
  shippingCarrier?: Maybe<Scalars['String']>;
  shippingDate?: Maybe<Scalars['String']>;
  shippingDocumentation?: Maybe<StripeStringOrFileUnion>;
  shippingTrackingNumber?: Maybe<Scalars['String']>;
  uncategorizedFile?: Maybe<StripeStringOrFileUnion>;
  uncategorizedText?: Maybe<Scalars['String']>;
};

export type StripeDisputeEvidenceDetails = {
  __typename?: 'StripeDisputeEvidenceDetails';
  dueBy?: Maybe<Scalars['Int']>;
  hasEvidence: Scalars['Boolean'];
  pastDue: Scalars['Boolean'];
  submissionCount: Scalars['Int'];
};

export enum StripeDisputeObject {
  Dispute = 'DISPUTE'
}

export enum StripeDisputeStatus {
  ChargeRefunded = 'CHARGE_REFUNDED',
  Lost = 'LOST',
  NeedsResponse = 'NEEDS_RESPONSE',
  UnderReview = 'UNDER_REVIEW',
  WarningClosed = 'WARNING_CLOSED',
  WarningNeedsResponse = 'WARNING_NEEDS_RESPONSE',
  WarningUnderReview = 'WARNING_UNDER_REVIEW',
  Won = 'WON'
}

export type StripeEmailSent = {
  __typename?: 'StripeEmailSent';
  emailSentAt: Scalars['Int'];
  emailSentTo: Scalars['String'];
};

export type StripeEphemeralKey = {
  __typename?: 'StripeEphemeralKey';
  created: Scalars['Int'];
  expires: Scalars['Int'];
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  object: StripeEphemeralKeyObject;
  secret?: Maybe<Scalars['String']>;
};

export enum StripeEphemeralKeyObject {
  EphemeralKey = 'EPHEMERAL_KEY'
}

export type StripeEvent = {
  __typename?: 'StripeEvent';
  account?: Maybe<Scalars['String']>;
  apiVersion?: Maybe<Scalars['String']>;
  created: Scalars['Int'];
  data: StripeNotificationEventData;
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  object: StripeEventObject;
  pendingWebhooks: Scalars['Int'];
  request?: Maybe<StripeNotificationEventRequest>;
  type: Scalars['String'];
};

export enum StripeEventObject {
  Event = 'EVENT'
}

export type StripeExchangeRate = {
  __typename?: 'StripeExchangeRate';
  id: Scalars['String'];
  object: StripeExchangeRateObject;
  rates: Scalars['JSON'];
};

export enum StripeExchangeRateObject {
  ExchangeRate = 'EXCHANGE_RATE'
}

export type StripeExternalAccount = StripeBankAccount | StripeCard;

export type StripeExternalAccountRequirements = {
  __typename?: 'StripeExternalAccountRequirements';
  currentlyDue?: Maybe<Array<Scalars['String']>>;
  errors?: Maybe<Array<StripeAccountRequirementsError>>;
  pastDue?: Maybe<Array<Scalars['String']>>;
  pendingVerification?: Maybe<Array<Scalars['String']>>;
};

export type StripeFee = {
  __typename?: 'StripeFee';
  amount: Scalars['Int'];
  application?: Maybe<Scalars['String']>;
  currency: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  type: Scalars['String'];
};

export type StripeFeeRefund = {
  __typename?: 'StripeFeeRefund';
  amount: Scalars['Int'];
  balanceTransaction?: Maybe<StripeStringOrBalanceTransactionUnion>;
  created: Scalars['Int'];
  currency: Scalars['String'];
  fee: StripeStringOrApplicationFeeUnion;
  id: Scalars['String'];
  metadata?: Maybe<Scalars['JSON']>;
  object: StripeFeeRefundObject;
};

export enum StripeFeeRefundObject {
  FeeRefund = 'FEE_REFUND'
}

export type StripeFile = {
  __typename?: 'StripeFile';
  created: Scalars['Int'];
  expiresAt?: Maybe<Scalars['Int']>;
  filename?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  links?: Maybe<StripeFileLinks>;
  object: StripeFileObject;
  purpose: StripeFilePurpose;
  size: Scalars['Int'];
  title?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

export type StripeFileLink = {
  __typename?: 'StripeFileLink';
  created: Scalars['Int'];
  expired: Scalars['Boolean'];
  expiresAt?: Maybe<Scalars['Int']>;
  file: StripeStringOrFileUnion;
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  metadata: Scalars['JSON'];
  object: StripeFileLinkObject;
  url?: Maybe<Scalars['String']>;
};

export enum StripeFileLinkObject {
  FileLink = 'FILE_LINK'
}

export type StripeFileLinks = {
  __typename?: 'StripeFileLinks';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeFileLink>;
  object: StripeFileObjectLinks;
  url: Scalars['String'];
};

export enum StripeFileObject {
  File = 'FILE'
}

export enum StripeFileObjectLinks {
  List = 'LIST'
}

export enum StripeFilePurpose {
  AccountRequirement = 'ACCOUNT_REQUIREMENT',
  AdditionalVerification = 'ADDITIONAL_VERIFICATION',
  BusinessIcon = 'BUSINESS_ICON',
  BusinessLogo = 'BUSINESS_LOGO',
  CustomerSignature = 'CUSTOMER_SIGNATURE',
  DisputeEvidence = 'DISPUTE_EVIDENCE',
  DocumentProviderIdentityDocument = 'DOCUMENT_PROVIDER_IDENTITY_DOCUMENT',
  FinanceReportRun = 'FINANCE_REPORT_RUN',
  IdentityDocument = 'IDENTITY_DOCUMENT',
  IdentityDocumentDownloadable = 'IDENTITY_DOCUMENT_DOWNLOADABLE',
  PciDocument = 'PCI_DOCUMENT',
  Selfie = 'SELFIE',
  SigmaScheduledQuery = 'SIGMA_SCHEDULED_QUERY',
  TaxDocumentUserUpload = 'TAX_DOCUMENT_USER_UPLOAD',
  TerminalReaderSplashscreen = 'TERMINAL_READER_SPLASHSCREEN'
}

export type StripeFinancialConnectionsAccount = {
  __typename?: 'StripeFinancialConnectionsAccount';
  accountHolder?: Maybe<StripeBankConnectionsResourceAccountholder>;
  balance?: Maybe<StripeBankConnectionsResourceBalance>;
  balanceRefresh?: Maybe<StripeBankConnectionsResourceBalanceRefresh>;
  category: StripeFinancialConnectionsAccountCategory;
  created: Scalars['Int'];
  displayName?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  institutionName: Scalars['String'];
  last4?: Maybe<Scalars['String']>;
  livemode: Scalars['Boolean'];
  object: StripeFinancialConnectionsAccountObject;
  ownership?: Maybe<StripeStringOrFinancialConnectionsAccountOwnershipUnion>;
  ownershipRefresh?: Maybe<StripeBankConnectionsResourceOwnershipRefresh>;
  permissions?: Maybe<Array<StripeFinancialConnectionsAccountPermissions>>;
  status: StripeFinancialConnectionsAccountStatus;
  subcategory: StripeFinancialConnectionsAccountSubcategory;
  supportedPaymentMethodTypes: Array<StripeFinancialConnectionsAccountSupportedPaymentMethodTypes>;
};

export enum StripeFinancialConnectionsAccountCategory {
  Cash = 'CASH',
  Credit = 'CREDIT',
  Investment = 'INVESTMENT',
  Other = 'OTHER'
}

export enum StripeFinancialConnectionsAccountObject {
  FinancialConnectionsAccount = 'FINANCIAL_CONNECTIONS_ACCOUNT'
}

export type StripeFinancialConnectionsAccountOwner = {
  __typename?: 'StripeFinancialConnectionsAccountOwner';
  email?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  name: Scalars['String'];
  object: StripeFinancialConnectionsAccountOwnerObject;
  ownership: Scalars['String'];
  phone?: Maybe<Scalars['String']>;
  rawAddress?: Maybe<Scalars['String']>;
  refreshedAt?: Maybe<Scalars['Int']>;
};

export enum StripeFinancialConnectionsAccountOwnerObject {
  FinancialConnectionsAccountOwner = 'FINANCIAL_CONNECTIONS_ACCOUNT_OWNER'
}

export type StripeFinancialConnectionsAccountOwnership = {
  __typename?: 'StripeFinancialConnectionsAccountOwnership';
  created: Scalars['Int'];
  id: Scalars['String'];
  object: StripeFinancialConnectionsAccountOwnershipObject;
  owners: StripeFinancialConnectionsAccountOwnershipOwners;
};

export enum StripeFinancialConnectionsAccountOwnershipObject {
  FinancialConnectionsAccountOwnership = 'FINANCIAL_CONNECTIONS_ACCOUNT_OWNERSHIP'
}

export enum StripeFinancialConnectionsAccountOwnershipObjectOwners {
  List = 'LIST'
}

export type StripeFinancialConnectionsAccountOwnershipOwners = {
  __typename?: 'StripeFinancialConnectionsAccountOwnershipOwners';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeFinancialConnectionsAccountOwner>;
  object: StripeFinancialConnectionsAccountOwnershipObjectOwners;
  url: Scalars['String'];
};

export enum StripeFinancialConnectionsAccountPermissions {
  Balances = 'BALANCES',
  Ownership = 'OWNERSHIP',
  PaymentMethod = 'PAYMENT_METHOD',
  Transactions = 'TRANSACTIONS'
}

export enum StripeFinancialConnectionsAccountStatus {
  Active = 'ACTIVE',
  Disconnected = 'DISCONNECTED',
  Inactive = 'INACTIVE'
}

export enum StripeFinancialConnectionsAccountSubcategory {
  Checking = 'CHECKING',
  CreditCard = 'CREDIT_CARD',
  LineOfCredit = 'LINE_OF_CREDIT',
  Mortgage = 'MORTGAGE',
  Other = 'OTHER',
  Savings = 'SAVINGS'
}

export enum StripeFinancialConnectionsAccountSupportedPaymentMethodTypes {
  Link = 'LINK',
  UsBankAccount = 'US_BANK_ACCOUNT'
}

export type StripeFinancialConnectionsSession = {
  __typename?: 'StripeFinancialConnectionsSession';
  accountHolder?: Maybe<StripeBankConnectionsResourceAccountholder>;
  accounts: StripeFinancialConnectionsSessionAccounts;
  clientSecret: Scalars['String'];
  filters?: Maybe<StripeBankConnectionsResourceLinkAccountSessionFilters>;
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  object: StripeFinancialConnectionsSessionObject;
  permissions: Array<StripeFinancialConnectionsSessionPermissions>;
  returnUrl?: Maybe<Scalars['String']>;
};

export type StripeFinancialConnectionsSessionAccounts = {
  __typename?: 'StripeFinancialConnectionsSessionAccounts';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeFinancialConnectionsAccount>;
  object: StripeFinancialConnectionsSessionObjectAccounts;
  url: Scalars['String'];
};

export enum StripeFinancialConnectionsSessionObject {
  FinancialConnectionsSession = 'FINANCIAL_CONNECTIONS_SESSION'
}

export enum StripeFinancialConnectionsSessionObjectAccounts {
  List = 'LIST'
}

export enum StripeFinancialConnectionsSessionPermissions {
  Balances = 'BALANCES',
  Ownership = 'OWNERSHIP',
  PaymentMethod = 'PAYMENT_METHOD',
  Transactions = 'TRANSACTIONS'
}

export type StripeFinancialReportingFinanceReportRunRunParameters = {
  __typename?: 'StripeFinancialReportingFinanceReportRunRunParameters';
  columns?: Maybe<Array<Scalars['String']>>;
  connectedAccount?: Maybe<Scalars['String']>;
  currency?: Maybe<Scalars['String']>;
  intervalEnd?: Maybe<Scalars['Int']>;
  intervalStart?: Maybe<Scalars['Int']>;
  payout?: Maybe<Scalars['String']>;
  reportingCategory?: Maybe<Scalars['String']>;
  timezone?: Maybe<Scalars['String']>;
};

export type StripeFundingInstructions = {
  __typename?: 'StripeFundingInstructions';
  bankTransfer: StripeFundingInstructionsBankTransfer;
  currency: Scalars['String'];
  fundingType: StripeFundingInstructionsFundingType;
  livemode: Scalars['Boolean'];
  object: StripeFundingInstructionsObject;
};

export type StripeFundingInstructionsBankTransfer = {
  __typename?: 'StripeFundingInstructionsBankTransfer';
  country: Scalars['String'];
  financialAddresses: Array<StripeFundingInstructionsBankTransferFinancialAddress>;
  type: StripeFundingInstructionsBankTransferType;
};

export type StripeFundingInstructionsBankTransferFinancialAddress = {
  __typename?: 'StripeFundingInstructionsBankTransferFinancialAddress';
  iban?: Maybe<StripeFundingInstructionsBankTransferIbanRecord>;
  sortCode?: Maybe<StripeFundingInstructionsBankTransferSortCodeRecord>;
  spei?: Maybe<StripeFundingInstructionsBankTransferSpeiRecord>;
  supportedNetworks?: Maybe<Array<StripeFundingInstructionsBankTransferFinancialAddressSupportedNetworks>>;
  type: StripeFundingInstructionsBankTransferFinancialAddressType;
  zengin?: Maybe<StripeFundingInstructionsBankTransferZenginRecord>;
};

export enum StripeFundingInstructionsBankTransferFinancialAddressSupportedNetworks {
  Bacs = 'BACS',
  Fps = 'FPS',
  Sepa = 'SEPA',
  Spei = 'SPEI',
  Zengin = 'ZENGIN'
}

export enum StripeFundingInstructionsBankTransferFinancialAddressType {
  Iban = 'IBAN',
  SortCode = 'SORT_CODE',
  Spei = 'SPEI',
  Zengin = 'ZENGIN'
}

export type StripeFundingInstructionsBankTransferIbanRecord = {
  __typename?: 'StripeFundingInstructionsBankTransferIbanRecord';
  accountHolderName: Scalars['String'];
  bic: Scalars['String'];
  country: Scalars['String'];
  iban: Scalars['String'];
};

export type StripeFundingInstructionsBankTransferSortCodeRecord = {
  __typename?: 'StripeFundingInstructionsBankTransferSortCodeRecord';
  accountHolderName: Scalars['String'];
  accountNumber: Scalars['String'];
  sortCode: Scalars['String'];
};

export type StripeFundingInstructionsBankTransferSpeiRecord = {
  __typename?: 'StripeFundingInstructionsBankTransferSpeiRecord';
  bankCode: Scalars['String'];
  bankName: Scalars['String'];
  clabe: Scalars['String'];
};

export enum StripeFundingInstructionsBankTransferType {
  EuBankTransfer = 'EU_BANK_TRANSFER',
  JpBankTransfer = 'JP_BANK_TRANSFER'
}

export type StripeFundingInstructionsBankTransferZenginRecord = {
  __typename?: 'StripeFundingInstructionsBankTransferZenginRecord';
  accountHolderName?: Maybe<Scalars['String']>;
  accountNumber?: Maybe<Scalars['String']>;
  accountType?: Maybe<Scalars['String']>;
  bankCode?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  branchCode?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
};

export enum StripeFundingInstructionsFundingType {
  BankTransfer = 'BANK_TRANSFER'
}

export enum StripeFundingInstructionsObject {
  FundingInstructions = 'FUNDING_INSTRUCTIONS'
}

export type StripeGelatoDataDocumentReportDateOfBirth = {
  __typename?: 'StripeGelatoDataDocumentReportDateOfBirth';
  day?: Maybe<Scalars['Int']>;
  month?: Maybe<Scalars['Int']>;
  year?: Maybe<Scalars['Int']>;
};

export type StripeGelatoDataDocumentReportExpirationDate = {
  __typename?: 'StripeGelatoDataDocumentReportExpirationDate';
  day?: Maybe<Scalars['Int']>;
  month?: Maybe<Scalars['Int']>;
  year?: Maybe<Scalars['Int']>;
};

export type StripeGelatoDataDocumentReportIssuedDate = {
  __typename?: 'StripeGelatoDataDocumentReportIssuedDate';
  day?: Maybe<Scalars['Int']>;
  month?: Maybe<Scalars['Int']>;
  year?: Maybe<Scalars['Int']>;
};

export type StripeGelatoDataIdNumberReportDate = {
  __typename?: 'StripeGelatoDataIdNumberReportDate';
  day?: Maybe<Scalars['Int']>;
  month?: Maybe<Scalars['Int']>;
  year?: Maybe<Scalars['Int']>;
};

export type StripeGelatoDataVerifiedOutputsDate = {
  __typename?: 'StripeGelatoDataVerifiedOutputsDate';
  day?: Maybe<Scalars['Int']>;
  month?: Maybe<Scalars['Int']>;
  year?: Maybe<Scalars['Int']>;
};

export type StripeGelatoDocumentReport = {
  __typename?: 'StripeGelatoDocumentReport';
  address?: Maybe<StripeAddress>;
  dob?: Maybe<StripeGelatoDataDocumentReportDateOfBirth>;
  error?: Maybe<StripeGelatoDocumentReportError>;
  expirationDate?: Maybe<StripeGelatoDataDocumentReportExpirationDate>;
  files?: Maybe<Array<Scalars['String']>>;
  firstName?: Maybe<Scalars['String']>;
  issuedDate?: Maybe<StripeGelatoDataDocumentReportIssuedDate>;
  issuingCountry?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  status: StripeGelatoDocumentReportStatus;
  type?: Maybe<StripeGelatoDocumentReportType>;
};

export type StripeGelatoDocumentReportError = {
  __typename?: 'StripeGelatoDocumentReportError';
  code?: Maybe<StripeGelatoDocumentReportErrorCode>;
  reason?: Maybe<Scalars['String']>;
};

export enum StripeGelatoDocumentReportErrorCode {
  DocumentExpired = 'DOCUMENT_EXPIRED',
  DocumentTypeNotSupported = 'DOCUMENT_TYPE_NOT_SUPPORTED',
  DocumentUnverifiedOther = 'DOCUMENT_UNVERIFIED_OTHER'
}

export enum StripeGelatoDocumentReportStatus {
  Unverified = 'UNVERIFIED',
  Verified = 'VERIFIED'
}

export enum StripeGelatoDocumentReportType {
  DrivingLicense = 'DRIVING_LICENSE',
  IdCard = 'ID_CARD',
  Passport = 'PASSPORT'
}

export type StripeGelatoIdNumberReport = {
  __typename?: 'StripeGelatoIdNumberReport';
  dob?: Maybe<StripeGelatoDataIdNumberReportDate>;
  error?: Maybe<StripeGelatoIdNumberReportError>;
  firstName?: Maybe<Scalars['String']>;
  idNumber?: Maybe<Scalars['String']>;
  idNumberType?: Maybe<StripeGelatoIdNumberReportIdNumberType>;
  lastName?: Maybe<Scalars['String']>;
  status: StripeGelatoIdNumberReportStatus;
};

export type StripeGelatoIdNumberReportError = {
  __typename?: 'StripeGelatoIdNumberReportError';
  code?: Maybe<StripeGelatoIdNumberReportErrorCode>;
  reason?: Maybe<Scalars['String']>;
};

export enum StripeGelatoIdNumberReportErrorCode {
  IdNumberInsufficientDocumentData = 'ID_NUMBER_INSUFFICIENT_DOCUMENT_DATA',
  IdNumberMismatch = 'ID_NUMBER_MISMATCH',
  IdNumberUnverifiedOther = 'ID_NUMBER_UNVERIFIED_OTHER'
}

export enum StripeGelatoIdNumberReportIdNumberType {
  BrCpf = 'BR_CPF',
  SgNric = 'SG_NRIC',
  UsSsn = 'US_SSN'
}

export enum StripeGelatoIdNumberReportStatus {
  Unverified = 'UNVERIFIED',
  Verified = 'VERIFIED'
}

export type StripeGelatoReportDocumentOptions = {
  __typename?: 'StripeGelatoReportDocumentOptions';
  allowedTypes?: Maybe<Array<StripeGelatoReportDocumentOptionsAllowedTypes>>;
  requireIdNumber?: Maybe<Scalars['Boolean']>;
  requireLiveCapture?: Maybe<Scalars['Boolean']>;
  requireMatchingSelfie?: Maybe<Scalars['Boolean']>;
};

export enum StripeGelatoReportDocumentOptionsAllowedTypes {
  DrivingLicense = 'DRIVING_LICENSE',
  IdCard = 'ID_CARD',
  Passport = 'PASSPORT'
}

export type StripeGelatoSelfieReport = {
  __typename?: 'StripeGelatoSelfieReport';
  document?: Maybe<Scalars['String']>;
  error?: Maybe<StripeGelatoSelfieReportError>;
  selfie?: Maybe<Scalars['String']>;
  status: StripeGelatoSelfieReportStatus;
};

export type StripeGelatoSelfieReportError = {
  __typename?: 'StripeGelatoSelfieReportError';
  code?: Maybe<StripeGelatoSelfieReportErrorCode>;
  reason?: Maybe<Scalars['String']>;
};

export enum StripeGelatoSelfieReportErrorCode {
  SelfieDocumentMissingPhoto = 'SELFIE_DOCUMENT_MISSING_PHOTO',
  SelfieFaceMismatch = 'SELFIE_FACE_MISMATCH',
  SelfieManipulated = 'SELFIE_MANIPULATED',
  SelfieUnverifiedOther = 'SELFIE_UNVERIFIED_OTHER'
}

export enum StripeGelatoSelfieReportStatus {
  Unverified = 'UNVERIFIED',
  Verified = 'VERIFIED'
}

export type StripeGelatoSessionDocumentOptions = {
  __typename?: 'StripeGelatoSessionDocumentOptions';
  allowedTypes?: Maybe<Array<StripeGelatoSessionDocumentOptionsAllowedTypes>>;
  requireIdNumber?: Maybe<Scalars['Boolean']>;
  requireLiveCapture?: Maybe<Scalars['Boolean']>;
  requireMatchingSelfie?: Maybe<Scalars['Boolean']>;
};

export enum StripeGelatoSessionDocumentOptionsAllowedTypes {
  DrivingLicense = 'DRIVING_LICENSE',
  IdCard = 'ID_CARD',
  Passport = 'PASSPORT'
}

export type StripeGelatoSessionLastError = {
  __typename?: 'StripeGelatoSessionLastError';
  code?: Maybe<StripeGelatoSessionLastErrorCode>;
  reason?: Maybe<Scalars['String']>;
};

export enum StripeGelatoSessionLastErrorCode {
  Abandoned = 'ABANDONED',
  ConsentDeclined = 'CONSENT_DECLINED',
  CountryNotSupported = 'COUNTRY_NOT_SUPPORTED',
  DeviceNotSupported = 'DEVICE_NOT_SUPPORTED',
  DocumentExpired = 'DOCUMENT_EXPIRED',
  DocumentTypeNotSupported = 'DOCUMENT_TYPE_NOT_SUPPORTED',
  DocumentUnverifiedOther = 'DOCUMENT_UNVERIFIED_OTHER',
  IdNumberInsufficientDocumentData = 'ID_NUMBER_INSUFFICIENT_DOCUMENT_DATA',
  IdNumberMismatch = 'ID_NUMBER_MISMATCH',
  IdNumberUnverifiedOther = 'ID_NUMBER_UNVERIFIED_OTHER',
  SelfieDocumentMissingPhoto = 'SELFIE_DOCUMENT_MISSING_PHOTO',
  SelfieFaceMismatch = 'SELFIE_FACE_MISMATCH',
  SelfieManipulated = 'SELFIE_MANIPULATED',
  SelfieUnverifiedOther = 'SELFIE_UNVERIFIED_OTHER',
  UnderSupportedAge = 'UNDER_SUPPORTED_AGE'
}

export type StripeGelatoVerificationReportOptions = {
  __typename?: 'StripeGelatoVerificationReportOptions';
  document?: Maybe<StripeGelatoReportDocumentOptions>;
  idNumber?: Maybe<Scalars['JSON']>;
};

export type StripeGelatoVerificationSessionOptions = {
  __typename?: 'StripeGelatoVerificationSessionOptions';
  document?: Maybe<StripeGelatoSessionDocumentOptions>;
  idNumber?: Maybe<Scalars['JSON']>;
};

export type StripeGelatoVerifiedOutputs = {
  __typename?: 'StripeGelatoVerifiedOutputs';
  address?: Maybe<StripeAddress>;
  dob?: Maybe<StripeGelatoDataVerifiedOutputsDate>;
  firstName?: Maybe<Scalars['String']>;
  idNumber?: Maybe<Scalars['String']>;
  idNumberType?: Maybe<StripeGelatoVerifiedOutputsIdNumberType>;
  lastName?: Maybe<Scalars['String']>;
};

export enum StripeGelatoVerifiedOutputsIdNumberType {
  BrCpf = 'BR_CPF',
  SgNric = 'SG_NRIC',
  UsSsn = 'US_SSN'
}

export type StripeGetAccounts = {
  __typename?: 'StripeGetAccounts';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeAccount>;
  object: StripeGetAccountsObject;
  url: Scalars['String'];
};

export type StripeGetAccountsAccountCapabilities = {
  __typename?: 'StripeGetAccountsAccountCapabilities';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeCapability>;
  object: StripeGetAccountsAccountCapabilitiesObject;
  url: Scalars['String'];
};

export enum StripeGetAccountsAccountCapabilitiesObject {
  List = 'LIST'
}

export type StripeGetAccountsAccountExternalAccounts = {
  __typename?: 'StripeGetAccountsAccountExternalAccounts';
  data: Array<StripeCardOrBankAccountUnion>;
  hasMore: Scalars['Boolean'];
  object: StripeGetAccountsAccountExternalAccountsObject;
  url: Scalars['String'];
};

export enum StripeGetAccountsAccountExternalAccountsObject {
  List = 'LIST'
}

export type StripeGetAccountsAccountPeople = {
  __typename?: 'StripeGetAccountsAccountPeople';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripePerson>;
  object: StripeGetAccountsAccountPeopleObject;
  url: Scalars['String'];
};

export enum StripeGetAccountsAccountPeopleObject {
  List = 'LIST'
}

export type StripeGetAccountsAccountPeopleRelationshipInput = {
  director?: InputMaybe<Scalars['Boolean']>;
  executive?: InputMaybe<Scalars['Boolean']>;
  owner?: InputMaybe<Scalars['Boolean']>;
  representative?: InputMaybe<Scalars['Boolean']>;
};

export type StripeGetAccountsAccountPersons = {
  __typename?: 'StripeGetAccountsAccountPersons';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripePerson>;
  object: StripeGetAccountsAccountPersonsObject;
  url: Scalars['String'];
};

export enum StripeGetAccountsAccountPersonsObject {
  List = 'LIST'
}

export type StripeGetAccountsAccountPersonsRelationshipInput = {
  director?: InputMaybe<Scalars['Boolean']>;
  executive?: InputMaybe<Scalars['Boolean']>;
  owner?: InputMaybe<Scalars['Boolean']>;
  representative?: InputMaybe<Scalars['Boolean']>;
};

export type StripeGetAccountsCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetAccountsObject {
  List = 'LIST'
}

export type StripeGetApplePayDomains = {
  __typename?: 'StripeGetApplePayDomains';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeApplePayDomain>;
  object: StripeGetApplePayDomainsObject;
  url: Scalars['String'];
};

export enum StripeGetApplePayDomainsObject {
  List = 'LIST'
}

export type StripeGetApplicationFees = {
  __typename?: 'StripeGetApplicationFees';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeApplicationFee>;
  object: StripeGetApplicationFeesObject;
  url: Scalars['String'];
};

export type StripeGetApplicationFeesCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export type StripeGetApplicationFeesIdRefunds = {
  __typename?: 'StripeGetApplicationFeesIdRefunds';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeFeeRefund>;
  object: StripeGetApplicationFeesIdRefundsObject;
  url: Scalars['String'];
};

export enum StripeGetApplicationFeesIdRefundsObject {
  List = 'LIST'
}

export enum StripeGetApplicationFeesObject {
  List = 'LIST'
}

export type StripeGetAppsSecrets = {
  __typename?: 'StripeGetAppsSecrets';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeAppsSecret>;
  object: StripeGetAppsSecretsObject;
  url: Scalars['String'];
};

export type StripeGetAppsSecretsFindScopeInput = {
  type: StripeGetAppsSecretsFindTypeScope;
  user?: InputMaybe<Scalars['String']>;
};

export enum StripeGetAppsSecretsFindTypeScope {
  Account = 'ACCOUNT',
  User = 'USER'
}

export enum StripeGetAppsSecretsObject {
  List = 'LIST'
}

export type StripeGetAppsSecretsScopeInput = {
  type: StripeGetAppsSecretsTypeScope;
  user?: InputMaybe<Scalars['String']>;
};

export enum StripeGetAppsSecretsTypeScope {
  Account = 'ACCOUNT',
  User = 'USER'
}

export type StripeGetBalanceHistory = {
  __typename?: 'StripeGetBalanceHistory';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeBalanceTransaction>;
  object: StripeGetBalanceHistoryObject;
  url: Scalars['String'];
};

export type StripeGetBalanceHistoryCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetBalanceHistoryObject {
  List = 'LIST'
}

export type StripeGetBalanceTransactions = {
  __typename?: 'StripeGetBalanceTransactions';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeBalanceTransaction>;
  object: StripeGetBalanceTransactionsObject;
  url: Scalars['String'];
};

export type StripeGetBalanceTransactionsCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetBalanceTransactionsObject {
  List = 'LIST'
}

export type StripeGetBillingPortalConfigurations = {
  __typename?: 'StripeGetBillingPortalConfigurations';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeBillingPortalConfiguration>;
  object: StripeGetBillingPortalConfigurationsObject;
  url: Scalars['String'];
};

export enum StripeGetBillingPortalConfigurationsObject {
  List = 'LIST'
}

export type StripeGetCharges = {
  __typename?: 'StripeGetCharges';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeCharge>;
  object: StripeGetChargesObject;
  url: Scalars['String'];
};

export type StripeGetChargesChargeRefunds = {
  __typename?: 'StripeGetChargesChargeRefunds';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeRefund>;
  object: StripeGetChargesChargeRefundsObject;
  url: Scalars['String'];
};

export enum StripeGetChargesChargeRefundsObject {
  List = 'LIST'
}

export type StripeGetChargesCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetChargesObject {
  List = 'LIST'
}

export type StripeGetChargesSearch = {
  __typename?: 'StripeGetChargesSearch';
  hasMore: Scalars['Boolean'];
  nextPage?: Maybe<Scalars['String']>;
  nodes: Array<StripeCharge>;
  object: StripeGetChargesSearchObject;
  totalCount?: Maybe<Scalars['Int']>;
  url: Scalars['String'];
};

export enum StripeGetChargesSearchObject {
  SearchResult = 'SEARCH_RESULT'
}

export type StripeGetCheckoutSessions = {
  __typename?: 'StripeGetCheckoutSessions';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeCheckoutSession>;
  object: StripeGetCheckoutSessionsObject;
  url: Scalars['String'];
};

export type StripeGetCheckoutSessionsCustomerDetailsInput = {
  email: Scalars['String'];
};

export enum StripeGetCheckoutSessionsObject {
  List = 'LIST'
}

export type StripeGetCheckoutSessionsSessionLineItems = {
  __typename?: 'StripeGetCheckoutSessionsSessionLineItems';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeItem>;
  object: StripeGetCheckoutSessionsSessionLineItemsObject;
  url: Scalars['String'];
};

export enum StripeGetCheckoutSessionsSessionLineItemsObject {
  List = 'LIST'
}

export type StripeGetCountrySpecs = {
  __typename?: 'StripeGetCountrySpecs';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeCountrySpec>;
  object: StripeGetCountrySpecsObject;
  url: Scalars['String'];
};

export enum StripeGetCountrySpecsObject {
  List = 'LIST'
}

export type StripeGetCoupons = {
  __typename?: 'StripeGetCoupons';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeCoupon>;
  object: StripeGetCouponsObject;
  url: Scalars['String'];
};

export type StripeGetCouponsCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetCouponsObject {
  List = 'LIST'
}

export type StripeGetCreditNotes = {
  __typename?: 'StripeGetCreditNotes';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeCreditNote>;
  object: StripeGetCreditNotesObject;
  url: Scalars['String'];
};

export type StripeGetCreditNotesCreditNoteLines = {
  __typename?: 'StripeGetCreditNotesCreditNoteLines';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeCreditNoteLineItem>;
  object: StripeGetCreditNotesCreditNoteLinesObject;
  url: Scalars['String'];
};

export enum StripeGetCreditNotesCreditNoteLinesObject {
  List = 'LIST'
}

export enum StripeGetCreditNotesObject {
  List = 'LIST'
}

export type StripeGetCreditNotesPreviewLines = {
  __typename?: 'StripeGetCreditNotesPreviewLines';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeCreditNoteLineItem>;
  object: StripeGetCreditNotesPreviewLinesObject;
  url: Scalars['String'];
};

export type StripeGetCreditNotesPreviewLinesInput = {
  amount?: InputMaybe<Scalars['Int']>;
  description?: InputMaybe<Scalars['String']>;
  invoiceLineItem?: InputMaybe<Scalars['String']>;
  quantity?: InputMaybe<Scalars['Int']>;
  taxRates?: InputMaybe<Scalars['JSON']>;
  type: StripeGetCreditNotesPreviewTypeLines;
  unitAmount?: InputMaybe<Scalars['Int']>;
  unitAmountDecimal?: InputMaybe<Scalars['String']>;
};

export type StripeGetCreditNotesPreviewLinesLinesInput = {
  amount?: InputMaybe<Scalars['Int']>;
  description?: InputMaybe<Scalars['String']>;
  invoiceLineItem?: InputMaybe<Scalars['String']>;
  quantity?: InputMaybe<Scalars['Int']>;
  taxRates?: InputMaybe<Scalars['JSON']>;
  type: StripeGetCreditNotesPreviewLinesTypeLines;
  unitAmount?: InputMaybe<Scalars['Int']>;
  unitAmountDecimal?: InputMaybe<Scalars['String']>;
};

export enum StripeGetCreditNotesPreviewLinesObject {
  List = 'LIST'
}

export enum StripeGetCreditNotesPreviewLinesReason {
  Duplicate = 'DUPLICATE',
  Fraudulent = 'FRAUDULENT',
  OrderChange = 'ORDER_CHANGE',
  ProductUnsatisfactory = 'PRODUCT_UNSATISFACTORY'
}

export type StripeGetCreditNotesPreviewLinesShippingCostInput = {
  shippingRate?: InputMaybe<Scalars['String']>;
};

export enum StripeGetCreditNotesPreviewLinesTypeLines {
  CustomLineItem = 'CUSTOM_LINE_ITEM',
  InvoiceLineItem = 'INVOICE_LINE_ITEM'
}

export enum StripeGetCreditNotesPreviewReason {
  Duplicate = 'DUPLICATE',
  Fraudulent = 'FRAUDULENT',
  OrderChange = 'ORDER_CHANGE',
  ProductUnsatisfactory = 'PRODUCT_UNSATISFACTORY'
}

export type StripeGetCreditNotesPreviewShippingCostInput = {
  shippingRate?: InputMaybe<Scalars['String']>;
};

export enum StripeGetCreditNotesPreviewTypeLines {
  CustomLineItem = 'CUSTOM_LINE_ITEM',
  InvoiceLineItem = 'INVOICE_LINE_ITEM'
}

export type StripeGetCustomers = {
  __typename?: 'StripeGetCustomers';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeCustomer>;
  object: StripeGetCustomersObject;
  url: Scalars['String'];
};

export type StripeGetCustomersCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export type StripeGetCustomersCustomerBalanceTransactions = {
  __typename?: 'StripeGetCustomersCustomerBalanceTransactions';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeCustomerBalanceTransaction>;
  object: StripeGetCustomersCustomerBalanceTransactionsObject;
  url: Scalars['String'];
};

export enum StripeGetCustomersCustomerBalanceTransactionsObject {
  List = 'LIST'
}

export type StripeGetCustomersCustomerBankAccounts = {
  __typename?: 'StripeGetCustomersCustomerBankAccounts';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeBankAccount>;
  object: StripeGetCustomersCustomerBankAccountsObject;
  url: Scalars['String'];
};

export enum StripeGetCustomersCustomerBankAccountsObject {
  List = 'LIST'
}

export type StripeGetCustomersCustomerCards = {
  __typename?: 'StripeGetCustomersCustomerCards';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeCard>;
  object: StripeGetCustomersCustomerCardsObject;
  url: Scalars['String'];
};

export enum StripeGetCustomersCustomerCardsObject {
  List = 'LIST'
}

export type StripeGetCustomersCustomerCashBalanceTransactions = {
  __typename?: 'StripeGetCustomersCustomerCashBalanceTransactions';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeCustomerCashBalanceTransaction>;
  object: StripeGetCustomersCustomerCashBalanceTransactionsObject;
  url: Scalars['String'];
};

export enum StripeGetCustomersCustomerCashBalanceTransactionsObject {
  List = 'LIST'
}

export type StripeGetCustomersCustomerPaymentMethods = {
  __typename?: 'StripeGetCustomersCustomerPaymentMethods';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripePaymentMethod>;
  object: StripeGetCustomersCustomerPaymentMethodsObject;
  url: Scalars['String'];
};

export enum StripeGetCustomersCustomerPaymentMethodsObject {
  List = 'LIST'
}

export enum StripeGetCustomersCustomerPaymentMethodsType {
  AcssDebit = 'ACSS_DEBIT',
  Affirm = 'AFFIRM',
  AfterpayClearpay = 'AFTERPAY_CLEARPAY',
  Alipay = 'ALIPAY',
  AuBecsDebit = 'AU_BECS_DEBIT',
  BacsDebit = 'BACS_DEBIT',
  Bancontact = 'BANCONTACT',
  Blik = 'BLIK',
  Boleto = 'BOLETO',
  Card = 'CARD',
  Cashapp = 'CASHAPP',
  CustomerBalance = 'CUSTOMER_BALANCE',
  Eps = 'EPS',
  Fpx = 'FPX',
  Giropay = 'GIROPAY',
  Grabpay = 'GRABPAY',
  Ideal = 'IDEAL',
  Klarna = 'KLARNA',
  Konbini = 'KONBINI',
  Link = 'LINK',
  Oxxo = 'OXXO',
  Paynow = 'PAYNOW',
  Paypal = 'PAYPAL',
  Pix = 'PIX',
  Promptpay = 'PROMPTPAY',
  P_24 = 'P_24',
  SepaDebit = 'SEPA_DEBIT',
  Sofort = 'SOFORT',
  UsBankAccount = 'US_BANK_ACCOUNT',
  WechatPay = 'WECHAT_PAY'
}

export type StripeGetCustomersCustomerSources = {
  __typename?: 'StripeGetCustomersCustomerSources';
  data: Array<StripeSourceOrCardOrBankAccountUnion>;
  hasMore: Scalars['Boolean'];
  object: StripeGetCustomersCustomerSourcesObject;
  url: Scalars['String'];
};

export enum StripeGetCustomersCustomerSourcesObject {
  List = 'LIST'
}

export type StripeGetCustomersCustomerSubscriptions = {
  __typename?: 'StripeGetCustomersCustomerSubscriptions';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeSubscription>;
  object: StripeGetCustomersCustomerSubscriptionsObject;
  url: Scalars['String'];
};

export enum StripeGetCustomersCustomerSubscriptionsObject {
  List = 'LIST'
}

export type StripeGetCustomersCustomerTaxIds = {
  __typename?: 'StripeGetCustomersCustomerTaxIds';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeTaxId>;
  object: StripeGetCustomersCustomerTaxIdsObject;
  url: Scalars['String'];
};

export enum StripeGetCustomersCustomerTaxIdsObject {
  List = 'LIST'
}

export enum StripeGetCustomersObject {
  List = 'LIST'
}

export type StripeGetCustomersSearch = {
  __typename?: 'StripeGetCustomersSearch';
  hasMore: Scalars['Boolean'];
  nextPage?: Maybe<Scalars['String']>;
  nodes: Array<StripeCustomer>;
  object: StripeGetCustomersSearchObject;
  totalCount?: Maybe<Scalars['Int']>;
  url: Scalars['String'];
};

export enum StripeGetCustomersSearchObject {
  SearchResult = 'SEARCH_RESULT'
}

export type StripeGetDisputes = {
  __typename?: 'StripeGetDisputes';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeDispute>;
  object: StripeGetDisputesObject;
  url: Scalars['String'];
};

export type StripeGetDisputesCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetDisputesObject {
  List = 'LIST'
}

export type StripeGetEvents = {
  __typename?: 'StripeGetEvents';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeEvent>;
  object: StripeGetEventsObject;
  url: Scalars['String'];
};

export type StripeGetEventsCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetEventsObject {
  List = 'LIST'
}

export type StripeGetExchangeRates = {
  __typename?: 'StripeGetExchangeRates';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeExchangeRate>;
  object: StripeGetExchangeRatesObject;
  url: Scalars['String'];
};

export enum StripeGetExchangeRatesObject {
  List = 'LIST'
}

export type StripeGetFileLinks = {
  __typename?: 'StripeGetFileLinks';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeFileLink>;
  object: StripeGetFileLinksObject;
  url: Scalars['String'];
};

export type StripeGetFileLinksCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetFileLinksObject {
  List = 'LIST'
}

export type StripeGetFiles = {
  __typename?: 'StripeGetFiles';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeFile>;
  object: StripeGetFilesObject;
  url: Scalars['String'];
};

export type StripeGetFilesCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetFilesObject {
  List = 'LIST'
}

export enum StripeGetFilesPurpose {
  AccountRequirement = 'ACCOUNT_REQUIREMENT',
  AdditionalVerification = 'ADDITIONAL_VERIFICATION',
  BusinessIcon = 'BUSINESS_ICON',
  BusinessLogo = 'BUSINESS_LOGO',
  CustomerSignature = 'CUSTOMER_SIGNATURE',
  DisputeEvidence = 'DISPUTE_EVIDENCE',
  DocumentProviderIdentityDocument = 'DOCUMENT_PROVIDER_IDENTITY_DOCUMENT',
  FinanceReportRun = 'FINANCE_REPORT_RUN',
  IdentityDocument = 'IDENTITY_DOCUMENT',
  IdentityDocumentDownloadable = 'IDENTITY_DOCUMENT_DOWNLOADABLE',
  PciDocument = 'PCI_DOCUMENT',
  Selfie = 'SELFIE',
  SigmaScheduledQuery = 'SIGMA_SCHEDULED_QUERY',
  TaxDocumentUserUpload = 'TAX_DOCUMENT_USER_UPLOAD',
  TerminalReaderSplashscreen = 'TERMINAL_READER_SPLASHSCREEN'
}

export type StripeGetFinancialConnectionsAccounts = {
  __typename?: 'StripeGetFinancialConnectionsAccounts';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeFinancialConnectionsAccount>;
  object: StripeGetFinancialConnectionsAccountsObject;
  url: Scalars['String'];
};

export type StripeGetFinancialConnectionsAccountsAccountHolderInput = {
  account?: InputMaybe<Scalars['String']>;
  customer?: InputMaybe<Scalars['String']>;
};

export type StripeGetFinancialConnectionsAccountsAccountOwners = {
  __typename?: 'StripeGetFinancialConnectionsAccountsAccountOwners';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeFinancialConnectionsAccountOwner>;
  object: StripeGetFinancialConnectionsAccountsAccountOwnersObject;
  url: Scalars['String'];
};

export enum StripeGetFinancialConnectionsAccountsAccountOwnersObject {
  List = 'LIST'
}

export enum StripeGetFinancialConnectionsAccountsObject {
  List = 'LIST'
}

export type StripeGetIdentityVerificationReports = {
  __typename?: 'StripeGetIdentityVerificationReports';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeIdentityVerificationReport>;
  object: StripeGetIdentityVerificationReportsObject;
  url: Scalars['String'];
};

export type StripeGetIdentityVerificationReportsCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetIdentityVerificationReportsObject {
  List = 'LIST'
}

export enum StripeGetIdentityVerificationReportsType {
  Document = 'DOCUMENT',
  IdNumber = 'ID_NUMBER'
}

export type StripeGetIdentityVerificationSessions = {
  __typename?: 'StripeGetIdentityVerificationSessions';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeIdentityVerificationSession>;
  object: StripeGetIdentityVerificationSessionsObject;
  url: Scalars['String'];
};

export type StripeGetIdentityVerificationSessionsCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetIdentityVerificationSessionsObject {
  List = 'LIST'
}

export enum StripeGetIdentityVerificationSessionsStatus {
  Canceled = 'CANCELED',
  Processing = 'PROCESSING',
  RequiresInput = 'REQUIRES_INPUT',
  Verified = 'VERIFIED'
}

export type StripeGetInvoiceitems = {
  __typename?: 'StripeGetInvoiceitems';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeInvoiceitem>;
  object: StripeGetInvoiceitemsObject;
  url: Scalars['String'];
};

export type StripeGetInvoiceitemsCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetInvoiceitemsObject {
  List = 'LIST'
}

export type StripeGetInvoices = {
  __typename?: 'StripeGetInvoices';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeInvoice>;
  object: StripeGetInvoicesObject;
  url: Scalars['String'];
};

export enum StripeGetInvoicesCollectionMethod {
  ChargeAutomatically = 'CHARGE_AUTOMATICALLY',
  SendInvoice = 'SEND_INVOICE'
}

export type StripeGetInvoicesCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export type StripeGetInvoicesDueDateInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export type StripeGetInvoicesInvoiceLines = {
  __typename?: 'StripeGetInvoicesInvoiceLines';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeLineItem>;
  object: StripeGetInvoicesInvoiceLinesObject;
  url: Scalars['String'];
};

export enum StripeGetInvoicesInvoiceLinesObject {
  List = 'LIST'
}

export enum StripeGetInvoicesObject {
  List = 'LIST'
}

export type StripeGetInvoicesSearch = {
  __typename?: 'StripeGetInvoicesSearch';
  hasMore: Scalars['Boolean'];
  nextPage?: Maybe<Scalars['String']>;
  nodes: Array<StripeInvoice>;
  object: StripeGetInvoicesSearchObject;
  totalCount?: Maybe<Scalars['Int']>;
  url: Scalars['String'];
};

export enum StripeGetInvoicesSearchObject {
  SearchResult = 'SEARCH_RESULT'
}

export enum StripeGetInvoicesStatus {
  Draft = 'DRAFT',
  Open = 'OPEN',
  Paid = 'PAID',
  Uncollectible = 'UNCOLLECTIBLE',
  Void = 'VOID'
}

export type StripeGetInvoicesUpcomingAddressCustomerDetailsInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripeGetInvoicesUpcomingAddressShippingCustomerDetailsInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripeGetInvoicesUpcomingAutomaticTaxInput = {
  enabled: Scalars['Boolean'];
};

export type StripeGetInvoicesUpcomingBillingThresholdsSubscriptionItemsInput = {
  usageGte: Scalars['Int'];
};

export type StripeGetInvoicesUpcomingCustomerDetailsInput = {
  address?: InputMaybe<StripeStringOrGetInvoicesUpcomingAddressCustomerDetailsUnionInput>;
  shipping?: InputMaybe<StripeStringOrGetInvoicesUpcomingShippingCustomerDetailsUnionInput>;
  tax?: InputMaybe<StripeGetInvoicesUpcomingTaxCustomerDetailsInput>;
  taxExempt?: InputMaybe<Scalars['String']>;
  taxIds?: InputMaybe<Array<StripeGetInvoicesUpcomingTaxIdsCustomerDetailsInput>>;
};

export type StripeGetInvoicesUpcomingDiscountsInput = {
  coupon?: InputMaybe<Scalars['String']>;
  discount?: InputMaybe<Scalars['String']>;
};

export type StripeGetInvoicesUpcomingDiscountsInvoiceItemsInput = {
  coupon?: InputMaybe<Scalars['String']>;
  discount?: InputMaybe<Scalars['String']>;
};

export enum StripeGetInvoicesUpcomingIntervalRecurringPriceDataSubscriptionItems {
  Day = 'DAY',
  Month = 'MONTH',
  Week = 'WEEK',
  Year = 'YEAR'
}

export type StripeGetInvoicesUpcomingInvoiceItemsInput = {
  amount?: InputMaybe<Scalars['Int']>;
  currency?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  discountable?: InputMaybe<Scalars['Boolean']>;
  discounts?: InputMaybe<StripeStringOrGetInvoicesUpcomingDiscountsInvoiceItemsUnionInput>;
  invoiceitem?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  period?: InputMaybe<StripeGetInvoicesUpcomingPeriodInvoiceItemsInput>;
  price?: InputMaybe<Scalars['String']>;
  priceData?: InputMaybe<StripeGetInvoicesUpcomingPriceDataInvoiceItemsInput>;
  quantity?: InputMaybe<Scalars['Int']>;
  taxBehavior?: InputMaybe<StripeGetInvoicesUpcomingTaxBehaviorInvoiceItems>;
  taxCode?: InputMaybe<Scalars['JSON']>;
  taxRates?: InputMaybe<Scalars['JSON']>;
  unitAmount?: InputMaybe<Scalars['Int']>;
  unitAmountDecimal?: InputMaybe<Scalars['String']>;
};

export type StripeGetInvoicesUpcomingLines = {
  __typename?: 'StripeGetInvoicesUpcomingLines';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeLineItem>;
  object: StripeGetInvoicesUpcomingLinesObject;
  url: Scalars['String'];
};

export type StripeGetInvoicesUpcomingLinesAddressCustomerDetailsInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripeGetInvoicesUpcomingLinesAddressShippingCustomerDetailsInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripeGetInvoicesUpcomingLinesAutomaticTaxInput = {
  enabled: Scalars['Boolean'];
};

export type StripeGetInvoicesUpcomingLinesBillingThresholdsSubscriptionItemsInput = {
  usageGte: Scalars['Int'];
};

export type StripeGetInvoicesUpcomingLinesCustomerDetailsInput = {
  address?: InputMaybe<StripeStringOrGetInvoicesUpcomingLinesAddressCustomerDetailsUnionInput>;
  shipping?: InputMaybe<StripeStringOrGetInvoicesUpcomingLinesShippingCustomerDetailsUnionInput>;
  tax?: InputMaybe<StripeGetInvoicesUpcomingLinesTaxCustomerDetailsInput>;
  taxExempt?: InputMaybe<Scalars['String']>;
  taxIds?: InputMaybe<Array<StripeGetInvoicesUpcomingLinesTaxIdsCustomerDetailsInput>>;
};

export type StripeGetInvoicesUpcomingLinesDiscountsInput = {
  coupon?: InputMaybe<Scalars['String']>;
  discount?: InputMaybe<Scalars['String']>;
};

export type StripeGetInvoicesUpcomingLinesDiscountsInvoiceItemsInput = {
  coupon?: InputMaybe<Scalars['String']>;
  discount?: InputMaybe<Scalars['String']>;
};

export enum StripeGetInvoicesUpcomingLinesIntervalRecurringPriceDataSubscriptionItems {
  Day = 'DAY',
  Month = 'MONTH',
  Week = 'WEEK',
  Year = 'YEAR'
}

export type StripeGetInvoicesUpcomingLinesInvoiceItemsInput = {
  amount?: InputMaybe<Scalars['Int']>;
  currency?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  discountable?: InputMaybe<Scalars['Boolean']>;
  discounts?: InputMaybe<StripeStringOrGetInvoicesUpcomingLinesDiscountsInvoiceItemsUnionInput>;
  invoiceitem?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  period?: InputMaybe<StripeGetInvoicesUpcomingLinesPeriodInvoiceItemsInput>;
  price?: InputMaybe<Scalars['String']>;
  priceData?: InputMaybe<StripeGetInvoicesUpcomingLinesPriceDataInvoiceItemsInput>;
  quantity?: InputMaybe<Scalars['Int']>;
  taxBehavior?: InputMaybe<StripeGetInvoicesUpcomingLinesTaxBehaviorInvoiceItems>;
  taxCode?: InputMaybe<Scalars['JSON']>;
  taxRates?: InputMaybe<Scalars['JSON']>;
  unitAmount?: InputMaybe<Scalars['Int']>;
  unitAmountDecimal?: InputMaybe<Scalars['String']>;
};

export enum StripeGetInvoicesUpcomingLinesObject {
  List = 'LIST'
}

export type StripeGetInvoicesUpcomingLinesPeriodInvoiceItemsInput = {
  end: Scalars['Int'];
  start: Scalars['Int'];
};

export type StripeGetInvoicesUpcomingLinesPriceDataInvoiceItemsInput = {
  currency: Scalars['String'];
  product: Scalars['String'];
  taxBehavior?: InputMaybe<StripeGetInvoicesUpcomingLinesTaxBehaviorPriceDataInvoiceItems>;
  unitAmount?: InputMaybe<Scalars['Int']>;
  unitAmountDecimal?: InputMaybe<Scalars['String']>;
};

export type StripeGetInvoicesUpcomingLinesPriceDataSubscriptionItemsInput = {
  currency: Scalars['String'];
  product: Scalars['String'];
  recurring: StripeGetInvoicesUpcomingLinesRecurringPriceDataSubscriptionItemsInput;
  taxBehavior?: InputMaybe<StripeGetInvoicesUpcomingLinesTaxBehaviorPriceDataSubscriptionItems>;
  unitAmount?: InputMaybe<Scalars['Int']>;
  unitAmountDecimal?: InputMaybe<Scalars['String']>;
};

export type StripeGetInvoicesUpcomingLinesRecurringPriceDataSubscriptionItemsInput = {
  interval: StripeGetInvoicesUpcomingLinesIntervalRecurringPriceDataSubscriptionItems;
  intervalCount?: InputMaybe<Scalars['Int']>;
};

export type StripeGetInvoicesUpcomingLinesShippingCustomerDetailsInput = {
  address: StripeGetInvoicesUpcomingLinesAddressShippingCustomerDetailsInput;
  name: Scalars['String'];
  phone?: InputMaybe<Scalars['String']>;
};

export type StripeGetInvoicesUpcomingLinesSubscriptionItemsInput = {
  billingThresholds?: InputMaybe<StripeStringOrGetInvoicesUpcomingLinesBillingThresholdsSubscriptionItemsUnionInput>;
  clearUsage?: InputMaybe<Scalars['Boolean']>;
  deleted?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  price?: InputMaybe<Scalars['String']>;
  priceData?: InputMaybe<StripeGetInvoicesUpcomingLinesPriceDataSubscriptionItemsInput>;
  quantity?: InputMaybe<Scalars['Int']>;
  taxRates?: InputMaybe<Scalars['JSON']>;
};

export enum StripeGetInvoicesUpcomingLinesSubscriptionProrationBehavior {
  AlwaysInvoice = 'ALWAYS_INVOICE',
  CreateProrations = 'CREATE_PRORATIONS',
  None = 'NONE'
}

export enum StripeGetInvoicesUpcomingLinesSubscriptionResumeAt {
  Now = 'NOW'
}

export enum StripeGetInvoicesUpcomingLinesTaxBehaviorInvoiceItems {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE',
  Unspecified = 'UNSPECIFIED'
}

export enum StripeGetInvoicesUpcomingLinesTaxBehaviorPriceDataInvoiceItems {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE',
  Unspecified = 'UNSPECIFIED'
}

export enum StripeGetInvoicesUpcomingLinesTaxBehaviorPriceDataSubscriptionItems {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE',
  Unspecified = 'UNSPECIFIED'
}

export type StripeGetInvoicesUpcomingLinesTaxCustomerDetailsInput = {
  ipAddress?: InputMaybe<Scalars['JSON']>;
};

export type StripeGetInvoicesUpcomingLinesTaxIdsCustomerDetailsInput = {
  type: StripeGetInvoicesUpcomingLinesTypeTaxIdsCustomerDetails;
  value: Scalars['String'];
};

export enum StripeGetInvoicesUpcomingLinesTypeTaxIdsCustomerDetails {
  AeTrn = 'AE_TRN',
  AuAbn = 'AU_ABN',
  AuArn = 'AU_ARN',
  BgUic = 'BG_UIC',
  BrCnpj = 'BR_CNPJ',
  BrCpf = 'BR_CPF',
  CaBn = 'CA_BN',
  CaGstHst = 'CA_GST_HST',
  CaPstBc = 'CA_PST_BC',
  CaPstMb = 'CA_PST_MB',
  CaPstSk = 'CA_PST_SK',
  CaQst = 'CA_QST',
  ChVat = 'CH_VAT',
  ClTin = 'CL_TIN',
  EgTin = 'EG_TIN',
  EsCif = 'ES_CIF',
  EuOssVat = 'EU_OSS_VAT',
  EuVat = 'EU_VAT',
  GbVat = 'GB_VAT',
  GeVat = 'GE_VAT',
  HkBr = 'HK_BR',
  HuTin = 'HU_TIN',
  IdNpwp = 'ID_NPWP',
  IlVat = 'IL_VAT',
  InGst = 'IN_GST',
  IsVat = 'IS_VAT',
  JpCn = 'JP_CN',
  JpRn = 'JP_RN',
  JpTrn = 'JP_TRN',
  KePin = 'KE_PIN',
  KrBrn = 'KR_BRN',
  LiUid = 'LI_UID',
  MxRfc = 'MX_RFC',
  MyFrp = 'MY_FRP',
  MyItn = 'MY_ITN',
  MySst = 'MY_SST',
  NoVat = 'NO_VAT',
  NzGst = 'NZ_GST',
  PhTin = 'PH_TIN',
  RuInn = 'RU_INN',
  RuKpp = 'RU_KPP',
  SaVat = 'SA_VAT',
  SgGst = 'SG_GST',
  SgUen = 'SG_UEN',
  SiTin = 'SI_TIN',
  ThVat = 'TH_VAT',
  TrTin = 'TR_TIN',
  TwVat = 'TW_VAT',
  UaVat = 'UA_VAT',
  UsEin = 'US_EIN',
  ZaVat = 'ZA_VAT'
}

export type StripeGetInvoicesUpcomingPeriodInvoiceItemsInput = {
  end: Scalars['Int'];
  start: Scalars['Int'];
};

export type StripeGetInvoicesUpcomingPriceDataInvoiceItemsInput = {
  currency: Scalars['String'];
  product: Scalars['String'];
  taxBehavior?: InputMaybe<StripeGetInvoicesUpcomingTaxBehaviorPriceDataInvoiceItems>;
  unitAmount?: InputMaybe<Scalars['Int']>;
  unitAmountDecimal?: InputMaybe<Scalars['String']>;
};

export type StripeGetInvoicesUpcomingPriceDataSubscriptionItemsInput = {
  currency: Scalars['String'];
  product: Scalars['String'];
  recurring: StripeGetInvoicesUpcomingRecurringPriceDataSubscriptionItemsInput;
  taxBehavior?: InputMaybe<StripeGetInvoicesUpcomingTaxBehaviorPriceDataSubscriptionItems>;
  unitAmount?: InputMaybe<Scalars['Int']>;
  unitAmountDecimal?: InputMaybe<Scalars['String']>;
};

export type StripeGetInvoicesUpcomingRecurringPriceDataSubscriptionItemsInput = {
  interval: StripeGetInvoicesUpcomingIntervalRecurringPriceDataSubscriptionItems;
  intervalCount?: InputMaybe<Scalars['Int']>;
};

export type StripeGetInvoicesUpcomingShippingCustomerDetailsInput = {
  address: StripeGetInvoicesUpcomingAddressShippingCustomerDetailsInput;
  name: Scalars['String'];
  phone?: InputMaybe<Scalars['String']>;
};

export type StripeGetInvoicesUpcomingSubscriptionItemsInput = {
  billingThresholds?: InputMaybe<StripeStringOrGetInvoicesUpcomingBillingThresholdsSubscriptionItemsUnionInput>;
  clearUsage?: InputMaybe<Scalars['Boolean']>;
  deleted?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  price?: InputMaybe<Scalars['String']>;
  priceData?: InputMaybe<StripeGetInvoicesUpcomingPriceDataSubscriptionItemsInput>;
  quantity?: InputMaybe<Scalars['Int']>;
  taxRates?: InputMaybe<Scalars['JSON']>;
};

export enum StripeGetInvoicesUpcomingSubscriptionProrationBehavior {
  AlwaysInvoice = 'ALWAYS_INVOICE',
  CreateProrations = 'CREATE_PRORATIONS',
  None = 'NONE'
}

export enum StripeGetInvoicesUpcomingSubscriptionResumeAt {
  Now = 'NOW'
}

export enum StripeGetInvoicesUpcomingSubscriptionTrialEnd {
  Now = 'NOW'
}

export enum StripeGetInvoicesUpcomingTaxBehaviorInvoiceItems {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE',
  Unspecified = 'UNSPECIFIED'
}

export enum StripeGetInvoicesUpcomingTaxBehaviorPriceDataInvoiceItems {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE',
  Unspecified = 'UNSPECIFIED'
}

export enum StripeGetInvoicesUpcomingTaxBehaviorPriceDataSubscriptionItems {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE',
  Unspecified = 'UNSPECIFIED'
}

export type StripeGetInvoicesUpcomingTaxCustomerDetailsInput = {
  ipAddress?: InputMaybe<Scalars['JSON']>;
};

export type StripeGetInvoicesUpcomingTaxIdsCustomerDetailsInput = {
  type: StripeGetInvoicesUpcomingTypeTaxIdsCustomerDetails;
  value: Scalars['String'];
};

export enum StripeGetInvoicesUpcomingTypeTaxIdsCustomerDetails {
  AeTrn = 'AE_TRN',
  AuAbn = 'AU_ABN',
  AuArn = 'AU_ARN',
  BgUic = 'BG_UIC',
  BrCnpj = 'BR_CNPJ',
  BrCpf = 'BR_CPF',
  CaBn = 'CA_BN',
  CaGstHst = 'CA_GST_HST',
  CaPstBc = 'CA_PST_BC',
  CaPstMb = 'CA_PST_MB',
  CaPstSk = 'CA_PST_SK',
  CaQst = 'CA_QST',
  ChVat = 'CH_VAT',
  ClTin = 'CL_TIN',
  EgTin = 'EG_TIN',
  EsCif = 'ES_CIF',
  EuOssVat = 'EU_OSS_VAT',
  EuVat = 'EU_VAT',
  GbVat = 'GB_VAT',
  GeVat = 'GE_VAT',
  HkBr = 'HK_BR',
  HuTin = 'HU_TIN',
  IdNpwp = 'ID_NPWP',
  IlVat = 'IL_VAT',
  InGst = 'IN_GST',
  IsVat = 'IS_VAT',
  JpCn = 'JP_CN',
  JpRn = 'JP_RN',
  JpTrn = 'JP_TRN',
  KePin = 'KE_PIN',
  KrBrn = 'KR_BRN',
  LiUid = 'LI_UID',
  MxRfc = 'MX_RFC',
  MyFrp = 'MY_FRP',
  MyItn = 'MY_ITN',
  MySst = 'MY_SST',
  NoVat = 'NO_VAT',
  NzGst = 'NZ_GST',
  PhTin = 'PH_TIN',
  RuInn = 'RU_INN',
  RuKpp = 'RU_KPP',
  SaVat = 'SA_VAT',
  SgGst = 'SG_GST',
  SgUen = 'SG_UEN',
  SiTin = 'SI_TIN',
  ThVat = 'TH_VAT',
  TrTin = 'TR_TIN',
  TwVat = 'TW_VAT',
  UaVat = 'UA_VAT',
  UsEin = 'US_EIN',
  ZaVat = 'ZA_VAT'
}

export type StripeGetIssuingAuthorizations = {
  __typename?: 'StripeGetIssuingAuthorizations';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeIssuingAuthorization>;
  object: StripeGetIssuingAuthorizationsObject;
  url: Scalars['String'];
};

export type StripeGetIssuingAuthorizationsCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetIssuingAuthorizationsObject {
  List = 'LIST'
}

export enum StripeGetIssuingAuthorizationsStatus {
  Closed = 'CLOSED',
  Pending = 'PENDING',
  Reversed = 'REVERSED'
}

export type StripeGetIssuingCardholders = {
  __typename?: 'StripeGetIssuingCardholders';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeIssuingCardholder>;
  object: StripeGetIssuingCardholdersObject;
  url: Scalars['String'];
};

export type StripeGetIssuingCardholdersCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetIssuingCardholdersObject {
  List = 'LIST'
}

export enum StripeGetIssuingCardholdersStatus {
  Active = 'ACTIVE',
  Blocked = 'BLOCKED',
  Inactive = 'INACTIVE'
}

export enum StripeGetIssuingCardholdersType {
  Company = 'COMPANY',
  Individual = 'INDIVIDUAL'
}

export type StripeGetIssuingCards = {
  __typename?: 'StripeGetIssuingCards';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeIssuingCard>;
  object: StripeGetIssuingCardsObject;
  url: Scalars['String'];
};

export type StripeGetIssuingCardsCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetIssuingCardsObject {
  List = 'LIST'
}

export enum StripeGetIssuingCardsStatus {
  Active = 'ACTIVE',
  Canceled = 'CANCELED',
  Inactive = 'INACTIVE'
}

export enum StripeGetIssuingCardsType {
  Physical = 'PHYSICAL',
  Virtual = 'VIRTUAL'
}

export type StripeGetIssuingDisputes = {
  __typename?: 'StripeGetIssuingDisputes';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeIssuingDispute>;
  object: StripeGetIssuingDisputesObject;
  url: Scalars['String'];
};

export type StripeGetIssuingDisputesCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetIssuingDisputesObject {
  List = 'LIST'
}

export enum StripeGetIssuingDisputesStatus {
  Expired = 'EXPIRED',
  Lost = 'LOST',
  Submitted = 'SUBMITTED',
  Unsubmitted = 'UNSUBMITTED',
  Won = 'WON'
}

export type StripeGetIssuingSettlements = {
  __typename?: 'StripeGetIssuingSettlements';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeIssuingSettlement>;
  object: StripeGetIssuingSettlementsObject;
  url: Scalars['String'];
};

export type StripeGetIssuingSettlementsCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetIssuingSettlementsObject {
  List = 'LIST'
}

export type StripeGetIssuingTransactions = {
  __typename?: 'StripeGetIssuingTransactions';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeIssuingTransaction>;
  object: StripeGetIssuingTransactionsObject;
  url: Scalars['String'];
};

export type StripeGetIssuingTransactionsCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetIssuingTransactionsObject {
  List = 'LIST'
}

export enum StripeGetIssuingTransactionsType {
  Capture = 'CAPTURE',
  Refund = 'REFUND'
}

export type StripeGetLinkedAccounts = {
  __typename?: 'StripeGetLinkedAccounts';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeFinancialConnectionsAccount>;
  object: StripeGetLinkedAccountsObject;
  url: Scalars['String'];
};

export type StripeGetLinkedAccountsAccountHolderInput = {
  account?: InputMaybe<Scalars['String']>;
  customer?: InputMaybe<Scalars['String']>;
};

export type StripeGetLinkedAccountsAccountOwners = {
  __typename?: 'StripeGetLinkedAccountsAccountOwners';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeFinancialConnectionsAccountOwner>;
  object: StripeGetLinkedAccountsAccountOwnersObject;
  url: Scalars['String'];
};

export enum StripeGetLinkedAccountsAccountOwnersObject {
  List = 'LIST'
}

export enum StripeGetLinkedAccountsObject {
  List = 'LIST'
}

export type StripeGetPaymentIntents = {
  __typename?: 'StripeGetPaymentIntents';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripePaymentIntent>;
  object: StripeGetPaymentIntentsObject;
  url: Scalars['String'];
};

export type StripeGetPaymentIntentsCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetPaymentIntentsObject {
  List = 'LIST'
}

export type StripeGetPaymentIntentsSearch = {
  __typename?: 'StripeGetPaymentIntentsSearch';
  hasMore: Scalars['Boolean'];
  nextPage?: Maybe<Scalars['String']>;
  nodes: Array<StripePaymentIntent>;
  object: StripeGetPaymentIntentsSearchObject;
  totalCount?: Maybe<Scalars['Int']>;
  url: Scalars['String'];
};

export enum StripeGetPaymentIntentsSearchObject {
  SearchResult = 'SEARCH_RESULT'
}

export type StripeGetPaymentLinks = {
  __typename?: 'StripeGetPaymentLinks';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripePaymentLink>;
  object: StripeGetPaymentLinksObject;
  url: Scalars['String'];
};

export enum StripeGetPaymentLinksObject {
  List = 'LIST'
}

export type StripeGetPaymentLinksPaymentLinkLineItems = {
  __typename?: 'StripeGetPaymentLinksPaymentLinkLineItems';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeItem>;
  object: StripeGetPaymentLinksPaymentLinkLineItemsObject;
  url: Scalars['String'];
};

export enum StripeGetPaymentLinksPaymentLinkLineItemsObject {
  List = 'LIST'
}

export type StripeGetPaymentMethods = {
  __typename?: 'StripeGetPaymentMethods';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripePaymentMethod>;
  object: StripeGetPaymentMethodsObject;
  url: Scalars['String'];
};

export enum StripeGetPaymentMethodsObject {
  List = 'LIST'
}

export enum StripeGetPaymentMethodsType {
  AcssDebit = 'ACSS_DEBIT',
  Affirm = 'AFFIRM',
  AfterpayClearpay = 'AFTERPAY_CLEARPAY',
  Alipay = 'ALIPAY',
  AuBecsDebit = 'AU_BECS_DEBIT',
  BacsDebit = 'BACS_DEBIT',
  Bancontact = 'BANCONTACT',
  Blik = 'BLIK',
  Boleto = 'BOLETO',
  Card = 'CARD',
  Cashapp = 'CASHAPP',
  CustomerBalance = 'CUSTOMER_BALANCE',
  Eps = 'EPS',
  Fpx = 'FPX',
  Giropay = 'GIROPAY',
  Grabpay = 'GRABPAY',
  Ideal = 'IDEAL',
  Klarna = 'KLARNA',
  Konbini = 'KONBINI',
  Link = 'LINK',
  Oxxo = 'OXXO',
  Paynow = 'PAYNOW',
  Paypal = 'PAYPAL',
  Pix = 'PIX',
  Promptpay = 'PROMPTPAY',
  P_24 = 'P_24',
  SepaDebit = 'SEPA_DEBIT',
  Sofort = 'SOFORT',
  UsBankAccount = 'US_BANK_ACCOUNT',
  WechatPay = 'WECHAT_PAY'
}

export type StripeGetPayouts = {
  __typename?: 'StripeGetPayouts';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripePayout>;
  object: StripeGetPayoutsObject;
  url: Scalars['String'];
};

export type StripeGetPayoutsArrivalDateInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export type StripeGetPayoutsCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetPayoutsObject {
  List = 'LIST'
}

export type StripeGetPlans = {
  __typename?: 'StripeGetPlans';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripePlan>;
  object: StripeGetPlansObject;
  url: Scalars['String'];
};

export type StripeGetPlansCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetPlansObject {
  List = 'LIST'
}

export type StripeGetPrices = {
  __typename?: 'StripeGetPrices';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripePrice>;
  object: StripeGetPricesObject;
  url: Scalars['String'];
};

export type StripeGetPricesCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetPricesIntervalRecurring {
  Day = 'DAY',
  Month = 'MONTH',
  Week = 'WEEK',
  Year = 'YEAR'
}

export enum StripeGetPricesObject {
  List = 'LIST'
}

export type StripeGetPricesRecurringInput = {
  interval?: InputMaybe<StripeGetPricesIntervalRecurring>;
  usageType?: InputMaybe<StripeGetPricesUsageTypeRecurring>;
};

export type StripeGetPricesSearch = {
  __typename?: 'StripeGetPricesSearch';
  hasMore: Scalars['Boolean'];
  nextPage?: Maybe<Scalars['String']>;
  nodes: Array<StripePrice>;
  object: StripeGetPricesSearchObject;
  totalCount?: Maybe<Scalars['Int']>;
  url: Scalars['String'];
};

export enum StripeGetPricesSearchObject {
  SearchResult = 'SEARCH_RESULT'
}

export enum StripeGetPricesType {
  OneTime = 'ONE_TIME',
  Recurring = 'RECURRING'
}

export enum StripeGetPricesUsageTypeRecurring {
  Licensed = 'LICENSED',
  Metered = 'METERED'
}

export type StripeGetProducts = {
  __typename?: 'StripeGetProducts';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeProduct>;
  object: StripeGetProductsObject;
  url: Scalars['String'];
};

export type StripeGetProductsCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetProductsObject {
  List = 'LIST'
}

export type StripeGetProductsSearch = {
  __typename?: 'StripeGetProductsSearch';
  hasMore: Scalars['Boolean'];
  nextPage?: Maybe<Scalars['String']>;
  nodes: Array<StripeProduct>;
  object: StripeGetProductsSearchObject;
  totalCount?: Maybe<Scalars['Int']>;
  url: Scalars['String'];
};

export enum StripeGetProductsSearchObject {
  SearchResult = 'SEARCH_RESULT'
}

export type StripeGetPromotionCodes = {
  __typename?: 'StripeGetPromotionCodes';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripePromotionCode>;
  object: StripeGetPromotionCodesObject;
  url: Scalars['String'];
};

export type StripeGetPromotionCodesCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetPromotionCodesObject {
  List = 'LIST'
}

export type StripeGetQuotes = {
  __typename?: 'StripeGetQuotes';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeQuote>;
  object: StripeGetQuotesObject;
  url: Scalars['String'];
};

export enum StripeGetQuotesObject {
  List = 'LIST'
}

export type StripeGetQuotesQuoteComputedUpfrontLineItems = {
  __typename?: 'StripeGetQuotesQuoteComputedUpfrontLineItems';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeItem>;
  object: StripeGetQuotesQuoteComputedUpfrontLineItemsObject;
  url: Scalars['String'];
};

export enum StripeGetQuotesQuoteComputedUpfrontLineItemsObject {
  List = 'LIST'
}

export type StripeGetQuotesQuoteLineItems = {
  __typename?: 'StripeGetQuotesQuoteLineItems';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeItem>;
  object: StripeGetQuotesQuoteLineItemsObject;
  url: Scalars['String'];
};

export enum StripeGetQuotesQuoteLineItemsObject {
  List = 'LIST'
}

export enum StripeGetQuotesStatus {
  Accepted = 'ACCEPTED',
  Canceled = 'CANCELED',
  Draft = 'DRAFT',
  Open = 'OPEN'
}

export type StripeGetRadarEarlyFraudWarnings = {
  __typename?: 'StripeGetRadarEarlyFraudWarnings';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeRadarEarlyFraudWarning>;
  object: StripeGetRadarEarlyFraudWarningsObject;
  url: Scalars['String'];
};

export enum StripeGetRadarEarlyFraudWarningsObject {
  List = 'LIST'
}

export type StripeGetRadarValueListItems = {
  __typename?: 'StripeGetRadarValueListItems';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeRadarValueListItem>;
  object: StripeGetRadarValueListItemsObject;
  url: Scalars['String'];
};

export type StripeGetRadarValueListItemsCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetRadarValueListItemsObject {
  List = 'LIST'
}

export type StripeGetRadarValueLists = {
  __typename?: 'StripeGetRadarValueLists';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeRadarValueList>;
  object: StripeGetRadarValueListsObject;
  url: Scalars['String'];
};

export type StripeGetRadarValueListsCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetRadarValueListsObject {
  List = 'LIST'
}

export type StripeGetRefunds = {
  __typename?: 'StripeGetRefunds';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeRefund>;
  object: StripeGetRefundsObject;
  url: Scalars['String'];
};

export type StripeGetRefundsCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetRefundsObject {
  List = 'LIST'
}

export type StripeGetReportingReportRuns = {
  __typename?: 'StripeGetReportingReportRuns';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeReportingReportRun>;
  object: StripeGetReportingReportRunsObject;
  url: Scalars['String'];
};

export type StripeGetReportingReportRunsCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetReportingReportRunsObject {
  List = 'LIST'
}

export type StripeGetReportingReportTypes = {
  __typename?: 'StripeGetReportingReportTypes';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeReportingReportType>;
  object: StripeGetReportingReportTypesObject;
  url: Scalars['String'];
};

export enum StripeGetReportingReportTypesObject {
  List = 'LIST'
}

export type StripeGetReviews = {
  __typename?: 'StripeGetReviews';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeReview>;
  object: StripeGetReviewsObject;
  url: Scalars['String'];
};

export type StripeGetReviewsCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetReviewsObject {
  List = 'LIST'
}

export type StripeGetSetupAttempts = {
  __typename?: 'StripeGetSetupAttempts';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeSetupAttempt>;
  object: StripeGetSetupAttemptsObject;
  url: Scalars['String'];
};

export type StripeGetSetupAttemptsCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetSetupAttemptsObject {
  List = 'LIST'
}

export type StripeGetSetupIntents = {
  __typename?: 'StripeGetSetupIntents';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeSetupIntent>;
  object: StripeGetSetupIntentsObject;
  url: Scalars['String'];
};

export type StripeGetSetupIntentsCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetSetupIntentsObject {
  List = 'LIST'
}

export type StripeGetShippingRates = {
  __typename?: 'StripeGetShippingRates';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeShippingRate>;
  object: StripeGetShippingRatesObject;
  url: Scalars['String'];
};

export type StripeGetShippingRatesCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetShippingRatesObject {
  List = 'LIST'
}

export type StripeGetSigmaScheduledQueryRuns = {
  __typename?: 'StripeGetSigmaScheduledQueryRuns';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeScheduledQueryRun>;
  object: StripeGetSigmaScheduledQueryRunsObject;
  url: Scalars['String'];
};

export enum StripeGetSigmaScheduledQueryRunsObject {
  List = 'LIST'
}

export type StripeGetSourcesSourceSourceTransactions = {
  __typename?: 'StripeGetSourcesSourceSourceTransactions';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeSourceTransaction>;
  object: StripeGetSourcesSourceSourceTransactionsObject;
  url: Scalars['String'];
};

export enum StripeGetSourcesSourceSourceTransactionsObject {
  List = 'LIST'
}

export type StripeGetSubscriptionItems = {
  __typename?: 'StripeGetSubscriptionItems';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeSubscriptionItem>;
  object: StripeGetSubscriptionItemsObject;
  url: Scalars['String'];
};

export enum StripeGetSubscriptionItemsObject {
  List = 'LIST'
}

export type StripeGetSubscriptionItemsSubscriptionItemUsageRecordSummaries = {
  __typename?: 'StripeGetSubscriptionItemsSubscriptionItemUsageRecordSummaries';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeUsageRecordSummary>;
  object: StripeGetSubscriptionItemsSubscriptionItemUsageRecordSummariesObject;
  url: Scalars['String'];
};

export enum StripeGetSubscriptionItemsSubscriptionItemUsageRecordSummariesObject {
  List = 'LIST'
}

export type StripeGetSubscriptionSchedules = {
  __typename?: 'StripeGetSubscriptionSchedules';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeSubscriptionSchedule>;
  object: StripeGetSubscriptionSchedulesObject;
  url: Scalars['String'];
};

export type StripeGetSubscriptionSchedulesCanceledAtInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export type StripeGetSubscriptionSchedulesCompletedAtInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export type StripeGetSubscriptionSchedulesCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetSubscriptionSchedulesObject {
  List = 'LIST'
}

export type StripeGetSubscriptionSchedulesReleasedAtInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export type StripeGetSubscriptions = {
  __typename?: 'StripeGetSubscriptions';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeSubscription>;
  object: StripeGetSubscriptionsObject;
  url: Scalars['String'];
};

export enum StripeGetSubscriptionsCollectionMethod {
  ChargeAutomatically = 'CHARGE_AUTOMATICALLY',
  SendInvoice = 'SEND_INVOICE'
}

export type StripeGetSubscriptionsCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export type StripeGetSubscriptionsCurrentPeriodEndInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export type StripeGetSubscriptionsCurrentPeriodStartInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetSubscriptionsObject {
  List = 'LIST'
}

export type StripeGetSubscriptionsSearch = {
  __typename?: 'StripeGetSubscriptionsSearch';
  hasMore: Scalars['Boolean'];
  nextPage?: Maybe<Scalars['String']>;
  nodes: Array<StripeSubscription>;
  object: StripeGetSubscriptionsSearchObject;
  totalCount?: Maybe<Scalars['Int']>;
  url: Scalars['String'];
};

export enum StripeGetSubscriptionsSearchObject {
  SearchResult = 'SEARCH_RESULT'
}

export enum StripeGetSubscriptionsStatus {
  Active = 'ACTIVE',
  All = 'ALL',
  Canceled = 'CANCELED',
  Ended = 'ENDED',
  Incomplete = 'INCOMPLETE',
  IncompleteExpired = 'INCOMPLETE_EXPIRED',
  PastDue = 'PAST_DUE',
  Paused = 'PAUSED',
  Trialing = 'TRIALING',
  Unpaid = 'UNPAID'
}

export type StripeGetTaxCalculationsCalculationLineItems = {
  __typename?: 'StripeGetTaxCalculationsCalculationLineItems';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeTaxCalculationLineItem>;
  object: StripeGetTaxCalculationsCalculationLineItemsObject;
  url: Scalars['String'];
};

export enum StripeGetTaxCalculationsCalculationLineItemsObject {
  List = 'LIST'
}

export type StripeGetTaxCodes = {
  __typename?: 'StripeGetTaxCodes';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeTaxCode>;
  object: StripeGetTaxCodesObject;
  url: Scalars['String'];
};

export enum StripeGetTaxCodesObject {
  List = 'LIST'
}

export type StripeGetTaxRates = {
  __typename?: 'StripeGetTaxRates';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeTaxRate>;
  object: StripeGetTaxRatesObject;
  url: Scalars['String'];
};

export type StripeGetTaxRatesCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetTaxRatesObject {
  List = 'LIST'
}

export type StripeGetTaxTransactionsTransactionLineItems = {
  __typename?: 'StripeGetTaxTransactionsTransactionLineItems';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeTaxTransactionLineItem>;
  object: StripeGetTaxTransactionsTransactionLineItemsObject;
  url: Scalars['String'];
};

export enum StripeGetTaxTransactionsTransactionLineItemsObject {
  List = 'LIST'
}

export type StripeGetTerminalConfigurations = {
  __typename?: 'StripeGetTerminalConfigurations';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeTerminalConfiguration>;
  object: StripeGetTerminalConfigurationsObject;
  url: Scalars['String'];
};

export enum StripeGetTerminalConfigurationsObject {
  List = 'LIST'
}

export type StripeGetTerminalLocations = {
  __typename?: 'StripeGetTerminalLocations';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeTerminalLocation>;
  object: StripeGetTerminalLocationsObject;
  url: Scalars['String'];
};

export enum StripeGetTerminalLocationsObject {
  List = 'LIST'
}

export type StripeGetTerminalReaders = {
  __typename?: 'StripeGetTerminalReaders';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeTerminalReader>;
  object: StripeGetTerminalReadersObject;
  url: Scalars['String'];
};

export enum StripeGetTerminalReadersDeviceType {
  BbposChipper_2X = 'BBPOS_CHIPPER_2X',
  BbposWisepad_3 = 'BBPOS_WISEPAD_3',
  BbposWiseposE = 'BBPOS_WISEPOS_E',
  SimulatedWiseposE = 'SIMULATED_WISEPOS_E',
  StripeM_2 = 'STRIPE_M_2',
  VerifoneP400 = 'VERIFONE_P400'
}

export enum StripeGetTerminalReadersObject {
  List = 'LIST'
}

export enum StripeGetTerminalReadersStatus {
  Offline = 'OFFLINE',
  Online = 'ONLINE'
}

export type StripeGetTestHelpersTestClocks = {
  __typename?: 'StripeGetTestHelpersTestClocks';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeTestHelpersTestClock>;
  object: StripeGetTestHelpersTestClocksObject;
  url: Scalars['String'];
};

export enum StripeGetTestHelpersTestClocksObject {
  List = 'LIST'
}

export type StripeGetTopups = {
  __typename?: 'StripeGetTopups';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeTopup>;
  object: StripeGetTopupsObject;
  url: Scalars['String'];
};

export type StripeGetTopupsAmountInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export type StripeGetTopupsCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetTopupsObject {
  List = 'LIST'
}

export enum StripeGetTopupsStatus {
  Canceled = 'CANCELED',
  Failed = 'FAILED',
  Pending = 'PENDING',
  Succeeded = 'SUCCEEDED'
}

export type StripeGetTransfers = {
  __typename?: 'StripeGetTransfers';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeTransfer>;
  object: StripeGetTransfersObject;
  url: Scalars['String'];
};

export type StripeGetTransfersCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export type StripeGetTransfersIdReversals = {
  __typename?: 'StripeGetTransfersIdReversals';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeTransferReversal>;
  object: StripeGetTransfersIdReversalsObject;
  url: Scalars['String'];
};

export enum StripeGetTransfersIdReversalsObject {
  List = 'LIST'
}

export enum StripeGetTransfersObject {
  List = 'LIST'
}

export type StripeGetTreasuryCreditReversals = {
  __typename?: 'StripeGetTreasuryCreditReversals';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeTreasuryCreditReversal>;
  object: StripeGetTreasuryCreditReversalsObject;
  url: Scalars['String'];
};

export enum StripeGetTreasuryCreditReversalsObject {
  List = 'LIST'
}

export enum StripeGetTreasuryCreditReversalsStatus {
  Canceled = 'CANCELED',
  Posted = 'POSTED',
  Processing = 'PROCESSING'
}

export type StripeGetTreasuryDebitReversals = {
  __typename?: 'StripeGetTreasuryDebitReversals';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeTreasuryDebitReversal>;
  object: StripeGetTreasuryDebitReversalsObject;
  url: Scalars['String'];
};

export enum StripeGetTreasuryDebitReversalsObject {
  List = 'LIST'
}

export enum StripeGetTreasuryDebitReversalsResolution {
  Lost = 'LOST',
  Won = 'WON'
}

export enum StripeGetTreasuryDebitReversalsStatus {
  Canceled = 'CANCELED',
  Completed = 'COMPLETED',
  Processing = 'PROCESSING'
}

export type StripeGetTreasuryFinancialAccounts = {
  __typename?: 'StripeGetTreasuryFinancialAccounts';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeTreasuryFinancialAccount>;
  object: StripeGetTreasuryFinancialAccountsObject;
  url: Scalars['String'];
};

export type StripeGetTreasuryFinancialAccountsCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetTreasuryFinancialAccountsObject {
  List = 'LIST'
}

export type StripeGetTreasuryInboundTransfers = {
  __typename?: 'StripeGetTreasuryInboundTransfers';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeTreasuryInboundTransfer>;
  object: StripeGetTreasuryInboundTransfersObject;
  url: Scalars['String'];
};

export enum StripeGetTreasuryInboundTransfersObject {
  List = 'LIST'
}

export enum StripeGetTreasuryInboundTransfersStatus {
  Canceled = 'CANCELED',
  Failed = 'FAILED',
  Processing = 'PROCESSING',
  Succeeded = 'SUCCEEDED'
}

export type StripeGetTreasuryOutboundPayments = {
  __typename?: 'StripeGetTreasuryOutboundPayments';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeTreasuryOutboundPayment>;
  object: StripeGetTreasuryOutboundPaymentsObject;
  url: Scalars['String'];
};

export enum StripeGetTreasuryOutboundPaymentsObject {
  List = 'LIST'
}

export enum StripeGetTreasuryOutboundPaymentsStatus {
  Canceled = 'CANCELED',
  Failed = 'FAILED',
  Posted = 'POSTED',
  Processing = 'PROCESSING',
  Returned = 'RETURNED'
}

export type StripeGetTreasuryOutboundTransfers = {
  __typename?: 'StripeGetTreasuryOutboundTransfers';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeTreasuryOutboundTransfer>;
  object: StripeGetTreasuryOutboundTransfersObject;
  url: Scalars['String'];
};

export enum StripeGetTreasuryOutboundTransfersObject {
  List = 'LIST'
}

export enum StripeGetTreasuryOutboundTransfersStatus {
  Canceled = 'CANCELED',
  Failed = 'FAILED',
  Posted = 'POSTED',
  Processing = 'PROCESSING',
  Returned = 'RETURNED'
}

export type StripeGetTreasuryReceivedCredits = {
  __typename?: 'StripeGetTreasuryReceivedCredits';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeTreasuryReceivedCredit>;
  object: StripeGetTreasuryReceivedCreditsObject;
  url: Scalars['String'];
};

export type StripeGetTreasuryReceivedCreditsLinkedFlowsInput = {
  sourceFlowType: StripeGetTreasuryReceivedCreditsSourceFlowTypeLinkedFlows;
};

export enum StripeGetTreasuryReceivedCreditsObject {
  List = 'LIST'
}

export enum StripeGetTreasuryReceivedCreditsSourceFlowTypeLinkedFlows {
  CreditReversal = 'CREDIT_REVERSAL',
  Other = 'OTHER',
  OutboundPayment = 'OUTBOUND_PAYMENT',
  Payout = 'PAYOUT'
}

export enum StripeGetTreasuryReceivedCreditsStatus {
  Failed = 'FAILED',
  Succeeded = 'SUCCEEDED'
}

export type StripeGetTreasuryReceivedDebits = {
  __typename?: 'StripeGetTreasuryReceivedDebits';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeTreasuryReceivedDebit>;
  object: StripeGetTreasuryReceivedDebitsObject;
  url: Scalars['String'];
};

export enum StripeGetTreasuryReceivedDebitsObject {
  List = 'LIST'
}

export enum StripeGetTreasuryReceivedDebitsStatus {
  Failed = 'FAILED',
  Succeeded = 'SUCCEEDED'
}

export type StripeGetTreasuryTransactionEntries = {
  __typename?: 'StripeGetTreasuryTransactionEntries';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeTreasuryTransactionEntry>;
  object: StripeGetTreasuryTransactionEntriesObject;
  url: Scalars['String'];
};

export type StripeGetTreasuryTransactionEntriesCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export type StripeGetTreasuryTransactionEntriesEffectiveAtInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetTreasuryTransactionEntriesObject {
  List = 'LIST'
}

export enum StripeGetTreasuryTransactionEntriesOrderBy {
  Created = 'CREATED',
  EffectiveAt = 'EFFECTIVE_AT'
}

export type StripeGetTreasuryTransactions = {
  __typename?: 'StripeGetTreasuryTransactions';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeTreasuryTransaction>;
  object: StripeGetTreasuryTransactionsObject;
  url: Scalars['String'];
};

export type StripeGetTreasuryTransactionsCreatedInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetTreasuryTransactionsObject {
  List = 'LIST'
}

export enum StripeGetTreasuryTransactionsOrderBy {
  Created = 'CREATED',
  PostedAt = 'POSTED_AT'
}

export type StripeGetTreasuryTransactionsPostedAtStatusTransitionsInput = {
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
};

export enum StripeGetTreasuryTransactionsStatus {
  Open = 'OPEN',
  Posted = 'POSTED',
  Void = 'VOID'
}

export type StripeGetTreasuryTransactionsStatusTransitionsInput = {
  postedAt?: InputMaybe<StripeIntOrGetTreasuryTransactionsPostedAtStatusTransitionsUnionInput>;
};

export type StripeGetWebhookEndpoints = {
  __typename?: 'StripeGetWebhookEndpoints';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeWebhookEndpoint>;
  object: StripeGetWebhookEndpointsObject;
  url: Scalars['String'];
};

export enum StripeGetWebhookEndpointsObject {
  List = 'LIST'
}

export type StripeIdentityVerificationReport = {
  __typename?: 'StripeIdentityVerificationReport';
  created: Scalars['Int'];
  document?: Maybe<StripeGelatoDocumentReport>;
  id: Scalars['String'];
  idNumber?: Maybe<StripeGelatoIdNumberReport>;
  livemode: Scalars['Boolean'];
  object: StripeIdentityVerificationReportObject;
  options?: Maybe<StripeGelatoVerificationReportOptions>;
  selfie?: Maybe<StripeGelatoSelfieReport>;
  type?: Maybe<StripeIdentityVerificationReportType>;
  verificationSession?: Maybe<Scalars['String']>;
};

export enum StripeIdentityVerificationReportObject {
  IdentityVerificationReport = 'IDENTITY_VERIFICATION_REPORT'
}

export enum StripeIdentityVerificationReportType {
  Document = 'DOCUMENT',
  IdNumber = 'ID_NUMBER'
}

export type StripeIdentityVerificationSession = {
  __typename?: 'StripeIdentityVerificationSession';
  clientSecret?: Maybe<Scalars['String']>;
  created: Scalars['Int'];
  id: Scalars['String'];
  lastError?: Maybe<StripeGelatoSessionLastError>;
  lastVerificationReport?: Maybe<StripeStringOrIdentityVerificationReportUnion>;
  livemode: Scalars['Boolean'];
  metadata: Scalars['JSON'];
  object: StripeIdentityVerificationSessionObject;
  options?: Maybe<StripeGelatoVerificationSessionOptions>;
  redaction?: Maybe<StripeVerificationSessionRedaction>;
  status: StripeIdentityVerificationSessionStatus;
  type?: Maybe<StripeIdentityVerificationSessionType>;
  url?: Maybe<Scalars['String']>;
  verifiedOutputs?: Maybe<StripeGelatoVerifiedOutputs>;
};

export enum StripeIdentityVerificationSessionObject {
  IdentityVerificationSession = 'IDENTITY_VERIFICATION_SESSION'
}

export enum StripeIdentityVerificationSessionStatus {
  Canceled = 'CANCELED',
  Processing = 'PROCESSING',
  RequiresInput = 'REQUIRES_INPUT',
  Verified = 'VERIFIED'
}

export enum StripeIdentityVerificationSessionType {
  Document = 'DOCUMENT',
  IdNumber = 'ID_NUMBER'
}

export type StripeInboundTransfers = {
  __typename?: 'StripeInboundTransfers';
  billingDetails: StripeTreasurySharedResourceBillingDetails;
  type: StripeInboundTransfersType;
  usBankAccount?: Maybe<StripeInboundTransfersPaymentMethodDetailsUsBankAccount>;
};

export type StripeInboundTransfersPaymentMethodDetailsUsBankAccount = {
  __typename?: 'StripeInboundTransfersPaymentMethodDetailsUsBankAccount';
  accountHolderType?: Maybe<StripeInboundTransfersPaymentMethodDetailsUsBankAccountAccountHolderType>;
  accountType?: Maybe<StripeInboundTransfersPaymentMethodDetailsUsBankAccountAccountType>;
  bankName?: Maybe<Scalars['String']>;
  fingerprint?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  network: StripeInboundTransfersPaymentMethodDetailsUsBankAccountNetwork;
  routingNumber?: Maybe<Scalars['String']>;
};

export enum StripeInboundTransfersPaymentMethodDetailsUsBankAccountAccountHolderType {
  Company = 'COMPANY',
  Individual = 'INDIVIDUAL'
}

export enum StripeInboundTransfersPaymentMethodDetailsUsBankAccountAccountType {
  Checking = 'CHECKING',
  Savings = 'SAVINGS'
}

export enum StripeInboundTransfersPaymentMethodDetailsUsBankAccountNetwork {
  Ach = 'ACH'
}

export enum StripeInboundTransfersType {
  UsBankAccount = 'US_BANK_ACCOUNT'
}

export type StripeIntOrGetAccountsCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetAccountsCreatedInput?: InputMaybe<StripeGetAccountsCreatedInput>;
};

export type StripeIntOrGetApplicationFeesCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetApplicationFeesCreatedInput?: InputMaybe<StripeGetApplicationFeesCreatedInput>;
};

export type StripeIntOrGetBalanceHistoryCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetBalanceHistoryCreatedInput?: InputMaybe<StripeGetBalanceHistoryCreatedInput>;
};

export type StripeIntOrGetBalanceTransactionsCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetBalanceTransactionsCreatedInput?: InputMaybe<StripeGetBalanceTransactionsCreatedInput>;
};

export type StripeIntOrGetChargesCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetChargesCreatedInput?: InputMaybe<StripeGetChargesCreatedInput>;
};

export type StripeIntOrGetCouponsCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetCouponsCreatedInput?: InputMaybe<StripeGetCouponsCreatedInput>;
};

export type StripeIntOrGetCustomersCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetCustomersCreatedInput?: InputMaybe<StripeGetCustomersCreatedInput>;
};

export type StripeIntOrGetDisputesCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetDisputesCreatedInput?: InputMaybe<StripeGetDisputesCreatedInput>;
};

export type StripeIntOrGetEventsCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetEventsCreatedInput?: InputMaybe<StripeGetEventsCreatedInput>;
};

export type StripeIntOrGetFileLinksCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetFileLinksCreatedInput?: InputMaybe<StripeGetFileLinksCreatedInput>;
};

export type StripeIntOrGetFilesCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetFilesCreatedInput?: InputMaybe<StripeGetFilesCreatedInput>;
};

export type StripeIntOrGetIdentityVerificationReportsCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetIdentityVerificationReportsCreatedInput?: InputMaybe<StripeGetIdentityVerificationReportsCreatedInput>;
};

export type StripeIntOrGetIdentityVerificationSessionsCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetIdentityVerificationSessionsCreatedInput?: InputMaybe<StripeGetIdentityVerificationSessionsCreatedInput>;
};

export type StripeIntOrGetInvoiceitemsCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetInvoiceitemsCreatedInput?: InputMaybe<StripeGetInvoiceitemsCreatedInput>;
};

export type StripeIntOrGetInvoicesCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetInvoicesCreatedInput?: InputMaybe<StripeGetInvoicesCreatedInput>;
};

export type StripeIntOrGetInvoicesDueDateUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetInvoicesDueDateInput?: InputMaybe<StripeGetInvoicesDueDateInput>;
};

export type StripeIntOrGetIssuingAuthorizationsCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetIssuingAuthorizationsCreatedInput?: InputMaybe<StripeGetIssuingAuthorizationsCreatedInput>;
};

export type StripeIntOrGetIssuingCardholdersCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetIssuingCardholdersCreatedInput?: InputMaybe<StripeGetIssuingCardholdersCreatedInput>;
};

export type StripeIntOrGetIssuingCardsCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetIssuingCardsCreatedInput?: InputMaybe<StripeGetIssuingCardsCreatedInput>;
};

export type StripeIntOrGetIssuingDisputesCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetIssuingDisputesCreatedInput?: InputMaybe<StripeGetIssuingDisputesCreatedInput>;
};

export type StripeIntOrGetIssuingSettlementsCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetIssuingSettlementsCreatedInput?: InputMaybe<StripeGetIssuingSettlementsCreatedInput>;
};

export type StripeIntOrGetIssuingTransactionsCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetIssuingTransactionsCreatedInput?: InputMaybe<StripeGetIssuingTransactionsCreatedInput>;
};

export type StripeIntOrGetPaymentIntentsCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetPaymentIntentsCreatedInput?: InputMaybe<StripeGetPaymentIntentsCreatedInput>;
};

export type StripeIntOrGetPayoutsArrivalDateUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetPayoutsArrivalDateInput?: InputMaybe<StripeGetPayoutsArrivalDateInput>;
};

export type StripeIntOrGetPayoutsCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetPayoutsCreatedInput?: InputMaybe<StripeGetPayoutsCreatedInput>;
};

export type StripeIntOrGetPlansCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetPlansCreatedInput?: InputMaybe<StripeGetPlansCreatedInput>;
};

export type StripeIntOrGetPricesCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetPricesCreatedInput?: InputMaybe<StripeGetPricesCreatedInput>;
};

export type StripeIntOrGetProductsCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetProductsCreatedInput?: InputMaybe<StripeGetProductsCreatedInput>;
};

export type StripeIntOrGetPromotionCodesCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetPromotionCodesCreatedInput?: InputMaybe<StripeGetPromotionCodesCreatedInput>;
};

export type StripeIntOrGetRadarValueListItemsCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetRadarValueListItemsCreatedInput?: InputMaybe<StripeGetRadarValueListItemsCreatedInput>;
};

export type StripeIntOrGetRadarValueListsCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetRadarValueListsCreatedInput?: InputMaybe<StripeGetRadarValueListsCreatedInput>;
};

export type StripeIntOrGetRefundsCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetRefundsCreatedInput?: InputMaybe<StripeGetRefundsCreatedInput>;
};

export type StripeIntOrGetReportingReportRunsCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetReportingReportRunsCreatedInput?: InputMaybe<StripeGetReportingReportRunsCreatedInput>;
};

export type StripeIntOrGetReviewsCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetReviewsCreatedInput?: InputMaybe<StripeGetReviewsCreatedInput>;
};

export type StripeIntOrGetSetupAttemptsCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetSetupAttemptsCreatedInput?: InputMaybe<StripeGetSetupAttemptsCreatedInput>;
};

export type StripeIntOrGetSetupIntentsCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetSetupIntentsCreatedInput?: InputMaybe<StripeGetSetupIntentsCreatedInput>;
};

export type StripeIntOrGetShippingRatesCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetShippingRatesCreatedInput?: InputMaybe<StripeGetShippingRatesCreatedInput>;
};

export type StripeIntOrGetSubscriptionSchedulesCanceledAtUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetSubscriptionSchedulesCanceledAtInput?: InputMaybe<StripeGetSubscriptionSchedulesCanceledAtInput>;
};

export type StripeIntOrGetSubscriptionSchedulesCompletedAtUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetSubscriptionSchedulesCompletedAtInput?: InputMaybe<StripeGetSubscriptionSchedulesCompletedAtInput>;
};

export type StripeIntOrGetSubscriptionSchedulesCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetSubscriptionSchedulesCreatedInput?: InputMaybe<StripeGetSubscriptionSchedulesCreatedInput>;
};

export type StripeIntOrGetSubscriptionSchedulesReleasedAtUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetSubscriptionSchedulesReleasedAtInput?: InputMaybe<StripeGetSubscriptionSchedulesReleasedAtInput>;
};

export type StripeIntOrGetSubscriptionsCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetSubscriptionsCreatedInput?: InputMaybe<StripeGetSubscriptionsCreatedInput>;
};

export type StripeIntOrGetSubscriptionsCurrentPeriodEndUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetSubscriptionsCurrentPeriodEndInput?: InputMaybe<StripeGetSubscriptionsCurrentPeriodEndInput>;
};

export type StripeIntOrGetSubscriptionsCurrentPeriodStartUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetSubscriptionsCurrentPeriodStartInput?: InputMaybe<StripeGetSubscriptionsCurrentPeriodStartInput>;
};

export type StripeIntOrGetTaxRatesCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetTaxRatesCreatedInput?: InputMaybe<StripeGetTaxRatesCreatedInput>;
};

export type StripeIntOrGetTopupsAmountUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetTopupsAmountInput?: InputMaybe<StripeGetTopupsAmountInput>;
};

export type StripeIntOrGetTopupsCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetTopupsCreatedInput?: InputMaybe<StripeGetTopupsCreatedInput>;
};

export type StripeIntOrGetTransfersCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetTransfersCreatedInput?: InputMaybe<StripeGetTransfersCreatedInput>;
};

export type StripeIntOrGetTreasuryFinancialAccountsCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetTreasuryFinancialAccountsCreatedInput?: InputMaybe<StripeGetTreasuryFinancialAccountsCreatedInput>;
};

export type StripeIntOrGetTreasuryTransactionEntriesCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetTreasuryTransactionEntriesCreatedInput?: InputMaybe<StripeGetTreasuryTransactionEntriesCreatedInput>;
};

export type StripeIntOrGetTreasuryTransactionEntriesEffectiveAtUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetTreasuryTransactionEntriesEffectiveAtInput?: InputMaybe<StripeGetTreasuryTransactionEntriesEffectiveAtInput>;
};

export type StripeIntOrGetTreasuryTransactionsCreatedUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetTreasuryTransactionsCreatedInput?: InputMaybe<StripeGetTreasuryTransactionsCreatedInput>;
};

export type StripeIntOrGetTreasuryTransactionsPostedAtStatusTransitionsUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetTreasuryTransactionsPostedAtStatusTransitionsInput?: InputMaybe<StripeGetTreasuryTransactionsPostedAtStatusTransitionsInput>;
};

export type StripeIntOrStringUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  string?: InputMaybe<Scalars['String']>;
};

export type StripeIntUnionInput = {
  int?: InputMaybe<Scalars['Int']>;
  stripeGetInvoicesUpcomingSubscriptionTrialEnd?: InputMaybe<StripeGetInvoicesUpcomingSubscriptionTrialEnd>;
};

export type StripeInvoice = {
  __typename?: 'StripeInvoice';
  accountCountry?: Maybe<Scalars['String']>;
  accountName?: Maybe<Scalars['String']>;
  accountTaxIds?: Maybe<Array<StripeStringOrDeletedTaxIdOrTaxIdUnion>>;
  amountDue: Scalars['Int'];
  amountPaid: Scalars['Int'];
  amountRemaining: Scalars['Int'];
  amountShipping: Scalars['Int'];
  application?: Maybe<StripeStringOrDeletedApplicationOrApplicationUnion>;
  applicationFeeAmount?: Maybe<Scalars['Int']>;
  attemptCount: Scalars['Int'];
  attempted: Scalars['Boolean'];
  autoAdvance?: Maybe<Scalars['Boolean']>;
  automaticTax: StripeAutomaticTax;
  billingReason?: Maybe<StripeInvoiceBillingReason>;
  charge?: Maybe<StripeStringOrChargeUnion>;
  collectionMethod: StripeInvoiceCollectionMethod;
  created: Scalars['Int'];
  currency: Scalars['String'];
  customFields?: Maybe<Array<StripeInvoiceSettingCustomField>>;
  customer?: Maybe<StripeStringOrDeletedCustomerOrCustomerUnion>;
  customerAddress?: Maybe<StripeAddress>;
  customerEmail?: Maybe<Scalars['String']>;
  customerName?: Maybe<Scalars['String']>;
  customerPhone?: Maybe<Scalars['String']>;
  customerShipping?: Maybe<StripeShipping>;
  customerTaxExempt?: Maybe<StripeInvoiceCustomerTaxExempt>;
  customerTaxIds?: Maybe<Array<StripeInvoicesResourceInvoiceTaxId>>;
  defaultPaymentMethod?: Maybe<StripeStringOrPaymentMethodUnion>;
  defaultSource?: Maybe<StripeStringOrSourceOrCardOrBankAccountUnion>;
  defaultTaxRates: Array<StripeTaxRate>;
  description?: Maybe<Scalars['String']>;
  discount?: Maybe<StripeDiscount>;
  discounts?: Maybe<Array<StripeStringOrDeletedDiscountOrDiscountUnion>>;
  dueDate?: Maybe<Scalars['Int']>;
  endingBalance?: Maybe<Scalars['Int']>;
  footer?: Maybe<Scalars['String']>;
  fromInvoice?: Maybe<StripeInvoicesFromInvoice>;
  hostedInvoiceUrl?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  invoicePdf?: Maybe<Scalars['String']>;
  lastFinalizationError?: Maybe<StripeApiErrors>;
  latestRevision?: Maybe<StripeStringOrInvoiceUnion>;
  lines: StripeInvoiceLines;
  livemode: Scalars['Boolean'];
  metadata?: Maybe<Scalars['JSON']>;
  nextPaymentAttempt?: Maybe<Scalars['Int']>;
  number?: Maybe<Scalars['String']>;
  object: StripeInvoiceObject;
  onBehalfOf?: Maybe<StripeStringOrAccountUnion>;
  paid: Scalars['Boolean'];
  paidOutOfBand: Scalars['Boolean'];
  paymentIntent?: Maybe<StripeStringOrPaymentIntentUnion>;
  paymentSettings: StripeInvoicesPaymentSettings;
  periodEnd: Scalars['Int'];
  periodStart: Scalars['Int'];
  postPaymentCreditNotesAmount: Scalars['Int'];
  prePaymentCreditNotesAmount: Scalars['Int'];
  quote?: Maybe<StripeStringOrQuoteUnion>;
  receiptNumber?: Maybe<Scalars['String']>;
  renderingOptions?: Maybe<StripeInvoiceSettingRenderingOptions>;
  shippingCost?: Maybe<StripeInvoicesShippingCost>;
  shippingDetails?: Maybe<StripeShipping>;
  startingBalance: Scalars['Int'];
  statementDescriptor?: Maybe<Scalars['String']>;
  status?: Maybe<StripeInvoiceStatus>;
  statusTransitions: StripeInvoicesStatusTransitions;
  subscription?: Maybe<StripeStringOrSubscriptionUnion>;
  subscriptionProrationDate?: Maybe<Scalars['Int']>;
  subtotal: Scalars['Int'];
  subtotalExcludingTax?: Maybe<Scalars['Int']>;
  tax?: Maybe<Scalars['Int']>;
  testClock?: Maybe<StripeStringOrTestHelpersTestClockUnion>;
  thresholdReason?: Maybe<StripeInvoiceThresholdReason>;
  total: Scalars['Int'];
  totalDiscountAmounts?: Maybe<Array<StripeDiscountsResourceDiscountAmount>>;
  totalExcludingTax?: Maybe<Scalars['Int']>;
  totalTaxAmounts: Array<StripeInvoiceTaxAmount>;
  transferData?: Maybe<StripeInvoiceTransferData>;
  webhooksDeliveredAt?: Maybe<Scalars['Int']>;
};

export enum StripeInvoiceBillingReason {
  AutomaticPendingInvoiceItemInvoice = 'AUTOMATIC_PENDING_INVOICE_ITEM_INVOICE',
  Manual = 'MANUAL',
  QuoteAccept = 'QUOTE_ACCEPT',
  Subscription = 'SUBSCRIPTION',
  SubscriptionCreate = 'SUBSCRIPTION_CREATE',
  SubscriptionCycle = 'SUBSCRIPTION_CYCLE',
  SubscriptionThreshold = 'SUBSCRIPTION_THRESHOLD',
  SubscriptionUpdate = 'SUBSCRIPTION_UPDATE',
  Upcoming = 'UPCOMING'
}

export enum StripeInvoiceCollectionMethod {
  ChargeAutomatically = 'CHARGE_AUTOMATICALLY',
  SendInvoice = 'SEND_INVOICE'
}

export enum StripeInvoiceCustomerTaxExempt {
  Exempt = 'EXEMPT',
  None = 'NONE',
  Reverse = 'REVERSE'
}

export type StripeInvoiceInstallmentsCard = {
  __typename?: 'StripeInvoiceInstallmentsCard';
  enabled?: Maybe<Scalars['Boolean']>;
};

export type StripeInvoiceItemThresholdReason = {
  __typename?: 'StripeInvoiceItemThresholdReason';
  lineItemIds: Array<Scalars['String']>;
  usageGte: Scalars['Int'];
};

export type StripeInvoiceLineItemPeriod = {
  __typename?: 'StripeInvoiceLineItemPeriod';
  end: Scalars['Int'];
  start: Scalars['Int'];
};

export type StripeInvoiceLines = {
  __typename?: 'StripeInvoiceLines';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeLineItem>;
  object: StripeInvoiceObjectLines;
  url: Scalars['String'];
};

export type StripeInvoiceMandateOptionsCard = {
  __typename?: 'StripeInvoiceMandateOptionsCard';
  amount?: Maybe<Scalars['Int']>;
  amountType?: Maybe<StripeInvoiceMandateOptionsCardAmountType>;
  description?: Maybe<Scalars['String']>;
};

export enum StripeInvoiceMandateOptionsCardAmountType {
  Fixed = 'FIXED',
  Maximum = 'MAXIMUM'
}

export enum StripeInvoiceObject {
  Invoice = 'INVOICE'
}

export enum StripeInvoiceObjectLines {
  List = 'LIST'
}

export type StripeInvoicePaymentMethodOptionsAcssDebit = {
  __typename?: 'StripeInvoicePaymentMethodOptionsAcssDebit';
  mandateOptions?: Maybe<StripeInvoicePaymentMethodOptionsAcssDebitMandateOptions>;
  verificationMethod?: Maybe<StripeInvoicePaymentMethodOptionsAcssDebitVerificationMethod>;
};

export type StripeInvoicePaymentMethodOptionsAcssDebitMandateOptions = {
  __typename?: 'StripeInvoicePaymentMethodOptionsAcssDebitMandateOptions';
  transactionType?: Maybe<StripeInvoicePaymentMethodOptionsAcssDebitMandateOptionsTransactionType>;
};

export enum StripeInvoicePaymentMethodOptionsAcssDebitMandateOptionsTransactionType {
  Business = 'BUSINESS',
  Personal = 'PERSONAL'
}

export enum StripeInvoicePaymentMethodOptionsAcssDebitVerificationMethod {
  Automatic = 'AUTOMATIC',
  Instant = 'INSTANT',
  Microdeposits = 'MICRODEPOSITS'
}

export type StripeInvoicePaymentMethodOptionsBancontact = {
  __typename?: 'StripeInvoicePaymentMethodOptionsBancontact';
  preferredLanguage: StripeInvoicePaymentMethodOptionsBancontactPreferredLanguage;
};

export enum StripeInvoicePaymentMethodOptionsBancontactPreferredLanguage {
  De = 'DE',
  En = 'EN',
  Fr = 'FR',
  Nl = 'NL'
}

export type StripeInvoicePaymentMethodOptionsCard = {
  __typename?: 'StripeInvoicePaymentMethodOptionsCard';
  installments?: Maybe<StripeInvoiceInstallmentsCard>;
  requestThreeDSecure?: Maybe<StripeInvoicePaymentMethodOptionsCardRequestThreeDSecure>;
};

export enum StripeInvoicePaymentMethodOptionsCardRequestThreeDSecure {
  Any = 'ANY',
  Automatic = 'AUTOMATIC'
}

export type StripeInvoicePaymentMethodOptionsCustomerBalance = {
  __typename?: 'StripeInvoicePaymentMethodOptionsCustomerBalance';
  bankTransfer?: Maybe<StripeInvoicePaymentMethodOptionsCustomerBalanceBankTransfer>;
  fundingType?: Maybe<StripeInvoicePaymentMethodOptionsCustomerBalanceFundingType>;
};

export type StripeInvoicePaymentMethodOptionsCustomerBalanceBankTransfer = {
  __typename?: 'StripeInvoicePaymentMethodOptionsCustomerBalanceBankTransfer';
  euBankTransfer?: Maybe<StripeInvoicePaymentMethodOptionsCustomerBalanceBankTransferEuBankTransfer>;
  type?: Maybe<Scalars['String']>;
};

export type StripeInvoicePaymentMethodOptionsCustomerBalanceBankTransferEuBankTransfer = {
  __typename?: 'StripeInvoicePaymentMethodOptionsCustomerBalanceBankTransferEuBankTransfer';
  country: StripeInvoicePaymentMethodOptionsCustomerBalanceBankTransferEuBankTransferCountry;
};

export enum StripeInvoicePaymentMethodOptionsCustomerBalanceBankTransferEuBankTransferCountry {
  Be = 'BE',
  De = 'DE',
  Es = 'ES',
  Fr = 'FR',
  Ie = 'IE',
  Nl = 'NL'
}

export enum StripeInvoicePaymentMethodOptionsCustomerBalanceFundingType {
  BankTransfer = 'BANK_TRANSFER'
}

export type StripeInvoicePaymentMethodOptionsUsBankAccount = {
  __typename?: 'StripeInvoicePaymentMethodOptionsUsBankAccount';
  financialConnections?: Maybe<StripeInvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptions>;
  verificationMethod?: Maybe<StripeInvoicePaymentMethodOptionsUsBankAccountVerificationMethod>;
};

export type StripeInvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptions = {
  __typename?: 'StripeInvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptions';
  permissions?: Maybe<Array<StripeInvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptionsPermissions>>;
};

export enum StripeInvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptionsPermissions {
  Balances = 'BALANCES',
  PaymentMethod = 'PAYMENT_METHOD',
  Transactions = 'TRANSACTIONS'
}

export enum StripeInvoicePaymentMethodOptionsUsBankAccountVerificationMethod {
  Automatic = 'AUTOMATIC',
  Instant = 'INSTANT',
  Microdeposits = 'MICRODEPOSITS'
}

export type StripeInvoiceSettingCustomField = {
  __typename?: 'StripeInvoiceSettingCustomField';
  name: Scalars['String'];
  value: Scalars['String'];
};

export type StripeInvoiceSettingCustomerSetting = {
  __typename?: 'StripeInvoiceSettingCustomerSetting';
  customFields?: Maybe<Array<StripeInvoiceSettingCustomField>>;
  defaultPaymentMethod?: Maybe<StripeStringOrPaymentMethodUnion>;
  footer?: Maybe<Scalars['String']>;
  renderingOptions?: Maybe<StripeInvoiceSettingRenderingOptions>;
};

export type StripeInvoiceSettingPhaseSetting = {
  __typename?: 'StripeInvoiceSettingPhaseSetting';
  daysUntilDue?: Maybe<Scalars['Int']>;
};

export type StripeInvoiceSettingQuoteSetting = {
  __typename?: 'StripeInvoiceSettingQuoteSetting';
  daysUntilDue?: Maybe<Scalars['Int']>;
};

export type StripeInvoiceSettingRenderingOptions = {
  __typename?: 'StripeInvoiceSettingRenderingOptions';
  amountTaxDisplay?: Maybe<Scalars['String']>;
};

export type StripeInvoiceSettingSubscriptionScheduleSetting = {
  __typename?: 'StripeInvoiceSettingSubscriptionScheduleSetting';
  daysUntilDue?: Maybe<Scalars['Int']>;
};

export enum StripeInvoiceStatus {
  Draft = 'DRAFT',
  Open = 'OPEN',
  Paid = 'PAID',
  Uncollectible = 'UNCOLLECTIBLE',
  Void = 'VOID'
}

export type StripeInvoiceTaxAmount = {
  __typename?: 'StripeInvoiceTaxAmount';
  amount: Scalars['Int'];
  inclusive: Scalars['Boolean'];
  taxRate: StripeStringOrTaxRateUnion;
  taxabilityReason?: Maybe<StripeInvoiceTaxAmountTaxabilityReason>;
  taxableAmount?: Maybe<Scalars['Int']>;
};

export enum StripeInvoiceTaxAmountTaxabilityReason {
  CustomerExempt = 'CUSTOMER_EXEMPT',
  NotCollecting = 'NOT_COLLECTING',
  NotSubjectToTax = 'NOT_SUBJECT_TO_TAX',
  NotSupported = 'NOT_SUPPORTED',
  PortionProductExempt = 'PORTION_PRODUCT_EXEMPT',
  PortionReducedRated = 'PORTION_REDUCED_RATED',
  PortionStandardRated = 'PORTION_STANDARD_RATED',
  ProductExempt = 'PRODUCT_EXEMPT',
  ProductExemptHoliday = 'PRODUCT_EXEMPT_HOLIDAY',
  ProportionallyRated = 'PROPORTIONALLY_RATED',
  ReducedRated = 'REDUCED_RATED',
  ReverseCharge = 'REVERSE_CHARGE',
  StandardRated = 'STANDARD_RATED',
  TaxableBasisReduced = 'TAXABLE_BASIS_REDUCED',
  ZeroRated = 'ZERO_RATED'
}

export type StripeInvoiceThresholdReason = {
  __typename?: 'StripeInvoiceThresholdReason';
  amountGte?: Maybe<Scalars['Int']>;
  itemReasons: Array<StripeInvoiceItemThresholdReason>;
};

export type StripeInvoiceTransferData = {
  __typename?: 'StripeInvoiceTransferData';
  amount?: Maybe<Scalars['Int']>;
  destination: StripeStringOrAccountUnion;
};

export type StripeInvoiceitem = {
  __typename?: 'StripeInvoiceitem';
  amount: Scalars['Int'];
  currency: Scalars['String'];
  customer: StripeStringOrDeletedCustomerOrCustomerUnion;
  date: Scalars['Int'];
  description?: Maybe<Scalars['String']>;
  discountable: Scalars['Boolean'];
  discounts?: Maybe<Array<StripeStringOrDiscountUnion>>;
  id: Scalars['String'];
  invoice?: Maybe<StripeStringOrInvoiceUnion>;
  livemode: Scalars['Boolean'];
  metadata?: Maybe<Scalars['JSON']>;
  object: StripeInvoiceitemObject;
  period: StripeInvoiceLineItemPeriod;
  price?: Maybe<StripePrice>;
  proration: Scalars['Boolean'];
  quantity: Scalars['Int'];
  subscription?: Maybe<StripeStringOrSubscriptionUnion>;
  subscriptionItem?: Maybe<Scalars['String']>;
  taxRates?: Maybe<Array<StripeTaxRate>>;
  testClock?: Maybe<StripeStringOrTestHelpersTestClockUnion>;
  unitAmount?: Maybe<Scalars['Int']>;
  unitAmountDecimal?: Maybe<Scalars['String']>;
};

export enum StripeInvoiceitemObject {
  Invoiceitem = 'INVOICEITEM'
}

export type StripeInvoicesFromInvoice = {
  __typename?: 'StripeInvoicesFromInvoice';
  action: Scalars['String'];
  invoice: StripeStringOrInvoiceUnion;
};

export type StripeInvoicesLineItemsCreditedItems = {
  __typename?: 'StripeInvoicesLineItemsCreditedItems';
  invoice: Scalars['String'];
  invoiceLineItems: Array<Scalars['String']>;
};

export type StripeInvoicesLineItemsProrationDetails = {
  __typename?: 'StripeInvoicesLineItemsProrationDetails';
  creditedItems?: Maybe<StripeInvoicesLineItemsCreditedItems>;
};

export type StripeInvoicesPaymentMethodOptions = {
  __typename?: 'StripeInvoicesPaymentMethodOptions';
  acssDebit?: Maybe<StripeInvoicePaymentMethodOptionsAcssDebit>;
  bancontact?: Maybe<StripeInvoicePaymentMethodOptionsBancontact>;
  card?: Maybe<StripeInvoicePaymentMethodOptionsCard>;
  customerBalance?: Maybe<StripeInvoicePaymentMethodOptionsCustomerBalance>;
  konbini?: Maybe<Scalars['JSON']>;
  usBankAccount?: Maybe<StripeInvoicePaymentMethodOptionsUsBankAccount>;
};

export type StripeInvoicesPaymentSettings = {
  __typename?: 'StripeInvoicesPaymentSettings';
  defaultMandate?: Maybe<Scalars['String']>;
  paymentMethodOptions?: Maybe<StripeInvoicesPaymentMethodOptions>;
  paymentMethodTypes?: Maybe<Array<StripeInvoicesPaymentSettingsPaymentMethodTypes>>;
};

export enum StripeInvoicesPaymentSettingsPaymentMethodTypes {
  AchCreditTransfer = 'ACH_CREDIT_TRANSFER',
  AchDebit = 'ACH_DEBIT',
  AcssDebit = 'ACSS_DEBIT',
  AuBecsDebit = 'AU_BECS_DEBIT',
  BacsDebit = 'BACS_DEBIT',
  Bancontact = 'BANCONTACT',
  Boleto = 'BOLETO',
  Card = 'CARD',
  Cashapp = 'CASHAPP',
  CustomerBalance = 'CUSTOMER_BALANCE',
  Fpx = 'FPX',
  Giropay = 'GIROPAY',
  Grabpay = 'GRABPAY',
  Ideal = 'IDEAL',
  Konbini = 'KONBINI',
  Link = 'LINK',
  Paynow = 'PAYNOW',
  Paypal = 'PAYPAL',
  Promptpay = 'PROMPTPAY',
  SepaDebit = 'SEPA_DEBIT',
  Sofort = 'SOFORT',
  UsBankAccount = 'US_BANK_ACCOUNT',
  WechatPay = 'WECHAT_PAY'
}

export type StripeInvoicesResourceInvoiceTaxId = {
  __typename?: 'StripeInvoicesResourceInvoiceTaxId';
  type: StripeInvoicesResourceInvoiceTaxIdType;
  value?: Maybe<Scalars['String']>;
};

export enum StripeInvoicesResourceInvoiceTaxIdType {
  AeTrn = 'AE_TRN',
  AuAbn = 'AU_ABN',
  AuArn = 'AU_ARN',
  BgUic = 'BG_UIC',
  BrCnpj = 'BR_CNPJ',
  BrCpf = 'BR_CPF',
  CaBn = 'CA_BN',
  CaGstHst = 'CA_GST_HST',
  CaPstBc = 'CA_PST_BC',
  CaPstMb = 'CA_PST_MB',
  CaPstSk = 'CA_PST_SK',
  CaQst = 'CA_QST',
  ChVat = 'CH_VAT',
  ClTin = 'CL_TIN',
  EgTin = 'EG_TIN',
  EsCif = 'ES_CIF',
  EuOssVat = 'EU_OSS_VAT',
  EuVat = 'EU_VAT',
  GbVat = 'GB_VAT',
  GeVat = 'GE_VAT',
  HkBr = 'HK_BR',
  HuTin = 'HU_TIN',
  IdNpwp = 'ID_NPWP',
  IlVat = 'IL_VAT',
  InGst = 'IN_GST',
  IsVat = 'IS_VAT',
  JpCn = 'JP_CN',
  JpRn = 'JP_RN',
  JpTrn = 'JP_TRN',
  KePin = 'KE_PIN',
  KrBrn = 'KR_BRN',
  LiUid = 'LI_UID',
  MxRfc = 'MX_RFC',
  MyFrp = 'MY_FRP',
  MyItn = 'MY_ITN',
  MySst = 'MY_SST',
  NoVat = 'NO_VAT',
  NzGst = 'NZ_GST',
  PhTin = 'PH_TIN',
  RuInn = 'RU_INN',
  RuKpp = 'RU_KPP',
  SaVat = 'SA_VAT',
  SgGst = 'SG_GST',
  SgUen = 'SG_UEN',
  SiTin = 'SI_TIN',
  ThVat = 'TH_VAT',
  TrTin = 'TR_TIN',
  TwVat = 'TW_VAT',
  UaVat = 'UA_VAT',
  Unknown = 'UNKNOWN',
  UsEin = 'US_EIN',
  ZaVat = 'ZA_VAT'
}

export type StripeInvoicesShippingCost = {
  __typename?: 'StripeInvoicesShippingCost';
  amountSubtotal: Scalars['Int'];
  amountTax: Scalars['Int'];
  amountTotal: Scalars['Int'];
  shippingRate?: Maybe<StripeStringOrShippingRateUnion>;
  taxes?: Maybe<Array<StripeLineItemsTaxAmount>>;
};

export type StripeInvoicesStatusTransitions = {
  __typename?: 'StripeInvoicesStatusTransitions';
  finalizedAt?: Maybe<Scalars['Int']>;
  markedUncollectibleAt?: Maybe<Scalars['Int']>;
  paidAt?: Maybe<Scalars['Int']>;
  voidedAt?: Maybe<Scalars['Int']>;
};

export type StripeIssuingAuthorization = {
  __typename?: 'StripeIssuingAuthorization';
  amount: Scalars['Int'];
  amountDetails?: Maybe<StripeIssuingAuthorizationAmountDetails>;
  approved: Scalars['Boolean'];
  authorizationMethod: StripeIssuingAuthorizationAuthorizationMethod;
  balanceTransactions: Array<StripeBalanceTransaction>;
  card: StripeIssuingCard;
  cardholder?: Maybe<StripeStringOrIssuingCardholderUnion>;
  created: Scalars['Int'];
  currency: Scalars['String'];
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  merchantAmount: Scalars['Int'];
  merchantCurrency: Scalars['String'];
  merchantData: StripeIssuingAuthorizationMerchantData;
  metadata: Scalars['JSON'];
  networkData?: Maybe<StripeIssuingAuthorizationNetworkData>;
  object: StripeIssuingAuthorizationObject;
  pendingRequest?: Maybe<StripeIssuingAuthorizationPendingRequest>;
  requestHistory: Array<StripeIssuingAuthorizationRequest>;
  status: StripeIssuingAuthorizationStatus;
  transactions: Array<StripeIssuingTransaction>;
  treasury?: Maybe<StripeIssuingAuthorizationTreasury>;
  verificationData: StripeIssuingAuthorizationVerificationData;
  wallet?: Maybe<Scalars['String']>;
};

export type StripeIssuingAuthorizationAmountDetails = {
  __typename?: 'StripeIssuingAuthorizationAmountDetails';
  atmFee?: Maybe<Scalars['Int']>;
};

export enum StripeIssuingAuthorizationAuthorizationMethod {
  Chip = 'CHIP',
  Contactless = 'CONTACTLESS',
  KeyedIn = 'KEYED_IN',
  Online = 'ONLINE',
  Swipe = 'SWIPE'
}

export type StripeIssuingAuthorizationMerchantData = {
  __typename?: 'StripeIssuingAuthorizationMerchantData';
  category: Scalars['String'];
  categoryCode: Scalars['String'];
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  networkId: Scalars['String'];
  postalCode?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  terminalId?: Maybe<Scalars['String']>;
};

export type StripeIssuingAuthorizationNetworkData = {
  __typename?: 'StripeIssuingAuthorizationNetworkData';
  acquiringInstitutionId?: Maybe<Scalars['String']>;
};

export enum StripeIssuingAuthorizationObject {
  IssuingAuthorization = 'ISSUING_AUTHORIZATION'
}

export type StripeIssuingAuthorizationPendingRequest = {
  __typename?: 'StripeIssuingAuthorizationPendingRequest';
  amount: Scalars['Int'];
  amountDetails?: Maybe<StripeIssuingAuthorizationAmountDetails>;
  currency: Scalars['String'];
  isAmountControllable: Scalars['Boolean'];
  merchantAmount: Scalars['Int'];
  merchantCurrency: Scalars['String'];
};

export type StripeIssuingAuthorizationRequest = {
  __typename?: 'StripeIssuingAuthorizationRequest';
  amount: Scalars['Int'];
  amountDetails?: Maybe<StripeIssuingAuthorizationAmountDetails>;
  approved: Scalars['Boolean'];
  created: Scalars['Int'];
  currency: Scalars['String'];
  merchantAmount: Scalars['Int'];
  merchantCurrency: Scalars['String'];
  reason: StripeIssuingAuthorizationRequestReason;
  reasonMessage?: Maybe<Scalars['String']>;
};

export enum StripeIssuingAuthorizationRequestReason {
  AccountDisabled = 'ACCOUNT_DISABLED',
  CardholderInactive = 'CARDHOLDER_INACTIVE',
  CardholderVerificationRequired = 'CARDHOLDER_VERIFICATION_REQUIRED',
  CardActive = 'CARD_ACTIVE',
  CardInactive = 'CARD_INACTIVE',
  InsufficientFunds = 'INSUFFICIENT_FUNDS',
  NotAllowed = 'NOT_ALLOWED',
  SpendingControls = 'SPENDING_CONTROLS',
  SuspectedFraud = 'SUSPECTED_FRAUD',
  VerificationFailed = 'VERIFICATION_FAILED',
  WebhookApproved = 'WEBHOOK_APPROVED',
  WebhookDeclined = 'WEBHOOK_DECLINED',
  WebhookError = 'WEBHOOK_ERROR',
  WebhookTimeout = 'WEBHOOK_TIMEOUT'
}

export enum StripeIssuingAuthorizationStatus {
  Closed = 'CLOSED',
  Pending = 'PENDING',
  Reversed = 'REVERSED'
}

export type StripeIssuingAuthorizationTreasury = {
  __typename?: 'StripeIssuingAuthorizationTreasury';
  receivedCredits: Array<Scalars['String']>;
  receivedDebits: Array<Scalars['String']>;
  transaction?: Maybe<Scalars['String']>;
};

export type StripeIssuingAuthorizationVerificationData = {
  __typename?: 'StripeIssuingAuthorizationVerificationData';
  addressLine1Check: StripeIssuingAuthorizationVerificationDataAddressLine1Check;
  addressPostalCodeCheck: StripeIssuingAuthorizationVerificationDataAddressPostalCodeCheck;
  cvcCheck: StripeIssuingAuthorizationVerificationDataCvcCheck;
  expiryCheck: StripeIssuingAuthorizationVerificationDataExpiryCheck;
};

export enum StripeIssuingAuthorizationVerificationDataAddressLine1Check {
  Match = 'MATCH',
  Mismatch = 'MISMATCH',
  NotProvided = 'NOT_PROVIDED'
}

export enum StripeIssuingAuthorizationVerificationDataAddressPostalCodeCheck {
  Match = 'MATCH',
  Mismatch = 'MISMATCH',
  NotProvided = 'NOT_PROVIDED'
}

export enum StripeIssuingAuthorizationVerificationDataCvcCheck {
  Match = 'MATCH',
  Mismatch = 'MISMATCH',
  NotProvided = 'NOT_PROVIDED'
}

export enum StripeIssuingAuthorizationVerificationDataExpiryCheck {
  Match = 'MATCH',
  Mismatch = 'MISMATCH',
  NotProvided = 'NOT_PROVIDED'
}

export type StripeIssuingCard = {
  __typename?: 'StripeIssuingCard';
  brand: Scalars['String'];
  cancellationReason?: Maybe<StripeIssuingCardCancellationReason>;
  cardholder: StripeIssuingCardholder;
  created: Scalars['Int'];
  currency: Scalars['String'];
  cvc?: Maybe<Scalars['String']>;
  expMonth: Scalars['Int'];
  expYear: Scalars['Int'];
  financialAccount?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  last4: Scalars['String'];
  livemode: Scalars['Boolean'];
  metadata: Scalars['JSON'];
  number?: Maybe<Scalars['String']>;
  object: StripeIssuingCardObject;
  replacedBy?: Maybe<StripeStringOrIssuingCardUnion>;
  replacementFor?: Maybe<StripeStringOrIssuingCardUnion>;
  replacementReason?: Maybe<StripeIssuingCardReplacementReason>;
  shipping?: Maybe<StripeIssuingCardShipping>;
  spendingControls: StripeIssuingCardAuthorizationControls;
  status: StripeIssuingCardStatus;
  type: StripeIssuingCardType;
  wallets?: Maybe<StripeIssuingCardWallets>;
};

export type StripeIssuingCardApplePay = {
  __typename?: 'StripeIssuingCardApplePay';
  eligible: Scalars['Boolean'];
  ineligibleReason?: Maybe<StripeIssuingCardApplePayIneligibleReason>;
};

export enum StripeIssuingCardApplePayIneligibleReason {
  MissingAgreement = 'MISSING_AGREEMENT',
  MissingCardholderContact = 'MISSING_CARDHOLDER_CONTACT',
  UnsupportedRegion = 'UNSUPPORTED_REGION'
}

export type StripeIssuingCardAuthorizationControls = {
  __typename?: 'StripeIssuingCardAuthorizationControls';
  allowedCategories?: Maybe<Array<StripeIssuingCardAuthorizationControlsAllowedCategories>>;
  blockedCategories?: Maybe<Array<StripeIssuingCardAuthorizationControlsBlockedCategories>>;
  spendingLimits?: Maybe<Array<StripeIssuingCardSpendingLimit>>;
  spendingLimitsCurrency?: Maybe<Scalars['String']>;
};

export enum StripeIssuingCardAuthorizationControlsAllowedCategories {
  AccountingBookkeepingServices = 'ACCOUNTING_BOOKKEEPING_SERVICES',
  AcRefrigerationRepair = 'AC_REFRIGERATION_REPAIR',
  AdvertisingServices = 'ADVERTISING_SERVICES',
  AgriculturalCooperative = 'AGRICULTURAL_COOPERATIVE',
  AirlinesAirCarriers = 'AIRLINES_AIR_CARRIERS',
  AirportsFlyingFields = 'AIRPORTS_FLYING_FIELDS',
  AmbulanceServices = 'AMBULANCE_SERVICES',
  AmusementParksCarnivals = 'AMUSEMENT_PARKS_CARNIVALS',
  AntiqueReproductions = 'ANTIQUE_REPRODUCTIONS',
  AntiqueShops = 'ANTIQUE_SHOPS',
  Aquariums = 'AQUARIUMS',
  ArchitecturalSurveyingServices = 'ARCHITECTURAL_SURVEYING_SERVICES',
  ArtistsSupplyAndCraftShops = 'ARTISTS_SUPPLY_AND_CRAFT_SHOPS',
  ArtDealersAndGalleries = 'ART_DEALERS_AND_GALLERIES',
  AutomatedCashDisburse = 'AUTOMATED_CASH_DISBURSE',
  AutomatedFuelDispensers = 'AUTOMATED_FUEL_DISPENSERS',
  AutomobileAssociations = 'AUTOMOBILE_ASSOCIATIONS',
  AutomotivePartsAndAccessoriesStores = 'AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES',
  AutomotiveTireStores = 'AUTOMOTIVE_TIRE_STORES',
  AutoAndHomeSupplyStores = 'AUTO_AND_HOME_SUPPLY_STORES',
  AutoBodyRepairShops = 'AUTO_BODY_REPAIR_SHOPS',
  AutoPaintShops = 'AUTO_PAINT_SHOPS',
  AutoServiceShops = 'AUTO_SERVICE_SHOPS',
  BailAndBondPayments = 'BAIL_AND_BOND_PAYMENTS',
  Bakeries = 'BAKERIES',
  BandsOrchestras = 'BANDS_ORCHESTRAS',
  BarberAndBeautyShops = 'BARBER_AND_BEAUTY_SHOPS',
  BettingCasinoGambling = 'BETTING_CASINO_GAMBLING',
  BicycleShops = 'BICYCLE_SHOPS',
  BilliardPoolEstablishments = 'BILLIARD_POOL_ESTABLISHMENTS',
  BoatDealers = 'BOAT_DEALERS',
  BoatRentalsAndLeases = 'BOAT_RENTALS_AND_LEASES',
  BooksPeriodicalsAndNewspapers = 'BOOKS_PERIODICALS_AND_NEWSPAPERS',
  BookStores = 'BOOK_STORES',
  BowlingAlleys = 'BOWLING_ALLEYS',
  BusinessSecretarialSchools = 'BUSINESS_SECRETARIAL_SCHOOLS',
  BusLines = 'BUS_LINES',
  BuyingShoppingServices = 'BUYING_SHOPPING_SERVICES',
  CableSatelliteAndOtherPayTelevisionAndRadio = 'CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO',
  CameraAndPhotographicSupplyStores = 'CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES',
  CandyNutAndConfectioneryStores = 'CANDY_NUT_AND_CONFECTIONERY_STORES',
  CarpentryServices = 'CARPENTRY_SERVICES',
  CarpetUpholsteryCleaning = 'CARPET_UPHOLSTERY_CLEANING',
  CarAndTruckDealersNewUsed = 'CAR_AND_TRUCK_DEALERS_NEW_USED',
  CarAndTruckDealersUsedOnly = 'CAR_AND_TRUCK_DEALERS_USED_ONLY',
  CarRentalAgencies = 'CAR_RENTAL_AGENCIES',
  CarWashes = 'CAR_WASHES',
  Caterers = 'CATERERS',
  CharitableAndSocialServiceOrganizationsFundraising = 'CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING',
  ChemicalsAndAlliedProducts = 'CHEMICALS_AND_ALLIED_PRODUCTS',
  ChildrensAndInfantsWearStores = 'CHILDRENS_AND_INFANTS_WEAR_STORES',
  ChildCareServices = 'CHILD_CARE_SERVICES',
  ChiropodistsPodiatrists = 'CHIROPODISTS_PODIATRISTS',
  Chiropractors = 'CHIROPRACTORS',
  CigarStoresAndStands = 'CIGAR_STORES_AND_STANDS',
  CivicSocialFraternalAssociations = 'CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS',
  CleaningAndMaintenance = 'CLEANING_AND_MAINTENANCE',
  ClothingRental = 'CLOTHING_RENTAL',
  CollegesUniversities = 'COLLEGES_UNIVERSITIES',
  CommercialEquipment = 'COMMERCIAL_EQUIPMENT',
  CommercialFootwear = 'COMMERCIAL_FOOTWEAR',
  CommercialPhotographyArtAndGraphics = 'COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS',
  CommuterTransportAndFerries = 'COMMUTER_TRANSPORT_AND_FERRIES',
  ComputersPeripheralsAndSoftware = 'COMPUTERS_PERIPHERALS_AND_SOFTWARE',
  ComputerNetworkServices = 'COMPUTER_NETWORK_SERVICES',
  ComputerProgramming = 'COMPUTER_PROGRAMMING',
  ComputerRepair = 'COMPUTER_REPAIR',
  ComputerSoftwareStores = 'COMPUTER_SOFTWARE_STORES',
  ConcreteWorkServices = 'CONCRETE_WORK_SERVICES',
  ConstructionMaterials = 'CONSTRUCTION_MATERIALS',
  ConsultingPublicRelations = 'CONSULTING_PUBLIC_RELATIONS',
  CorrespondenceSchools = 'CORRESPONDENCE_SCHOOLS',
  CosmeticStores = 'COSMETIC_STORES',
  CounselingServices = 'COUNSELING_SERVICES',
  CountryClubs = 'COUNTRY_CLUBS',
  CourierServices = 'COURIER_SERVICES',
  CourtCosts = 'COURT_COSTS',
  CreditReportingAgencies = 'CREDIT_REPORTING_AGENCIES',
  CruiseLines = 'CRUISE_LINES',
  DairyProductsStores = 'DAIRY_PRODUCTS_STORES',
  DanceHallStudiosSchools = 'DANCE_HALL_STUDIOS_SCHOOLS',
  DatingEscortServices = 'DATING_ESCORT_SERVICES',
  DentistsOrthodontists = 'DENTISTS_ORTHODONTISTS',
  DepartmentStores = 'DEPARTMENT_STORES',
  DetectiveAgencies = 'DETECTIVE_AGENCIES',
  DigitalGoodsApplications = 'DIGITAL_GOODS_APPLICATIONS',
  DigitalGoodsGames = 'DIGITAL_GOODS_GAMES',
  DigitalGoodsLargeVolume = 'DIGITAL_GOODS_LARGE_VOLUME',
  DigitalGoodsMedia = 'DIGITAL_GOODS_MEDIA',
  DirectMarketingCatalogMerchant = 'DIRECT_MARKETING_CATALOG_MERCHANT',
  DirectMarketingCombinationCatalogAndRetailMerchant = 'DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT',
  DirectMarketingInboundTelemarketing = 'DIRECT_MARKETING_INBOUND_TELEMARKETING',
  DirectMarketingInsuranceServices = 'DIRECT_MARKETING_INSURANCE_SERVICES',
  DirectMarketingOther = 'DIRECT_MARKETING_OTHER',
  DirectMarketingOutboundTelemarketing = 'DIRECT_MARKETING_OUTBOUND_TELEMARKETING',
  DirectMarketingSubscription = 'DIRECT_MARKETING_SUBSCRIPTION',
  DirectMarketingTravel = 'DIRECT_MARKETING_TRAVEL',
  DiscountStores = 'DISCOUNT_STORES',
  Doctors = 'DOCTORS',
  DoorToDoorSales = 'DOOR_TO_DOOR_SALES',
  DraperyWindowCoveringAndUpholsteryStores = 'DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES',
  DrinkingPlaces = 'DRINKING_PLACES',
  DrugsDrugProprietariesAndDruggistSundries = 'DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES',
  DrugStoresAndPharmacies = 'DRUG_STORES_AND_PHARMACIES',
  DryCleaners = 'DRY_CLEANERS',
  DurableGoods = 'DURABLE_GOODS',
  DutyFreeStores = 'DUTY_FREE_STORES',
  EatingPlacesRestaurants = 'EATING_PLACES_RESTAURANTS',
  EducationalServices = 'EDUCATIONAL_SERVICES',
  ElectricalPartsAndEquipment = 'ELECTRICAL_PARTS_AND_EQUIPMENT',
  ElectricalServices = 'ELECTRICAL_SERVICES',
  ElectricRazorStores = 'ELECTRIC_RAZOR_STORES',
  ElectricVehicleCharging = 'ELECTRIC_VEHICLE_CHARGING',
  ElectronicsRepairShops = 'ELECTRONICS_REPAIR_SHOPS',
  ElectronicsStores = 'ELECTRONICS_STORES',
  ElementarySecondarySchools = 'ELEMENTARY_SECONDARY_SCHOOLS',
  EmergencyServicesGcasVisaUseOnly = 'EMERGENCY_SERVICES_GCAS_VISA_USE_ONLY',
  EmploymentTempAgencies = 'EMPLOYMENT_TEMP_AGENCIES',
  EquipmentRental = 'EQUIPMENT_RENTAL',
  ExterminatingServices = 'EXTERMINATING_SERVICES',
  FamilyClothingStores = 'FAMILY_CLOTHING_STORES',
  FastFoodRestaurants = 'FAST_FOOD_RESTAURANTS',
  FinancialInstitutions = 'FINANCIAL_INSTITUTIONS',
  FinesGovernmentAdministrativeEntities = 'FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES',
  FireplaceFireplaceScreensAndAccessoriesStores = 'FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES',
  FloorCoveringStores = 'FLOOR_COVERING_STORES',
  Florists = 'FLORISTS',
  FloristsSuppliesNurseryStockAndFlowers = 'FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS',
  FreezerAndLockerMeatProvisioners = 'FREEZER_AND_LOCKER_MEAT_PROVISIONERS',
  FuelDealersNonAutomotive = 'FUEL_DEALERS_NON_AUTOMOTIVE',
  FuneralServicesCrematories = 'FUNERAL_SERVICES_CREMATORIES',
  FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances = 'FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES',
  FurnitureRepairRefinishing = 'FURNITURE_REPAIR_REFINISHING',
  FurriersAndFurShops = 'FURRIERS_AND_FUR_SHOPS',
  GeneralServices = 'GENERAL_SERVICES',
  GiftCardNoveltyAndSouvenirShops = 'GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS',
  GlasswareCrystalStores = 'GLASSWARE_CRYSTAL_STORES',
  GlassPaintAndWallpaperStores = 'GLASS_PAINT_AND_WALLPAPER_STORES',
  GolfCoursesPublic = 'GOLF_COURSES_PUBLIC',
  GovernmentLicensedHorseDogRacingUsRegionOnly = 'GOVERNMENT_LICENSED_HORSE_DOG_RACING_US_REGION_ONLY',
  GovernmentLicensedOnlineCasionsOnlineGamblingUsRegionOnly = 'GOVERNMENT_LICENSED_ONLINE_CASIONS_ONLINE_GAMBLING_US_REGION_ONLY',
  GovernmentOwnedLotteriesNonUsRegion = 'GOVERNMENT_OWNED_LOTTERIES_NON_US_REGION',
  GovernmentOwnedLotteriesUsRegionOnly = 'GOVERNMENT_OWNED_LOTTERIES_US_REGION_ONLY',
  GovernmentServices = 'GOVERNMENT_SERVICES',
  GroceryStoresSupermarkets = 'GROCERY_STORES_SUPERMARKETS',
  HardwareEquipmentAndSupplies = 'HARDWARE_EQUIPMENT_AND_SUPPLIES',
  HardwareStores = 'HARDWARE_STORES',
  HealthAndBeautySpas = 'HEALTH_AND_BEAUTY_SPAS',
  HearingAidsSalesAndSupplies = 'HEARING_AIDS_SALES_AND_SUPPLIES',
  HeatingPlumbingAC = 'HEATING_PLUMBING_A_C',
  HobbyToyAndGameShops = 'HOBBY_TOY_AND_GAME_SHOPS',
  HomeSupplyWarehouseStores = 'HOME_SUPPLY_WAREHOUSE_STORES',
  Hospitals = 'HOSPITALS',
  HotelsMotelsAndResorts = 'HOTELS_MOTELS_AND_RESORTS',
  HouseholdApplianceStores = 'HOUSEHOLD_APPLIANCE_STORES',
  IndustrialSupplies = 'INDUSTRIAL_SUPPLIES',
  InformationRetrievalServices = 'INFORMATION_RETRIEVAL_SERVICES',
  InsuranceDefault = 'INSURANCE_DEFAULT',
  InsuranceUnderwritingPremiums = 'INSURANCE_UNDERWRITING_PREMIUMS',
  IntraCompanyPurchases = 'INTRA_COMPANY_PURCHASES',
  JewelryStoresWatchesClocksAndSilverwareStores = 'JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES',
  LandscapingServices = 'LANDSCAPING_SERVICES',
  Laundries = 'LAUNDRIES',
  LaundryCleaningServices = 'LAUNDRY_CLEANING_SERVICES',
  LegalServicesAttorneys = 'LEGAL_SERVICES_ATTORNEYS',
  LuggageAndLeatherGoodsStores = 'LUGGAGE_AND_LEATHER_GOODS_STORES',
  LumberBuildingMaterialsStores = 'LUMBER_BUILDING_MATERIALS_STORES',
  ManualCashDisburse = 'MANUAL_CASH_DISBURSE',
  MarinasServiceAndSupplies = 'MARINAS_SERVICE_AND_SUPPLIES',
  Marketplaces = 'MARKETPLACES',
  MasonryStoneworkAndPlaster = 'MASONRY_STONEWORK_AND_PLASTER',
  MassageParlors = 'MASSAGE_PARLORS',
  MedicalAndDentalLabs = 'MEDICAL_AND_DENTAL_LABS',
  MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies = 'MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES',
  MedicalServices = 'MEDICAL_SERVICES',
  MembershipOrganizations = 'MEMBERSHIP_ORGANIZATIONS',
  MensAndBoysClothingAndAccessoriesStores = 'MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES',
  MensWomensClothingStores = 'MENS_WOMENS_CLOTHING_STORES',
  MetalServiceCenters = 'METAL_SERVICE_CENTERS',
  Miscellaneous = 'MISCELLANEOUS',
  MiscellaneousApparelAndAccessoryShops = 'MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS',
  MiscellaneousAutoDealers = 'MISCELLANEOUS_AUTO_DEALERS',
  MiscellaneousBusinessServices = 'MISCELLANEOUS_BUSINESS_SERVICES',
  MiscellaneousFoodStores = 'MISCELLANEOUS_FOOD_STORES',
  MiscellaneousGeneralMerchandise = 'MISCELLANEOUS_GENERAL_MERCHANDISE',
  MiscellaneousGeneralServices = 'MISCELLANEOUS_GENERAL_SERVICES',
  MiscellaneousHomeFurnishingSpecialtyStores = 'MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES',
  MiscellaneousPublishingAndPrinting = 'MISCELLANEOUS_PUBLISHING_AND_PRINTING',
  MiscellaneousRecreationServices = 'MISCELLANEOUS_RECREATION_SERVICES',
  MiscellaneousRepairShops = 'MISCELLANEOUS_REPAIR_SHOPS',
  MiscellaneousSpecialtyRetail = 'MISCELLANEOUS_SPECIALTY_RETAIL',
  MobileHomeDealers = 'MOBILE_HOME_DEALERS',
  MotionPictureTheaters = 'MOTION_PICTURE_THEATERS',
  MotorcycleShopsAndDealers = 'MOTORCYCLE_SHOPS_AND_DEALERS',
  MotorcycleShopsDealers = 'MOTORCYCLE_SHOPS_DEALERS',
  MotorFreightCarriersAndTrucking = 'MOTOR_FREIGHT_CARRIERS_AND_TRUCKING',
  MotorHomesDealers = 'MOTOR_HOMES_DEALERS',
  MotorVehicleSuppliesAndNewParts = 'MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS',
  MusicStoresMusicalInstrumentsPianosAndSheetMusic = 'MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC',
  NewsDealersAndNewsstands = 'NEWS_DEALERS_AND_NEWSSTANDS',
  NondurableGoods = 'NONDURABLE_GOODS',
  NonFiMoneyOrders = 'NON_FI_MONEY_ORDERS',
  NonFiStoredValueCardPurchaseLoad = 'NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD',
  NurseriesLawnAndGardenSupplyStores = 'NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES',
  NursingPersonalCare = 'NURSING_PERSONAL_CARE',
  OfficeAndCommercialFurniture = 'OFFICE_AND_COMMERCIAL_FURNITURE',
  OpticiansEyeglasses = 'OPTICIANS_EYEGLASSES',
  OptometristsOphthalmologist = 'OPTOMETRISTS_OPHTHALMOLOGIST',
  OrthopedicGoodsProstheticDevices = 'ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES',
  Osteopaths = 'OSTEOPATHS',
  PackageStoresBeerWineAndLiquor = 'PACKAGE_STORES_BEER_WINE_AND_LIQUOR',
  PaintsVarnishesAndSupplies = 'PAINTS_VARNISHES_AND_SUPPLIES',
  ParkingLotsGarages = 'PARKING_LOTS_GARAGES',
  PassengerRailways = 'PASSENGER_RAILWAYS',
  PawnShops = 'PAWN_SHOPS',
  PetroleumAndPetroleumProducts = 'PETROLEUM_AND_PETROLEUM_PRODUCTS',
  PetShopsPetFoodAndSupplies = 'PET_SHOPS_PET_FOOD_AND_SUPPLIES',
  PhotographicPhotocopyMicrofilmEquipmentAndSupplies = 'PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES',
  PhotographicStudios = 'PHOTOGRAPHIC_STUDIOS',
  PhotoDeveloping = 'PHOTO_DEVELOPING',
  PictureVideoProduction = 'PICTURE_VIDEO_PRODUCTION',
  PieceGoodsNotionsAndOtherDryGoods = 'PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS',
  PlumbingHeatingEquipmentAndSupplies = 'PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES',
  PoliticalOrganizations = 'POLITICAL_ORGANIZATIONS',
  PostalServicesGovernmentOnly = 'POSTAL_SERVICES_GOVERNMENT_ONLY',
  PreciousStonesAndMetalsWatchesAndJewelry = 'PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY',
  ProfessionalServices = 'PROFESSIONAL_SERVICES',
  PublicWarehousingAndStorage = 'PUBLIC_WAREHOUSING_AND_STORAGE',
  QuickCopyReproAndBlueprint = 'QUICK_COPY_REPRO_AND_BLUEPRINT',
  Railroads = 'RAILROADS',
  RealEstateAgentsAndManagersRentals = 'REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS',
  RecordStores = 'RECORD_STORES',
  RecreationalVehicleRentals = 'RECREATIONAL_VEHICLE_RENTALS',
  ReligiousGoodsStores = 'RELIGIOUS_GOODS_STORES',
  ReligiousOrganizations = 'RELIGIOUS_ORGANIZATIONS',
  RoofingSidingSheetMetal = 'ROOFING_SIDING_SHEET_METAL',
  SecretarialSupportServices = 'SECRETARIAL_SUPPORT_SERVICES',
  SecurityBrokersDealers = 'SECURITY_BROKERS_DEALERS',
  ServiceStations = 'SERVICE_STATIONS',
  SewingNeedleworkFabricAndPieceGoodsStores = 'SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES',
  ShoeRepairHatCleaning = 'SHOE_REPAIR_HAT_CLEANING',
  ShoeStores = 'SHOE_STORES',
  SmallApplianceRepair = 'SMALL_APPLIANCE_REPAIR',
  SnowmobileDealers = 'SNOWMOBILE_DEALERS',
  SpecialtyCleaning = 'SPECIALTY_CLEANING',
  SpecialTradeServices = 'SPECIAL_TRADE_SERVICES',
  SportingGoodsStores = 'SPORTING_GOODS_STORES',
  SportingRecreationCamps = 'SPORTING_RECREATION_CAMPS',
  SportsAndRidingApparelStores = 'SPORTS_AND_RIDING_APPAREL_STORES',
  SportsClubsFields = 'SPORTS_CLUBS_FIELDS',
  StampAndCoinStores = 'STAMP_AND_COIN_STORES',
  StationaryOfficeSuppliesPrintingAndWritingPaper = 'STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER',
  StationeryStoresOfficeAndSchoolSupplyStores = 'STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES',
  SwimmingPoolsSales = 'SWIMMING_POOLS_SALES',
  TailorsAlterations = 'TAILORS_ALTERATIONS',
  TaxicabsLimousines = 'TAXICABS_LIMOUSINES',
  TaxPaymentsGovernmentAgencies = 'TAX_PAYMENTS_GOVERNMENT_AGENCIES',
  TaxPreparationServices = 'TAX_PREPARATION_SERVICES',
  TelecommunicationEquipmentAndTelephoneSales = 'TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES',
  TelecommunicationServices = 'TELECOMMUNICATION_SERVICES',
  TelegraphServices = 'TELEGRAPH_SERVICES',
  TentAndAwningShops = 'TENT_AND_AWNING_SHOPS',
  TestingLaboratories = 'TESTING_LABORATORIES',
  TheatricalTicketAgencies = 'THEATRICAL_TICKET_AGENCIES',
  Timeshares = 'TIMESHARES',
  TireRetreadingAndRepair = 'TIRE_RETREADING_AND_REPAIR',
  TollsBridgeFees = 'TOLLS_BRIDGE_FEES',
  TouristAttractionsAndExhibits = 'TOURIST_ATTRACTIONS_AND_EXHIBITS',
  TowingServices = 'TOWING_SERVICES',
  TrailerParksCampgrounds = 'TRAILER_PARKS_CAMPGROUNDS',
  TransportationServices = 'TRANSPORTATION_SERVICES',
  TravelAgenciesTourOperators = 'TRAVEL_AGENCIES_TOUR_OPERATORS',
  TruckStopIteration = 'TRUCK_STOP_ITERATION',
  TruckUtilityTrailerRentals = 'TRUCK_UTILITY_TRAILER_RENTALS',
  TypesettingPlateMakingAndRelatedServices = 'TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES',
  TypewriterStores = 'TYPEWRITER_STORES',
  TUiTravelGermany = 'T_UI_TRAVEL_GERMANY',
  UniformsCommercialClothing = 'UNIFORMS_COMMERCIAL_CLOTHING',
  UsedMerchandiseAndSecondhandStores = 'USED_MERCHANDISE_AND_SECONDHAND_STORES',
  Utilities = 'UTILITIES',
  USFederalGovernmentAgenciesOrDepartments = 'U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS',
  VarietyStores = 'VARIETY_STORES',
  VeterinaryServices = 'VETERINARY_SERVICES',
  VideoAmusementGameSupplies = 'VIDEO_AMUSEMENT_GAME_SUPPLIES',
  VideoGameArcades = 'VIDEO_GAME_ARCADES',
  VideoTapeRentalStores = 'VIDEO_TAPE_RENTAL_STORES',
  VocationalTradeSchools = 'VOCATIONAL_TRADE_SCHOOLS',
  WatchJewelryRepair = 'WATCH_JEWELRY_REPAIR',
  WeldingRepair = 'WELDING_REPAIR',
  WholesaleClubs = 'WHOLESALE_CLUBS',
  WigAndToupeeStores = 'WIG_AND_TOUPEE_STORES',
  WiresMoneyOrders = 'WIRES_MONEY_ORDERS',
  WomensAccessoryAndSpecialtyShops = 'WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS',
  WomensReadyToWearStores = 'WOMENS_READY_TO_WEAR_STORES',
  WreckingAndSalvageYards = 'WRECKING_AND_SALVAGE_YARDS'
}

export enum StripeIssuingCardAuthorizationControlsBlockedCategories {
  AccountingBookkeepingServices = 'ACCOUNTING_BOOKKEEPING_SERVICES',
  AcRefrigerationRepair = 'AC_REFRIGERATION_REPAIR',
  AdvertisingServices = 'ADVERTISING_SERVICES',
  AgriculturalCooperative = 'AGRICULTURAL_COOPERATIVE',
  AirlinesAirCarriers = 'AIRLINES_AIR_CARRIERS',
  AirportsFlyingFields = 'AIRPORTS_FLYING_FIELDS',
  AmbulanceServices = 'AMBULANCE_SERVICES',
  AmusementParksCarnivals = 'AMUSEMENT_PARKS_CARNIVALS',
  AntiqueReproductions = 'ANTIQUE_REPRODUCTIONS',
  AntiqueShops = 'ANTIQUE_SHOPS',
  Aquariums = 'AQUARIUMS',
  ArchitecturalSurveyingServices = 'ARCHITECTURAL_SURVEYING_SERVICES',
  ArtistsSupplyAndCraftShops = 'ARTISTS_SUPPLY_AND_CRAFT_SHOPS',
  ArtDealersAndGalleries = 'ART_DEALERS_AND_GALLERIES',
  AutomatedCashDisburse = 'AUTOMATED_CASH_DISBURSE',
  AutomatedFuelDispensers = 'AUTOMATED_FUEL_DISPENSERS',
  AutomobileAssociations = 'AUTOMOBILE_ASSOCIATIONS',
  AutomotivePartsAndAccessoriesStores = 'AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES',
  AutomotiveTireStores = 'AUTOMOTIVE_TIRE_STORES',
  AutoAndHomeSupplyStores = 'AUTO_AND_HOME_SUPPLY_STORES',
  AutoBodyRepairShops = 'AUTO_BODY_REPAIR_SHOPS',
  AutoPaintShops = 'AUTO_PAINT_SHOPS',
  AutoServiceShops = 'AUTO_SERVICE_SHOPS',
  BailAndBondPayments = 'BAIL_AND_BOND_PAYMENTS',
  Bakeries = 'BAKERIES',
  BandsOrchestras = 'BANDS_ORCHESTRAS',
  BarberAndBeautyShops = 'BARBER_AND_BEAUTY_SHOPS',
  BettingCasinoGambling = 'BETTING_CASINO_GAMBLING',
  BicycleShops = 'BICYCLE_SHOPS',
  BilliardPoolEstablishments = 'BILLIARD_POOL_ESTABLISHMENTS',
  BoatDealers = 'BOAT_DEALERS',
  BoatRentalsAndLeases = 'BOAT_RENTALS_AND_LEASES',
  BooksPeriodicalsAndNewspapers = 'BOOKS_PERIODICALS_AND_NEWSPAPERS',
  BookStores = 'BOOK_STORES',
  BowlingAlleys = 'BOWLING_ALLEYS',
  BusinessSecretarialSchools = 'BUSINESS_SECRETARIAL_SCHOOLS',
  BusLines = 'BUS_LINES',
  BuyingShoppingServices = 'BUYING_SHOPPING_SERVICES',
  CableSatelliteAndOtherPayTelevisionAndRadio = 'CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO',
  CameraAndPhotographicSupplyStores = 'CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES',
  CandyNutAndConfectioneryStores = 'CANDY_NUT_AND_CONFECTIONERY_STORES',
  CarpentryServices = 'CARPENTRY_SERVICES',
  CarpetUpholsteryCleaning = 'CARPET_UPHOLSTERY_CLEANING',
  CarAndTruckDealersNewUsed = 'CAR_AND_TRUCK_DEALERS_NEW_USED',
  CarAndTruckDealersUsedOnly = 'CAR_AND_TRUCK_DEALERS_USED_ONLY',
  CarRentalAgencies = 'CAR_RENTAL_AGENCIES',
  CarWashes = 'CAR_WASHES',
  Caterers = 'CATERERS',
  CharitableAndSocialServiceOrganizationsFundraising = 'CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING',
  ChemicalsAndAlliedProducts = 'CHEMICALS_AND_ALLIED_PRODUCTS',
  ChildrensAndInfantsWearStores = 'CHILDRENS_AND_INFANTS_WEAR_STORES',
  ChildCareServices = 'CHILD_CARE_SERVICES',
  ChiropodistsPodiatrists = 'CHIROPODISTS_PODIATRISTS',
  Chiropractors = 'CHIROPRACTORS',
  CigarStoresAndStands = 'CIGAR_STORES_AND_STANDS',
  CivicSocialFraternalAssociations = 'CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS',
  CleaningAndMaintenance = 'CLEANING_AND_MAINTENANCE',
  ClothingRental = 'CLOTHING_RENTAL',
  CollegesUniversities = 'COLLEGES_UNIVERSITIES',
  CommercialEquipment = 'COMMERCIAL_EQUIPMENT',
  CommercialFootwear = 'COMMERCIAL_FOOTWEAR',
  CommercialPhotographyArtAndGraphics = 'COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS',
  CommuterTransportAndFerries = 'COMMUTER_TRANSPORT_AND_FERRIES',
  ComputersPeripheralsAndSoftware = 'COMPUTERS_PERIPHERALS_AND_SOFTWARE',
  ComputerNetworkServices = 'COMPUTER_NETWORK_SERVICES',
  ComputerProgramming = 'COMPUTER_PROGRAMMING',
  ComputerRepair = 'COMPUTER_REPAIR',
  ComputerSoftwareStores = 'COMPUTER_SOFTWARE_STORES',
  ConcreteWorkServices = 'CONCRETE_WORK_SERVICES',
  ConstructionMaterials = 'CONSTRUCTION_MATERIALS',
  ConsultingPublicRelations = 'CONSULTING_PUBLIC_RELATIONS',
  CorrespondenceSchools = 'CORRESPONDENCE_SCHOOLS',
  CosmeticStores = 'COSMETIC_STORES',
  CounselingServices = 'COUNSELING_SERVICES',
  CountryClubs = 'COUNTRY_CLUBS',
  CourierServices = 'COURIER_SERVICES',
  CourtCosts = 'COURT_COSTS',
  CreditReportingAgencies = 'CREDIT_REPORTING_AGENCIES',
  CruiseLines = 'CRUISE_LINES',
  DairyProductsStores = 'DAIRY_PRODUCTS_STORES',
  DanceHallStudiosSchools = 'DANCE_HALL_STUDIOS_SCHOOLS',
  DatingEscortServices = 'DATING_ESCORT_SERVICES',
  DentistsOrthodontists = 'DENTISTS_ORTHODONTISTS',
  DepartmentStores = 'DEPARTMENT_STORES',
  DetectiveAgencies = 'DETECTIVE_AGENCIES',
  DigitalGoodsApplications = 'DIGITAL_GOODS_APPLICATIONS',
  DigitalGoodsGames = 'DIGITAL_GOODS_GAMES',
  DigitalGoodsLargeVolume = 'DIGITAL_GOODS_LARGE_VOLUME',
  DigitalGoodsMedia = 'DIGITAL_GOODS_MEDIA',
  DirectMarketingCatalogMerchant = 'DIRECT_MARKETING_CATALOG_MERCHANT',
  DirectMarketingCombinationCatalogAndRetailMerchant = 'DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT',
  DirectMarketingInboundTelemarketing = 'DIRECT_MARKETING_INBOUND_TELEMARKETING',
  DirectMarketingInsuranceServices = 'DIRECT_MARKETING_INSURANCE_SERVICES',
  DirectMarketingOther = 'DIRECT_MARKETING_OTHER',
  DirectMarketingOutboundTelemarketing = 'DIRECT_MARKETING_OUTBOUND_TELEMARKETING',
  DirectMarketingSubscription = 'DIRECT_MARKETING_SUBSCRIPTION',
  DirectMarketingTravel = 'DIRECT_MARKETING_TRAVEL',
  DiscountStores = 'DISCOUNT_STORES',
  Doctors = 'DOCTORS',
  DoorToDoorSales = 'DOOR_TO_DOOR_SALES',
  DraperyWindowCoveringAndUpholsteryStores = 'DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES',
  DrinkingPlaces = 'DRINKING_PLACES',
  DrugsDrugProprietariesAndDruggistSundries = 'DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES',
  DrugStoresAndPharmacies = 'DRUG_STORES_AND_PHARMACIES',
  DryCleaners = 'DRY_CLEANERS',
  DurableGoods = 'DURABLE_GOODS',
  DutyFreeStores = 'DUTY_FREE_STORES',
  EatingPlacesRestaurants = 'EATING_PLACES_RESTAURANTS',
  EducationalServices = 'EDUCATIONAL_SERVICES',
  ElectricalPartsAndEquipment = 'ELECTRICAL_PARTS_AND_EQUIPMENT',
  ElectricalServices = 'ELECTRICAL_SERVICES',
  ElectricRazorStores = 'ELECTRIC_RAZOR_STORES',
  ElectricVehicleCharging = 'ELECTRIC_VEHICLE_CHARGING',
  ElectronicsRepairShops = 'ELECTRONICS_REPAIR_SHOPS',
  ElectronicsStores = 'ELECTRONICS_STORES',
  ElementarySecondarySchools = 'ELEMENTARY_SECONDARY_SCHOOLS',
  EmergencyServicesGcasVisaUseOnly = 'EMERGENCY_SERVICES_GCAS_VISA_USE_ONLY',
  EmploymentTempAgencies = 'EMPLOYMENT_TEMP_AGENCIES',
  EquipmentRental = 'EQUIPMENT_RENTAL',
  ExterminatingServices = 'EXTERMINATING_SERVICES',
  FamilyClothingStores = 'FAMILY_CLOTHING_STORES',
  FastFoodRestaurants = 'FAST_FOOD_RESTAURANTS',
  FinancialInstitutions = 'FINANCIAL_INSTITUTIONS',
  FinesGovernmentAdministrativeEntities = 'FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES',
  FireplaceFireplaceScreensAndAccessoriesStores = 'FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES',
  FloorCoveringStores = 'FLOOR_COVERING_STORES',
  Florists = 'FLORISTS',
  FloristsSuppliesNurseryStockAndFlowers = 'FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS',
  FreezerAndLockerMeatProvisioners = 'FREEZER_AND_LOCKER_MEAT_PROVISIONERS',
  FuelDealersNonAutomotive = 'FUEL_DEALERS_NON_AUTOMOTIVE',
  FuneralServicesCrematories = 'FUNERAL_SERVICES_CREMATORIES',
  FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances = 'FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES',
  FurnitureRepairRefinishing = 'FURNITURE_REPAIR_REFINISHING',
  FurriersAndFurShops = 'FURRIERS_AND_FUR_SHOPS',
  GeneralServices = 'GENERAL_SERVICES',
  GiftCardNoveltyAndSouvenirShops = 'GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS',
  GlasswareCrystalStores = 'GLASSWARE_CRYSTAL_STORES',
  GlassPaintAndWallpaperStores = 'GLASS_PAINT_AND_WALLPAPER_STORES',
  GolfCoursesPublic = 'GOLF_COURSES_PUBLIC',
  GovernmentLicensedHorseDogRacingUsRegionOnly = 'GOVERNMENT_LICENSED_HORSE_DOG_RACING_US_REGION_ONLY',
  GovernmentLicensedOnlineCasionsOnlineGamblingUsRegionOnly = 'GOVERNMENT_LICENSED_ONLINE_CASIONS_ONLINE_GAMBLING_US_REGION_ONLY',
  GovernmentOwnedLotteriesNonUsRegion = 'GOVERNMENT_OWNED_LOTTERIES_NON_US_REGION',
  GovernmentOwnedLotteriesUsRegionOnly = 'GOVERNMENT_OWNED_LOTTERIES_US_REGION_ONLY',
  GovernmentServices = 'GOVERNMENT_SERVICES',
  GroceryStoresSupermarkets = 'GROCERY_STORES_SUPERMARKETS',
  HardwareEquipmentAndSupplies = 'HARDWARE_EQUIPMENT_AND_SUPPLIES',
  HardwareStores = 'HARDWARE_STORES',
  HealthAndBeautySpas = 'HEALTH_AND_BEAUTY_SPAS',
  HearingAidsSalesAndSupplies = 'HEARING_AIDS_SALES_AND_SUPPLIES',
  HeatingPlumbingAC = 'HEATING_PLUMBING_A_C',
  HobbyToyAndGameShops = 'HOBBY_TOY_AND_GAME_SHOPS',
  HomeSupplyWarehouseStores = 'HOME_SUPPLY_WAREHOUSE_STORES',
  Hospitals = 'HOSPITALS',
  HotelsMotelsAndResorts = 'HOTELS_MOTELS_AND_RESORTS',
  HouseholdApplianceStores = 'HOUSEHOLD_APPLIANCE_STORES',
  IndustrialSupplies = 'INDUSTRIAL_SUPPLIES',
  InformationRetrievalServices = 'INFORMATION_RETRIEVAL_SERVICES',
  InsuranceDefault = 'INSURANCE_DEFAULT',
  InsuranceUnderwritingPremiums = 'INSURANCE_UNDERWRITING_PREMIUMS',
  IntraCompanyPurchases = 'INTRA_COMPANY_PURCHASES',
  JewelryStoresWatchesClocksAndSilverwareStores = 'JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES',
  LandscapingServices = 'LANDSCAPING_SERVICES',
  Laundries = 'LAUNDRIES',
  LaundryCleaningServices = 'LAUNDRY_CLEANING_SERVICES',
  LegalServicesAttorneys = 'LEGAL_SERVICES_ATTORNEYS',
  LuggageAndLeatherGoodsStores = 'LUGGAGE_AND_LEATHER_GOODS_STORES',
  LumberBuildingMaterialsStores = 'LUMBER_BUILDING_MATERIALS_STORES',
  ManualCashDisburse = 'MANUAL_CASH_DISBURSE',
  MarinasServiceAndSupplies = 'MARINAS_SERVICE_AND_SUPPLIES',
  Marketplaces = 'MARKETPLACES',
  MasonryStoneworkAndPlaster = 'MASONRY_STONEWORK_AND_PLASTER',
  MassageParlors = 'MASSAGE_PARLORS',
  MedicalAndDentalLabs = 'MEDICAL_AND_DENTAL_LABS',
  MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies = 'MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES',
  MedicalServices = 'MEDICAL_SERVICES',
  MembershipOrganizations = 'MEMBERSHIP_ORGANIZATIONS',
  MensAndBoysClothingAndAccessoriesStores = 'MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES',
  MensWomensClothingStores = 'MENS_WOMENS_CLOTHING_STORES',
  MetalServiceCenters = 'METAL_SERVICE_CENTERS',
  Miscellaneous = 'MISCELLANEOUS',
  MiscellaneousApparelAndAccessoryShops = 'MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS',
  MiscellaneousAutoDealers = 'MISCELLANEOUS_AUTO_DEALERS',
  MiscellaneousBusinessServices = 'MISCELLANEOUS_BUSINESS_SERVICES',
  MiscellaneousFoodStores = 'MISCELLANEOUS_FOOD_STORES',
  MiscellaneousGeneralMerchandise = 'MISCELLANEOUS_GENERAL_MERCHANDISE',
  MiscellaneousGeneralServices = 'MISCELLANEOUS_GENERAL_SERVICES',
  MiscellaneousHomeFurnishingSpecialtyStores = 'MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES',
  MiscellaneousPublishingAndPrinting = 'MISCELLANEOUS_PUBLISHING_AND_PRINTING',
  MiscellaneousRecreationServices = 'MISCELLANEOUS_RECREATION_SERVICES',
  MiscellaneousRepairShops = 'MISCELLANEOUS_REPAIR_SHOPS',
  MiscellaneousSpecialtyRetail = 'MISCELLANEOUS_SPECIALTY_RETAIL',
  MobileHomeDealers = 'MOBILE_HOME_DEALERS',
  MotionPictureTheaters = 'MOTION_PICTURE_THEATERS',
  MotorcycleShopsAndDealers = 'MOTORCYCLE_SHOPS_AND_DEALERS',
  MotorcycleShopsDealers = 'MOTORCYCLE_SHOPS_DEALERS',
  MotorFreightCarriersAndTrucking = 'MOTOR_FREIGHT_CARRIERS_AND_TRUCKING',
  MotorHomesDealers = 'MOTOR_HOMES_DEALERS',
  MotorVehicleSuppliesAndNewParts = 'MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS',
  MusicStoresMusicalInstrumentsPianosAndSheetMusic = 'MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC',
  NewsDealersAndNewsstands = 'NEWS_DEALERS_AND_NEWSSTANDS',
  NondurableGoods = 'NONDURABLE_GOODS',
  NonFiMoneyOrders = 'NON_FI_MONEY_ORDERS',
  NonFiStoredValueCardPurchaseLoad = 'NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD',
  NurseriesLawnAndGardenSupplyStores = 'NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES',
  NursingPersonalCare = 'NURSING_PERSONAL_CARE',
  OfficeAndCommercialFurniture = 'OFFICE_AND_COMMERCIAL_FURNITURE',
  OpticiansEyeglasses = 'OPTICIANS_EYEGLASSES',
  OptometristsOphthalmologist = 'OPTOMETRISTS_OPHTHALMOLOGIST',
  OrthopedicGoodsProstheticDevices = 'ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES',
  Osteopaths = 'OSTEOPATHS',
  PackageStoresBeerWineAndLiquor = 'PACKAGE_STORES_BEER_WINE_AND_LIQUOR',
  PaintsVarnishesAndSupplies = 'PAINTS_VARNISHES_AND_SUPPLIES',
  ParkingLotsGarages = 'PARKING_LOTS_GARAGES',
  PassengerRailways = 'PASSENGER_RAILWAYS',
  PawnShops = 'PAWN_SHOPS',
  PetroleumAndPetroleumProducts = 'PETROLEUM_AND_PETROLEUM_PRODUCTS',
  PetShopsPetFoodAndSupplies = 'PET_SHOPS_PET_FOOD_AND_SUPPLIES',
  PhotographicPhotocopyMicrofilmEquipmentAndSupplies = 'PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES',
  PhotographicStudios = 'PHOTOGRAPHIC_STUDIOS',
  PhotoDeveloping = 'PHOTO_DEVELOPING',
  PictureVideoProduction = 'PICTURE_VIDEO_PRODUCTION',
  PieceGoodsNotionsAndOtherDryGoods = 'PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS',
  PlumbingHeatingEquipmentAndSupplies = 'PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES',
  PoliticalOrganizations = 'POLITICAL_ORGANIZATIONS',
  PostalServicesGovernmentOnly = 'POSTAL_SERVICES_GOVERNMENT_ONLY',
  PreciousStonesAndMetalsWatchesAndJewelry = 'PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY',
  ProfessionalServices = 'PROFESSIONAL_SERVICES',
  PublicWarehousingAndStorage = 'PUBLIC_WAREHOUSING_AND_STORAGE',
  QuickCopyReproAndBlueprint = 'QUICK_COPY_REPRO_AND_BLUEPRINT',
  Railroads = 'RAILROADS',
  RealEstateAgentsAndManagersRentals = 'REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS',
  RecordStores = 'RECORD_STORES',
  RecreationalVehicleRentals = 'RECREATIONAL_VEHICLE_RENTALS',
  ReligiousGoodsStores = 'RELIGIOUS_GOODS_STORES',
  ReligiousOrganizations = 'RELIGIOUS_ORGANIZATIONS',
  RoofingSidingSheetMetal = 'ROOFING_SIDING_SHEET_METAL',
  SecretarialSupportServices = 'SECRETARIAL_SUPPORT_SERVICES',
  SecurityBrokersDealers = 'SECURITY_BROKERS_DEALERS',
  ServiceStations = 'SERVICE_STATIONS',
  SewingNeedleworkFabricAndPieceGoodsStores = 'SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES',
  ShoeRepairHatCleaning = 'SHOE_REPAIR_HAT_CLEANING',
  ShoeStores = 'SHOE_STORES',
  SmallApplianceRepair = 'SMALL_APPLIANCE_REPAIR',
  SnowmobileDealers = 'SNOWMOBILE_DEALERS',
  SpecialtyCleaning = 'SPECIALTY_CLEANING',
  SpecialTradeServices = 'SPECIAL_TRADE_SERVICES',
  SportingGoodsStores = 'SPORTING_GOODS_STORES',
  SportingRecreationCamps = 'SPORTING_RECREATION_CAMPS',
  SportsAndRidingApparelStores = 'SPORTS_AND_RIDING_APPAREL_STORES',
  SportsClubsFields = 'SPORTS_CLUBS_FIELDS',
  StampAndCoinStores = 'STAMP_AND_COIN_STORES',
  StationaryOfficeSuppliesPrintingAndWritingPaper = 'STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER',
  StationeryStoresOfficeAndSchoolSupplyStores = 'STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES',
  SwimmingPoolsSales = 'SWIMMING_POOLS_SALES',
  TailorsAlterations = 'TAILORS_ALTERATIONS',
  TaxicabsLimousines = 'TAXICABS_LIMOUSINES',
  TaxPaymentsGovernmentAgencies = 'TAX_PAYMENTS_GOVERNMENT_AGENCIES',
  TaxPreparationServices = 'TAX_PREPARATION_SERVICES',
  TelecommunicationEquipmentAndTelephoneSales = 'TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES',
  TelecommunicationServices = 'TELECOMMUNICATION_SERVICES',
  TelegraphServices = 'TELEGRAPH_SERVICES',
  TentAndAwningShops = 'TENT_AND_AWNING_SHOPS',
  TestingLaboratories = 'TESTING_LABORATORIES',
  TheatricalTicketAgencies = 'THEATRICAL_TICKET_AGENCIES',
  Timeshares = 'TIMESHARES',
  TireRetreadingAndRepair = 'TIRE_RETREADING_AND_REPAIR',
  TollsBridgeFees = 'TOLLS_BRIDGE_FEES',
  TouristAttractionsAndExhibits = 'TOURIST_ATTRACTIONS_AND_EXHIBITS',
  TowingServices = 'TOWING_SERVICES',
  TrailerParksCampgrounds = 'TRAILER_PARKS_CAMPGROUNDS',
  TransportationServices = 'TRANSPORTATION_SERVICES',
  TravelAgenciesTourOperators = 'TRAVEL_AGENCIES_TOUR_OPERATORS',
  TruckStopIteration = 'TRUCK_STOP_ITERATION',
  TruckUtilityTrailerRentals = 'TRUCK_UTILITY_TRAILER_RENTALS',
  TypesettingPlateMakingAndRelatedServices = 'TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES',
  TypewriterStores = 'TYPEWRITER_STORES',
  TUiTravelGermany = 'T_UI_TRAVEL_GERMANY',
  UniformsCommercialClothing = 'UNIFORMS_COMMERCIAL_CLOTHING',
  UsedMerchandiseAndSecondhandStores = 'USED_MERCHANDISE_AND_SECONDHAND_STORES',
  Utilities = 'UTILITIES',
  USFederalGovernmentAgenciesOrDepartments = 'U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS',
  VarietyStores = 'VARIETY_STORES',
  VeterinaryServices = 'VETERINARY_SERVICES',
  VideoAmusementGameSupplies = 'VIDEO_AMUSEMENT_GAME_SUPPLIES',
  VideoGameArcades = 'VIDEO_GAME_ARCADES',
  VideoTapeRentalStores = 'VIDEO_TAPE_RENTAL_STORES',
  VocationalTradeSchools = 'VOCATIONAL_TRADE_SCHOOLS',
  WatchJewelryRepair = 'WATCH_JEWELRY_REPAIR',
  WeldingRepair = 'WELDING_REPAIR',
  WholesaleClubs = 'WHOLESALE_CLUBS',
  WigAndToupeeStores = 'WIG_AND_TOUPEE_STORES',
  WiresMoneyOrders = 'WIRES_MONEY_ORDERS',
  WomensAccessoryAndSpecialtyShops = 'WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS',
  WomensReadyToWearStores = 'WOMENS_READY_TO_WEAR_STORES',
  WreckingAndSalvageYards = 'WRECKING_AND_SALVAGE_YARDS'
}

export enum StripeIssuingCardCancellationReason {
  DesignRejected = 'DESIGN_REJECTED',
  Lost = 'LOST',
  Stolen = 'STOLEN'
}

export type StripeIssuingCardGooglePay = {
  __typename?: 'StripeIssuingCardGooglePay';
  eligible: Scalars['Boolean'];
  ineligibleReason?: Maybe<StripeIssuingCardGooglePayIneligibleReason>;
};

export enum StripeIssuingCardGooglePayIneligibleReason {
  MissingAgreement = 'MISSING_AGREEMENT',
  MissingCardholderContact = 'MISSING_CARDHOLDER_CONTACT',
  UnsupportedRegion = 'UNSUPPORTED_REGION'
}

export enum StripeIssuingCardObject {
  IssuingCard = 'ISSUING_CARD'
}

export enum StripeIssuingCardReplacementReason {
  Damaged = 'DAMAGED',
  Expired = 'EXPIRED',
  Lost = 'LOST',
  Stolen = 'STOLEN'
}

export type StripeIssuingCardShipping = {
  __typename?: 'StripeIssuingCardShipping';
  address: StripeAddress;
  carrier?: Maybe<StripeIssuingCardShippingCarrier>;
  customs?: Maybe<StripeIssuingCardShippingCustoms>;
  eta?: Maybe<Scalars['Int']>;
  name: Scalars['String'];
  phoneNumber?: Maybe<Scalars['String']>;
  requireSignature?: Maybe<Scalars['Boolean']>;
  service: StripeIssuingCardShippingService;
  status?: Maybe<StripeIssuingCardShippingStatus>;
  trackingNumber?: Maybe<Scalars['String']>;
  trackingUrl?: Maybe<Scalars['String']>;
  type: StripeIssuingCardShippingType;
};

export enum StripeIssuingCardShippingCarrier {
  Dhl = 'DHL',
  Fedex = 'FEDEX',
  RoyalMail = 'ROYAL_MAIL',
  Usps = 'USPS'
}

export type StripeIssuingCardShippingCustoms = {
  __typename?: 'StripeIssuingCardShippingCustoms';
  eoriNumber?: Maybe<Scalars['String']>;
};

export enum StripeIssuingCardShippingService {
  Express = 'EXPRESS',
  Priority = 'PRIORITY',
  Standard = 'STANDARD'
}

export enum StripeIssuingCardShippingStatus {
  Canceled = 'CANCELED',
  Delivered = 'DELIVERED',
  Failure = 'FAILURE',
  Pending = 'PENDING',
  Returned = 'RETURNED',
  Shipped = 'SHIPPED'
}

export enum StripeIssuingCardShippingType {
  Bulk = 'BULK',
  Individual = 'INDIVIDUAL'
}

export type StripeIssuingCardSpendingLimit = {
  __typename?: 'StripeIssuingCardSpendingLimit';
  amount: Scalars['Int'];
  categories?: Maybe<Array<StripeIssuingCardSpendingLimitCategories>>;
  interval: StripeIssuingCardSpendingLimitInterval;
};

export enum StripeIssuingCardSpendingLimitCategories {
  AccountingBookkeepingServices = 'ACCOUNTING_BOOKKEEPING_SERVICES',
  AcRefrigerationRepair = 'AC_REFRIGERATION_REPAIR',
  AdvertisingServices = 'ADVERTISING_SERVICES',
  AgriculturalCooperative = 'AGRICULTURAL_COOPERATIVE',
  AirlinesAirCarriers = 'AIRLINES_AIR_CARRIERS',
  AirportsFlyingFields = 'AIRPORTS_FLYING_FIELDS',
  AmbulanceServices = 'AMBULANCE_SERVICES',
  AmusementParksCarnivals = 'AMUSEMENT_PARKS_CARNIVALS',
  AntiqueReproductions = 'ANTIQUE_REPRODUCTIONS',
  AntiqueShops = 'ANTIQUE_SHOPS',
  Aquariums = 'AQUARIUMS',
  ArchitecturalSurveyingServices = 'ARCHITECTURAL_SURVEYING_SERVICES',
  ArtistsSupplyAndCraftShops = 'ARTISTS_SUPPLY_AND_CRAFT_SHOPS',
  ArtDealersAndGalleries = 'ART_DEALERS_AND_GALLERIES',
  AutomatedCashDisburse = 'AUTOMATED_CASH_DISBURSE',
  AutomatedFuelDispensers = 'AUTOMATED_FUEL_DISPENSERS',
  AutomobileAssociations = 'AUTOMOBILE_ASSOCIATIONS',
  AutomotivePartsAndAccessoriesStores = 'AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES',
  AutomotiveTireStores = 'AUTOMOTIVE_TIRE_STORES',
  AutoAndHomeSupplyStores = 'AUTO_AND_HOME_SUPPLY_STORES',
  AutoBodyRepairShops = 'AUTO_BODY_REPAIR_SHOPS',
  AutoPaintShops = 'AUTO_PAINT_SHOPS',
  AutoServiceShops = 'AUTO_SERVICE_SHOPS',
  BailAndBondPayments = 'BAIL_AND_BOND_PAYMENTS',
  Bakeries = 'BAKERIES',
  BandsOrchestras = 'BANDS_ORCHESTRAS',
  BarberAndBeautyShops = 'BARBER_AND_BEAUTY_SHOPS',
  BettingCasinoGambling = 'BETTING_CASINO_GAMBLING',
  BicycleShops = 'BICYCLE_SHOPS',
  BilliardPoolEstablishments = 'BILLIARD_POOL_ESTABLISHMENTS',
  BoatDealers = 'BOAT_DEALERS',
  BoatRentalsAndLeases = 'BOAT_RENTALS_AND_LEASES',
  BooksPeriodicalsAndNewspapers = 'BOOKS_PERIODICALS_AND_NEWSPAPERS',
  BookStores = 'BOOK_STORES',
  BowlingAlleys = 'BOWLING_ALLEYS',
  BusinessSecretarialSchools = 'BUSINESS_SECRETARIAL_SCHOOLS',
  BusLines = 'BUS_LINES',
  BuyingShoppingServices = 'BUYING_SHOPPING_SERVICES',
  CableSatelliteAndOtherPayTelevisionAndRadio = 'CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO',
  CameraAndPhotographicSupplyStores = 'CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES',
  CandyNutAndConfectioneryStores = 'CANDY_NUT_AND_CONFECTIONERY_STORES',
  CarpentryServices = 'CARPENTRY_SERVICES',
  CarpetUpholsteryCleaning = 'CARPET_UPHOLSTERY_CLEANING',
  CarAndTruckDealersNewUsed = 'CAR_AND_TRUCK_DEALERS_NEW_USED',
  CarAndTruckDealersUsedOnly = 'CAR_AND_TRUCK_DEALERS_USED_ONLY',
  CarRentalAgencies = 'CAR_RENTAL_AGENCIES',
  CarWashes = 'CAR_WASHES',
  Caterers = 'CATERERS',
  CharitableAndSocialServiceOrganizationsFundraising = 'CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING',
  ChemicalsAndAlliedProducts = 'CHEMICALS_AND_ALLIED_PRODUCTS',
  ChildrensAndInfantsWearStores = 'CHILDRENS_AND_INFANTS_WEAR_STORES',
  ChildCareServices = 'CHILD_CARE_SERVICES',
  ChiropodistsPodiatrists = 'CHIROPODISTS_PODIATRISTS',
  Chiropractors = 'CHIROPRACTORS',
  CigarStoresAndStands = 'CIGAR_STORES_AND_STANDS',
  CivicSocialFraternalAssociations = 'CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS',
  CleaningAndMaintenance = 'CLEANING_AND_MAINTENANCE',
  ClothingRental = 'CLOTHING_RENTAL',
  CollegesUniversities = 'COLLEGES_UNIVERSITIES',
  CommercialEquipment = 'COMMERCIAL_EQUIPMENT',
  CommercialFootwear = 'COMMERCIAL_FOOTWEAR',
  CommercialPhotographyArtAndGraphics = 'COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS',
  CommuterTransportAndFerries = 'COMMUTER_TRANSPORT_AND_FERRIES',
  ComputersPeripheralsAndSoftware = 'COMPUTERS_PERIPHERALS_AND_SOFTWARE',
  ComputerNetworkServices = 'COMPUTER_NETWORK_SERVICES',
  ComputerProgramming = 'COMPUTER_PROGRAMMING',
  ComputerRepair = 'COMPUTER_REPAIR',
  ComputerSoftwareStores = 'COMPUTER_SOFTWARE_STORES',
  ConcreteWorkServices = 'CONCRETE_WORK_SERVICES',
  ConstructionMaterials = 'CONSTRUCTION_MATERIALS',
  ConsultingPublicRelations = 'CONSULTING_PUBLIC_RELATIONS',
  CorrespondenceSchools = 'CORRESPONDENCE_SCHOOLS',
  CosmeticStores = 'COSMETIC_STORES',
  CounselingServices = 'COUNSELING_SERVICES',
  CountryClubs = 'COUNTRY_CLUBS',
  CourierServices = 'COURIER_SERVICES',
  CourtCosts = 'COURT_COSTS',
  CreditReportingAgencies = 'CREDIT_REPORTING_AGENCIES',
  CruiseLines = 'CRUISE_LINES',
  DairyProductsStores = 'DAIRY_PRODUCTS_STORES',
  DanceHallStudiosSchools = 'DANCE_HALL_STUDIOS_SCHOOLS',
  DatingEscortServices = 'DATING_ESCORT_SERVICES',
  DentistsOrthodontists = 'DENTISTS_ORTHODONTISTS',
  DepartmentStores = 'DEPARTMENT_STORES',
  DetectiveAgencies = 'DETECTIVE_AGENCIES',
  DigitalGoodsApplications = 'DIGITAL_GOODS_APPLICATIONS',
  DigitalGoodsGames = 'DIGITAL_GOODS_GAMES',
  DigitalGoodsLargeVolume = 'DIGITAL_GOODS_LARGE_VOLUME',
  DigitalGoodsMedia = 'DIGITAL_GOODS_MEDIA',
  DirectMarketingCatalogMerchant = 'DIRECT_MARKETING_CATALOG_MERCHANT',
  DirectMarketingCombinationCatalogAndRetailMerchant = 'DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT',
  DirectMarketingInboundTelemarketing = 'DIRECT_MARKETING_INBOUND_TELEMARKETING',
  DirectMarketingInsuranceServices = 'DIRECT_MARKETING_INSURANCE_SERVICES',
  DirectMarketingOther = 'DIRECT_MARKETING_OTHER',
  DirectMarketingOutboundTelemarketing = 'DIRECT_MARKETING_OUTBOUND_TELEMARKETING',
  DirectMarketingSubscription = 'DIRECT_MARKETING_SUBSCRIPTION',
  DirectMarketingTravel = 'DIRECT_MARKETING_TRAVEL',
  DiscountStores = 'DISCOUNT_STORES',
  Doctors = 'DOCTORS',
  DoorToDoorSales = 'DOOR_TO_DOOR_SALES',
  DraperyWindowCoveringAndUpholsteryStores = 'DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES',
  DrinkingPlaces = 'DRINKING_PLACES',
  DrugsDrugProprietariesAndDruggistSundries = 'DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES',
  DrugStoresAndPharmacies = 'DRUG_STORES_AND_PHARMACIES',
  DryCleaners = 'DRY_CLEANERS',
  DurableGoods = 'DURABLE_GOODS',
  DutyFreeStores = 'DUTY_FREE_STORES',
  EatingPlacesRestaurants = 'EATING_PLACES_RESTAURANTS',
  EducationalServices = 'EDUCATIONAL_SERVICES',
  ElectricalPartsAndEquipment = 'ELECTRICAL_PARTS_AND_EQUIPMENT',
  ElectricalServices = 'ELECTRICAL_SERVICES',
  ElectricRazorStores = 'ELECTRIC_RAZOR_STORES',
  ElectricVehicleCharging = 'ELECTRIC_VEHICLE_CHARGING',
  ElectronicsRepairShops = 'ELECTRONICS_REPAIR_SHOPS',
  ElectronicsStores = 'ELECTRONICS_STORES',
  ElementarySecondarySchools = 'ELEMENTARY_SECONDARY_SCHOOLS',
  EmergencyServicesGcasVisaUseOnly = 'EMERGENCY_SERVICES_GCAS_VISA_USE_ONLY',
  EmploymentTempAgencies = 'EMPLOYMENT_TEMP_AGENCIES',
  EquipmentRental = 'EQUIPMENT_RENTAL',
  ExterminatingServices = 'EXTERMINATING_SERVICES',
  FamilyClothingStores = 'FAMILY_CLOTHING_STORES',
  FastFoodRestaurants = 'FAST_FOOD_RESTAURANTS',
  FinancialInstitutions = 'FINANCIAL_INSTITUTIONS',
  FinesGovernmentAdministrativeEntities = 'FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES',
  FireplaceFireplaceScreensAndAccessoriesStores = 'FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES',
  FloorCoveringStores = 'FLOOR_COVERING_STORES',
  Florists = 'FLORISTS',
  FloristsSuppliesNurseryStockAndFlowers = 'FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS',
  FreezerAndLockerMeatProvisioners = 'FREEZER_AND_LOCKER_MEAT_PROVISIONERS',
  FuelDealersNonAutomotive = 'FUEL_DEALERS_NON_AUTOMOTIVE',
  FuneralServicesCrematories = 'FUNERAL_SERVICES_CREMATORIES',
  FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances = 'FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES',
  FurnitureRepairRefinishing = 'FURNITURE_REPAIR_REFINISHING',
  FurriersAndFurShops = 'FURRIERS_AND_FUR_SHOPS',
  GeneralServices = 'GENERAL_SERVICES',
  GiftCardNoveltyAndSouvenirShops = 'GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS',
  GlasswareCrystalStores = 'GLASSWARE_CRYSTAL_STORES',
  GlassPaintAndWallpaperStores = 'GLASS_PAINT_AND_WALLPAPER_STORES',
  GolfCoursesPublic = 'GOLF_COURSES_PUBLIC',
  GovernmentLicensedHorseDogRacingUsRegionOnly = 'GOVERNMENT_LICENSED_HORSE_DOG_RACING_US_REGION_ONLY',
  GovernmentLicensedOnlineCasionsOnlineGamblingUsRegionOnly = 'GOVERNMENT_LICENSED_ONLINE_CASIONS_ONLINE_GAMBLING_US_REGION_ONLY',
  GovernmentOwnedLotteriesNonUsRegion = 'GOVERNMENT_OWNED_LOTTERIES_NON_US_REGION',
  GovernmentOwnedLotteriesUsRegionOnly = 'GOVERNMENT_OWNED_LOTTERIES_US_REGION_ONLY',
  GovernmentServices = 'GOVERNMENT_SERVICES',
  GroceryStoresSupermarkets = 'GROCERY_STORES_SUPERMARKETS',
  HardwareEquipmentAndSupplies = 'HARDWARE_EQUIPMENT_AND_SUPPLIES',
  HardwareStores = 'HARDWARE_STORES',
  HealthAndBeautySpas = 'HEALTH_AND_BEAUTY_SPAS',
  HearingAidsSalesAndSupplies = 'HEARING_AIDS_SALES_AND_SUPPLIES',
  HeatingPlumbingAC = 'HEATING_PLUMBING_A_C',
  HobbyToyAndGameShops = 'HOBBY_TOY_AND_GAME_SHOPS',
  HomeSupplyWarehouseStores = 'HOME_SUPPLY_WAREHOUSE_STORES',
  Hospitals = 'HOSPITALS',
  HotelsMotelsAndResorts = 'HOTELS_MOTELS_AND_RESORTS',
  HouseholdApplianceStores = 'HOUSEHOLD_APPLIANCE_STORES',
  IndustrialSupplies = 'INDUSTRIAL_SUPPLIES',
  InformationRetrievalServices = 'INFORMATION_RETRIEVAL_SERVICES',
  InsuranceDefault = 'INSURANCE_DEFAULT',
  InsuranceUnderwritingPremiums = 'INSURANCE_UNDERWRITING_PREMIUMS',
  IntraCompanyPurchases = 'INTRA_COMPANY_PURCHASES',
  JewelryStoresWatchesClocksAndSilverwareStores = 'JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES',
  LandscapingServices = 'LANDSCAPING_SERVICES',
  Laundries = 'LAUNDRIES',
  LaundryCleaningServices = 'LAUNDRY_CLEANING_SERVICES',
  LegalServicesAttorneys = 'LEGAL_SERVICES_ATTORNEYS',
  LuggageAndLeatherGoodsStores = 'LUGGAGE_AND_LEATHER_GOODS_STORES',
  LumberBuildingMaterialsStores = 'LUMBER_BUILDING_MATERIALS_STORES',
  ManualCashDisburse = 'MANUAL_CASH_DISBURSE',
  MarinasServiceAndSupplies = 'MARINAS_SERVICE_AND_SUPPLIES',
  Marketplaces = 'MARKETPLACES',
  MasonryStoneworkAndPlaster = 'MASONRY_STONEWORK_AND_PLASTER',
  MassageParlors = 'MASSAGE_PARLORS',
  MedicalAndDentalLabs = 'MEDICAL_AND_DENTAL_LABS',
  MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies = 'MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES',
  MedicalServices = 'MEDICAL_SERVICES',
  MembershipOrganizations = 'MEMBERSHIP_ORGANIZATIONS',
  MensAndBoysClothingAndAccessoriesStores = 'MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES',
  MensWomensClothingStores = 'MENS_WOMENS_CLOTHING_STORES',
  MetalServiceCenters = 'METAL_SERVICE_CENTERS',
  Miscellaneous = 'MISCELLANEOUS',
  MiscellaneousApparelAndAccessoryShops = 'MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS',
  MiscellaneousAutoDealers = 'MISCELLANEOUS_AUTO_DEALERS',
  MiscellaneousBusinessServices = 'MISCELLANEOUS_BUSINESS_SERVICES',
  MiscellaneousFoodStores = 'MISCELLANEOUS_FOOD_STORES',
  MiscellaneousGeneralMerchandise = 'MISCELLANEOUS_GENERAL_MERCHANDISE',
  MiscellaneousGeneralServices = 'MISCELLANEOUS_GENERAL_SERVICES',
  MiscellaneousHomeFurnishingSpecialtyStores = 'MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES',
  MiscellaneousPublishingAndPrinting = 'MISCELLANEOUS_PUBLISHING_AND_PRINTING',
  MiscellaneousRecreationServices = 'MISCELLANEOUS_RECREATION_SERVICES',
  MiscellaneousRepairShops = 'MISCELLANEOUS_REPAIR_SHOPS',
  MiscellaneousSpecialtyRetail = 'MISCELLANEOUS_SPECIALTY_RETAIL',
  MobileHomeDealers = 'MOBILE_HOME_DEALERS',
  MotionPictureTheaters = 'MOTION_PICTURE_THEATERS',
  MotorcycleShopsAndDealers = 'MOTORCYCLE_SHOPS_AND_DEALERS',
  MotorcycleShopsDealers = 'MOTORCYCLE_SHOPS_DEALERS',
  MotorFreightCarriersAndTrucking = 'MOTOR_FREIGHT_CARRIERS_AND_TRUCKING',
  MotorHomesDealers = 'MOTOR_HOMES_DEALERS',
  MotorVehicleSuppliesAndNewParts = 'MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS',
  MusicStoresMusicalInstrumentsPianosAndSheetMusic = 'MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC',
  NewsDealersAndNewsstands = 'NEWS_DEALERS_AND_NEWSSTANDS',
  NondurableGoods = 'NONDURABLE_GOODS',
  NonFiMoneyOrders = 'NON_FI_MONEY_ORDERS',
  NonFiStoredValueCardPurchaseLoad = 'NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD',
  NurseriesLawnAndGardenSupplyStores = 'NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES',
  NursingPersonalCare = 'NURSING_PERSONAL_CARE',
  OfficeAndCommercialFurniture = 'OFFICE_AND_COMMERCIAL_FURNITURE',
  OpticiansEyeglasses = 'OPTICIANS_EYEGLASSES',
  OptometristsOphthalmologist = 'OPTOMETRISTS_OPHTHALMOLOGIST',
  OrthopedicGoodsProstheticDevices = 'ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES',
  Osteopaths = 'OSTEOPATHS',
  PackageStoresBeerWineAndLiquor = 'PACKAGE_STORES_BEER_WINE_AND_LIQUOR',
  PaintsVarnishesAndSupplies = 'PAINTS_VARNISHES_AND_SUPPLIES',
  ParkingLotsGarages = 'PARKING_LOTS_GARAGES',
  PassengerRailways = 'PASSENGER_RAILWAYS',
  PawnShops = 'PAWN_SHOPS',
  PetroleumAndPetroleumProducts = 'PETROLEUM_AND_PETROLEUM_PRODUCTS',
  PetShopsPetFoodAndSupplies = 'PET_SHOPS_PET_FOOD_AND_SUPPLIES',
  PhotographicPhotocopyMicrofilmEquipmentAndSupplies = 'PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES',
  PhotographicStudios = 'PHOTOGRAPHIC_STUDIOS',
  PhotoDeveloping = 'PHOTO_DEVELOPING',
  PictureVideoProduction = 'PICTURE_VIDEO_PRODUCTION',
  PieceGoodsNotionsAndOtherDryGoods = 'PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS',
  PlumbingHeatingEquipmentAndSupplies = 'PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES',
  PoliticalOrganizations = 'POLITICAL_ORGANIZATIONS',
  PostalServicesGovernmentOnly = 'POSTAL_SERVICES_GOVERNMENT_ONLY',
  PreciousStonesAndMetalsWatchesAndJewelry = 'PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY',
  ProfessionalServices = 'PROFESSIONAL_SERVICES',
  PublicWarehousingAndStorage = 'PUBLIC_WAREHOUSING_AND_STORAGE',
  QuickCopyReproAndBlueprint = 'QUICK_COPY_REPRO_AND_BLUEPRINT',
  Railroads = 'RAILROADS',
  RealEstateAgentsAndManagersRentals = 'REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS',
  RecordStores = 'RECORD_STORES',
  RecreationalVehicleRentals = 'RECREATIONAL_VEHICLE_RENTALS',
  ReligiousGoodsStores = 'RELIGIOUS_GOODS_STORES',
  ReligiousOrganizations = 'RELIGIOUS_ORGANIZATIONS',
  RoofingSidingSheetMetal = 'ROOFING_SIDING_SHEET_METAL',
  SecretarialSupportServices = 'SECRETARIAL_SUPPORT_SERVICES',
  SecurityBrokersDealers = 'SECURITY_BROKERS_DEALERS',
  ServiceStations = 'SERVICE_STATIONS',
  SewingNeedleworkFabricAndPieceGoodsStores = 'SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES',
  ShoeRepairHatCleaning = 'SHOE_REPAIR_HAT_CLEANING',
  ShoeStores = 'SHOE_STORES',
  SmallApplianceRepair = 'SMALL_APPLIANCE_REPAIR',
  SnowmobileDealers = 'SNOWMOBILE_DEALERS',
  SpecialtyCleaning = 'SPECIALTY_CLEANING',
  SpecialTradeServices = 'SPECIAL_TRADE_SERVICES',
  SportingGoodsStores = 'SPORTING_GOODS_STORES',
  SportingRecreationCamps = 'SPORTING_RECREATION_CAMPS',
  SportsAndRidingApparelStores = 'SPORTS_AND_RIDING_APPAREL_STORES',
  SportsClubsFields = 'SPORTS_CLUBS_FIELDS',
  StampAndCoinStores = 'STAMP_AND_COIN_STORES',
  StationaryOfficeSuppliesPrintingAndWritingPaper = 'STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER',
  StationeryStoresOfficeAndSchoolSupplyStores = 'STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES',
  SwimmingPoolsSales = 'SWIMMING_POOLS_SALES',
  TailorsAlterations = 'TAILORS_ALTERATIONS',
  TaxicabsLimousines = 'TAXICABS_LIMOUSINES',
  TaxPaymentsGovernmentAgencies = 'TAX_PAYMENTS_GOVERNMENT_AGENCIES',
  TaxPreparationServices = 'TAX_PREPARATION_SERVICES',
  TelecommunicationEquipmentAndTelephoneSales = 'TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES',
  TelecommunicationServices = 'TELECOMMUNICATION_SERVICES',
  TelegraphServices = 'TELEGRAPH_SERVICES',
  TentAndAwningShops = 'TENT_AND_AWNING_SHOPS',
  TestingLaboratories = 'TESTING_LABORATORIES',
  TheatricalTicketAgencies = 'THEATRICAL_TICKET_AGENCIES',
  Timeshares = 'TIMESHARES',
  TireRetreadingAndRepair = 'TIRE_RETREADING_AND_REPAIR',
  TollsBridgeFees = 'TOLLS_BRIDGE_FEES',
  TouristAttractionsAndExhibits = 'TOURIST_ATTRACTIONS_AND_EXHIBITS',
  TowingServices = 'TOWING_SERVICES',
  TrailerParksCampgrounds = 'TRAILER_PARKS_CAMPGROUNDS',
  TransportationServices = 'TRANSPORTATION_SERVICES',
  TravelAgenciesTourOperators = 'TRAVEL_AGENCIES_TOUR_OPERATORS',
  TruckStopIteration = 'TRUCK_STOP_ITERATION',
  TruckUtilityTrailerRentals = 'TRUCK_UTILITY_TRAILER_RENTALS',
  TypesettingPlateMakingAndRelatedServices = 'TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES',
  TypewriterStores = 'TYPEWRITER_STORES',
  TUiTravelGermany = 'T_UI_TRAVEL_GERMANY',
  UniformsCommercialClothing = 'UNIFORMS_COMMERCIAL_CLOTHING',
  UsedMerchandiseAndSecondhandStores = 'USED_MERCHANDISE_AND_SECONDHAND_STORES',
  Utilities = 'UTILITIES',
  USFederalGovernmentAgenciesOrDepartments = 'U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS',
  VarietyStores = 'VARIETY_STORES',
  VeterinaryServices = 'VETERINARY_SERVICES',
  VideoAmusementGameSupplies = 'VIDEO_AMUSEMENT_GAME_SUPPLIES',
  VideoGameArcades = 'VIDEO_GAME_ARCADES',
  VideoTapeRentalStores = 'VIDEO_TAPE_RENTAL_STORES',
  VocationalTradeSchools = 'VOCATIONAL_TRADE_SCHOOLS',
  WatchJewelryRepair = 'WATCH_JEWELRY_REPAIR',
  WeldingRepair = 'WELDING_REPAIR',
  WholesaleClubs = 'WHOLESALE_CLUBS',
  WigAndToupeeStores = 'WIG_AND_TOUPEE_STORES',
  WiresMoneyOrders = 'WIRES_MONEY_ORDERS',
  WomensAccessoryAndSpecialtyShops = 'WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS',
  WomensReadyToWearStores = 'WOMENS_READY_TO_WEAR_STORES',
  WreckingAndSalvageYards = 'WRECKING_AND_SALVAGE_YARDS'
}

export enum StripeIssuingCardSpendingLimitInterval {
  AllTime = 'ALL_TIME',
  Daily = 'DAILY',
  Monthly = 'MONTHLY',
  PerAuthorization = 'PER_AUTHORIZATION',
  Weekly = 'WEEKLY',
  Yearly = 'YEARLY'
}

export enum StripeIssuingCardStatus {
  Active = 'ACTIVE',
  Canceled = 'CANCELED',
  Inactive = 'INACTIVE'
}

export enum StripeIssuingCardType {
  Physical = 'PHYSICAL',
  Virtual = 'VIRTUAL'
}

export type StripeIssuingCardWallets = {
  __typename?: 'StripeIssuingCardWallets';
  applePay: StripeIssuingCardApplePay;
  googlePay: StripeIssuingCardGooglePay;
  primaryAccountIdentifier?: Maybe<Scalars['String']>;
};

export type StripeIssuingCardholder = {
  __typename?: 'StripeIssuingCardholder';
  billing: StripeIssuingCardholderAddress;
  company?: Maybe<StripeIssuingCardholderCompany>;
  created: Scalars['Int'];
  email?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  individual?: Maybe<StripeIssuingCardholderIndividual>;
  livemode: Scalars['Boolean'];
  metadata: Scalars['JSON'];
  name: Scalars['String'];
  object: StripeIssuingCardholderObject;
  phoneNumber?: Maybe<Scalars['String']>;
  requirements: StripeIssuingCardholderRequirements;
  spendingControls?: Maybe<StripeIssuingCardholderAuthorizationControls>;
  status: StripeIssuingCardholderStatus;
  type: StripeIssuingCardholderType;
};

export type StripeIssuingCardholderAddress = {
  __typename?: 'StripeIssuingCardholderAddress';
  address: StripeAddress;
};

export type StripeIssuingCardholderAuthorizationControls = {
  __typename?: 'StripeIssuingCardholderAuthorizationControls';
  allowedCategories?: Maybe<Array<StripeIssuingCardholderAuthorizationControlsAllowedCategories>>;
  blockedCategories?: Maybe<Array<StripeIssuingCardholderAuthorizationControlsBlockedCategories>>;
  spendingLimits?: Maybe<Array<StripeIssuingCardholderSpendingLimit>>;
  spendingLimitsCurrency?: Maybe<Scalars['String']>;
};

export enum StripeIssuingCardholderAuthorizationControlsAllowedCategories {
  AccountingBookkeepingServices = 'ACCOUNTING_BOOKKEEPING_SERVICES',
  AcRefrigerationRepair = 'AC_REFRIGERATION_REPAIR',
  AdvertisingServices = 'ADVERTISING_SERVICES',
  AgriculturalCooperative = 'AGRICULTURAL_COOPERATIVE',
  AirlinesAirCarriers = 'AIRLINES_AIR_CARRIERS',
  AirportsFlyingFields = 'AIRPORTS_FLYING_FIELDS',
  AmbulanceServices = 'AMBULANCE_SERVICES',
  AmusementParksCarnivals = 'AMUSEMENT_PARKS_CARNIVALS',
  AntiqueReproductions = 'ANTIQUE_REPRODUCTIONS',
  AntiqueShops = 'ANTIQUE_SHOPS',
  Aquariums = 'AQUARIUMS',
  ArchitecturalSurveyingServices = 'ARCHITECTURAL_SURVEYING_SERVICES',
  ArtistsSupplyAndCraftShops = 'ARTISTS_SUPPLY_AND_CRAFT_SHOPS',
  ArtDealersAndGalleries = 'ART_DEALERS_AND_GALLERIES',
  AutomatedCashDisburse = 'AUTOMATED_CASH_DISBURSE',
  AutomatedFuelDispensers = 'AUTOMATED_FUEL_DISPENSERS',
  AutomobileAssociations = 'AUTOMOBILE_ASSOCIATIONS',
  AutomotivePartsAndAccessoriesStores = 'AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES',
  AutomotiveTireStores = 'AUTOMOTIVE_TIRE_STORES',
  AutoAndHomeSupplyStores = 'AUTO_AND_HOME_SUPPLY_STORES',
  AutoBodyRepairShops = 'AUTO_BODY_REPAIR_SHOPS',
  AutoPaintShops = 'AUTO_PAINT_SHOPS',
  AutoServiceShops = 'AUTO_SERVICE_SHOPS',
  BailAndBondPayments = 'BAIL_AND_BOND_PAYMENTS',
  Bakeries = 'BAKERIES',
  BandsOrchestras = 'BANDS_ORCHESTRAS',
  BarberAndBeautyShops = 'BARBER_AND_BEAUTY_SHOPS',
  BettingCasinoGambling = 'BETTING_CASINO_GAMBLING',
  BicycleShops = 'BICYCLE_SHOPS',
  BilliardPoolEstablishments = 'BILLIARD_POOL_ESTABLISHMENTS',
  BoatDealers = 'BOAT_DEALERS',
  BoatRentalsAndLeases = 'BOAT_RENTALS_AND_LEASES',
  BooksPeriodicalsAndNewspapers = 'BOOKS_PERIODICALS_AND_NEWSPAPERS',
  BookStores = 'BOOK_STORES',
  BowlingAlleys = 'BOWLING_ALLEYS',
  BusinessSecretarialSchools = 'BUSINESS_SECRETARIAL_SCHOOLS',
  BusLines = 'BUS_LINES',
  BuyingShoppingServices = 'BUYING_SHOPPING_SERVICES',
  CableSatelliteAndOtherPayTelevisionAndRadio = 'CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO',
  CameraAndPhotographicSupplyStores = 'CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES',
  CandyNutAndConfectioneryStores = 'CANDY_NUT_AND_CONFECTIONERY_STORES',
  CarpentryServices = 'CARPENTRY_SERVICES',
  CarpetUpholsteryCleaning = 'CARPET_UPHOLSTERY_CLEANING',
  CarAndTruckDealersNewUsed = 'CAR_AND_TRUCK_DEALERS_NEW_USED',
  CarAndTruckDealersUsedOnly = 'CAR_AND_TRUCK_DEALERS_USED_ONLY',
  CarRentalAgencies = 'CAR_RENTAL_AGENCIES',
  CarWashes = 'CAR_WASHES',
  Caterers = 'CATERERS',
  CharitableAndSocialServiceOrganizationsFundraising = 'CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING',
  ChemicalsAndAlliedProducts = 'CHEMICALS_AND_ALLIED_PRODUCTS',
  ChildrensAndInfantsWearStores = 'CHILDRENS_AND_INFANTS_WEAR_STORES',
  ChildCareServices = 'CHILD_CARE_SERVICES',
  ChiropodistsPodiatrists = 'CHIROPODISTS_PODIATRISTS',
  Chiropractors = 'CHIROPRACTORS',
  CigarStoresAndStands = 'CIGAR_STORES_AND_STANDS',
  CivicSocialFraternalAssociations = 'CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS',
  CleaningAndMaintenance = 'CLEANING_AND_MAINTENANCE',
  ClothingRental = 'CLOTHING_RENTAL',
  CollegesUniversities = 'COLLEGES_UNIVERSITIES',
  CommercialEquipment = 'COMMERCIAL_EQUIPMENT',
  CommercialFootwear = 'COMMERCIAL_FOOTWEAR',
  CommercialPhotographyArtAndGraphics = 'COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS',
  CommuterTransportAndFerries = 'COMMUTER_TRANSPORT_AND_FERRIES',
  ComputersPeripheralsAndSoftware = 'COMPUTERS_PERIPHERALS_AND_SOFTWARE',
  ComputerNetworkServices = 'COMPUTER_NETWORK_SERVICES',
  ComputerProgramming = 'COMPUTER_PROGRAMMING',
  ComputerRepair = 'COMPUTER_REPAIR',
  ComputerSoftwareStores = 'COMPUTER_SOFTWARE_STORES',
  ConcreteWorkServices = 'CONCRETE_WORK_SERVICES',
  ConstructionMaterials = 'CONSTRUCTION_MATERIALS',
  ConsultingPublicRelations = 'CONSULTING_PUBLIC_RELATIONS',
  CorrespondenceSchools = 'CORRESPONDENCE_SCHOOLS',
  CosmeticStores = 'COSMETIC_STORES',
  CounselingServices = 'COUNSELING_SERVICES',
  CountryClubs = 'COUNTRY_CLUBS',
  CourierServices = 'COURIER_SERVICES',
  CourtCosts = 'COURT_COSTS',
  CreditReportingAgencies = 'CREDIT_REPORTING_AGENCIES',
  CruiseLines = 'CRUISE_LINES',
  DairyProductsStores = 'DAIRY_PRODUCTS_STORES',
  DanceHallStudiosSchools = 'DANCE_HALL_STUDIOS_SCHOOLS',
  DatingEscortServices = 'DATING_ESCORT_SERVICES',
  DentistsOrthodontists = 'DENTISTS_ORTHODONTISTS',
  DepartmentStores = 'DEPARTMENT_STORES',
  DetectiveAgencies = 'DETECTIVE_AGENCIES',
  DigitalGoodsApplications = 'DIGITAL_GOODS_APPLICATIONS',
  DigitalGoodsGames = 'DIGITAL_GOODS_GAMES',
  DigitalGoodsLargeVolume = 'DIGITAL_GOODS_LARGE_VOLUME',
  DigitalGoodsMedia = 'DIGITAL_GOODS_MEDIA',
  DirectMarketingCatalogMerchant = 'DIRECT_MARKETING_CATALOG_MERCHANT',
  DirectMarketingCombinationCatalogAndRetailMerchant = 'DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT',
  DirectMarketingInboundTelemarketing = 'DIRECT_MARKETING_INBOUND_TELEMARKETING',
  DirectMarketingInsuranceServices = 'DIRECT_MARKETING_INSURANCE_SERVICES',
  DirectMarketingOther = 'DIRECT_MARKETING_OTHER',
  DirectMarketingOutboundTelemarketing = 'DIRECT_MARKETING_OUTBOUND_TELEMARKETING',
  DirectMarketingSubscription = 'DIRECT_MARKETING_SUBSCRIPTION',
  DirectMarketingTravel = 'DIRECT_MARKETING_TRAVEL',
  DiscountStores = 'DISCOUNT_STORES',
  Doctors = 'DOCTORS',
  DoorToDoorSales = 'DOOR_TO_DOOR_SALES',
  DraperyWindowCoveringAndUpholsteryStores = 'DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES',
  DrinkingPlaces = 'DRINKING_PLACES',
  DrugsDrugProprietariesAndDruggistSundries = 'DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES',
  DrugStoresAndPharmacies = 'DRUG_STORES_AND_PHARMACIES',
  DryCleaners = 'DRY_CLEANERS',
  DurableGoods = 'DURABLE_GOODS',
  DutyFreeStores = 'DUTY_FREE_STORES',
  EatingPlacesRestaurants = 'EATING_PLACES_RESTAURANTS',
  EducationalServices = 'EDUCATIONAL_SERVICES',
  ElectricalPartsAndEquipment = 'ELECTRICAL_PARTS_AND_EQUIPMENT',
  ElectricalServices = 'ELECTRICAL_SERVICES',
  ElectricRazorStores = 'ELECTRIC_RAZOR_STORES',
  ElectricVehicleCharging = 'ELECTRIC_VEHICLE_CHARGING',
  ElectronicsRepairShops = 'ELECTRONICS_REPAIR_SHOPS',
  ElectronicsStores = 'ELECTRONICS_STORES',
  ElementarySecondarySchools = 'ELEMENTARY_SECONDARY_SCHOOLS',
  EmergencyServicesGcasVisaUseOnly = 'EMERGENCY_SERVICES_GCAS_VISA_USE_ONLY',
  EmploymentTempAgencies = 'EMPLOYMENT_TEMP_AGENCIES',
  EquipmentRental = 'EQUIPMENT_RENTAL',
  ExterminatingServices = 'EXTERMINATING_SERVICES',
  FamilyClothingStores = 'FAMILY_CLOTHING_STORES',
  FastFoodRestaurants = 'FAST_FOOD_RESTAURANTS',
  FinancialInstitutions = 'FINANCIAL_INSTITUTIONS',
  FinesGovernmentAdministrativeEntities = 'FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES',
  FireplaceFireplaceScreensAndAccessoriesStores = 'FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES',
  FloorCoveringStores = 'FLOOR_COVERING_STORES',
  Florists = 'FLORISTS',
  FloristsSuppliesNurseryStockAndFlowers = 'FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS',
  FreezerAndLockerMeatProvisioners = 'FREEZER_AND_LOCKER_MEAT_PROVISIONERS',
  FuelDealersNonAutomotive = 'FUEL_DEALERS_NON_AUTOMOTIVE',
  FuneralServicesCrematories = 'FUNERAL_SERVICES_CREMATORIES',
  FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances = 'FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES',
  FurnitureRepairRefinishing = 'FURNITURE_REPAIR_REFINISHING',
  FurriersAndFurShops = 'FURRIERS_AND_FUR_SHOPS',
  GeneralServices = 'GENERAL_SERVICES',
  GiftCardNoveltyAndSouvenirShops = 'GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS',
  GlasswareCrystalStores = 'GLASSWARE_CRYSTAL_STORES',
  GlassPaintAndWallpaperStores = 'GLASS_PAINT_AND_WALLPAPER_STORES',
  GolfCoursesPublic = 'GOLF_COURSES_PUBLIC',
  GovernmentLicensedHorseDogRacingUsRegionOnly = 'GOVERNMENT_LICENSED_HORSE_DOG_RACING_US_REGION_ONLY',
  GovernmentLicensedOnlineCasionsOnlineGamblingUsRegionOnly = 'GOVERNMENT_LICENSED_ONLINE_CASIONS_ONLINE_GAMBLING_US_REGION_ONLY',
  GovernmentOwnedLotteriesNonUsRegion = 'GOVERNMENT_OWNED_LOTTERIES_NON_US_REGION',
  GovernmentOwnedLotteriesUsRegionOnly = 'GOVERNMENT_OWNED_LOTTERIES_US_REGION_ONLY',
  GovernmentServices = 'GOVERNMENT_SERVICES',
  GroceryStoresSupermarkets = 'GROCERY_STORES_SUPERMARKETS',
  HardwareEquipmentAndSupplies = 'HARDWARE_EQUIPMENT_AND_SUPPLIES',
  HardwareStores = 'HARDWARE_STORES',
  HealthAndBeautySpas = 'HEALTH_AND_BEAUTY_SPAS',
  HearingAidsSalesAndSupplies = 'HEARING_AIDS_SALES_AND_SUPPLIES',
  HeatingPlumbingAC = 'HEATING_PLUMBING_A_C',
  HobbyToyAndGameShops = 'HOBBY_TOY_AND_GAME_SHOPS',
  HomeSupplyWarehouseStores = 'HOME_SUPPLY_WAREHOUSE_STORES',
  Hospitals = 'HOSPITALS',
  HotelsMotelsAndResorts = 'HOTELS_MOTELS_AND_RESORTS',
  HouseholdApplianceStores = 'HOUSEHOLD_APPLIANCE_STORES',
  IndustrialSupplies = 'INDUSTRIAL_SUPPLIES',
  InformationRetrievalServices = 'INFORMATION_RETRIEVAL_SERVICES',
  InsuranceDefault = 'INSURANCE_DEFAULT',
  InsuranceUnderwritingPremiums = 'INSURANCE_UNDERWRITING_PREMIUMS',
  IntraCompanyPurchases = 'INTRA_COMPANY_PURCHASES',
  JewelryStoresWatchesClocksAndSilverwareStores = 'JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES',
  LandscapingServices = 'LANDSCAPING_SERVICES',
  Laundries = 'LAUNDRIES',
  LaundryCleaningServices = 'LAUNDRY_CLEANING_SERVICES',
  LegalServicesAttorneys = 'LEGAL_SERVICES_ATTORNEYS',
  LuggageAndLeatherGoodsStores = 'LUGGAGE_AND_LEATHER_GOODS_STORES',
  LumberBuildingMaterialsStores = 'LUMBER_BUILDING_MATERIALS_STORES',
  ManualCashDisburse = 'MANUAL_CASH_DISBURSE',
  MarinasServiceAndSupplies = 'MARINAS_SERVICE_AND_SUPPLIES',
  Marketplaces = 'MARKETPLACES',
  MasonryStoneworkAndPlaster = 'MASONRY_STONEWORK_AND_PLASTER',
  MassageParlors = 'MASSAGE_PARLORS',
  MedicalAndDentalLabs = 'MEDICAL_AND_DENTAL_LABS',
  MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies = 'MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES',
  MedicalServices = 'MEDICAL_SERVICES',
  MembershipOrganizations = 'MEMBERSHIP_ORGANIZATIONS',
  MensAndBoysClothingAndAccessoriesStores = 'MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES',
  MensWomensClothingStores = 'MENS_WOMENS_CLOTHING_STORES',
  MetalServiceCenters = 'METAL_SERVICE_CENTERS',
  Miscellaneous = 'MISCELLANEOUS',
  MiscellaneousApparelAndAccessoryShops = 'MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS',
  MiscellaneousAutoDealers = 'MISCELLANEOUS_AUTO_DEALERS',
  MiscellaneousBusinessServices = 'MISCELLANEOUS_BUSINESS_SERVICES',
  MiscellaneousFoodStores = 'MISCELLANEOUS_FOOD_STORES',
  MiscellaneousGeneralMerchandise = 'MISCELLANEOUS_GENERAL_MERCHANDISE',
  MiscellaneousGeneralServices = 'MISCELLANEOUS_GENERAL_SERVICES',
  MiscellaneousHomeFurnishingSpecialtyStores = 'MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES',
  MiscellaneousPublishingAndPrinting = 'MISCELLANEOUS_PUBLISHING_AND_PRINTING',
  MiscellaneousRecreationServices = 'MISCELLANEOUS_RECREATION_SERVICES',
  MiscellaneousRepairShops = 'MISCELLANEOUS_REPAIR_SHOPS',
  MiscellaneousSpecialtyRetail = 'MISCELLANEOUS_SPECIALTY_RETAIL',
  MobileHomeDealers = 'MOBILE_HOME_DEALERS',
  MotionPictureTheaters = 'MOTION_PICTURE_THEATERS',
  MotorcycleShopsAndDealers = 'MOTORCYCLE_SHOPS_AND_DEALERS',
  MotorcycleShopsDealers = 'MOTORCYCLE_SHOPS_DEALERS',
  MotorFreightCarriersAndTrucking = 'MOTOR_FREIGHT_CARRIERS_AND_TRUCKING',
  MotorHomesDealers = 'MOTOR_HOMES_DEALERS',
  MotorVehicleSuppliesAndNewParts = 'MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS',
  MusicStoresMusicalInstrumentsPianosAndSheetMusic = 'MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC',
  NewsDealersAndNewsstands = 'NEWS_DEALERS_AND_NEWSSTANDS',
  NondurableGoods = 'NONDURABLE_GOODS',
  NonFiMoneyOrders = 'NON_FI_MONEY_ORDERS',
  NonFiStoredValueCardPurchaseLoad = 'NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD',
  NurseriesLawnAndGardenSupplyStores = 'NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES',
  NursingPersonalCare = 'NURSING_PERSONAL_CARE',
  OfficeAndCommercialFurniture = 'OFFICE_AND_COMMERCIAL_FURNITURE',
  OpticiansEyeglasses = 'OPTICIANS_EYEGLASSES',
  OptometristsOphthalmologist = 'OPTOMETRISTS_OPHTHALMOLOGIST',
  OrthopedicGoodsProstheticDevices = 'ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES',
  Osteopaths = 'OSTEOPATHS',
  PackageStoresBeerWineAndLiquor = 'PACKAGE_STORES_BEER_WINE_AND_LIQUOR',
  PaintsVarnishesAndSupplies = 'PAINTS_VARNISHES_AND_SUPPLIES',
  ParkingLotsGarages = 'PARKING_LOTS_GARAGES',
  PassengerRailways = 'PASSENGER_RAILWAYS',
  PawnShops = 'PAWN_SHOPS',
  PetroleumAndPetroleumProducts = 'PETROLEUM_AND_PETROLEUM_PRODUCTS',
  PetShopsPetFoodAndSupplies = 'PET_SHOPS_PET_FOOD_AND_SUPPLIES',
  PhotographicPhotocopyMicrofilmEquipmentAndSupplies = 'PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES',
  PhotographicStudios = 'PHOTOGRAPHIC_STUDIOS',
  PhotoDeveloping = 'PHOTO_DEVELOPING',
  PictureVideoProduction = 'PICTURE_VIDEO_PRODUCTION',
  PieceGoodsNotionsAndOtherDryGoods = 'PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS',
  PlumbingHeatingEquipmentAndSupplies = 'PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES',
  PoliticalOrganizations = 'POLITICAL_ORGANIZATIONS',
  PostalServicesGovernmentOnly = 'POSTAL_SERVICES_GOVERNMENT_ONLY',
  PreciousStonesAndMetalsWatchesAndJewelry = 'PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY',
  ProfessionalServices = 'PROFESSIONAL_SERVICES',
  PublicWarehousingAndStorage = 'PUBLIC_WAREHOUSING_AND_STORAGE',
  QuickCopyReproAndBlueprint = 'QUICK_COPY_REPRO_AND_BLUEPRINT',
  Railroads = 'RAILROADS',
  RealEstateAgentsAndManagersRentals = 'REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS',
  RecordStores = 'RECORD_STORES',
  RecreationalVehicleRentals = 'RECREATIONAL_VEHICLE_RENTALS',
  ReligiousGoodsStores = 'RELIGIOUS_GOODS_STORES',
  ReligiousOrganizations = 'RELIGIOUS_ORGANIZATIONS',
  RoofingSidingSheetMetal = 'ROOFING_SIDING_SHEET_METAL',
  SecretarialSupportServices = 'SECRETARIAL_SUPPORT_SERVICES',
  SecurityBrokersDealers = 'SECURITY_BROKERS_DEALERS',
  ServiceStations = 'SERVICE_STATIONS',
  SewingNeedleworkFabricAndPieceGoodsStores = 'SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES',
  ShoeRepairHatCleaning = 'SHOE_REPAIR_HAT_CLEANING',
  ShoeStores = 'SHOE_STORES',
  SmallApplianceRepair = 'SMALL_APPLIANCE_REPAIR',
  SnowmobileDealers = 'SNOWMOBILE_DEALERS',
  SpecialtyCleaning = 'SPECIALTY_CLEANING',
  SpecialTradeServices = 'SPECIAL_TRADE_SERVICES',
  SportingGoodsStores = 'SPORTING_GOODS_STORES',
  SportingRecreationCamps = 'SPORTING_RECREATION_CAMPS',
  SportsAndRidingApparelStores = 'SPORTS_AND_RIDING_APPAREL_STORES',
  SportsClubsFields = 'SPORTS_CLUBS_FIELDS',
  StampAndCoinStores = 'STAMP_AND_COIN_STORES',
  StationaryOfficeSuppliesPrintingAndWritingPaper = 'STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER',
  StationeryStoresOfficeAndSchoolSupplyStores = 'STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES',
  SwimmingPoolsSales = 'SWIMMING_POOLS_SALES',
  TailorsAlterations = 'TAILORS_ALTERATIONS',
  TaxicabsLimousines = 'TAXICABS_LIMOUSINES',
  TaxPaymentsGovernmentAgencies = 'TAX_PAYMENTS_GOVERNMENT_AGENCIES',
  TaxPreparationServices = 'TAX_PREPARATION_SERVICES',
  TelecommunicationEquipmentAndTelephoneSales = 'TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES',
  TelecommunicationServices = 'TELECOMMUNICATION_SERVICES',
  TelegraphServices = 'TELEGRAPH_SERVICES',
  TentAndAwningShops = 'TENT_AND_AWNING_SHOPS',
  TestingLaboratories = 'TESTING_LABORATORIES',
  TheatricalTicketAgencies = 'THEATRICAL_TICKET_AGENCIES',
  Timeshares = 'TIMESHARES',
  TireRetreadingAndRepair = 'TIRE_RETREADING_AND_REPAIR',
  TollsBridgeFees = 'TOLLS_BRIDGE_FEES',
  TouristAttractionsAndExhibits = 'TOURIST_ATTRACTIONS_AND_EXHIBITS',
  TowingServices = 'TOWING_SERVICES',
  TrailerParksCampgrounds = 'TRAILER_PARKS_CAMPGROUNDS',
  TransportationServices = 'TRANSPORTATION_SERVICES',
  TravelAgenciesTourOperators = 'TRAVEL_AGENCIES_TOUR_OPERATORS',
  TruckStopIteration = 'TRUCK_STOP_ITERATION',
  TruckUtilityTrailerRentals = 'TRUCK_UTILITY_TRAILER_RENTALS',
  TypesettingPlateMakingAndRelatedServices = 'TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES',
  TypewriterStores = 'TYPEWRITER_STORES',
  TUiTravelGermany = 'T_UI_TRAVEL_GERMANY',
  UniformsCommercialClothing = 'UNIFORMS_COMMERCIAL_CLOTHING',
  UsedMerchandiseAndSecondhandStores = 'USED_MERCHANDISE_AND_SECONDHAND_STORES',
  Utilities = 'UTILITIES',
  USFederalGovernmentAgenciesOrDepartments = 'U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS',
  VarietyStores = 'VARIETY_STORES',
  VeterinaryServices = 'VETERINARY_SERVICES',
  VideoAmusementGameSupplies = 'VIDEO_AMUSEMENT_GAME_SUPPLIES',
  VideoGameArcades = 'VIDEO_GAME_ARCADES',
  VideoTapeRentalStores = 'VIDEO_TAPE_RENTAL_STORES',
  VocationalTradeSchools = 'VOCATIONAL_TRADE_SCHOOLS',
  WatchJewelryRepair = 'WATCH_JEWELRY_REPAIR',
  WeldingRepair = 'WELDING_REPAIR',
  WholesaleClubs = 'WHOLESALE_CLUBS',
  WigAndToupeeStores = 'WIG_AND_TOUPEE_STORES',
  WiresMoneyOrders = 'WIRES_MONEY_ORDERS',
  WomensAccessoryAndSpecialtyShops = 'WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS',
  WomensReadyToWearStores = 'WOMENS_READY_TO_WEAR_STORES',
  WreckingAndSalvageYards = 'WRECKING_AND_SALVAGE_YARDS'
}

export enum StripeIssuingCardholderAuthorizationControlsBlockedCategories {
  AccountingBookkeepingServices = 'ACCOUNTING_BOOKKEEPING_SERVICES',
  AcRefrigerationRepair = 'AC_REFRIGERATION_REPAIR',
  AdvertisingServices = 'ADVERTISING_SERVICES',
  AgriculturalCooperative = 'AGRICULTURAL_COOPERATIVE',
  AirlinesAirCarriers = 'AIRLINES_AIR_CARRIERS',
  AirportsFlyingFields = 'AIRPORTS_FLYING_FIELDS',
  AmbulanceServices = 'AMBULANCE_SERVICES',
  AmusementParksCarnivals = 'AMUSEMENT_PARKS_CARNIVALS',
  AntiqueReproductions = 'ANTIQUE_REPRODUCTIONS',
  AntiqueShops = 'ANTIQUE_SHOPS',
  Aquariums = 'AQUARIUMS',
  ArchitecturalSurveyingServices = 'ARCHITECTURAL_SURVEYING_SERVICES',
  ArtistsSupplyAndCraftShops = 'ARTISTS_SUPPLY_AND_CRAFT_SHOPS',
  ArtDealersAndGalleries = 'ART_DEALERS_AND_GALLERIES',
  AutomatedCashDisburse = 'AUTOMATED_CASH_DISBURSE',
  AutomatedFuelDispensers = 'AUTOMATED_FUEL_DISPENSERS',
  AutomobileAssociations = 'AUTOMOBILE_ASSOCIATIONS',
  AutomotivePartsAndAccessoriesStores = 'AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES',
  AutomotiveTireStores = 'AUTOMOTIVE_TIRE_STORES',
  AutoAndHomeSupplyStores = 'AUTO_AND_HOME_SUPPLY_STORES',
  AutoBodyRepairShops = 'AUTO_BODY_REPAIR_SHOPS',
  AutoPaintShops = 'AUTO_PAINT_SHOPS',
  AutoServiceShops = 'AUTO_SERVICE_SHOPS',
  BailAndBondPayments = 'BAIL_AND_BOND_PAYMENTS',
  Bakeries = 'BAKERIES',
  BandsOrchestras = 'BANDS_ORCHESTRAS',
  BarberAndBeautyShops = 'BARBER_AND_BEAUTY_SHOPS',
  BettingCasinoGambling = 'BETTING_CASINO_GAMBLING',
  BicycleShops = 'BICYCLE_SHOPS',
  BilliardPoolEstablishments = 'BILLIARD_POOL_ESTABLISHMENTS',
  BoatDealers = 'BOAT_DEALERS',
  BoatRentalsAndLeases = 'BOAT_RENTALS_AND_LEASES',
  BooksPeriodicalsAndNewspapers = 'BOOKS_PERIODICALS_AND_NEWSPAPERS',
  BookStores = 'BOOK_STORES',
  BowlingAlleys = 'BOWLING_ALLEYS',
  BusinessSecretarialSchools = 'BUSINESS_SECRETARIAL_SCHOOLS',
  BusLines = 'BUS_LINES',
  BuyingShoppingServices = 'BUYING_SHOPPING_SERVICES',
  CableSatelliteAndOtherPayTelevisionAndRadio = 'CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO',
  CameraAndPhotographicSupplyStores = 'CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES',
  CandyNutAndConfectioneryStores = 'CANDY_NUT_AND_CONFECTIONERY_STORES',
  CarpentryServices = 'CARPENTRY_SERVICES',
  CarpetUpholsteryCleaning = 'CARPET_UPHOLSTERY_CLEANING',
  CarAndTruckDealersNewUsed = 'CAR_AND_TRUCK_DEALERS_NEW_USED',
  CarAndTruckDealersUsedOnly = 'CAR_AND_TRUCK_DEALERS_USED_ONLY',
  CarRentalAgencies = 'CAR_RENTAL_AGENCIES',
  CarWashes = 'CAR_WASHES',
  Caterers = 'CATERERS',
  CharitableAndSocialServiceOrganizationsFundraising = 'CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING',
  ChemicalsAndAlliedProducts = 'CHEMICALS_AND_ALLIED_PRODUCTS',
  ChildrensAndInfantsWearStores = 'CHILDRENS_AND_INFANTS_WEAR_STORES',
  ChildCareServices = 'CHILD_CARE_SERVICES',
  ChiropodistsPodiatrists = 'CHIROPODISTS_PODIATRISTS',
  Chiropractors = 'CHIROPRACTORS',
  CigarStoresAndStands = 'CIGAR_STORES_AND_STANDS',
  CivicSocialFraternalAssociations = 'CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS',
  CleaningAndMaintenance = 'CLEANING_AND_MAINTENANCE',
  ClothingRental = 'CLOTHING_RENTAL',
  CollegesUniversities = 'COLLEGES_UNIVERSITIES',
  CommercialEquipment = 'COMMERCIAL_EQUIPMENT',
  CommercialFootwear = 'COMMERCIAL_FOOTWEAR',
  CommercialPhotographyArtAndGraphics = 'COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS',
  CommuterTransportAndFerries = 'COMMUTER_TRANSPORT_AND_FERRIES',
  ComputersPeripheralsAndSoftware = 'COMPUTERS_PERIPHERALS_AND_SOFTWARE',
  ComputerNetworkServices = 'COMPUTER_NETWORK_SERVICES',
  ComputerProgramming = 'COMPUTER_PROGRAMMING',
  ComputerRepair = 'COMPUTER_REPAIR',
  ComputerSoftwareStores = 'COMPUTER_SOFTWARE_STORES',
  ConcreteWorkServices = 'CONCRETE_WORK_SERVICES',
  ConstructionMaterials = 'CONSTRUCTION_MATERIALS',
  ConsultingPublicRelations = 'CONSULTING_PUBLIC_RELATIONS',
  CorrespondenceSchools = 'CORRESPONDENCE_SCHOOLS',
  CosmeticStores = 'COSMETIC_STORES',
  CounselingServices = 'COUNSELING_SERVICES',
  CountryClubs = 'COUNTRY_CLUBS',
  CourierServices = 'COURIER_SERVICES',
  CourtCosts = 'COURT_COSTS',
  CreditReportingAgencies = 'CREDIT_REPORTING_AGENCIES',
  CruiseLines = 'CRUISE_LINES',
  DairyProductsStores = 'DAIRY_PRODUCTS_STORES',
  DanceHallStudiosSchools = 'DANCE_HALL_STUDIOS_SCHOOLS',
  DatingEscortServices = 'DATING_ESCORT_SERVICES',
  DentistsOrthodontists = 'DENTISTS_ORTHODONTISTS',
  DepartmentStores = 'DEPARTMENT_STORES',
  DetectiveAgencies = 'DETECTIVE_AGENCIES',
  DigitalGoodsApplications = 'DIGITAL_GOODS_APPLICATIONS',
  DigitalGoodsGames = 'DIGITAL_GOODS_GAMES',
  DigitalGoodsLargeVolume = 'DIGITAL_GOODS_LARGE_VOLUME',
  DigitalGoodsMedia = 'DIGITAL_GOODS_MEDIA',
  DirectMarketingCatalogMerchant = 'DIRECT_MARKETING_CATALOG_MERCHANT',
  DirectMarketingCombinationCatalogAndRetailMerchant = 'DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT',
  DirectMarketingInboundTelemarketing = 'DIRECT_MARKETING_INBOUND_TELEMARKETING',
  DirectMarketingInsuranceServices = 'DIRECT_MARKETING_INSURANCE_SERVICES',
  DirectMarketingOther = 'DIRECT_MARKETING_OTHER',
  DirectMarketingOutboundTelemarketing = 'DIRECT_MARKETING_OUTBOUND_TELEMARKETING',
  DirectMarketingSubscription = 'DIRECT_MARKETING_SUBSCRIPTION',
  DirectMarketingTravel = 'DIRECT_MARKETING_TRAVEL',
  DiscountStores = 'DISCOUNT_STORES',
  Doctors = 'DOCTORS',
  DoorToDoorSales = 'DOOR_TO_DOOR_SALES',
  DraperyWindowCoveringAndUpholsteryStores = 'DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES',
  DrinkingPlaces = 'DRINKING_PLACES',
  DrugsDrugProprietariesAndDruggistSundries = 'DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES',
  DrugStoresAndPharmacies = 'DRUG_STORES_AND_PHARMACIES',
  DryCleaners = 'DRY_CLEANERS',
  DurableGoods = 'DURABLE_GOODS',
  DutyFreeStores = 'DUTY_FREE_STORES',
  EatingPlacesRestaurants = 'EATING_PLACES_RESTAURANTS',
  EducationalServices = 'EDUCATIONAL_SERVICES',
  ElectricalPartsAndEquipment = 'ELECTRICAL_PARTS_AND_EQUIPMENT',
  ElectricalServices = 'ELECTRICAL_SERVICES',
  ElectricRazorStores = 'ELECTRIC_RAZOR_STORES',
  ElectricVehicleCharging = 'ELECTRIC_VEHICLE_CHARGING',
  ElectronicsRepairShops = 'ELECTRONICS_REPAIR_SHOPS',
  ElectronicsStores = 'ELECTRONICS_STORES',
  ElementarySecondarySchools = 'ELEMENTARY_SECONDARY_SCHOOLS',
  EmergencyServicesGcasVisaUseOnly = 'EMERGENCY_SERVICES_GCAS_VISA_USE_ONLY',
  EmploymentTempAgencies = 'EMPLOYMENT_TEMP_AGENCIES',
  EquipmentRental = 'EQUIPMENT_RENTAL',
  ExterminatingServices = 'EXTERMINATING_SERVICES',
  FamilyClothingStores = 'FAMILY_CLOTHING_STORES',
  FastFoodRestaurants = 'FAST_FOOD_RESTAURANTS',
  FinancialInstitutions = 'FINANCIAL_INSTITUTIONS',
  FinesGovernmentAdministrativeEntities = 'FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES',
  FireplaceFireplaceScreensAndAccessoriesStores = 'FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES',
  FloorCoveringStores = 'FLOOR_COVERING_STORES',
  Florists = 'FLORISTS',
  FloristsSuppliesNurseryStockAndFlowers = 'FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS',
  FreezerAndLockerMeatProvisioners = 'FREEZER_AND_LOCKER_MEAT_PROVISIONERS',
  FuelDealersNonAutomotive = 'FUEL_DEALERS_NON_AUTOMOTIVE',
  FuneralServicesCrematories = 'FUNERAL_SERVICES_CREMATORIES',
  FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances = 'FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES',
  FurnitureRepairRefinishing = 'FURNITURE_REPAIR_REFINISHING',
  FurriersAndFurShops = 'FURRIERS_AND_FUR_SHOPS',
  GeneralServices = 'GENERAL_SERVICES',
  GiftCardNoveltyAndSouvenirShops = 'GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS',
  GlasswareCrystalStores = 'GLASSWARE_CRYSTAL_STORES',
  GlassPaintAndWallpaperStores = 'GLASS_PAINT_AND_WALLPAPER_STORES',
  GolfCoursesPublic = 'GOLF_COURSES_PUBLIC',
  GovernmentLicensedHorseDogRacingUsRegionOnly = 'GOVERNMENT_LICENSED_HORSE_DOG_RACING_US_REGION_ONLY',
  GovernmentLicensedOnlineCasionsOnlineGamblingUsRegionOnly = 'GOVERNMENT_LICENSED_ONLINE_CASIONS_ONLINE_GAMBLING_US_REGION_ONLY',
  GovernmentOwnedLotteriesNonUsRegion = 'GOVERNMENT_OWNED_LOTTERIES_NON_US_REGION',
  GovernmentOwnedLotteriesUsRegionOnly = 'GOVERNMENT_OWNED_LOTTERIES_US_REGION_ONLY',
  GovernmentServices = 'GOVERNMENT_SERVICES',
  GroceryStoresSupermarkets = 'GROCERY_STORES_SUPERMARKETS',
  HardwareEquipmentAndSupplies = 'HARDWARE_EQUIPMENT_AND_SUPPLIES',
  HardwareStores = 'HARDWARE_STORES',
  HealthAndBeautySpas = 'HEALTH_AND_BEAUTY_SPAS',
  HearingAidsSalesAndSupplies = 'HEARING_AIDS_SALES_AND_SUPPLIES',
  HeatingPlumbingAC = 'HEATING_PLUMBING_A_C',
  HobbyToyAndGameShops = 'HOBBY_TOY_AND_GAME_SHOPS',
  HomeSupplyWarehouseStores = 'HOME_SUPPLY_WAREHOUSE_STORES',
  Hospitals = 'HOSPITALS',
  HotelsMotelsAndResorts = 'HOTELS_MOTELS_AND_RESORTS',
  HouseholdApplianceStores = 'HOUSEHOLD_APPLIANCE_STORES',
  IndustrialSupplies = 'INDUSTRIAL_SUPPLIES',
  InformationRetrievalServices = 'INFORMATION_RETRIEVAL_SERVICES',
  InsuranceDefault = 'INSURANCE_DEFAULT',
  InsuranceUnderwritingPremiums = 'INSURANCE_UNDERWRITING_PREMIUMS',
  IntraCompanyPurchases = 'INTRA_COMPANY_PURCHASES',
  JewelryStoresWatchesClocksAndSilverwareStores = 'JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES',
  LandscapingServices = 'LANDSCAPING_SERVICES',
  Laundries = 'LAUNDRIES',
  LaundryCleaningServices = 'LAUNDRY_CLEANING_SERVICES',
  LegalServicesAttorneys = 'LEGAL_SERVICES_ATTORNEYS',
  LuggageAndLeatherGoodsStores = 'LUGGAGE_AND_LEATHER_GOODS_STORES',
  LumberBuildingMaterialsStores = 'LUMBER_BUILDING_MATERIALS_STORES',
  ManualCashDisburse = 'MANUAL_CASH_DISBURSE',
  MarinasServiceAndSupplies = 'MARINAS_SERVICE_AND_SUPPLIES',
  Marketplaces = 'MARKETPLACES',
  MasonryStoneworkAndPlaster = 'MASONRY_STONEWORK_AND_PLASTER',
  MassageParlors = 'MASSAGE_PARLORS',
  MedicalAndDentalLabs = 'MEDICAL_AND_DENTAL_LABS',
  MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies = 'MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES',
  MedicalServices = 'MEDICAL_SERVICES',
  MembershipOrganizations = 'MEMBERSHIP_ORGANIZATIONS',
  MensAndBoysClothingAndAccessoriesStores = 'MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES',
  MensWomensClothingStores = 'MENS_WOMENS_CLOTHING_STORES',
  MetalServiceCenters = 'METAL_SERVICE_CENTERS',
  Miscellaneous = 'MISCELLANEOUS',
  MiscellaneousApparelAndAccessoryShops = 'MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS',
  MiscellaneousAutoDealers = 'MISCELLANEOUS_AUTO_DEALERS',
  MiscellaneousBusinessServices = 'MISCELLANEOUS_BUSINESS_SERVICES',
  MiscellaneousFoodStores = 'MISCELLANEOUS_FOOD_STORES',
  MiscellaneousGeneralMerchandise = 'MISCELLANEOUS_GENERAL_MERCHANDISE',
  MiscellaneousGeneralServices = 'MISCELLANEOUS_GENERAL_SERVICES',
  MiscellaneousHomeFurnishingSpecialtyStores = 'MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES',
  MiscellaneousPublishingAndPrinting = 'MISCELLANEOUS_PUBLISHING_AND_PRINTING',
  MiscellaneousRecreationServices = 'MISCELLANEOUS_RECREATION_SERVICES',
  MiscellaneousRepairShops = 'MISCELLANEOUS_REPAIR_SHOPS',
  MiscellaneousSpecialtyRetail = 'MISCELLANEOUS_SPECIALTY_RETAIL',
  MobileHomeDealers = 'MOBILE_HOME_DEALERS',
  MotionPictureTheaters = 'MOTION_PICTURE_THEATERS',
  MotorcycleShopsAndDealers = 'MOTORCYCLE_SHOPS_AND_DEALERS',
  MotorcycleShopsDealers = 'MOTORCYCLE_SHOPS_DEALERS',
  MotorFreightCarriersAndTrucking = 'MOTOR_FREIGHT_CARRIERS_AND_TRUCKING',
  MotorHomesDealers = 'MOTOR_HOMES_DEALERS',
  MotorVehicleSuppliesAndNewParts = 'MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS',
  MusicStoresMusicalInstrumentsPianosAndSheetMusic = 'MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC',
  NewsDealersAndNewsstands = 'NEWS_DEALERS_AND_NEWSSTANDS',
  NondurableGoods = 'NONDURABLE_GOODS',
  NonFiMoneyOrders = 'NON_FI_MONEY_ORDERS',
  NonFiStoredValueCardPurchaseLoad = 'NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD',
  NurseriesLawnAndGardenSupplyStores = 'NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES',
  NursingPersonalCare = 'NURSING_PERSONAL_CARE',
  OfficeAndCommercialFurniture = 'OFFICE_AND_COMMERCIAL_FURNITURE',
  OpticiansEyeglasses = 'OPTICIANS_EYEGLASSES',
  OptometristsOphthalmologist = 'OPTOMETRISTS_OPHTHALMOLOGIST',
  OrthopedicGoodsProstheticDevices = 'ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES',
  Osteopaths = 'OSTEOPATHS',
  PackageStoresBeerWineAndLiquor = 'PACKAGE_STORES_BEER_WINE_AND_LIQUOR',
  PaintsVarnishesAndSupplies = 'PAINTS_VARNISHES_AND_SUPPLIES',
  ParkingLotsGarages = 'PARKING_LOTS_GARAGES',
  PassengerRailways = 'PASSENGER_RAILWAYS',
  PawnShops = 'PAWN_SHOPS',
  PetroleumAndPetroleumProducts = 'PETROLEUM_AND_PETROLEUM_PRODUCTS',
  PetShopsPetFoodAndSupplies = 'PET_SHOPS_PET_FOOD_AND_SUPPLIES',
  PhotographicPhotocopyMicrofilmEquipmentAndSupplies = 'PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES',
  PhotographicStudios = 'PHOTOGRAPHIC_STUDIOS',
  PhotoDeveloping = 'PHOTO_DEVELOPING',
  PictureVideoProduction = 'PICTURE_VIDEO_PRODUCTION',
  PieceGoodsNotionsAndOtherDryGoods = 'PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS',
  PlumbingHeatingEquipmentAndSupplies = 'PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES',
  PoliticalOrganizations = 'POLITICAL_ORGANIZATIONS',
  PostalServicesGovernmentOnly = 'POSTAL_SERVICES_GOVERNMENT_ONLY',
  PreciousStonesAndMetalsWatchesAndJewelry = 'PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY',
  ProfessionalServices = 'PROFESSIONAL_SERVICES',
  PublicWarehousingAndStorage = 'PUBLIC_WAREHOUSING_AND_STORAGE',
  QuickCopyReproAndBlueprint = 'QUICK_COPY_REPRO_AND_BLUEPRINT',
  Railroads = 'RAILROADS',
  RealEstateAgentsAndManagersRentals = 'REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS',
  RecordStores = 'RECORD_STORES',
  RecreationalVehicleRentals = 'RECREATIONAL_VEHICLE_RENTALS',
  ReligiousGoodsStores = 'RELIGIOUS_GOODS_STORES',
  ReligiousOrganizations = 'RELIGIOUS_ORGANIZATIONS',
  RoofingSidingSheetMetal = 'ROOFING_SIDING_SHEET_METAL',
  SecretarialSupportServices = 'SECRETARIAL_SUPPORT_SERVICES',
  SecurityBrokersDealers = 'SECURITY_BROKERS_DEALERS',
  ServiceStations = 'SERVICE_STATIONS',
  SewingNeedleworkFabricAndPieceGoodsStores = 'SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES',
  ShoeRepairHatCleaning = 'SHOE_REPAIR_HAT_CLEANING',
  ShoeStores = 'SHOE_STORES',
  SmallApplianceRepair = 'SMALL_APPLIANCE_REPAIR',
  SnowmobileDealers = 'SNOWMOBILE_DEALERS',
  SpecialtyCleaning = 'SPECIALTY_CLEANING',
  SpecialTradeServices = 'SPECIAL_TRADE_SERVICES',
  SportingGoodsStores = 'SPORTING_GOODS_STORES',
  SportingRecreationCamps = 'SPORTING_RECREATION_CAMPS',
  SportsAndRidingApparelStores = 'SPORTS_AND_RIDING_APPAREL_STORES',
  SportsClubsFields = 'SPORTS_CLUBS_FIELDS',
  StampAndCoinStores = 'STAMP_AND_COIN_STORES',
  StationaryOfficeSuppliesPrintingAndWritingPaper = 'STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER',
  StationeryStoresOfficeAndSchoolSupplyStores = 'STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES',
  SwimmingPoolsSales = 'SWIMMING_POOLS_SALES',
  TailorsAlterations = 'TAILORS_ALTERATIONS',
  TaxicabsLimousines = 'TAXICABS_LIMOUSINES',
  TaxPaymentsGovernmentAgencies = 'TAX_PAYMENTS_GOVERNMENT_AGENCIES',
  TaxPreparationServices = 'TAX_PREPARATION_SERVICES',
  TelecommunicationEquipmentAndTelephoneSales = 'TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES',
  TelecommunicationServices = 'TELECOMMUNICATION_SERVICES',
  TelegraphServices = 'TELEGRAPH_SERVICES',
  TentAndAwningShops = 'TENT_AND_AWNING_SHOPS',
  TestingLaboratories = 'TESTING_LABORATORIES',
  TheatricalTicketAgencies = 'THEATRICAL_TICKET_AGENCIES',
  Timeshares = 'TIMESHARES',
  TireRetreadingAndRepair = 'TIRE_RETREADING_AND_REPAIR',
  TollsBridgeFees = 'TOLLS_BRIDGE_FEES',
  TouristAttractionsAndExhibits = 'TOURIST_ATTRACTIONS_AND_EXHIBITS',
  TowingServices = 'TOWING_SERVICES',
  TrailerParksCampgrounds = 'TRAILER_PARKS_CAMPGROUNDS',
  TransportationServices = 'TRANSPORTATION_SERVICES',
  TravelAgenciesTourOperators = 'TRAVEL_AGENCIES_TOUR_OPERATORS',
  TruckStopIteration = 'TRUCK_STOP_ITERATION',
  TruckUtilityTrailerRentals = 'TRUCK_UTILITY_TRAILER_RENTALS',
  TypesettingPlateMakingAndRelatedServices = 'TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES',
  TypewriterStores = 'TYPEWRITER_STORES',
  TUiTravelGermany = 'T_UI_TRAVEL_GERMANY',
  UniformsCommercialClothing = 'UNIFORMS_COMMERCIAL_CLOTHING',
  UsedMerchandiseAndSecondhandStores = 'USED_MERCHANDISE_AND_SECONDHAND_STORES',
  Utilities = 'UTILITIES',
  USFederalGovernmentAgenciesOrDepartments = 'U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS',
  VarietyStores = 'VARIETY_STORES',
  VeterinaryServices = 'VETERINARY_SERVICES',
  VideoAmusementGameSupplies = 'VIDEO_AMUSEMENT_GAME_SUPPLIES',
  VideoGameArcades = 'VIDEO_GAME_ARCADES',
  VideoTapeRentalStores = 'VIDEO_TAPE_RENTAL_STORES',
  VocationalTradeSchools = 'VOCATIONAL_TRADE_SCHOOLS',
  WatchJewelryRepair = 'WATCH_JEWELRY_REPAIR',
  WeldingRepair = 'WELDING_REPAIR',
  WholesaleClubs = 'WHOLESALE_CLUBS',
  WigAndToupeeStores = 'WIG_AND_TOUPEE_STORES',
  WiresMoneyOrders = 'WIRES_MONEY_ORDERS',
  WomensAccessoryAndSpecialtyShops = 'WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS',
  WomensReadyToWearStores = 'WOMENS_READY_TO_WEAR_STORES',
  WreckingAndSalvageYards = 'WRECKING_AND_SALVAGE_YARDS'
}

export type StripeIssuingCardholderCardIssuing = {
  __typename?: 'StripeIssuingCardholderCardIssuing';
  userTermsAcceptance?: Maybe<StripeIssuingCardholderUserTermsAcceptance>;
};

export type StripeIssuingCardholderCompany = {
  __typename?: 'StripeIssuingCardholderCompany';
  taxIdProvided: Scalars['Boolean'];
};

export type StripeIssuingCardholderIdDocument = {
  __typename?: 'StripeIssuingCardholderIdDocument';
  back?: Maybe<StripeStringOrFileUnion>;
  front?: Maybe<StripeStringOrFileUnion>;
};

export type StripeIssuingCardholderIndividual = {
  __typename?: 'StripeIssuingCardholderIndividual';
  cardIssuing?: Maybe<StripeIssuingCardholderCardIssuing>;
  dob?: Maybe<StripeIssuingCardholderIndividualDob>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  verification?: Maybe<StripeIssuingCardholderVerification>;
};

export type StripeIssuingCardholderIndividualDob = {
  __typename?: 'StripeIssuingCardholderIndividualDob';
  day?: Maybe<Scalars['Int']>;
  month?: Maybe<Scalars['Int']>;
  year?: Maybe<Scalars['Int']>;
};

export enum StripeIssuingCardholderObject {
  IssuingCardholder = 'ISSUING_CARDHOLDER'
}

export type StripeIssuingCardholderRequirements = {
  __typename?: 'StripeIssuingCardholderRequirements';
  disabledReason?: Maybe<StripeIssuingCardholderRequirementsDisabledReason>;
  pastDue?: Maybe<Array<StripeIssuingCardholderRequirementsPastDue>>;
};

export enum StripeIssuingCardholderRequirementsDisabledReason {
  Listed = 'LISTED',
  RejectedListed = 'REJECTED_LISTED',
  RequirementsPastDue = 'REQUIREMENTS_PAST_DUE',
  UnderReview = 'UNDER_REVIEW'
}

export enum StripeIssuingCardholderRequirementsPastDue {
  CompanyTaxId = 'COMPANY_TAX_ID',
  IndividualCardIssuingUserTermsAcceptanceDate = 'INDIVIDUAL_CARD_ISSUING_USER_TERMS_ACCEPTANCE_DATE',
  IndividualCardIssuingUserTermsAcceptanceIp = 'INDIVIDUAL_CARD_ISSUING_USER_TERMS_ACCEPTANCE_IP',
  IndividualDobDay = 'INDIVIDUAL_DOB_DAY',
  IndividualDobMonth = 'INDIVIDUAL_DOB_MONTH',
  IndividualDobYear = 'INDIVIDUAL_DOB_YEAR',
  IndividualFirstName = 'INDIVIDUAL_FIRST_NAME',
  IndividualLastName = 'INDIVIDUAL_LAST_NAME',
  IndividualVerificationDocument = 'INDIVIDUAL_VERIFICATION_DOCUMENT'
}

export type StripeIssuingCardholderSpendingLimit = {
  __typename?: 'StripeIssuingCardholderSpendingLimit';
  amount: Scalars['Int'];
  categories?: Maybe<Array<StripeIssuingCardholderSpendingLimitCategories>>;
  interval: StripeIssuingCardholderSpendingLimitInterval;
};

export enum StripeIssuingCardholderSpendingLimitCategories {
  AccountingBookkeepingServices = 'ACCOUNTING_BOOKKEEPING_SERVICES',
  AcRefrigerationRepair = 'AC_REFRIGERATION_REPAIR',
  AdvertisingServices = 'ADVERTISING_SERVICES',
  AgriculturalCooperative = 'AGRICULTURAL_COOPERATIVE',
  AirlinesAirCarriers = 'AIRLINES_AIR_CARRIERS',
  AirportsFlyingFields = 'AIRPORTS_FLYING_FIELDS',
  AmbulanceServices = 'AMBULANCE_SERVICES',
  AmusementParksCarnivals = 'AMUSEMENT_PARKS_CARNIVALS',
  AntiqueReproductions = 'ANTIQUE_REPRODUCTIONS',
  AntiqueShops = 'ANTIQUE_SHOPS',
  Aquariums = 'AQUARIUMS',
  ArchitecturalSurveyingServices = 'ARCHITECTURAL_SURVEYING_SERVICES',
  ArtistsSupplyAndCraftShops = 'ARTISTS_SUPPLY_AND_CRAFT_SHOPS',
  ArtDealersAndGalleries = 'ART_DEALERS_AND_GALLERIES',
  AutomatedCashDisburse = 'AUTOMATED_CASH_DISBURSE',
  AutomatedFuelDispensers = 'AUTOMATED_FUEL_DISPENSERS',
  AutomobileAssociations = 'AUTOMOBILE_ASSOCIATIONS',
  AutomotivePartsAndAccessoriesStores = 'AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES',
  AutomotiveTireStores = 'AUTOMOTIVE_TIRE_STORES',
  AutoAndHomeSupplyStores = 'AUTO_AND_HOME_SUPPLY_STORES',
  AutoBodyRepairShops = 'AUTO_BODY_REPAIR_SHOPS',
  AutoPaintShops = 'AUTO_PAINT_SHOPS',
  AutoServiceShops = 'AUTO_SERVICE_SHOPS',
  BailAndBondPayments = 'BAIL_AND_BOND_PAYMENTS',
  Bakeries = 'BAKERIES',
  BandsOrchestras = 'BANDS_ORCHESTRAS',
  BarberAndBeautyShops = 'BARBER_AND_BEAUTY_SHOPS',
  BettingCasinoGambling = 'BETTING_CASINO_GAMBLING',
  BicycleShops = 'BICYCLE_SHOPS',
  BilliardPoolEstablishments = 'BILLIARD_POOL_ESTABLISHMENTS',
  BoatDealers = 'BOAT_DEALERS',
  BoatRentalsAndLeases = 'BOAT_RENTALS_AND_LEASES',
  BooksPeriodicalsAndNewspapers = 'BOOKS_PERIODICALS_AND_NEWSPAPERS',
  BookStores = 'BOOK_STORES',
  BowlingAlleys = 'BOWLING_ALLEYS',
  BusinessSecretarialSchools = 'BUSINESS_SECRETARIAL_SCHOOLS',
  BusLines = 'BUS_LINES',
  BuyingShoppingServices = 'BUYING_SHOPPING_SERVICES',
  CableSatelliteAndOtherPayTelevisionAndRadio = 'CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO',
  CameraAndPhotographicSupplyStores = 'CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES',
  CandyNutAndConfectioneryStores = 'CANDY_NUT_AND_CONFECTIONERY_STORES',
  CarpentryServices = 'CARPENTRY_SERVICES',
  CarpetUpholsteryCleaning = 'CARPET_UPHOLSTERY_CLEANING',
  CarAndTruckDealersNewUsed = 'CAR_AND_TRUCK_DEALERS_NEW_USED',
  CarAndTruckDealersUsedOnly = 'CAR_AND_TRUCK_DEALERS_USED_ONLY',
  CarRentalAgencies = 'CAR_RENTAL_AGENCIES',
  CarWashes = 'CAR_WASHES',
  Caterers = 'CATERERS',
  CharitableAndSocialServiceOrganizationsFundraising = 'CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING',
  ChemicalsAndAlliedProducts = 'CHEMICALS_AND_ALLIED_PRODUCTS',
  ChildrensAndInfantsWearStores = 'CHILDRENS_AND_INFANTS_WEAR_STORES',
  ChildCareServices = 'CHILD_CARE_SERVICES',
  ChiropodistsPodiatrists = 'CHIROPODISTS_PODIATRISTS',
  Chiropractors = 'CHIROPRACTORS',
  CigarStoresAndStands = 'CIGAR_STORES_AND_STANDS',
  CivicSocialFraternalAssociations = 'CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS',
  CleaningAndMaintenance = 'CLEANING_AND_MAINTENANCE',
  ClothingRental = 'CLOTHING_RENTAL',
  CollegesUniversities = 'COLLEGES_UNIVERSITIES',
  CommercialEquipment = 'COMMERCIAL_EQUIPMENT',
  CommercialFootwear = 'COMMERCIAL_FOOTWEAR',
  CommercialPhotographyArtAndGraphics = 'COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS',
  CommuterTransportAndFerries = 'COMMUTER_TRANSPORT_AND_FERRIES',
  ComputersPeripheralsAndSoftware = 'COMPUTERS_PERIPHERALS_AND_SOFTWARE',
  ComputerNetworkServices = 'COMPUTER_NETWORK_SERVICES',
  ComputerProgramming = 'COMPUTER_PROGRAMMING',
  ComputerRepair = 'COMPUTER_REPAIR',
  ComputerSoftwareStores = 'COMPUTER_SOFTWARE_STORES',
  ConcreteWorkServices = 'CONCRETE_WORK_SERVICES',
  ConstructionMaterials = 'CONSTRUCTION_MATERIALS',
  ConsultingPublicRelations = 'CONSULTING_PUBLIC_RELATIONS',
  CorrespondenceSchools = 'CORRESPONDENCE_SCHOOLS',
  CosmeticStores = 'COSMETIC_STORES',
  CounselingServices = 'COUNSELING_SERVICES',
  CountryClubs = 'COUNTRY_CLUBS',
  CourierServices = 'COURIER_SERVICES',
  CourtCosts = 'COURT_COSTS',
  CreditReportingAgencies = 'CREDIT_REPORTING_AGENCIES',
  CruiseLines = 'CRUISE_LINES',
  DairyProductsStores = 'DAIRY_PRODUCTS_STORES',
  DanceHallStudiosSchools = 'DANCE_HALL_STUDIOS_SCHOOLS',
  DatingEscortServices = 'DATING_ESCORT_SERVICES',
  DentistsOrthodontists = 'DENTISTS_ORTHODONTISTS',
  DepartmentStores = 'DEPARTMENT_STORES',
  DetectiveAgencies = 'DETECTIVE_AGENCIES',
  DigitalGoodsApplications = 'DIGITAL_GOODS_APPLICATIONS',
  DigitalGoodsGames = 'DIGITAL_GOODS_GAMES',
  DigitalGoodsLargeVolume = 'DIGITAL_GOODS_LARGE_VOLUME',
  DigitalGoodsMedia = 'DIGITAL_GOODS_MEDIA',
  DirectMarketingCatalogMerchant = 'DIRECT_MARKETING_CATALOG_MERCHANT',
  DirectMarketingCombinationCatalogAndRetailMerchant = 'DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT',
  DirectMarketingInboundTelemarketing = 'DIRECT_MARKETING_INBOUND_TELEMARKETING',
  DirectMarketingInsuranceServices = 'DIRECT_MARKETING_INSURANCE_SERVICES',
  DirectMarketingOther = 'DIRECT_MARKETING_OTHER',
  DirectMarketingOutboundTelemarketing = 'DIRECT_MARKETING_OUTBOUND_TELEMARKETING',
  DirectMarketingSubscription = 'DIRECT_MARKETING_SUBSCRIPTION',
  DirectMarketingTravel = 'DIRECT_MARKETING_TRAVEL',
  DiscountStores = 'DISCOUNT_STORES',
  Doctors = 'DOCTORS',
  DoorToDoorSales = 'DOOR_TO_DOOR_SALES',
  DraperyWindowCoveringAndUpholsteryStores = 'DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES',
  DrinkingPlaces = 'DRINKING_PLACES',
  DrugsDrugProprietariesAndDruggistSundries = 'DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES',
  DrugStoresAndPharmacies = 'DRUG_STORES_AND_PHARMACIES',
  DryCleaners = 'DRY_CLEANERS',
  DurableGoods = 'DURABLE_GOODS',
  DutyFreeStores = 'DUTY_FREE_STORES',
  EatingPlacesRestaurants = 'EATING_PLACES_RESTAURANTS',
  EducationalServices = 'EDUCATIONAL_SERVICES',
  ElectricalPartsAndEquipment = 'ELECTRICAL_PARTS_AND_EQUIPMENT',
  ElectricalServices = 'ELECTRICAL_SERVICES',
  ElectricRazorStores = 'ELECTRIC_RAZOR_STORES',
  ElectricVehicleCharging = 'ELECTRIC_VEHICLE_CHARGING',
  ElectronicsRepairShops = 'ELECTRONICS_REPAIR_SHOPS',
  ElectronicsStores = 'ELECTRONICS_STORES',
  ElementarySecondarySchools = 'ELEMENTARY_SECONDARY_SCHOOLS',
  EmergencyServicesGcasVisaUseOnly = 'EMERGENCY_SERVICES_GCAS_VISA_USE_ONLY',
  EmploymentTempAgencies = 'EMPLOYMENT_TEMP_AGENCIES',
  EquipmentRental = 'EQUIPMENT_RENTAL',
  ExterminatingServices = 'EXTERMINATING_SERVICES',
  FamilyClothingStores = 'FAMILY_CLOTHING_STORES',
  FastFoodRestaurants = 'FAST_FOOD_RESTAURANTS',
  FinancialInstitutions = 'FINANCIAL_INSTITUTIONS',
  FinesGovernmentAdministrativeEntities = 'FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES',
  FireplaceFireplaceScreensAndAccessoriesStores = 'FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES',
  FloorCoveringStores = 'FLOOR_COVERING_STORES',
  Florists = 'FLORISTS',
  FloristsSuppliesNurseryStockAndFlowers = 'FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS',
  FreezerAndLockerMeatProvisioners = 'FREEZER_AND_LOCKER_MEAT_PROVISIONERS',
  FuelDealersNonAutomotive = 'FUEL_DEALERS_NON_AUTOMOTIVE',
  FuneralServicesCrematories = 'FUNERAL_SERVICES_CREMATORIES',
  FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances = 'FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES',
  FurnitureRepairRefinishing = 'FURNITURE_REPAIR_REFINISHING',
  FurriersAndFurShops = 'FURRIERS_AND_FUR_SHOPS',
  GeneralServices = 'GENERAL_SERVICES',
  GiftCardNoveltyAndSouvenirShops = 'GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS',
  GlasswareCrystalStores = 'GLASSWARE_CRYSTAL_STORES',
  GlassPaintAndWallpaperStores = 'GLASS_PAINT_AND_WALLPAPER_STORES',
  GolfCoursesPublic = 'GOLF_COURSES_PUBLIC',
  GovernmentLicensedHorseDogRacingUsRegionOnly = 'GOVERNMENT_LICENSED_HORSE_DOG_RACING_US_REGION_ONLY',
  GovernmentLicensedOnlineCasionsOnlineGamblingUsRegionOnly = 'GOVERNMENT_LICENSED_ONLINE_CASIONS_ONLINE_GAMBLING_US_REGION_ONLY',
  GovernmentOwnedLotteriesNonUsRegion = 'GOVERNMENT_OWNED_LOTTERIES_NON_US_REGION',
  GovernmentOwnedLotteriesUsRegionOnly = 'GOVERNMENT_OWNED_LOTTERIES_US_REGION_ONLY',
  GovernmentServices = 'GOVERNMENT_SERVICES',
  GroceryStoresSupermarkets = 'GROCERY_STORES_SUPERMARKETS',
  HardwareEquipmentAndSupplies = 'HARDWARE_EQUIPMENT_AND_SUPPLIES',
  HardwareStores = 'HARDWARE_STORES',
  HealthAndBeautySpas = 'HEALTH_AND_BEAUTY_SPAS',
  HearingAidsSalesAndSupplies = 'HEARING_AIDS_SALES_AND_SUPPLIES',
  HeatingPlumbingAC = 'HEATING_PLUMBING_A_C',
  HobbyToyAndGameShops = 'HOBBY_TOY_AND_GAME_SHOPS',
  HomeSupplyWarehouseStores = 'HOME_SUPPLY_WAREHOUSE_STORES',
  Hospitals = 'HOSPITALS',
  HotelsMotelsAndResorts = 'HOTELS_MOTELS_AND_RESORTS',
  HouseholdApplianceStores = 'HOUSEHOLD_APPLIANCE_STORES',
  IndustrialSupplies = 'INDUSTRIAL_SUPPLIES',
  InformationRetrievalServices = 'INFORMATION_RETRIEVAL_SERVICES',
  InsuranceDefault = 'INSURANCE_DEFAULT',
  InsuranceUnderwritingPremiums = 'INSURANCE_UNDERWRITING_PREMIUMS',
  IntraCompanyPurchases = 'INTRA_COMPANY_PURCHASES',
  JewelryStoresWatchesClocksAndSilverwareStores = 'JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES',
  LandscapingServices = 'LANDSCAPING_SERVICES',
  Laundries = 'LAUNDRIES',
  LaundryCleaningServices = 'LAUNDRY_CLEANING_SERVICES',
  LegalServicesAttorneys = 'LEGAL_SERVICES_ATTORNEYS',
  LuggageAndLeatherGoodsStores = 'LUGGAGE_AND_LEATHER_GOODS_STORES',
  LumberBuildingMaterialsStores = 'LUMBER_BUILDING_MATERIALS_STORES',
  ManualCashDisburse = 'MANUAL_CASH_DISBURSE',
  MarinasServiceAndSupplies = 'MARINAS_SERVICE_AND_SUPPLIES',
  Marketplaces = 'MARKETPLACES',
  MasonryStoneworkAndPlaster = 'MASONRY_STONEWORK_AND_PLASTER',
  MassageParlors = 'MASSAGE_PARLORS',
  MedicalAndDentalLabs = 'MEDICAL_AND_DENTAL_LABS',
  MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies = 'MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES',
  MedicalServices = 'MEDICAL_SERVICES',
  MembershipOrganizations = 'MEMBERSHIP_ORGANIZATIONS',
  MensAndBoysClothingAndAccessoriesStores = 'MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES',
  MensWomensClothingStores = 'MENS_WOMENS_CLOTHING_STORES',
  MetalServiceCenters = 'METAL_SERVICE_CENTERS',
  Miscellaneous = 'MISCELLANEOUS',
  MiscellaneousApparelAndAccessoryShops = 'MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS',
  MiscellaneousAutoDealers = 'MISCELLANEOUS_AUTO_DEALERS',
  MiscellaneousBusinessServices = 'MISCELLANEOUS_BUSINESS_SERVICES',
  MiscellaneousFoodStores = 'MISCELLANEOUS_FOOD_STORES',
  MiscellaneousGeneralMerchandise = 'MISCELLANEOUS_GENERAL_MERCHANDISE',
  MiscellaneousGeneralServices = 'MISCELLANEOUS_GENERAL_SERVICES',
  MiscellaneousHomeFurnishingSpecialtyStores = 'MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES',
  MiscellaneousPublishingAndPrinting = 'MISCELLANEOUS_PUBLISHING_AND_PRINTING',
  MiscellaneousRecreationServices = 'MISCELLANEOUS_RECREATION_SERVICES',
  MiscellaneousRepairShops = 'MISCELLANEOUS_REPAIR_SHOPS',
  MiscellaneousSpecialtyRetail = 'MISCELLANEOUS_SPECIALTY_RETAIL',
  MobileHomeDealers = 'MOBILE_HOME_DEALERS',
  MotionPictureTheaters = 'MOTION_PICTURE_THEATERS',
  MotorcycleShopsAndDealers = 'MOTORCYCLE_SHOPS_AND_DEALERS',
  MotorcycleShopsDealers = 'MOTORCYCLE_SHOPS_DEALERS',
  MotorFreightCarriersAndTrucking = 'MOTOR_FREIGHT_CARRIERS_AND_TRUCKING',
  MotorHomesDealers = 'MOTOR_HOMES_DEALERS',
  MotorVehicleSuppliesAndNewParts = 'MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS',
  MusicStoresMusicalInstrumentsPianosAndSheetMusic = 'MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC',
  NewsDealersAndNewsstands = 'NEWS_DEALERS_AND_NEWSSTANDS',
  NondurableGoods = 'NONDURABLE_GOODS',
  NonFiMoneyOrders = 'NON_FI_MONEY_ORDERS',
  NonFiStoredValueCardPurchaseLoad = 'NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD',
  NurseriesLawnAndGardenSupplyStores = 'NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES',
  NursingPersonalCare = 'NURSING_PERSONAL_CARE',
  OfficeAndCommercialFurniture = 'OFFICE_AND_COMMERCIAL_FURNITURE',
  OpticiansEyeglasses = 'OPTICIANS_EYEGLASSES',
  OptometristsOphthalmologist = 'OPTOMETRISTS_OPHTHALMOLOGIST',
  OrthopedicGoodsProstheticDevices = 'ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES',
  Osteopaths = 'OSTEOPATHS',
  PackageStoresBeerWineAndLiquor = 'PACKAGE_STORES_BEER_WINE_AND_LIQUOR',
  PaintsVarnishesAndSupplies = 'PAINTS_VARNISHES_AND_SUPPLIES',
  ParkingLotsGarages = 'PARKING_LOTS_GARAGES',
  PassengerRailways = 'PASSENGER_RAILWAYS',
  PawnShops = 'PAWN_SHOPS',
  PetroleumAndPetroleumProducts = 'PETROLEUM_AND_PETROLEUM_PRODUCTS',
  PetShopsPetFoodAndSupplies = 'PET_SHOPS_PET_FOOD_AND_SUPPLIES',
  PhotographicPhotocopyMicrofilmEquipmentAndSupplies = 'PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES',
  PhotographicStudios = 'PHOTOGRAPHIC_STUDIOS',
  PhotoDeveloping = 'PHOTO_DEVELOPING',
  PictureVideoProduction = 'PICTURE_VIDEO_PRODUCTION',
  PieceGoodsNotionsAndOtherDryGoods = 'PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS',
  PlumbingHeatingEquipmentAndSupplies = 'PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES',
  PoliticalOrganizations = 'POLITICAL_ORGANIZATIONS',
  PostalServicesGovernmentOnly = 'POSTAL_SERVICES_GOVERNMENT_ONLY',
  PreciousStonesAndMetalsWatchesAndJewelry = 'PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY',
  ProfessionalServices = 'PROFESSIONAL_SERVICES',
  PublicWarehousingAndStorage = 'PUBLIC_WAREHOUSING_AND_STORAGE',
  QuickCopyReproAndBlueprint = 'QUICK_COPY_REPRO_AND_BLUEPRINT',
  Railroads = 'RAILROADS',
  RealEstateAgentsAndManagersRentals = 'REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS',
  RecordStores = 'RECORD_STORES',
  RecreationalVehicleRentals = 'RECREATIONAL_VEHICLE_RENTALS',
  ReligiousGoodsStores = 'RELIGIOUS_GOODS_STORES',
  ReligiousOrganizations = 'RELIGIOUS_ORGANIZATIONS',
  RoofingSidingSheetMetal = 'ROOFING_SIDING_SHEET_METAL',
  SecretarialSupportServices = 'SECRETARIAL_SUPPORT_SERVICES',
  SecurityBrokersDealers = 'SECURITY_BROKERS_DEALERS',
  ServiceStations = 'SERVICE_STATIONS',
  SewingNeedleworkFabricAndPieceGoodsStores = 'SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES',
  ShoeRepairHatCleaning = 'SHOE_REPAIR_HAT_CLEANING',
  ShoeStores = 'SHOE_STORES',
  SmallApplianceRepair = 'SMALL_APPLIANCE_REPAIR',
  SnowmobileDealers = 'SNOWMOBILE_DEALERS',
  SpecialtyCleaning = 'SPECIALTY_CLEANING',
  SpecialTradeServices = 'SPECIAL_TRADE_SERVICES',
  SportingGoodsStores = 'SPORTING_GOODS_STORES',
  SportingRecreationCamps = 'SPORTING_RECREATION_CAMPS',
  SportsAndRidingApparelStores = 'SPORTS_AND_RIDING_APPAREL_STORES',
  SportsClubsFields = 'SPORTS_CLUBS_FIELDS',
  StampAndCoinStores = 'STAMP_AND_COIN_STORES',
  StationaryOfficeSuppliesPrintingAndWritingPaper = 'STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER',
  StationeryStoresOfficeAndSchoolSupplyStores = 'STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES',
  SwimmingPoolsSales = 'SWIMMING_POOLS_SALES',
  TailorsAlterations = 'TAILORS_ALTERATIONS',
  TaxicabsLimousines = 'TAXICABS_LIMOUSINES',
  TaxPaymentsGovernmentAgencies = 'TAX_PAYMENTS_GOVERNMENT_AGENCIES',
  TaxPreparationServices = 'TAX_PREPARATION_SERVICES',
  TelecommunicationEquipmentAndTelephoneSales = 'TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES',
  TelecommunicationServices = 'TELECOMMUNICATION_SERVICES',
  TelegraphServices = 'TELEGRAPH_SERVICES',
  TentAndAwningShops = 'TENT_AND_AWNING_SHOPS',
  TestingLaboratories = 'TESTING_LABORATORIES',
  TheatricalTicketAgencies = 'THEATRICAL_TICKET_AGENCIES',
  Timeshares = 'TIMESHARES',
  TireRetreadingAndRepair = 'TIRE_RETREADING_AND_REPAIR',
  TollsBridgeFees = 'TOLLS_BRIDGE_FEES',
  TouristAttractionsAndExhibits = 'TOURIST_ATTRACTIONS_AND_EXHIBITS',
  TowingServices = 'TOWING_SERVICES',
  TrailerParksCampgrounds = 'TRAILER_PARKS_CAMPGROUNDS',
  TransportationServices = 'TRANSPORTATION_SERVICES',
  TravelAgenciesTourOperators = 'TRAVEL_AGENCIES_TOUR_OPERATORS',
  TruckStopIteration = 'TRUCK_STOP_ITERATION',
  TruckUtilityTrailerRentals = 'TRUCK_UTILITY_TRAILER_RENTALS',
  TypesettingPlateMakingAndRelatedServices = 'TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES',
  TypewriterStores = 'TYPEWRITER_STORES',
  TUiTravelGermany = 'T_UI_TRAVEL_GERMANY',
  UniformsCommercialClothing = 'UNIFORMS_COMMERCIAL_CLOTHING',
  UsedMerchandiseAndSecondhandStores = 'USED_MERCHANDISE_AND_SECONDHAND_STORES',
  Utilities = 'UTILITIES',
  USFederalGovernmentAgenciesOrDepartments = 'U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS',
  VarietyStores = 'VARIETY_STORES',
  VeterinaryServices = 'VETERINARY_SERVICES',
  VideoAmusementGameSupplies = 'VIDEO_AMUSEMENT_GAME_SUPPLIES',
  VideoGameArcades = 'VIDEO_GAME_ARCADES',
  VideoTapeRentalStores = 'VIDEO_TAPE_RENTAL_STORES',
  VocationalTradeSchools = 'VOCATIONAL_TRADE_SCHOOLS',
  WatchJewelryRepair = 'WATCH_JEWELRY_REPAIR',
  WeldingRepair = 'WELDING_REPAIR',
  WholesaleClubs = 'WHOLESALE_CLUBS',
  WigAndToupeeStores = 'WIG_AND_TOUPEE_STORES',
  WiresMoneyOrders = 'WIRES_MONEY_ORDERS',
  WomensAccessoryAndSpecialtyShops = 'WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS',
  WomensReadyToWearStores = 'WOMENS_READY_TO_WEAR_STORES',
  WreckingAndSalvageYards = 'WRECKING_AND_SALVAGE_YARDS'
}

export enum StripeIssuingCardholderSpendingLimitInterval {
  AllTime = 'ALL_TIME',
  Daily = 'DAILY',
  Monthly = 'MONTHLY',
  PerAuthorization = 'PER_AUTHORIZATION',
  Weekly = 'WEEKLY',
  Yearly = 'YEARLY'
}

export enum StripeIssuingCardholderStatus {
  Active = 'ACTIVE',
  Blocked = 'BLOCKED',
  Inactive = 'INACTIVE'
}

export enum StripeIssuingCardholderType {
  Company = 'COMPANY',
  Individual = 'INDIVIDUAL'
}

export type StripeIssuingCardholderUserTermsAcceptance = {
  __typename?: 'StripeIssuingCardholderUserTermsAcceptance';
  date?: Maybe<Scalars['Int']>;
  ip?: Maybe<Scalars['String']>;
  userAgent?: Maybe<Scalars['String']>;
};

export type StripeIssuingCardholderVerification = {
  __typename?: 'StripeIssuingCardholderVerification';
  document?: Maybe<StripeIssuingCardholderIdDocument>;
};

export type StripeIssuingDispute = {
  __typename?: 'StripeIssuingDispute';
  amount: Scalars['Int'];
  balanceTransactions?: Maybe<Array<StripeBalanceTransaction>>;
  created: Scalars['Int'];
  currency: Scalars['String'];
  evidence: StripeIssuingDisputeEvidence;
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  metadata: Scalars['JSON'];
  object: StripeIssuingDisputeObject;
  status: StripeIssuingDisputeStatus;
  transaction: StripeStringOrIssuingTransactionUnion;
  treasury?: Maybe<StripeIssuingDisputeTreasury>;
};

export type StripeIssuingDisputeCanceledEvidence = {
  __typename?: 'StripeIssuingDisputeCanceledEvidence';
  additionalDocumentation?: Maybe<StripeStringOrFileUnion>;
  canceledAt?: Maybe<Scalars['Int']>;
  cancellationPolicyProvided?: Maybe<Scalars['Boolean']>;
  cancellationReason?: Maybe<Scalars['String']>;
  expectedAt?: Maybe<Scalars['Int']>;
  explanation?: Maybe<Scalars['String']>;
  productDescription?: Maybe<Scalars['String']>;
  productType?: Maybe<StripeIssuingDisputeCanceledEvidenceProductType>;
  returnStatus?: Maybe<StripeIssuingDisputeCanceledEvidenceReturnStatus>;
  returnedAt?: Maybe<Scalars['Int']>;
};

export enum StripeIssuingDisputeCanceledEvidenceProductType {
  Merchandise = 'MERCHANDISE',
  Service = 'SERVICE'
}

export enum StripeIssuingDisputeCanceledEvidenceReturnStatus {
  MerchantRejected = 'MERCHANT_REJECTED',
  Successful = 'SUCCESSFUL'
}

export type StripeIssuingDisputeDuplicateEvidence = {
  __typename?: 'StripeIssuingDisputeDuplicateEvidence';
  additionalDocumentation?: Maybe<StripeStringOrFileUnion>;
  cardStatement?: Maybe<StripeStringOrFileUnion>;
  cashReceipt?: Maybe<StripeStringOrFileUnion>;
  checkImage?: Maybe<StripeStringOrFileUnion>;
  explanation?: Maybe<Scalars['String']>;
  originalTransaction?: Maybe<Scalars['String']>;
};

export type StripeIssuingDisputeEvidence = {
  __typename?: 'StripeIssuingDisputeEvidence';
  canceled?: Maybe<StripeIssuingDisputeCanceledEvidence>;
  duplicate?: Maybe<StripeIssuingDisputeDuplicateEvidence>;
  fraudulent?: Maybe<StripeIssuingDisputeFraudulentEvidence>;
  merchandiseNotAsDescribed?: Maybe<StripeIssuingDisputeMerchandiseNotAsDescribedEvidence>;
  notReceived?: Maybe<StripeIssuingDisputeNotReceivedEvidence>;
  other?: Maybe<StripeIssuingDisputeOtherEvidence>;
  reason: StripeIssuingDisputeEvidenceReason;
  serviceNotAsDescribed?: Maybe<StripeIssuingDisputeServiceNotAsDescribedEvidence>;
};

export enum StripeIssuingDisputeEvidenceReason {
  Canceled = 'CANCELED',
  Duplicate = 'DUPLICATE',
  Fraudulent = 'FRAUDULENT',
  MerchandiseNotAsDescribed = 'MERCHANDISE_NOT_AS_DESCRIBED',
  NotReceived = 'NOT_RECEIVED',
  Other = 'OTHER',
  ServiceNotAsDescribed = 'SERVICE_NOT_AS_DESCRIBED'
}

export type StripeIssuingDisputeFraudulentEvidence = {
  __typename?: 'StripeIssuingDisputeFraudulentEvidence';
  additionalDocumentation?: Maybe<StripeStringOrFileUnion>;
  explanation?: Maybe<Scalars['String']>;
};

export type StripeIssuingDisputeMerchandiseNotAsDescribedEvidence = {
  __typename?: 'StripeIssuingDisputeMerchandiseNotAsDescribedEvidence';
  additionalDocumentation?: Maybe<StripeStringOrFileUnion>;
  explanation?: Maybe<Scalars['String']>;
  receivedAt?: Maybe<Scalars['Int']>;
  returnDescription?: Maybe<Scalars['String']>;
  returnStatus?: Maybe<StripeIssuingDisputeMerchandiseNotAsDescribedEvidenceReturnStatus>;
  returnedAt?: Maybe<Scalars['Int']>;
};

export enum StripeIssuingDisputeMerchandiseNotAsDescribedEvidenceReturnStatus {
  MerchantRejected = 'MERCHANT_REJECTED',
  Successful = 'SUCCESSFUL'
}

export type StripeIssuingDisputeNotReceivedEvidence = {
  __typename?: 'StripeIssuingDisputeNotReceivedEvidence';
  additionalDocumentation?: Maybe<StripeStringOrFileUnion>;
  expectedAt?: Maybe<Scalars['Int']>;
  explanation?: Maybe<Scalars['String']>;
  productDescription?: Maybe<Scalars['String']>;
  productType?: Maybe<StripeIssuingDisputeNotReceivedEvidenceProductType>;
};

export enum StripeIssuingDisputeNotReceivedEvidenceProductType {
  Merchandise = 'MERCHANDISE',
  Service = 'SERVICE'
}

export enum StripeIssuingDisputeObject {
  IssuingDispute = 'ISSUING_DISPUTE'
}

export type StripeIssuingDisputeOtherEvidence = {
  __typename?: 'StripeIssuingDisputeOtherEvidence';
  additionalDocumentation?: Maybe<StripeStringOrFileUnion>;
  explanation?: Maybe<Scalars['String']>;
  productDescription?: Maybe<Scalars['String']>;
  productType?: Maybe<StripeIssuingDisputeOtherEvidenceProductType>;
};

export enum StripeIssuingDisputeOtherEvidenceProductType {
  Merchandise = 'MERCHANDISE',
  Service = 'SERVICE'
}

export type StripeIssuingDisputeServiceNotAsDescribedEvidence = {
  __typename?: 'StripeIssuingDisputeServiceNotAsDescribedEvidence';
  additionalDocumentation?: Maybe<StripeStringOrFileUnion>;
  canceledAt?: Maybe<Scalars['Int']>;
  cancellationReason?: Maybe<Scalars['String']>;
  explanation?: Maybe<Scalars['String']>;
  receivedAt?: Maybe<Scalars['Int']>;
};

export enum StripeIssuingDisputeStatus {
  Expired = 'EXPIRED',
  Lost = 'LOST',
  Submitted = 'SUBMITTED',
  Unsubmitted = 'UNSUBMITTED',
  Won = 'WON'
}

export type StripeIssuingDisputeTreasury = {
  __typename?: 'StripeIssuingDisputeTreasury';
  debitReversal?: Maybe<Scalars['String']>;
  receivedDebit: Scalars['String'];
};

export type StripeIssuingSettlement = {
  __typename?: 'StripeIssuingSettlement';
  bin: Scalars['String'];
  clearingDate: Scalars['Int'];
  created: Scalars['Int'];
  currency: Scalars['String'];
  id: Scalars['String'];
  interchangeFees: Scalars['Int'];
  livemode: Scalars['Boolean'];
  metadata: Scalars['JSON'];
  netTotal: Scalars['Int'];
  network: StripeIssuingSettlementNetwork;
  networkFees: Scalars['Int'];
  networkSettlementIdentifier: Scalars['String'];
  object: StripeIssuingSettlementObject;
  settlementService: Scalars['String'];
  transactionCount: Scalars['Int'];
  transactionVolume: Scalars['Int'];
};

export enum StripeIssuingSettlementNetwork {
  Visa = 'VISA'
}

export enum StripeIssuingSettlementObject {
  IssuingSettlement = 'ISSUING_SETTLEMENT'
}

export type StripeIssuingTransaction = {
  __typename?: 'StripeIssuingTransaction';
  amount: Scalars['Int'];
  amountDetails?: Maybe<StripeIssuingTransactionAmountDetails>;
  authorization?: Maybe<StripeStringOrIssuingAuthorizationUnion>;
  balanceTransaction?: Maybe<StripeStringOrBalanceTransactionUnion>;
  card: StripeStringOrIssuingCardUnion;
  cardholder?: Maybe<StripeStringOrIssuingCardholderUnion>;
  created: Scalars['Int'];
  currency: Scalars['String'];
  dispute?: Maybe<StripeStringOrIssuingDisputeUnion>;
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  merchantAmount: Scalars['Int'];
  merchantCurrency: Scalars['String'];
  merchantData: StripeIssuingAuthorizationMerchantData;
  metadata: Scalars['JSON'];
  object: StripeIssuingTransactionObject;
  purchaseDetails?: Maybe<StripeIssuingTransactionPurchaseDetails>;
  treasury?: Maybe<StripeIssuingTransactionTreasury>;
  type: StripeIssuingTransactionType;
  wallet?: Maybe<StripeIssuingTransactionWallet>;
};

export type StripeIssuingTransactionAmountDetails = {
  __typename?: 'StripeIssuingTransactionAmountDetails';
  atmFee?: Maybe<Scalars['Int']>;
};

export type StripeIssuingTransactionFlightData = {
  __typename?: 'StripeIssuingTransactionFlightData';
  departureAt?: Maybe<Scalars['Int']>;
  passengerName?: Maybe<Scalars['String']>;
  refundable?: Maybe<Scalars['Boolean']>;
  segments?: Maybe<Array<StripeIssuingTransactionFlightDataLeg>>;
  travelAgency?: Maybe<Scalars['String']>;
};

export type StripeIssuingTransactionFlightDataLeg = {
  __typename?: 'StripeIssuingTransactionFlightDataLeg';
  arrivalAirportCode?: Maybe<Scalars['String']>;
  carrier?: Maybe<Scalars['String']>;
  departureAirportCode?: Maybe<Scalars['String']>;
  flightNumber?: Maybe<Scalars['String']>;
  serviceClass?: Maybe<Scalars['String']>;
  stopoverAllowed?: Maybe<Scalars['Boolean']>;
};

export type StripeIssuingTransactionFuelData = {
  __typename?: 'StripeIssuingTransactionFuelData';
  type: Scalars['String'];
  unit: Scalars['String'];
  unitCostDecimal: Scalars['String'];
  volumeDecimal?: Maybe<Scalars['String']>;
};

export type StripeIssuingTransactionLodgingData = {
  __typename?: 'StripeIssuingTransactionLodgingData';
  checkInAt?: Maybe<Scalars['Int']>;
  nights?: Maybe<Scalars['Int']>;
};

export enum StripeIssuingTransactionObject {
  IssuingTransaction = 'ISSUING_TRANSACTION'
}

export type StripeIssuingTransactionPurchaseDetails = {
  __typename?: 'StripeIssuingTransactionPurchaseDetails';
  flight?: Maybe<StripeIssuingTransactionFlightData>;
  fuel?: Maybe<StripeIssuingTransactionFuelData>;
  lodging?: Maybe<StripeIssuingTransactionLodgingData>;
  receipt?: Maybe<Array<StripeIssuingTransactionReceiptData>>;
  reference?: Maybe<Scalars['String']>;
};

export type StripeIssuingTransactionReceiptData = {
  __typename?: 'StripeIssuingTransactionReceiptData';
  description?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['Float']>;
  total?: Maybe<Scalars['Int']>;
  unitCost?: Maybe<Scalars['Int']>;
};

export type StripeIssuingTransactionTreasury = {
  __typename?: 'StripeIssuingTransactionTreasury';
  receivedCredit?: Maybe<Scalars['String']>;
  receivedDebit?: Maybe<Scalars['String']>;
};

export enum StripeIssuingTransactionType {
  Capture = 'CAPTURE',
  Refund = 'REFUND'
}

export enum StripeIssuingTransactionWallet {
  ApplePay = 'APPLE_PAY',
  GooglePay = 'GOOGLE_PAY',
  SamsungPay = 'SAMSUNG_PAY'
}

export type StripeItem = {
  __typename?: 'StripeItem';
  amountDiscount: Scalars['Int'];
  amountSubtotal: Scalars['Int'];
  amountTax: Scalars['Int'];
  amountTotal: Scalars['Int'];
  currency: Scalars['String'];
  description: Scalars['String'];
  discounts?: Maybe<Array<StripeLineItemsDiscountAmount>>;
  id: Scalars['String'];
  object: StripeItemObject;
  price?: Maybe<StripePrice>;
  quantity?: Maybe<Scalars['Int']>;
  taxes?: Maybe<Array<StripeLineItemsTaxAmount>>;
};

export enum StripeItemObject {
  Item = 'ITEM'
}

export type StripeLegalEntityCompany = {
  __typename?: 'StripeLegalEntityCompany';
  address?: Maybe<StripeAddress>;
  addressKana?: Maybe<StripeLegalEntityJapanAddress>;
  addressKanji?: Maybe<StripeLegalEntityJapanAddress>;
  directorsProvided?: Maybe<Scalars['Boolean']>;
  executivesProvided?: Maybe<Scalars['Boolean']>;
  exportLicenseId?: Maybe<Scalars['String']>;
  exportPurposeCode?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  nameKana?: Maybe<Scalars['String']>;
  nameKanji?: Maybe<Scalars['String']>;
  ownersProvided?: Maybe<Scalars['Boolean']>;
  ownershipDeclaration?: Maybe<StripeLegalEntityUboDeclaration>;
  phone?: Maybe<Scalars['String']>;
  structure?: Maybe<StripeLegalEntityCompanyStructure>;
  taxIdProvided?: Maybe<Scalars['Boolean']>;
  taxIdRegistrar?: Maybe<Scalars['String']>;
  vatIdProvided?: Maybe<Scalars['Boolean']>;
  verification?: Maybe<StripeLegalEntityCompanyVerification>;
};

export enum StripeLegalEntityCompanyStructure {
  FreeZoneEstablishment = 'FREE_ZONE_ESTABLISHMENT',
  FreeZoneLlc = 'FREE_ZONE_LLC',
  GovernmentalUnit = 'GOVERNMENTAL_UNIT',
  GovernmentInstrumentality = 'GOVERNMENT_INSTRUMENTALITY',
  IncorporatedNonProfit = 'INCORPORATED_NON_PROFIT',
  LimitedLiabilityPartnership = 'LIMITED_LIABILITY_PARTNERSHIP',
  Llc = 'LLC',
  MultiMemberLlc = 'MULTI_MEMBER_LLC',
  PrivateCompany = 'PRIVATE_COMPANY',
  PrivateCorporation = 'PRIVATE_CORPORATION',
  PrivatePartnership = 'PRIVATE_PARTNERSHIP',
  PublicCompany = 'PUBLIC_COMPANY',
  PublicCorporation = 'PUBLIC_CORPORATION',
  PublicPartnership = 'PUBLIC_PARTNERSHIP',
  SingleMemberLlc = 'SINGLE_MEMBER_LLC',
  SoleEstablishment = 'SOLE_ESTABLISHMENT',
  SoleProprietorship = 'SOLE_PROPRIETORSHIP',
  TaxExemptGovernmentInstrumentality = 'TAX_EXEMPT_GOVERNMENT_INSTRUMENTALITY',
  UnincorporatedAssociation = 'UNINCORPORATED_ASSOCIATION',
  UnincorporatedNonProfit = 'UNINCORPORATED_NON_PROFIT'
}

export type StripeLegalEntityCompanyVerification = {
  __typename?: 'StripeLegalEntityCompanyVerification';
  document: StripeLegalEntityCompanyVerificationDocument;
};

export type StripeLegalEntityCompanyVerificationDocument = {
  __typename?: 'StripeLegalEntityCompanyVerificationDocument';
  back?: Maybe<StripeStringOrFileUnion>;
  details?: Maybe<Scalars['String']>;
  detailsCode?: Maybe<Scalars['String']>;
  front?: Maybe<StripeStringOrFileUnion>;
};

export type StripeLegalEntityDob = {
  __typename?: 'StripeLegalEntityDob';
  day?: Maybe<Scalars['Int']>;
  month?: Maybe<Scalars['Int']>;
  year?: Maybe<Scalars['Int']>;
};

export type StripeLegalEntityJapanAddress = {
  __typename?: 'StripeLegalEntityJapanAddress';
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  line1?: Maybe<Scalars['String']>;
  line2?: Maybe<Scalars['String']>;
  postalCode?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  town?: Maybe<Scalars['String']>;
};

export type StripeLegalEntityPersonVerification = {
  __typename?: 'StripeLegalEntityPersonVerification';
  additionalDocument?: Maybe<StripeLegalEntityPersonVerificationDocument>;
  details?: Maybe<Scalars['String']>;
  detailsCode?: Maybe<Scalars['String']>;
  document?: Maybe<StripeLegalEntityPersonVerificationDocument>;
  status: Scalars['String'];
};

export type StripeLegalEntityPersonVerificationDocument = {
  __typename?: 'StripeLegalEntityPersonVerificationDocument';
  back?: Maybe<StripeStringOrFileUnion>;
  details?: Maybe<Scalars['String']>;
  detailsCode?: Maybe<Scalars['String']>;
  front?: Maybe<StripeStringOrFileUnion>;
};

export type StripeLegalEntityUboDeclaration = {
  __typename?: 'StripeLegalEntityUboDeclaration';
  date?: Maybe<Scalars['Int']>;
  ip?: Maybe<Scalars['String']>;
  userAgent?: Maybe<Scalars['String']>;
};

export type StripeLineItem = {
  __typename?: 'StripeLineItem';
  amount: Scalars['Int'];
  amountExcludingTax?: Maybe<Scalars['Int']>;
  currency: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  discountAmounts?: Maybe<Array<StripeDiscountsResourceDiscountAmount>>;
  discountable: Scalars['Boolean'];
  discounts?: Maybe<Array<StripeStringOrDiscountUnion>>;
  id: Scalars['String'];
  invoiceItem?: Maybe<StripeStringOrInvoiceitemUnion>;
  livemode: Scalars['Boolean'];
  metadata: Scalars['JSON'];
  object: StripeLineItemObject;
  period: StripeInvoiceLineItemPeriod;
  price?: Maybe<StripePrice>;
  proration: Scalars['Boolean'];
  prorationDetails?: Maybe<StripeInvoicesLineItemsProrationDetails>;
  quantity?: Maybe<Scalars['Int']>;
  subscription?: Maybe<StripeStringOrSubscriptionUnion>;
  subscriptionItem?: Maybe<StripeStringOrSubscriptionItemUnion>;
  taxAmounts?: Maybe<Array<StripeInvoiceTaxAmount>>;
  taxRates?: Maybe<Array<StripeTaxRate>>;
  type: StripeLineItemType;
  unitAmountExcludingTax?: Maybe<Scalars['String']>;
};

export enum StripeLineItemObject {
  LineItem = 'LINE_ITEM'
}

export enum StripeLineItemType {
  Invoiceitem = 'INVOICEITEM',
  Subscription = 'SUBSCRIPTION'
}

export type StripeLineItemsDiscountAmount = {
  __typename?: 'StripeLineItemsDiscountAmount';
  amount: Scalars['Int'];
  discount: StripeDiscount;
};

export type StripeLineItemsTaxAmount = {
  __typename?: 'StripeLineItemsTaxAmount';
  amount: Scalars['Int'];
  rate: StripeTaxRate;
  taxabilityReason?: Maybe<StripeLineItemsTaxAmountTaxabilityReason>;
  taxableAmount?: Maybe<Scalars['Int']>;
};

export enum StripeLineItemsTaxAmountTaxabilityReason {
  CustomerExempt = 'CUSTOMER_EXEMPT',
  ExcludedTerritory = 'EXCLUDED_TERRITORY',
  JurisdictionUnsupported = 'JURISDICTION_UNSUPPORTED',
  NotCollecting = 'NOT_COLLECTING',
  NotSubjectToTax = 'NOT_SUBJECT_TO_TAX',
  NotSupported = 'NOT_SUPPORTED',
  PortionProductExempt = 'PORTION_PRODUCT_EXEMPT',
  PortionReducedRated = 'PORTION_REDUCED_RATED',
  PortionStandardRated = 'PORTION_STANDARD_RATED',
  ProductExempt = 'PRODUCT_EXEMPT',
  ProductExemptHoliday = 'PRODUCT_EXEMPT_HOLIDAY',
  ProportionallyRated = 'PROPORTIONALLY_RATED',
  ReducedRated = 'REDUCED_RATED',
  ReverseCharge = 'REVERSE_CHARGE',
  StandardRated = 'STANDARD_RATED',
  TaxableBasisReduced = 'TAXABLE_BASIS_REDUCED',
  VatExempt = 'VAT_EXEMPT',
  ZeroRated = 'ZERO_RATED'
}

export type StripeLinkedAccountOptionsUsBankAccount = {
  __typename?: 'StripeLinkedAccountOptionsUsBankAccount';
  permissions?: Maybe<Array<StripeLinkedAccountOptionsUsBankAccountPermissions>>;
  returnUrl?: Maybe<Scalars['String']>;
};

export enum StripeLinkedAccountOptionsUsBankAccountPermissions {
  Balances = 'BALANCES',
  Ownership = 'OWNERSHIP',
  PaymentMethod = 'PAYMENT_METHOD',
  Transactions = 'TRANSACTIONS'
}

export type StripeLoginLink = {
  __typename?: 'StripeLoginLink';
  created: Scalars['Int'];
  object: StripeLoginLinkObject;
  url: Scalars['String'];
};

export enum StripeLoginLinkObject {
  LoginLink = 'LOGIN_LINK'
}

export type StripeMandate = {
  __typename?: 'StripeMandate';
  customerAcceptance: StripeCustomerAcceptance;
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  multiUse?: Maybe<Scalars['JSON']>;
  object: StripeMandateObject;
  paymentMethod: StripeStringOrPaymentMethodUnion;
  paymentMethodDetails: StripeMandatePaymentMethodDetails;
  singleUse?: Maybe<StripeMandateSingleUse>;
  status: StripeMandateStatus;
  type: StripeMandateType;
};

export type StripeMandateAcssDebit = {
  __typename?: 'StripeMandateAcssDebit';
  defaultFor?: Maybe<Array<StripeMandateAcssDebitDefaultFor>>;
  intervalDescription?: Maybe<Scalars['String']>;
  paymentSchedule: StripeMandateAcssDebitPaymentSchedule;
  transactionType: StripeMandateAcssDebitTransactionType;
};

export enum StripeMandateAcssDebitDefaultFor {
  Invoice = 'INVOICE',
  Subscription = 'SUBSCRIPTION'
}

export enum StripeMandateAcssDebitPaymentSchedule {
  Combined = 'COMBINED',
  Interval = 'INTERVAL',
  Sporadic = 'SPORADIC'
}

export enum StripeMandateAcssDebitTransactionType {
  Business = 'BUSINESS',
  Personal = 'PERSONAL'
}

export type StripeMandateAuBecsDebit = {
  __typename?: 'StripeMandateAuBecsDebit';
  url: Scalars['String'];
};

export type StripeMandateBacsDebit = {
  __typename?: 'StripeMandateBacsDebit';
  networkStatus: StripeMandateBacsDebitNetworkStatus;
  reference: Scalars['String'];
  url: Scalars['String'];
};

export enum StripeMandateBacsDebitNetworkStatus {
  Accepted = 'ACCEPTED',
  Pending = 'PENDING',
  Refused = 'REFUSED',
  Revoked = 'REVOKED'
}

export type StripeMandateBlik = {
  __typename?: 'StripeMandateBlik';
  expiresAfter?: Maybe<Scalars['Int']>;
  offSession?: Maybe<StripeMandateOptionsOffSessionDetailsBlik>;
  type?: Maybe<StripeMandateBlikType>;
};

export enum StripeMandateBlikType {
  OffSession = 'OFF_SESSION',
  OnSession = 'ON_SESSION'
}

export enum StripeMandateObject {
  Mandate = 'MANDATE'
}

export type StripeMandateOptionsOffSessionDetailsBlik = {
  __typename?: 'StripeMandateOptionsOffSessionDetailsBlik';
  amount?: Maybe<Scalars['Int']>;
  currency?: Maybe<Scalars['String']>;
  interval?: Maybe<StripeMandateOptionsOffSessionDetailsBlikInterval>;
  intervalCount?: Maybe<Scalars['Int']>;
};

export enum StripeMandateOptionsOffSessionDetailsBlikInterval {
  Day = 'DAY',
  Month = 'MONTH',
  Week = 'WEEK',
  Year = 'YEAR'
}

export type StripeMandatePaymentMethodDetails = {
  __typename?: 'StripeMandatePaymentMethodDetails';
  acssDebit?: Maybe<StripeMandateAcssDebit>;
  auBecsDebit?: Maybe<StripeMandateAuBecsDebit>;
  bacsDebit?: Maybe<StripeMandateBacsDebit>;
  blik?: Maybe<StripeMandateBlik>;
  card?: Maybe<Scalars['JSON']>;
  cashapp?: Maybe<Scalars['JSON']>;
  link?: Maybe<Scalars['JSON']>;
  paypal?: Maybe<StripeMandatePaypal>;
  sepaDebit?: Maybe<StripeMandateSepaDebit>;
  type: Scalars['String'];
  usBankAccount?: Maybe<Scalars['JSON']>;
};

export type StripeMandatePaypal = {
  __typename?: 'StripeMandatePaypal';
  billingAgreementId?: Maybe<Scalars['String']>;
  payerId?: Maybe<Scalars['String']>;
};

export type StripeMandateSepaDebit = {
  __typename?: 'StripeMandateSepaDebit';
  reference: Scalars['String'];
  url: Scalars['String'];
};

export type StripeMandateSingleUse = {
  __typename?: 'StripeMandateSingleUse';
  amount: Scalars['Int'];
  currency: Scalars['String'];
};

export enum StripeMandateStatus {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Pending = 'PENDING'
}

export enum StripeMandateType {
  MultiUse = 'MULTI_USE',
  SingleUse = 'SINGLE_USE'
}

export type StripeMutation = {
  __typename?: 'StripeMutation';
  deleteAccountsAccount?: Maybe<StripeDeletedAccount>;
  deleteAccountsAccountBankAccountsId?: Maybe<StripeDeletedExternalAccount>;
  deleteAccountsAccountExternalAccountsId?: Maybe<StripeDeletedExternalAccount>;
  deleteAccountsAccountPeoplePerson?: Maybe<StripeDeletedPerson>;
  deleteAccountsAccountPersonsPerson?: Maybe<StripeDeletedPerson>;
  deleteApplePayDomainsDomain?: Maybe<StripeDeletedApplePayDomain>;
  deleteCouponsCoupon?: Maybe<StripeDeletedCoupon>;
  deleteCustomersCustomer?: Maybe<StripeDeletedCustomer>;
  deleteCustomersCustomerBankAccountsId?: Maybe<StripeDeletedPaymentSourceOrPaymentSourceUnion>;
  deleteCustomersCustomerCardsId?: Maybe<StripeDeletedPaymentSourceOrPaymentSourceUnion>;
  deleteCustomersCustomerDiscount?: Maybe<StripeDeletedDiscount>;
  deleteCustomersCustomerSourcesId?: Maybe<StripeDeletedPaymentSourceOrPaymentSourceUnion>;
  deleteCustomersCustomerSubscriptionsSubscriptionExposedId?: Maybe<StripeSubscription>;
  deleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount?: Maybe<StripeDeletedDiscount>;
  deleteCustomersCustomerTaxIdsId?: Maybe<StripeDeletedTaxId>;
  deleteEphemeralKeysKey?: Maybe<StripeEphemeralKey>;
  deleteInvoiceitemsInvoiceitem?: Maybe<StripeDeletedInvoiceitem>;
  deleteInvoicesInvoice?: Maybe<StripeDeletedInvoice>;
  deletePlansPlan?: Maybe<StripeDeletedPlan>;
  deleteProductsId?: Maybe<StripeDeletedProduct>;
  deleteRadarValueListItemsItem?: Maybe<StripeDeletedRadarValueListItem>;
  deleteRadarValueListsValueList?: Maybe<StripeDeletedRadarValueList>;
  deleteSubscriptionItemsItem?: Maybe<StripeDeletedSubscriptionItem>;
  deleteSubscriptionsSubscriptionExposedId?: Maybe<StripeSubscription>;
  deleteSubscriptionsSubscriptionExposedIdDiscount?: Maybe<StripeDeletedDiscount>;
  deleteTerminalConfigurationsConfiguration?: Maybe<StripeDeletedTerminalConfiguration>;
  deleteTerminalLocationsLocation?: Maybe<StripeDeletedTerminalLocation>;
  deleteTerminalReadersReader?: Maybe<StripeDeletedTerminalReader>;
  deleteTestHelpersTestClocksTestClock?: Maybe<StripeDeletedTestHelpersTestClock>;
  deleteWebhookEndpointsWebhookEndpoint?: Maybe<StripeDeletedWebhookEndpoint>;
  postAccountLinks?: Maybe<StripeAccountLink>;
  postAccounts?: Maybe<StripeAccount>;
  postAccountsAccount?: Maybe<StripeAccount>;
  postAccountsAccountBankAccounts?: Maybe<StripeExternalAccount>;
  postAccountsAccountBankAccountsId?: Maybe<StripeExternalAccount>;
  postAccountsAccountCapabilitiesCapability?: Maybe<StripeCapability>;
  postAccountsAccountExternalAccounts?: Maybe<StripeExternalAccount>;
  postAccountsAccountExternalAccountsId?: Maybe<StripeExternalAccount>;
  postAccountsAccountLoginLinks?: Maybe<StripeLoginLink>;
  postAccountsAccountPeople?: Maybe<StripePerson>;
  postAccountsAccountPeoplePerson?: Maybe<StripePerson>;
  postAccountsAccountPersons?: Maybe<StripePerson>;
  postAccountsAccountPersonsPerson?: Maybe<StripePerson>;
  postAccountsAccountReject?: Maybe<StripeAccount>;
  postApplePayDomains?: Maybe<StripeApplePayDomain>;
  postApplicationFeesFeeRefundsId?: Maybe<StripeFeeRefund>;
  postApplicationFeesIdRefund?: Maybe<StripeApplicationFee>;
  postApplicationFeesIdRefunds?: Maybe<StripeFeeRefund>;
  postAppsSecrets?: Maybe<StripeAppsSecret>;
  postAppsSecretsDelete?: Maybe<StripeAppsSecret>;
  postBillingPortalConfigurations?: Maybe<StripeBillingPortalConfiguration>;
  postBillingPortalConfigurationsConfiguration?: Maybe<StripeBillingPortalConfiguration>;
  postBillingPortalSessions?: Maybe<StripeBillingPortalSession>;
  postCharges?: Maybe<StripeCharge>;
  postChargesCharge?: Maybe<StripeCharge>;
  postChargesChargeCapture?: Maybe<StripeCharge>;
  postChargesChargeDispute?: Maybe<StripeDispute>;
  postChargesChargeDisputeClose?: Maybe<StripeDispute>;
  postChargesChargeRefund?: Maybe<StripeCharge>;
  postChargesChargeRefunds?: Maybe<StripeRefund>;
  postChargesChargeRefundsRefund?: Maybe<StripeRefund>;
  postCheckoutSessions?: Maybe<StripeCheckoutSession>;
  postCheckoutSessionsSessionExpire?: Maybe<StripeCheckoutSession>;
  postCoupons?: Maybe<StripeCoupon>;
  postCouponsCoupon?: Maybe<StripeCoupon>;
  postCreditNotes?: Maybe<StripeCreditNote>;
  postCreditNotesId?: Maybe<StripeCreditNote>;
  postCreditNotesIdVoid?: Maybe<StripeCreditNote>;
  postCustomers?: Maybe<StripeCustomer>;
  postCustomersCustomer?: Maybe<StripeCustomer>;
  postCustomersCustomerBalanceTransactions?: Maybe<StripeCustomerBalanceTransaction>;
  postCustomersCustomerBalanceTransactionsTransaction?: Maybe<StripeCustomerBalanceTransaction>;
  postCustomersCustomerBankAccounts?: Maybe<StripePaymentSource>;
  postCustomersCustomerBankAccountsId?: Maybe<StripeSourceOrBankAccountOrCardUnion>;
  postCustomersCustomerBankAccountsIdVerify?: Maybe<StripeBankAccount>;
  postCustomersCustomerCards?: Maybe<StripePaymentSource>;
  postCustomersCustomerCardsId?: Maybe<StripeSourceOrBankAccountOrCardUnion>;
  postCustomersCustomerCashBalance?: Maybe<StripeCashBalance>;
  postCustomersCustomerFundingInstructions?: Maybe<StripeFundingInstructions>;
  postCustomersCustomerSources?: Maybe<StripePaymentSource>;
  postCustomersCustomerSourcesId?: Maybe<StripeSourceOrBankAccountOrCardUnion>;
  postCustomersCustomerSourcesIdVerify?: Maybe<StripeBankAccount>;
  postCustomersCustomerSubscriptions?: Maybe<StripeSubscription>;
  postCustomersCustomerSubscriptionsSubscriptionExposedId?: Maybe<StripeSubscription>;
  postCustomersCustomerTaxIds?: Maybe<StripeTaxId>;
  postDisputesDispute?: Maybe<StripeDispute>;
  postDisputesDisputeClose?: Maybe<StripeDispute>;
  postEphemeralKeys?: Maybe<StripeEphemeralKey>;
  postFileLinks?: Maybe<StripeFileLink>;
  postFileLinksLink?: Maybe<StripeFileLink>;
  postFiles?: Maybe<StripeFile>;
  postFinancialConnectionsAccountsAccountDisconnect?: Maybe<StripeFinancialConnectionsAccount>;
  postFinancialConnectionsAccountsAccountRefresh?: Maybe<StripeFinancialConnectionsAccount>;
  postFinancialConnectionsSessions?: Maybe<StripeFinancialConnectionsSession>;
  postIdentityVerificationSessions?: Maybe<StripeIdentityVerificationSession>;
  postIdentityVerificationSessionsSession?: Maybe<StripeIdentityVerificationSession>;
  postIdentityVerificationSessionsSessionCancel?: Maybe<StripeIdentityVerificationSession>;
  postIdentityVerificationSessionsSessionRedact?: Maybe<StripeIdentityVerificationSession>;
  postInvoiceitems?: Maybe<StripeInvoiceitem>;
  postInvoiceitemsInvoiceitem?: Maybe<StripeInvoiceitem>;
  postInvoices?: Maybe<StripeInvoice>;
  postInvoicesInvoice?: Maybe<StripeInvoice>;
  postInvoicesInvoiceFinalize?: Maybe<StripeInvoice>;
  postInvoicesInvoiceMarkUncollectible?: Maybe<StripeInvoice>;
  postInvoicesInvoicePay?: Maybe<StripeInvoice>;
  postInvoicesInvoiceSend?: Maybe<StripeInvoice>;
  postInvoicesInvoiceVoid?: Maybe<StripeInvoice>;
  postIssuingAuthorizationsAuthorization?: Maybe<StripeIssuingAuthorization>;
  postIssuingAuthorizationsAuthorizationApprove?: Maybe<StripeIssuingAuthorization>;
  postIssuingAuthorizationsAuthorizationDecline?: Maybe<StripeIssuingAuthorization>;
  postIssuingCardholders?: Maybe<StripeIssuingCardholder>;
  postIssuingCardholdersCardholder?: Maybe<StripeIssuingCardholder>;
  postIssuingCards?: Maybe<StripeIssuingCard>;
  postIssuingCardsCard?: Maybe<StripeIssuingCard>;
  postIssuingDisputes?: Maybe<StripeIssuingDispute>;
  postIssuingDisputesDispute?: Maybe<StripeIssuingDispute>;
  postIssuingDisputesDisputeSubmit?: Maybe<StripeIssuingDispute>;
  postIssuingSettlementsSettlement?: Maybe<StripeIssuingSettlement>;
  postIssuingTransactionsTransaction?: Maybe<StripeIssuingTransaction>;
  postLinkAccountSessions?: Maybe<StripeFinancialConnectionsSession>;
  postLinkedAccountsAccountDisconnect?: Maybe<StripeFinancialConnectionsAccount>;
  postLinkedAccountsAccountRefresh?: Maybe<StripeFinancialConnectionsAccount>;
  postPaymentIntents?: Maybe<StripePaymentIntent>;
  postPaymentIntentsIntent?: Maybe<StripePaymentIntent>;
  postPaymentIntentsIntentApplyCustomerBalance?: Maybe<StripePaymentIntent>;
  postPaymentIntentsIntentCancel?: Maybe<StripePaymentIntent>;
  postPaymentIntentsIntentCapture?: Maybe<StripePaymentIntent>;
  postPaymentIntentsIntentConfirm?: Maybe<StripePaymentIntent>;
  postPaymentIntentsIntentIncrementAuthorization?: Maybe<StripePaymentIntent>;
  postPaymentIntentsIntentVerifyMicrodeposits?: Maybe<StripePaymentIntent>;
  postPaymentLinks?: Maybe<StripePaymentLink>;
  postPaymentLinksPaymentLink?: Maybe<StripePaymentLink>;
  postPaymentMethods?: Maybe<StripePaymentMethod>;
  postPaymentMethodsPaymentMethod?: Maybe<StripePaymentMethod>;
  postPaymentMethodsPaymentMethodAttach?: Maybe<StripePaymentMethod>;
  postPaymentMethodsPaymentMethodDetach?: Maybe<StripePaymentMethod>;
  postPayouts?: Maybe<StripePayout>;
  postPayoutsPayout?: Maybe<StripePayout>;
  postPayoutsPayoutCancel?: Maybe<StripePayout>;
  postPayoutsPayoutReverse?: Maybe<StripePayout>;
  postPlans?: Maybe<StripePlan>;
  postPlansPlan?: Maybe<StripePlan>;
  postPrices?: Maybe<StripePrice>;
  postPricesPrice?: Maybe<StripePrice>;
  postProducts?: Maybe<StripeProduct>;
  postProductsId?: Maybe<StripeProduct>;
  postPromotionCodes?: Maybe<StripePromotionCode>;
  postPromotionCodesPromotionCode?: Maybe<StripePromotionCode>;
  postQuotes?: Maybe<StripeQuote>;
  postQuotesQuote?: Maybe<StripeQuote>;
  postQuotesQuoteAccept?: Maybe<StripeQuote>;
  postQuotesQuoteCancel?: Maybe<StripeQuote>;
  postQuotesQuoteFinalize?: Maybe<StripeQuote>;
  postRadarValueListItems?: Maybe<StripeRadarValueListItem>;
  postRadarValueLists?: Maybe<StripeRadarValueList>;
  postRadarValueListsValueList?: Maybe<StripeRadarValueList>;
  postRefunds?: Maybe<StripeRefund>;
  postRefundsRefund?: Maybe<StripeRefund>;
  postRefundsRefundCancel?: Maybe<StripeRefund>;
  postReportingReportRuns?: Maybe<StripeReportingReportRun>;
  postReviewsReviewApprove?: Maybe<StripeReview>;
  postSetupIntents?: Maybe<StripeSetupIntent>;
  postSetupIntentsIntent?: Maybe<StripeSetupIntent>;
  postSetupIntentsIntentCancel?: Maybe<StripeSetupIntent>;
  postSetupIntentsIntentConfirm?: Maybe<StripeSetupIntent>;
  postSetupIntentsIntentVerifyMicrodeposits?: Maybe<StripeSetupIntent>;
  postShippingRates?: Maybe<StripeShippingRate>;
  postShippingRatesShippingRateToken?: Maybe<StripeShippingRate>;
  postSources?: Maybe<StripeSource>;
  postSourcesSource?: Maybe<StripeSource>;
  postSourcesSourceVerify?: Maybe<StripeSource>;
  postSubscriptionItems?: Maybe<StripeSubscriptionItem>;
  postSubscriptionItemsItem?: Maybe<StripeSubscriptionItem>;
  postSubscriptionItemsSubscriptionItemUsageRecords?: Maybe<StripeUsageRecord>;
  postSubscriptionSchedules?: Maybe<StripeSubscriptionSchedule>;
  postSubscriptionSchedulesSchedule?: Maybe<StripeSubscriptionSchedule>;
  postSubscriptionSchedulesScheduleCancel?: Maybe<StripeSubscriptionSchedule>;
  postSubscriptionSchedulesScheduleRelease?: Maybe<StripeSubscriptionSchedule>;
  postSubscriptions?: Maybe<StripeSubscription>;
  postSubscriptionsSubscriptionExposedId?: Maybe<StripeSubscription>;
  postSubscriptionsSubscriptionResume?: Maybe<StripeSubscription>;
  postTaxCalculations?: Maybe<StripeTaxCalculation>;
  postTaxRates?: Maybe<StripeTaxRate>;
  postTaxRatesTaxRate?: Maybe<StripeTaxRate>;
  postTaxTransactionsCreateFromCalculation?: Maybe<StripeTaxTransaction>;
  postTaxTransactionsCreateReversal?: Maybe<StripeTaxTransaction>;
  postTerminalConfigurations?: Maybe<StripeTerminalConfiguration>;
  postTerminalConfigurationsConfiguration?: Maybe<StripeDeletedTerminalConfigurationOrTerminalConfigurationUnion>;
  postTerminalConnectionTokens?: Maybe<StripeTerminalConnectionToken>;
  postTerminalLocations?: Maybe<StripeTerminalLocation>;
  postTerminalLocationsLocation?: Maybe<StripeDeletedTerminalLocationOrTerminalLocationUnion>;
  postTerminalReaders?: Maybe<StripeTerminalReader>;
  postTerminalReadersReader?: Maybe<StripeDeletedTerminalReaderOrTerminalReaderUnion>;
  postTerminalReadersReaderCancelAction?: Maybe<StripeTerminalReader>;
  postTerminalReadersReaderProcessPaymentIntent?: Maybe<StripeTerminalReader>;
  postTerminalReadersReaderProcessSetupIntent?: Maybe<StripeTerminalReader>;
  postTerminalReadersReaderRefundPayment?: Maybe<StripeTerminalReader>;
  postTerminalReadersReaderSetReaderDisplay?: Maybe<StripeTerminalReader>;
  postTestHelpersCustomersCustomerFundCashBalance?: Maybe<StripeCustomerCashBalanceTransaction>;
  postTestHelpersIssuingCardsCardShippingDeliver?: Maybe<StripeIssuingCard>;
  postTestHelpersIssuingCardsCardShippingFail?: Maybe<StripeIssuingCard>;
  postTestHelpersIssuingCardsCardShippingReturn?: Maybe<StripeIssuingCard>;
  postTestHelpersIssuingCardsCardShippingShip?: Maybe<StripeIssuingCard>;
  postTestHelpersRefundsRefundExpire?: Maybe<StripeRefund>;
  postTestHelpersTerminalReadersReaderPresentPaymentMethod?: Maybe<StripeTerminalReader>;
  postTestHelpersTestClocks?: Maybe<StripeTestHelpersTestClock>;
  postTestHelpersTestClocksTestClockAdvance?: Maybe<StripeTestHelpersTestClock>;
  postTestHelpersTreasuryInboundTransfersIdFail?: Maybe<StripeTreasuryInboundTransfer>;
  postTestHelpersTreasuryInboundTransfersIdReturn?: Maybe<StripeTreasuryInboundTransfer>;
  postTestHelpersTreasuryInboundTransfersIdSucceed?: Maybe<StripeTreasuryInboundTransfer>;
  postTestHelpersTreasuryOutboundPaymentsIdFail?: Maybe<StripeTreasuryOutboundPayment>;
  postTestHelpersTreasuryOutboundPaymentsIdPost?: Maybe<StripeTreasuryOutboundPayment>;
  postTestHelpersTreasuryOutboundPaymentsIdReturn?: Maybe<StripeTreasuryOutboundPayment>;
  postTestHelpersTreasuryOutboundTransfersOutboundTransferFail?: Maybe<StripeTreasuryOutboundTransfer>;
  postTestHelpersTreasuryOutboundTransfersOutboundTransferPost?: Maybe<StripeTreasuryOutboundTransfer>;
  postTestHelpersTreasuryOutboundTransfersOutboundTransferReturn?: Maybe<StripeTreasuryOutboundTransfer>;
  postTestHelpersTreasuryReceivedCredits?: Maybe<StripeTreasuryReceivedCredit>;
  postTestHelpersTreasuryReceivedDebits?: Maybe<StripeTreasuryReceivedDebit>;
  postTokens?: Maybe<StripeToken>;
  postTopups?: Maybe<StripeTopup>;
  postTopupsTopup?: Maybe<StripeTopup>;
  postTopupsTopupCancel?: Maybe<StripeTopup>;
  postTransfers?: Maybe<StripeTransfer>;
  postTransfersIdReversals?: Maybe<StripeTransferReversal>;
  postTransfersTransfer?: Maybe<StripeTransfer>;
  postTransfersTransferReversalsId?: Maybe<StripeTransferReversal>;
  postTreasuryCreditReversals?: Maybe<StripeTreasuryCreditReversal>;
  postTreasuryDebitReversals?: Maybe<StripeTreasuryDebitReversal>;
  postTreasuryFinancialAccounts?: Maybe<StripeTreasuryFinancialAccount>;
  postTreasuryFinancialAccountsFinancialAccount?: Maybe<StripeTreasuryFinancialAccount>;
  postTreasuryFinancialAccountsFinancialAccountFeatures?: Maybe<StripeTreasuryFinancialAccountFeatures>;
  postTreasuryInboundTransfers?: Maybe<StripeTreasuryInboundTransfer>;
  postTreasuryInboundTransfersInboundTransferCancel?: Maybe<StripeTreasuryInboundTransfer>;
  postTreasuryOutboundPayments?: Maybe<StripeTreasuryOutboundPayment>;
  postTreasuryOutboundPaymentsIdCancel?: Maybe<StripeTreasuryOutboundPayment>;
  postTreasuryOutboundTransfers?: Maybe<StripeTreasuryOutboundTransfer>;
  postTreasuryOutboundTransfersOutboundTransferCancel?: Maybe<StripeTreasuryOutboundTransfer>;
  postWebhookEndpoints?: Maybe<StripeWebhookEndpoint>;
  postWebhookEndpointsWebhookEndpoint?: Maybe<StripeWebhookEndpoint>;
};


export type StripeMutationDeleteAccountsAccountArgs = {
  account: Scalars['String'];
};


export type StripeMutationDeleteAccountsAccountBankAccountsIdArgs = {
  account: Scalars['String'];
  id: Scalars['String'];
};


export type StripeMutationDeleteAccountsAccountExternalAccountsIdArgs = {
  account: Scalars['String'];
  id: Scalars['String'];
};


export type StripeMutationDeleteAccountsAccountPeoplePersonArgs = {
  account: Scalars['String'];
  person: Scalars['String'];
};


export type StripeMutationDeleteAccountsAccountPersonsPersonArgs = {
  account: Scalars['String'];
  person: Scalars['String'];
};


export type StripeMutationDeleteApplePayDomainsDomainArgs = {
  domain: Scalars['String'];
};


export type StripeMutationDeleteCouponsCouponArgs = {
  coupon: Scalars['String'];
};


export type StripeMutationDeleteCustomersCustomerArgs = {
  customer: Scalars['String'];
};


export type StripeMutationDeleteCustomersCustomerBankAccountsIdArgs = {
  customer: Scalars['String'];
  id: Scalars['String'];
  input?: InputMaybe<StripeDeleteCustomersCustomerBankAccountsIdInput>;
};


export type StripeMutationDeleteCustomersCustomerCardsIdArgs = {
  customer: Scalars['String'];
  id: Scalars['String'];
  input?: InputMaybe<StripeDeleteCustomersCustomerCardsIdInput>;
};


export type StripeMutationDeleteCustomersCustomerDiscountArgs = {
  customer: Scalars['String'];
};


export type StripeMutationDeleteCustomersCustomerSourcesIdArgs = {
  customer: Scalars['String'];
  id: Scalars['String'];
  input?: InputMaybe<StripeDeleteCustomersCustomerSourcesIdInput>;
};


export type StripeMutationDeleteCustomersCustomerSubscriptionsSubscriptionExposedIdArgs = {
  customer: Scalars['String'];
  input?: InputMaybe<StripeDeleteCustomersCustomerSubscriptionsSubscriptionExposedIdInput>;
  subscriptionExposedId: Scalars['String'];
};


export type StripeMutationDeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountArgs = {
  customer: Scalars['String'];
  subscriptionExposedId: Scalars['String'];
};


export type StripeMutationDeleteCustomersCustomerTaxIdsIdArgs = {
  customer: Scalars['String'];
  id: Scalars['String'];
};


export type StripeMutationDeleteEphemeralKeysKeyArgs = {
  input?: InputMaybe<StripeDeleteEphemeralKeysKeyInput>;
  key: Scalars['String'];
};


export type StripeMutationDeleteInvoiceitemsInvoiceitemArgs = {
  invoiceitem: Scalars['String'];
};


export type StripeMutationDeleteInvoicesInvoiceArgs = {
  invoice: Scalars['String'];
};


export type StripeMutationDeletePlansPlanArgs = {
  plan: Scalars['String'];
};


export type StripeMutationDeleteProductsIdArgs = {
  id: Scalars['String'];
};


export type StripeMutationDeleteRadarValueListItemsItemArgs = {
  item: Scalars['String'];
};


export type StripeMutationDeleteRadarValueListsValueListArgs = {
  valueList: Scalars['String'];
};


export type StripeMutationDeleteSubscriptionItemsItemArgs = {
  input?: InputMaybe<StripeDeleteSubscriptionItemsItemInput>;
  item: Scalars['String'];
};


export type StripeMutationDeleteSubscriptionsSubscriptionExposedIdArgs = {
  input?: InputMaybe<StripeDeleteSubscriptionsSubscriptionExposedIdInput>;
  subscriptionExposedId: Scalars['String'];
};


export type StripeMutationDeleteSubscriptionsSubscriptionExposedIdDiscountArgs = {
  subscriptionExposedId: Scalars['String'];
};


export type StripeMutationDeleteTerminalConfigurationsConfigurationArgs = {
  configuration: Scalars['String'];
};


export type StripeMutationDeleteTerminalLocationsLocationArgs = {
  location: Scalars['String'];
};


export type StripeMutationDeleteTerminalReadersReaderArgs = {
  reader: Scalars['String'];
};


export type StripeMutationDeleteTestHelpersTestClocksTestClockArgs = {
  testClock: Scalars['String'];
};


export type StripeMutationDeleteWebhookEndpointsWebhookEndpointArgs = {
  webhookEndpoint: Scalars['String'];
};


export type StripeMutationPostAccountLinksArgs = {
  input: StripePostAccountLinksInput;
};


export type StripeMutationPostAccountsArgs = {
  input?: InputMaybe<StripePostAccountsInput>;
};


export type StripeMutationPostAccountsAccountArgs = {
  account: Scalars['String'];
  input?: InputMaybe<StripePostAccountsAccountInput>;
};


export type StripeMutationPostAccountsAccountBankAccountsArgs = {
  account: Scalars['String'];
  input?: InputMaybe<StripePostAccountsAccountBankAccountsInput>;
};


export type StripeMutationPostAccountsAccountBankAccountsIdArgs = {
  account: Scalars['String'];
  id: Scalars['String'];
  input?: InputMaybe<StripePostAccountsAccountBankAccountsIdInput>;
};


export type StripeMutationPostAccountsAccountCapabilitiesCapabilityArgs = {
  account: Scalars['String'];
  capability: Scalars['String'];
  input?: InputMaybe<StripePostAccountsAccountCapabilitiesCapabilityInput>;
};


export type StripeMutationPostAccountsAccountExternalAccountsArgs = {
  account: Scalars['String'];
  input?: InputMaybe<StripePostAccountsAccountExternalAccountsInput>;
};


export type StripeMutationPostAccountsAccountExternalAccountsIdArgs = {
  account: Scalars['String'];
  id: Scalars['String'];
  input?: InputMaybe<StripePostAccountsAccountExternalAccountsIdInput>;
};


export type StripeMutationPostAccountsAccountLoginLinksArgs = {
  account: Scalars['String'];
  input?: InputMaybe<StripePostAccountsAccountLoginLinksInput>;
};


export type StripeMutationPostAccountsAccountPeopleArgs = {
  account: Scalars['String'];
  input?: InputMaybe<StripePostAccountsAccountPeopleInput>;
};


export type StripeMutationPostAccountsAccountPeoplePersonArgs = {
  account: Scalars['String'];
  input?: InputMaybe<StripePostAccountsAccountPeoplePersonInput>;
  person: Scalars['String'];
};


export type StripeMutationPostAccountsAccountPersonsArgs = {
  account: Scalars['String'];
  input?: InputMaybe<StripePostAccountsAccountPersonsInput>;
};


export type StripeMutationPostAccountsAccountPersonsPersonArgs = {
  account: Scalars['String'];
  input?: InputMaybe<StripePostAccountsAccountPersonsPersonInput>;
  person: Scalars['String'];
};


export type StripeMutationPostAccountsAccountRejectArgs = {
  account: Scalars['String'];
  input: StripePostAccountsAccountRejectInput;
};


export type StripeMutationPostApplePayDomainsArgs = {
  input: StripePostApplePayDomainsInput;
};


export type StripeMutationPostApplicationFeesFeeRefundsIdArgs = {
  fee: Scalars['String'];
  id: Scalars['String'];
  input?: InputMaybe<StripePostApplicationFeesFeeRefundsIdInput>;
};


export type StripeMutationPostApplicationFeesIdRefundArgs = {
  id: Scalars['String'];
  input?: InputMaybe<StripePostApplicationFeesIdRefundInput>;
};


export type StripeMutationPostApplicationFeesIdRefundsArgs = {
  id: Scalars['String'];
  input?: InputMaybe<StripePostApplicationFeesIdRefundsInput>;
};


export type StripeMutationPostAppsSecretsArgs = {
  input: StripePostAppsSecretsInput;
};


export type StripeMutationPostAppsSecretsDeleteArgs = {
  input: StripePostAppsSecretsDeleteInput;
};


export type StripeMutationPostBillingPortalConfigurationsArgs = {
  input: StripePostBillingPortalConfigurationsInput;
};


export type StripeMutationPostBillingPortalConfigurationsConfigurationArgs = {
  configuration: Scalars['String'];
  input?: InputMaybe<StripePostBillingPortalConfigurationsConfigurationInput>;
};


export type StripeMutationPostBillingPortalSessionsArgs = {
  input: StripePostBillingPortalSessionsInput;
};


export type StripeMutationPostChargesArgs = {
  input?: InputMaybe<StripePostChargesInput>;
};


export type StripeMutationPostChargesChargeArgs = {
  charge: Scalars['String'];
  input?: InputMaybe<StripePostChargesChargeInput>;
};


export type StripeMutationPostChargesChargeCaptureArgs = {
  charge: Scalars['String'];
  input?: InputMaybe<StripePostChargesChargeCaptureInput>;
};


export type StripeMutationPostChargesChargeDisputeArgs = {
  charge: Scalars['String'];
  input?: InputMaybe<StripePostChargesChargeDisputeInput>;
};


export type StripeMutationPostChargesChargeDisputeCloseArgs = {
  charge: Scalars['String'];
  input?: InputMaybe<StripePostChargesChargeDisputeCloseInput>;
};


export type StripeMutationPostChargesChargeRefundArgs = {
  charge: Scalars['String'];
  input?: InputMaybe<StripePostChargesChargeRefundInput>;
};


export type StripeMutationPostChargesChargeRefundsArgs = {
  charge: Scalars['String'];
  input?: InputMaybe<StripePostChargesChargeRefundsInput>;
};


export type StripeMutationPostChargesChargeRefundsRefundArgs = {
  charge: Scalars['String'];
  input?: InputMaybe<StripePostChargesChargeRefundsRefundInput>;
  refund: Scalars['String'];
};


export type StripeMutationPostCheckoutSessionsArgs = {
  input: StripePostCheckoutSessionsInput;
};


export type StripeMutationPostCheckoutSessionsSessionExpireArgs = {
  input?: InputMaybe<StripePostCheckoutSessionsSessionExpireInput>;
  session: Scalars['String'];
};


export type StripeMutationPostCouponsArgs = {
  input?: InputMaybe<StripePostCouponsInput>;
};


export type StripeMutationPostCouponsCouponArgs = {
  coupon: Scalars['String'];
  input?: InputMaybe<StripePostCouponsCouponInput>;
};


export type StripeMutationPostCreditNotesArgs = {
  input: StripePostCreditNotesInput;
};


export type StripeMutationPostCreditNotesIdArgs = {
  id: Scalars['String'];
  input?: InputMaybe<StripePostCreditNotesIdInput>;
};


export type StripeMutationPostCreditNotesIdVoidArgs = {
  id: Scalars['String'];
  input?: InputMaybe<StripePostCreditNotesIdVoidInput>;
};


export type StripeMutationPostCustomersArgs = {
  input?: InputMaybe<StripePostCustomersInput>;
};


export type StripeMutationPostCustomersCustomerArgs = {
  customer: Scalars['String'];
  input?: InputMaybe<StripePostCustomersCustomerInput>;
};


export type StripeMutationPostCustomersCustomerBalanceTransactionsArgs = {
  customer: Scalars['String'];
  input: StripePostCustomersCustomerBalanceTransactionsInput;
};


export type StripeMutationPostCustomersCustomerBalanceTransactionsTransactionArgs = {
  customer: Scalars['String'];
  input?: InputMaybe<StripePostCustomersCustomerBalanceTransactionsTransactionInput>;
  transaction: Scalars['String'];
};


export type StripeMutationPostCustomersCustomerBankAccountsArgs = {
  customer: Scalars['String'];
  input?: InputMaybe<StripePostCustomersCustomerBankAccountsInput>;
};


export type StripeMutationPostCustomersCustomerBankAccountsIdArgs = {
  customer: Scalars['String'];
  id: Scalars['String'];
  input?: InputMaybe<StripePostCustomersCustomerBankAccountsIdInput>;
};


export type StripeMutationPostCustomersCustomerBankAccountsIdVerifyArgs = {
  customer: Scalars['String'];
  id: Scalars['String'];
  input?: InputMaybe<StripePostCustomersCustomerBankAccountsIdVerifyInput>;
};


export type StripeMutationPostCustomersCustomerCardsArgs = {
  customer: Scalars['String'];
  input?: InputMaybe<StripePostCustomersCustomerCardsInput>;
};


export type StripeMutationPostCustomersCustomerCardsIdArgs = {
  customer: Scalars['String'];
  id: Scalars['String'];
  input?: InputMaybe<StripePostCustomersCustomerCardsIdInput>;
};


export type StripeMutationPostCustomersCustomerCashBalanceArgs = {
  customer: Scalars['String'];
  input?: InputMaybe<StripePostCustomersCustomerCashBalanceInput>;
};


export type StripeMutationPostCustomersCustomerFundingInstructionsArgs = {
  customer: Scalars['String'];
  input: StripePostCustomersCustomerFundingInstructionsInput;
};


export type StripeMutationPostCustomersCustomerSourcesArgs = {
  customer: Scalars['String'];
  input?: InputMaybe<StripePostCustomersCustomerSourcesInput>;
};


export type StripeMutationPostCustomersCustomerSourcesIdArgs = {
  customer: Scalars['String'];
  id: Scalars['String'];
  input?: InputMaybe<StripePostCustomersCustomerSourcesIdInput>;
};


export type StripeMutationPostCustomersCustomerSourcesIdVerifyArgs = {
  customer: Scalars['String'];
  id: Scalars['String'];
  input?: InputMaybe<StripePostCustomersCustomerSourcesIdVerifyInput>;
};


export type StripeMutationPostCustomersCustomerSubscriptionsArgs = {
  customer: Scalars['String'];
  input?: InputMaybe<StripePostCustomersCustomerSubscriptionsInput>;
};


export type StripeMutationPostCustomersCustomerSubscriptionsSubscriptionExposedIdArgs = {
  customer: Scalars['String'];
  input?: InputMaybe<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdInput>;
  subscriptionExposedId: Scalars['String'];
};


export type StripeMutationPostCustomersCustomerTaxIdsArgs = {
  customer: Scalars['String'];
  input: StripePostCustomersCustomerTaxIdsInput;
};


export type StripeMutationPostDisputesDisputeArgs = {
  dispute: Scalars['String'];
  input?: InputMaybe<StripePostDisputesDisputeInput>;
};


export type StripeMutationPostDisputesDisputeCloseArgs = {
  dispute: Scalars['String'];
  input?: InputMaybe<StripePostDisputesDisputeCloseInput>;
};


export type StripeMutationPostEphemeralKeysArgs = {
  input?: InputMaybe<StripePostEphemeralKeysInput>;
};


export type StripeMutationPostFileLinksArgs = {
  input: StripePostFileLinksInput;
};


export type StripeMutationPostFileLinksLinkArgs = {
  input?: InputMaybe<StripePostFileLinksLinkInput>;
  link: Scalars['String'];
};


export type StripeMutationPostFinancialConnectionsAccountsAccountDisconnectArgs = {
  account: Scalars['String'];
  input?: InputMaybe<StripePostFinancialConnectionsAccountsAccountDisconnectInput>;
};


export type StripeMutationPostFinancialConnectionsAccountsAccountRefreshArgs = {
  account: Scalars['String'];
  input: StripePostFinancialConnectionsAccountsAccountRefreshInput;
};


export type StripeMutationPostFinancialConnectionsSessionsArgs = {
  input: StripePostFinancialConnectionsSessionsInput;
};


export type StripeMutationPostIdentityVerificationSessionsArgs = {
  input: StripePostIdentityVerificationSessionsInput;
};


export type StripeMutationPostIdentityVerificationSessionsSessionArgs = {
  input?: InputMaybe<StripePostIdentityVerificationSessionsSessionInput>;
  session: Scalars['String'];
};


export type StripeMutationPostIdentityVerificationSessionsSessionCancelArgs = {
  input?: InputMaybe<StripePostIdentityVerificationSessionsSessionCancelInput>;
  session: Scalars['String'];
};


export type StripeMutationPostIdentityVerificationSessionsSessionRedactArgs = {
  input?: InputMaybe<StripePostIdentityVerificationSessionsSessionRedactInput>;
  session: Scalars['String'];
};


export type StripeMutationPostInvoiceitemsArgs = {
  input: StripePostInvoiceitemsInput;
};


export type StripeMutationPostInvoiceitemsInvoiceitemArgs = {
  input?: InputMaybe<StripePostInvoiceitemsInvoiceitemInput>;
  invoiceitem: Scalars['String'];
};


export type StripeMutationPostInvoicesArgs = {
  input?: InputMaybe<StripePostInvoicesInput>;
};


export type StripeMutationPostInvoicesInvoiceArgs = {
  input?: InputMaybe<StripePostInvoicesInvoiceInput>;
  invoice: Scalars['String'];
};


export type StripeMutationPostInvoicesInvoiceFinalizeArgs = {
  input?: InputMaybe<StripePostInvoicesInvoiceFinalizeInput>;
  invoice: Scalars['String'];
};


export type StripeMutationPostInvoicesInvoiceMarkUncollectibleArgs = {
  input?: InputMaybe<StripePostInvoicesInvoiceMarkUncollectibleInput>;
  invoice: Scalars['String'];
};


export type StripeMutationPostInvoicesInvoicePayArgs = {
  input?: InputMaybe<StripePostInvoicesInvoicePayInput>;
  invoice: Scalars['String'];
};


export type StripeMutationPostInvoicesInvoiceSendArgs = {
  input?: InputMaybe<StripePostInvoicesInvoiceSendInput>;
  invoice: Scalars['String'];
};


export type StripeMutationPostInvoicesInvoiceVoidArgs = {
  input?: InputMaybe<StripePostInvoicesInvoiceVoidInput>;
  invoice: Scalars['String'];
};


export type StripeMutationPostIssuingAuthorizationsAuthorizationArgs = {
  authorization: Scalars['String'];
  input?: InputMaybe<StripePostIssuingAuthorizationsAuthorizationInput>;
};


export type StripeMutationPostIssuingAuthorizationsAuthorizationApproveArgs = {
  authorization: Scalars['String'];
  input?: InputMaybe<StripePostIssuingAuthorizationsAuthorizationApproveInput>;
};


export type StripeMutationPostIssuingAuthorizationsAuthorizationDeclineArgs = {
  authorization: Scalars['String'];
  input?: InputMaybe<StripePostIssuingAuthorizationsAuthorizationDeclineInput>;
};


export type StripeMutationPostIssuingCardholdersArgs = {
  input: StripePostIssuingCardholdersInput;
};


export type StripeMutationPostIssuingCardholdersCardholderArgs = {
  cardholder: Scalars['String'];
  input?: InputMaybe<StripePostIssuingCardholdersCardholderInput>;
};


export type StripeMutationPostIssuingCardsArgs = {
  input: StripePostIssuingCardsInput;
};


export type StripeMutationPostIssuingCardsCardArgs = {
  card: Scalars['String'];
  input?: InputMaybe<StripePostIssuingCardsCardInput>;
};


export type StripeMutationPostIssuingDisputesArgs = {
  input?: InputMaybe<StripePostIssuingDisputesInput>;
};


export type StripeMutationPostIssuingDisputesDisputeArgs = {
  dispute: Scalars['String'];
  input?: InputMaybe<StripePostIssuingDisputesDisputeInput>;
};


export type StripeMutationPostIssuingDisputesDisputeSubmitArgs = {
  dispute: Scalars['String'];
  input?: InputMaybe<StripePostIssuingDisputesDisputeSubmitInput>;
};


export type StripeMutationPostIssuingSettlementsSettlementArgs = {
  input?: InputMaybe<StripePostIssuingSettlementsSettlementInput>;
  settlement: Scalars['String'];
};


export type StripeMutationPostIssuingTransactionsTransactionArgs = {
  input?: InputMaybe<StripePostIssuingTransactionsTransactionInput>;
  transaction: Scalars['String'];
};


export type StripeMutationPostLinkAccountSessionsArgs = {
  input: StripePostLinkAccountSessionsInput;
};


export type StripeMutationPostLinkedAccountsAccountDisconnectArgs = {
  account: Scalars['String'];
  input?: InputMaybe<StripePostLinkedAccountsAccountDisconnectInput>;
};


export type StripeMutationPostLinkedAccountsAccountRefreshArgs = {
  account: Scalars['String'];
  input: StripePostLinkedAccountsAccountRefreshInput;
};


export type StripeMutationPostPaymentIntentsArgs = {
  input: StripePostPaymentIntentsInput;
};


export type StripeMutationPostPaymentIntentsIntentArgs = {
  input?: InputMaybe<StripePostPaymentIntentsIntentInput>;
  intent: Scalars['String'];
};


export type StripeMutationPostPaymentIntentsIntentApplyCustomerBalanceArgs = {
  input?: InputMaybe<StripePostPaymentIntentsIntentApplyCustomerBalanceInput>;
  intent: Scalars['String'];
};


export type StripeMutationPostPaymentIntentsIntentCancelArgs = {
  input?: InputMaybe<StripePostPaymentIntentsIntentCancelInput>;
  intent: Scalars['String'];
};


export type StripeMutationPostPaymentIntentsIntentCaptureArgs = {
  input?: InputMaybe<StripePostPaymentIntentsIntentCaptureInput>;
  intent: Scalars['String'];
};


export type StripeMutationPostPaymentIntentsIntentConfirmArgs = {
  input?: InputMaybe<StripePostPaymentIntentsIntentConfirmInput>;
  intent: Scalars['String'];
};


export type StripeMutationPostPaymentIntentsIntentIncrementAuthorizationArgs = {
  input: StripePostPaymentIntentsIntentIncrementAuthorizationInput;
  intent: Scalars['String'];
};


export type StripeMutationPostPaymentIntentsIntentVerifyMicrodepositsArgs = {
  input?: InputMaybe<StripePostPaymentIntentsIntentVerifyMicrodepositsInput>;
  intent: Scalars['String'];
};


export type StripeMutationPostPaymentLinksArgs = {
  input: StripePostPaymentLinksInput;
};


export type StripeMutationPostPaymentLinksPaymentLinkArgs = {
  input?: InputMaybe<StripePostPaymentLinksPaymentLinkInput>;
  paymentLink: Scalars['String'];
};


export type StripeMutationPostPaymentMethodsArgs = {
  input?: InputMaybe<StripePostPaymentMethodsInput>;
};


export type StripeMutationPostPaymentMethodsPaymentMethodArgs = {
  input?: InputMaybe<StripePostPaymentMethodsPaymentMethodInput>;
  paymentMethod: Scalars['String'];
};


export type StripeMutationPostPaymentMethodsPaymentMethodAttachArgs = {
  input: StripePostPaymentMethodsPaymentMethodAttachInput;
  paymentMethod: Scalars['String'];
};


export type StripeMutationPostPaymentMethodsPaymentMethodDetachArgs = {
  input?: InputMaybe<StripePostPaymentMethodsPaymentMethodDetachInput>;
  paymentMethod: Scalars['String'];
};


export type StripeMutationPostPayoutsArgs = {
  input: StripePostPayoutsInput;
};


export type StripeMutationPostPayoutsPayoutArgs = {
  input?: InputMaybe<StripePostPayoutsPayoutInput>;
  payout: Scalars['String'];
};


export type StripeMutationPostPayoutsPayoutCancelArgs = {
  input?: InputMaybe<StripePostPayoutsPayoutCancelInput>;
  payout: Scalars['String'];
};


export type StripeMutationPostPayoutsPayoutReverseArgs = {
  input?: InputMaybe<StripePostPayoutsPayoutReverseInput>;
  payout: Scalars['String'];
};


export type StripeMutationPostPlansArgs = {
  input: StripePostPlansInput;
};


export type StripeMutationPostPlansPlanArgs = {
  input?: InputMaybe<StripePostPlansPlanInput>;
  plan: Scalars['String'];
};


export type StripeMutationPostPricesArgs = {
  input: StripePostPricesInput;
};


export type StripeMutationPostPricesPriceArgs = {
  input?: InputMaybe<StripePostPricesPriceInput>;
  price: Scalars['String'];
};


export type StripeMutationPostProductsArgs = {
  input: StripePostProductsInput;
};


export type StripeMutationPostProductsIdArgs = {
  id: Scalars['String'];
  input?: InputMaybe<StripePostProductsIdInput>;
};


export type StripeMutationPostPromotionCodesArgs = {
  input: StripePostPromotionCodesInput;
};


export type StripeMutationPostPromotionCodesPromotionCodeArgs = {
  input?: InputMaybe<StripePostPromotionCodesPromotionCodeInput>;
  promotionCode: Scalars['String'];
};


export type StripeMutationPostQuotesArgs = {
  input?: InputMaybe<StripePostQuotesInput>;
};


export type StripeMutationPostQuotesQuoteArgs = {
  input?: InputMaybe<StripePostQuotesQuoteInput>;
  quote: Scalars['String'];
};


export type StripeMutationPostQuotesQuoteAcceptArgs = {
  input?: InputMaybe<StripePostQuotesQuoteAcceptInput>;
  quote: Scalars['String'];
};


export type StripeMutationPostQuotesQuoteCancelArgs = {
  input?: InputMaybe<StripePostQuotesQuoteCancelInput>;
  quote: Scalars['String'];
};


export type StripeMutationPostQuotesQuoteFinalizeArgs = {
  input?: InputMaybe<StripePostQuotesQuoteFinalizeInput>;
  quote: Scalars['String'];
};


export type StripeMutationPostRadarValueListItemsArgs = {
  input: StripePostRadarValueListItemsInput;
};


export type StripeMutationPostRadarValueListsArgs = {
  input: StripePostRadarValueListsInput;
};


export type StripeMutationPostRadarValueListsValueListArgs = {
  input?: InputMaybe<StripePostRadarValueListsValueListInput>;
  valueList: Scalars['String'];
};


export type StripeMutationPostRefundsArgs = {
  input?: InputMaybe<StripePostRefundsInput>;
};


export type StripeMutationPostRefundsRefundArgs = {
  input?: InputMaybe<StripePostRefundsRefundInput>;
  refund: Scalars['String'];
};


export type StripeMutationPostRefundsRefundCancelArgs = {
  input?: InputMaybe<StripePostRefundsRefundCancelInput>;
  refund: Scalars['String'];
};


export type StripeMutationPostReportingReportRunsArgs = {
  input: StripePostReportingReportRunsInput;
};


export type StripeMutationPostReviewsReviewApproveArgs = {
  input?: InputMaybe<StripePostReviewsReviewApproveInput>;
  review: Scalars['String'];
};


export type StripeMutationPostSetupIntentsArgs = {
  input?: InputMaybe<StripePostSetupIntentsInput>;
};


export type StripeMutationPostSetupIntentsIntentArgs = {
  input?: InputMaybe<StripePostSetupIntentsIntentInput>;
  intent: Scalars['String'];
};


export type StripeMutationPostSetupIntentsIntentCancelArgs = {
  input?: InputMaybe<StripePostSetupIntentsIntentCancelInput>;
  intent: Scalars['String'];
};


export type StripeMutationPostSetupIntentsIntentConfirmArgs = {
  input?: InputMaybe<StripePostSetupIntentsIntentConfirmInput>;
  intent: Scalars['String'];
};


export type StripeMutationPostSetupIntentsIntentVerifyMicrodepositsArgs = {
  input?: InputMaybe<StripePostSetupIntentsIntentVerifyMicrodepositsInput>;
  intent: Scalars['String'];
};


export type StripeMutationPostShippingRatesArgs = {
  input: StripePostShippingRatesInput;
};


export type StripeMutationPostShippingRatesShippingRateTokenArgs = {
  input?: InputMaybe<StripePostShippingRatesShippingRateTokenInput>;
  shippingRateToken: Scalars['String'];
};


export type StripeMutationPostSourcesArgs = {
  input?: InputMaybe<StripePostSourcesInput>;
};


export type StripeMutationPostSourcesSourceArgs = {
  input?: InputMaybe<StripePostSourcesSourceInput>;
  source: Scalars['String'];
};


export type StripeMutationPostSourcesSourceVerifyArgs = {
  input: StripePostSourcesSourceVerifyInput;
  source: Scalars['String'];
};


export type StripeMutationPostSubscriptionItemsArgs = {
  input: StripePostSubscriptionItemsInput;
};


export type StripeMutationPostSubscriptionItemsItemArgs = {
  input?: InputMaybe<StripePostSubscriptionItemsItemInput>;
  item: Scalars['String'];
};


export type StripeMutationPostSubscriptionItemsSubscriptionItemUsageRecordsArgs = {
  input: StripePostSubscriptionItemsSubscriptionItemUsageRecordsInput;
  subscriptionItem: Scalars['String'];
};


export type StripeMutationPostSubscriptionSchedulesArgs = {
  input?: InputMaybe<StripePostSubscriptionSchedulesInput>;
};


export type StripeMutationPostSubscriptionSchedulesScheduleArgs = {
  input?: InputMaybe<StripePostSubscriptionSchedulesScheduleInput>;
  schedule: Scalars['String'];
};


export type StripeMutationPostSubscriptionSchedulesScheduleCancelArgs = {
  input?: InputMaybe<StripePostSubscriptionSchedulesScheduleCancelInput>;
  schedule: Scalars['String'];
};


export type StripeMutationPostSubscriptionSchedulesScheduleReleaseArgs = {
  input?: InputMaybe<StripePostSubscriptionSchedulesScheduleReleaseInput>;
  schedule: Scalars['String'];
};


export type StripeMutationPostSubscriptionsArgs = {
  input: StripePostSubscriptionsInput;
};


export type StripeMutationPostSubscriptionsSubscriptionExposedIdArgs = {
  input?: InputMaybe<StripePostSubscriptionsSubscriptionExposedIdInput>;
  subscriptionExposedId: Scalars['String'];
};


export type StripeMutationPostSubscriptionsSubscriptionResumeArgs = {
  input?: InputMaybe<StripePostSubscriptionsSubscriptionResumeInput>;
  subscription: Scalars['String'];
};


export type StripeMutationPostTaxCalculationsArgs = {
  input: StripePostTaxCalculationsInput;
};


export type StripeMutationPostTaxRatesArgs = {
  input: StripePostTaxRatesInput;
};


export type StripeMutationPostTaxRatesTaxRateArgs = {
  input?: InputMaybe<StripePostTaxRatesTaxRateInput>;
  taxRate: Scalars['String'];
};


export type StripeMutationPostTaxTransactionsCreateFromCalculationArgs = {
  input: StripePostTaxTransactionsCreateFromCalculationInput;
};


export type StripeMutationPostTaxTransactionsCreateReversalArgs = {
  input: StripePostTaxTransactionsCreateReversalInput;
};


export type StripeMutationPostTerminalConfigurationsArgs = {
  input?: InputMaybe<StripePostTerminalConfigurationsInput>;
};


export type StripeMutationPostTerminalConfigurationsConfigurationArgs = {
  configuration: Scalars['String'];
  input?: InputMaybe<StripePostTerminalConfigurationsConfigurationInput>;
};


export type StripeMutationPostTerminalConnectionTokensArgs = {
  input?: InputMaybe<StripePostTerminalConnectionTokensInput>;
};


export type StripeMutationPostTerminalLocationsArgs = {
  input: StripePostTerminalLocationsInput;
};


export type StripeMutationPostTerminalLocationsLocationArgs = {
  input?: InputMaybe<StripePostTerminalLocationsLocationInput>;
  location: Scalars['String'];
};


export type StripeMutationPostTerminalReadersArgs = {
  input: StripePostTerminalReadersInput;
};


export type StripeMutationPostTerminalReadersReaderArgs = {
  input?: InputMaybe<StripePostTerminalReadersReaderInput>;
  reader: Scalars['String'];
};


export type StripeMutationPostTerminalReadersReaderCancelActionArgs = {
  input?: InputMaybe<StripePostTerminalReadersReaderCancelActionInput>;
  reader: Scalars['String'];
};


export type StripeMutationPostTerminalReadersReaderProcessPaymentIntentArgs = {
  input: StripePostTerminalReadersReaderProcessPaymentIntentInput;
  reader: Scalars['String'];
};


export type StripeMutationPostTerminalReadersReaderProcessSetupIntentArgs = {
  input: StripePostTerminalReadersReaderProcessSetupIntentInput;
  reader: Scalars['String'];
};


export type StripeMutationPostTerminalReadersReaderRefundPaymentArgs = {
  input?: InputMaybe<StripePostTerminalReadersReaderRefundPaymentInput>;
  reader: Scalars['String'];
};


export type StripeMutationPostTerminalReadersReaderSetReaderDisplayArgs = {
  input: StripePostTerminalReadersReaderSetReaderDisplayInput;
  reader: Scalars['String'];
};


export type StripeMutationPostTestHelpersCustomersCustomerFundCashBalanceArgs = {
  customer: Scalars['String'];
  input: StripePostTestHelpersCustomersCustomerFundCashBalanceInput;
};


export type StripeMutationPostTestHelpersIssuingCardsCardShippingDeliverArgs = {
  card: Scalars['String'];
  input?: InputMaybe<StripePostTestHelpersIssuingCardsCardShippingDeliverInput>;
};


export type StripeMutationPostTestHelpersIssuingCardsCardShippingFailArgs = {
  card: Scalars['String'];
  input?: InputMaybe<StripePostTestHelpersIssuingCardsCardShippingFailInput>;
};


export type StripeMutationPostTestHelpersIssuingCardsCardShippingReturnArgs = {
  card: Scalars['String'];
  input?: InputMaybe<StripePostTestHelpersIssuingCardsCardShippingReturnInput>;
};


export type StripeMutationPostTestHelpersIssuingCardsCardShippingShipArgs = {
  card: Scalars['String'];
  input?: InputMaybe<StripePostTestHelpersIssuingCardsCardShippingShipInput>;
};


export type StripeMutationPostTestHelpersRefundsRefundExpireArgs = {
  input?: InputMaybe<StripePostTestHelpersRefundsRefundExpireInput>;
  refund: Scalars['String'];
};


export type StripeMutationPostTestHelpersTerminalReadersReaderPresentPaymentMethodArgs = {
  input?: InputMaybe<StripePostTestHelpersTerminalReadersReaderPresentPaymentMethodInput>;
  reader: Scalars['String'];
};


export type StripeMutationPostTestHelpersTestClocksArgs = {
  input: StripePostTestHelpersTestClocksInput;
};


export type StripeMutationPostTestHelpersTestClocksTestClockAdvanceArgs = {
  input: StripePostTestHelpersTestClocksTestClockAdvanceInput;
  testClock: Scalars['String'];
};


export type StripeMutationPostTestHelpersTreasuryInboundTransfersIdFailArgs = {
  id: Scalars['String'];
  input?: InputMaybe<StripePostTestHelpersTreasuryInboundTransfersIdFailInput>;
};


export type StripeMutationPostTestHelpersTreasuryInboundTransfersIdReturnArgs = {
  id: Scalars['String'];
  input?: InputMaybe<StripePostTestHelpersTreasuryInboundTransfersIdReturnInput>;
};


export type StripeMutationPostTestHelpersTreasuryInboundTransfersIdSucceedArgs = {
  id: Scalars['String'];
  input?: InputMaybe<StripePostTestHelpersTreasuryInboundTransfersIdSucceedInput>;
};


export type StripeMutationPostTestHelpersTreasuryOutboundPaymentsIdFailArgs = {
  id: Scalars['String'];
  input?: InputMaybe<StripePostTestHelpersTreasuryOutboundPaymentsIdFailInput>;
};


export type StripeMutationPostTestHelpersTreasuryOutboundPaymentsIdPostArgs = {
  id: Scalars['String'];
  input?: InputMaybe<StripePostTestHelpersTreasuryOutboundPaymentsIdPostInput>;
};


export type StripeMutationPostTestHelpersTreasuryOutboundPaymentsIdReturnArgs = {
  id: Scalars['String'];
  input?: InputMaybe<StripePostTestHelpersTreasuryOutboundPaymentsIdReturnInput>;
};


export type StripeMutationPostTestHelpersTreasuryOutboundTransfersOutboundTransferFailArgs = {
  input?: InputMaybe<StripePostTestHelpersTreasuryOutboundTransfersOutboundTransferFailInput>;
  outboundTransfer: Scalars['String'];
};


export type StripeMutationPostTestHelpersTreasuryOutboundTransfersOutboundTransferPostArgs = {
  input?: InputMaybe<StripePostTestHelpersTreasuryOutboundTransfersOutboundTransferPostInput>;
  outboundTransfer: Scalars['String'];
};


export type StripeMutationPostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnArgs = {
  input?: InputMaybe<StripePostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnInput>;
  outboundTransfer: Scalars['String'];
};


export type StripeMutationPostTestHelpersTreasuryReceivedCreditsArgs = {
  input: StripePostTestHelpersTreasuryReceivedCreditsInput;
};


export type StripeMutationPostTestHelpersTreasuryReceivedDebitsArgs = {
  input: StripePostTestHelpersTreasuryReceivedDebitsInput;
};


export type StripeMutationPostTokensArgs = {
  input?: InputMaybe<StripePostTokensInput>;
};


export type StripeMutationPostTopupsArgs = {
  input: StripePostTopupsInput;
};


export type StripeMutationPostTopupsTopupArgs = {
  input?: InputMaybe<StripePostTopupsTopupInput>;
  topup: Scalars['String'];
};


export type StripeMutationPostTopupsTopupCancelArgs = {
  input?: InputMaybe<StripePostTopupsTopupCancelInput>;
  topup: Scalars['String'];
};


export type StripeMutationPostTransfersArgs = {
  input: StripePostTransfersInput;
};


export type StripeMutationPostTransfersIdReversalsArgs = {
  id: Scalars['String'];
  input?: InputMaybe<StripePostTransfersIdReversalsInput>;
};


export type StripeMutationPostTransfersTransferArgs = {
  input?: InputMaybe<StripePostTransfersTransferInput>;
  transfer: Scalars['String'];
};


export type StripeMutationPostTransfersTransferReversalsIdArgs = {
  id: Scalars['String'];
  input?: InputMaybe<StripePostTransfersTransferReversalsIdInput>;
  transfer: Scalars['String'];
};


export type StripeMutationPostTreasuryCreditReversalsArgs = {
  input: StripePostTreasuryCreditReversalsInput;
};


export type StripeMutationPostTreasuryDebitReversalsArgs = {
  input: StripePostTreasuryDebitReversalsInput;
};


export type StripeMutationPostTreasuryFinancialAccountsArgs = {
  input: StripePostTreasuryFinancialAccountsInput;
};


export type StripeMutationPostTreasuryFinancialAccountsFinancialAccountArgs = {
  financialAccount: Scalars['String'];
  input?: InputMaybe<StripePostTreasuryFinancialAccountsFinancialAccountInput>;
};


export type StripeMutationPostTreasuryFinancialAccountsFinancialAccountFeaturesArgs = {
  financialAccount: Scalars['String'];
  input?: InputMaybe<StripePostTreasuryFinancialAccountsFinancialAccountFeaturesInput>;
};


export type StripeMutationPostTreasuryInboundTransfersArgs = {
  input: StripePostTreasuryInboundTransfersInput;
};


export type StripeMutationPostTreasuryInboundTransfersInboundTransferCancelArgs = {
  inboundTransfer: Scalars['String'];
  input?: InputMaybe<StripePostTreasuryInboundTransfersInboundTransferCancelInput>;
};


export type StripeMutationPostTreasuryOutboundPaymentsArgs = {
  input: StripePostTreasuryOutboundPaymentsInput;
};


export type StripeMutationPostTreasuryOutboundPaymentsIdCancelArgs = {
  id: Scalars['String'];
  input?: InputMaybe<StripePostTreasuryOutboundPaymentsIdCancelInput>;
};


export type StripeMutationPostTreasuryOutboundTransfersArgs = {
  input: StripePostTreasuryOutboundTransfersInput;
};


export type StripeMutationPostTreasuryOutboundTransfersOutboundTransferCancelArgs = {
  input?: InputMaybe<StripePostTreasuryOutboundTransfersOutboundTransferCancelInput>;
  outboundTransfer: Scalars['String'];
};


export type StripeMutationPostWebhookEndpointsArgs = {
  input: StripePostWebhookEndpointsInput;
};


export type StripeMutationPostWebhookEndpointsWebhookEndpointArgs = {
  input?: InputMaybe<StripePostWebhookEndpointsWebhookEndpointInput>;
  webhookEndpoint: Scalars['String'];
};

export type StripeNetworks = {
  __typename?: 'StripeNetworks';
  available: Array<Scalars['String']>;
  preferred?: Maybe<Scalars['String']>;
};

export type StripeNotificationEventData = {
  __typename?: 'StripeNotificationEventData';
  object: Scalars['JSON'];
  previousAttributes?: Maybe<Scalars['JSON']>;
};

export type StripeNotificationEventRequest = {
  __typename?: 'StripeNotificationEventRequest';
  id?: Maybe<Scalars['String']>;
  idempotencyKey?: Maybe<Scalars['String']>;
};

export type StripeOnlineAcceptance = {
  __typename?: 'StripeOnlineAcceptance';
  ipAddress?: Maybe<Scalars['String']>;
  userAgent?: Maybe<Scalars['String']>;
};

export type StripeOutboundPaymentsPaymentMethodDetails = {
  __typename?: 'StripeOutboundPaymentsPaymentMethodDetails';
  billingDetails: StripeTreasurySharedResourceBillingDetails;
  financialAccount?: Maybe<StripeOutboundPaymentsPaymentMethodDetailsFinancialAccount>;
  type: StripeOutboundPaymentsPaymentMethodDetailsType;
  usBankAccount?: Maybe<StripeOutboundPaymentsPaymentMethodDetailsUsBankAccount>;
};

export type StripeOutboundPaymentsPaymentMethodDetailsFinancialAccount = {
  __typename?: 'StripeOutboundPaymentsPaymentMethodDetailsFinancialAccount';
  id: Scalars['String'];
  network: StripeOutboundPaymentsPaymentMethodDetailsFinancialAccountNetwork;
};

export enum StripeOutboundPaymentsPaymentMethodDetailsFinancialAccountNetwork {
  Stripe = 'STRIPE'
}

export enum StripeOutboundPaymentsPaymentMethodDetailsType {
  FinancialAccount = 'FINANCIAL_ACCOUNT',
  UsBankAccount = 'US_BANK_ACCOUNT'
}

export type StripeOutboundPaymentsPaymentMethodDetailsUsBankAccount = {
  __typename?: 'StripeOutboundPaymentsPaymentMethodDetailsUsBankAccount';
  accountHolderType?: Maybe<StripeOutboundPaymentsPaymentMethodDetailsUsBankAccountAccountHolderType>;
  accountType?: Maybe<StripeOutboundPaymentsPaymentMethodDetailsUsBankAccountAccountType>;
  bankName?: Maybe<Scalars['String']>;
  fingerprint?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  network: StripeOutboundPaymentsPaymentMethodDetailsUsBankAccountNetwork;
  routingNumber?: Maybe<Scalars['String']>;
};

export enum StripeOutboundPaymentsPaymentMethodDetailsUsBankAccountAccountHolderType {
  Company = 'COMPANY',
  Individual = 'INDIVIDUAL'
}

export enum StripeOutboundPaymentsPaymentMethodDetailsUsBankAccountAccountType {
  Checking = 'CHECKING',
  Savings = 'SAVINGS'
}

export enum StripeOutboundPaymentsPaymentMethodDetailsUsBankAccountNetwork {
  Ach = 'ACH',
  UsDomesticWire = 'US_DOMESTIC_WIRE'
}

export type StripeOutboundTransfersPaymentMethodDetails = {
  __typename?: 'StripeOutboundTransfersPaymentMethodDetails';
  billingDetails: StripeTreasurySharedResourceBillingDetails;
  type: StripeOutboundTransfersPaymentMethodDetailsType;
  usBankAccount?: Maybe<StripeOutboundTransfersPaymentMethodDetailsUsBankAccount>;
};

export enum StripeOutboundTransfersPaymentMethodDetailsType {
  UsBankAccount = 'US_BANK_ACCOUNT'
}

export type StripeOutboundTransfersPaymentMethodDetailsUsBankAccount = {
  __typename?: 'StripeOutboundTransfersPaymentMethodDetailsUsBankAccount';
  accountHolderType?: Maybe<StripeOutboundTransfersPaymentMethodDetailsUsBankAccountAccountHolderType>;
  accountType?: Maybe<StripeOutboundTransfersPaymentMethodDetailsUsBankAccountAccountType>;
  bankName?: Maybe<Scalars['String']>;
  fingerprint?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  network: StripeOutboundTransfersPaymentMethodDetailsUsBankAccountNetwork;
  routingNumber?: Maybe<Scalars['String']>;
};

export enum StripeOutboundTransfersPaymentMethodDetailsUsBankAccountAccountHolderType {
  Company = 'COMPANY',
  Individual = 'INDIVIDUAL'
}

export enum StripeOutboundTransfersPaymentMethodDetailsUsBankAccountAccountType {
  Checking = 'CHECKING',
  Savings = 'SAVINGS'
}

export enum StripeOutboundTransfersPaymentMethodDetailsUsBankAccountNetwork {
  Ach = 'ACH',
  UsDomesticWire = 'US_DOMESTIC_WIRE'
}

export type StripePackageDimensions = {
  __typename?: 'StripePackageDimensions';
  height: Scalars['Float'];
  length: Scalars['Float'];
  weight: Scalars['Float'];
  width: Scalars['Float'];
};

export type StripePaymentFlowsAmountDetails = {
  __typename?: 'StripePaymentFlowsAmountDetails';
  tip?: Maybe<StripePaymentFlowsAmountDetailsResourceTip>;
};

export type StripePaymentFlowsAmountDetailsResourceTip = {
  __typename?: 'StripePaymentFlowsAmountDetailsResourceTip';
  amount?: Maybe<Scalars['Int']>;
};

export type StripePaymentFlowsAutomaticPaymentMethodsPaymentIntent = {
  __typename?: 'StripePaymentFlowsAutomaticPaymentMethodsPaymentIntent';
  enabled: Scalars['Boolean'];
};

export type StripePaymentFlowsAutomaticPaymentMethodsSetupIntent = {
  __typename?: 'StripePaymentFlowsAutomaticPaymentMethodsSetupIntent';
  enabled?: Maybe<Scalars['Boolean']>;
};

export type StripePaymentFlowsInstallmentOptions = {
  __typename?: 'StripePaymentFlowsInstallmentOptions';
  enabled: Scalars['Boolean'];
  plan?: Maybe<StripePaymentMethodDetailsCardInstallmentsPlan>;
};

export type StripePaymentFlowsPrivatePaymentMethodsAlipayDetails = {
  __typename?: 'StripePaymentFlowsPrivatePaymentMethodsAlipayDetails';
  buyerId?: Maybe<Scalars['String']>;
  fingerprint?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
};

export type StripePaymentFlowsPrivatePaymentMethodsKlarnaDob = {
  __typename?: 'StripePaymentFlowsPrivatePaymentMethodsKlarnaDob';
  day?: Maybe<Scalars['Int']>;
  month?: Maybe<Scalars['Int']>;
  year?: Maybe<Scalars['Int']>;
};

export type StripePaymentIntent = {
  __typename?: 'StripePaymentIntent';
  amount: Scalars['Int'];
  amountCapturable?: Maybe<Scalars['Int']>;
  amountDetails?: Maybe<StripePaymentFlowsAmountDetails>;
  amountReceived?: Maybe<Scalars['Int']>;
  application?: Maybe<StripeStringOrApplicationUnion>;
  applicationFeeAmount?: Maybe<Scalars['Int']>;
  automaticPaymentMethods?: Maybe<StripePaymentFlowsAutomaticPaymentMethodsPaymentIntent>;
  canceledAt?: Maybe<Scalars['Int']>;
  cancellationReason?: Maybe<StripePaymentIntentCancellationReason>;
  captureMethod: StripePaymentIntentCaptureMethod;
  clientSecret?: Maybe<Scalars['String']>;
  confirmationMethod: StripePaymentIntentConfirmationMethod;
  created: Scalars['Int'];
  currency: Scalars['String'];
  customer?: Maybe<StripeStringOrDeletedCustomerOrCustomerUnion>;
  description?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  invoice?: Maybe<StripeStringOrInvoiceUnion>;
  lastPaymentError?: Maybe<StripeApiErrors>;
  latestCharge?: Maybe<StripeStringOrChargeUnion>;
  livemode: Scalars['Boolean'];
  metadata?: Maybe<Scalars['JSON']>;
  nextAction?: Maybe<StripePaymentIntentNextAction>;
  object: StripePaymentIntentObject;
  onBehalfOf?: Maybe<StripeStringOrAccountUnion>;
  paymentMethod?: Maybe<StripeStringOrPaymentMethodUnion>;
  paymentMethodOptions?: Maybe<StripePaymentIntentPaymentMethodOptions>;
  paymentMethodTypes: Array<Scalars['String']>;
  processing?: Maybe<StripePaymentIntentProcessing>;
  receiptEmail?: Maybe<Scalars['String']>;
  review?: Maybe<StripeStringOrReviewUnion>;
  setupFutureUsage?: Maybe<StripePaymentIntentSetupFutureUsage>;
  shipping?: Maybe<StripeShipping>;
  statementDescriptor?: Maybe<Scalars['String']>;
  statementDescriptorSuffix?: Maybe<Scalars['String']>;
  status: StripePaymentIntentStatus;
  transferData?: Maybe<StripeTransferData>;
  transferGroup?: Maybe<Scalars['String']>;
};

export enum StripePaymentIntentCancellationReason {
  Abandoned = 'ABANDONED',
  Automatic = 'AUTOMATIC',
  Duplicate = 'DUPLICATE',
  FailedInvoice = 'FAILED_INVOICE',
  Fraudulent = 'FRAUDULENT',
  RequestedByCustomer = 'REQUESTED_BY_CUSTOMER',
  VoidInvoice = 'VOID_INVOICE'
}

export enum StripePaymentIntentCaptureMethod {
  Automatic = 'AUTOMATIC',
  AutomaticAsync = 'AUTOMATIC_ASYNC',
  Manual = 'MANUAL'
}

export type StripePaymentIntentCardProcessing = {
  __typename?: 'StripePaymentIntentCardProcessing';
  customerNotification?: Maybe<StripePaymentIntentProcessingCustomerNotification>;
};

export enum StripePaymentIntentConfirmationMethod {
  Automatic = 'AUTOMATIC',
  Manual = 'MANUAL'
}

export type StripePaymentIntentNextAction = {
  __typename?: 'StripePaymentIntentNextAction';
  alipayHandleRedirect?: Maybe<StripePaymentIntentNextActionAlipayHandleRedirect>;
  boletoDisplayDetails?: Maybe<StripePaymentIntentNextActionBoleto>;
  cardAwaitNotification?: Maybe<StripePaymentIntentNextActionCardAwaitNotification>;
  cashappHandleRedirectOrDisplayQrCode?: Maybe<StripePaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode>;
  displayBankTransferInstructions?: Maybe<StripePaymentIntentNextActionDisplayBankTransferInstructions>;
  konbiniDisplayDetails?: Maybe<StripePaymentIntentNextActionKonbini>;
  oxxoDisplayDetails?: Maybe<StripePaymentIntentNextActionDisplayOxxoDetails>;
  paynowDisplayQrCode?: Maybe<StripePaymentIntentNextActionPaynowDisplayQrCode>;
  pixDisplayQrCode?: Maybe<StripePaymentIntentNextActionPixDisplayQrCode>;
  promptpayDisplayQrCode?: Maybe<StripePaymentIntentNextActionPromptpayDisplayQrCode>;
  redirectToUrl?: Maybe<StripePaymentIntentNextActionRedirectToUrl>;
  type: Scalars['String'];
  useStripeSdk?: Maybe<Scalars['JSON']>;
  verifyWithMicrodeposits?: Maybe<StripePaymentIntentNextActionVerifyWithMicrodeposits>;
  wechatPayDisplayQrCode?: Maybe<StripePaymentIntentNextActionWechatPayDisplayQrCode>;
  wechatPayRedirectToAndroidApp?: Maybe<StripePaymentIntentNextActionWechatPayRedirectToAndroidApp>;
  wechatPayRedirectToIosApp?: Maybe<StripePaymentIntentNextActionWechatPayRedirectToIosApp>;
};

export type StripePaymentIntentNextActionAlipayHandleRedirect = {
  __typename?: 'StripePaymentIntentNextActionAlipayHandleRedirect';
  nativeData?: Maybe<Scalars['String']>;
  nativeUrl?: Maybe<Scalars['String']>;
  returnUrl?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

export type StripePaymentIntentNextActionBoleto = {
  __typename?: 'StripePaymentIntentNextActionBoleto';
  expiresAt?: Maybe<Scalars['Int']>;
  hostedVoucherUrl?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  pdf?: Maybe<Scalars['String']>;
};

export type StripePaymentIntentNextActionCardAwaitNotification = {
  __typename?: 'StripePaymentIntentNextActionCardAwaitNotification';
  chargeAttemptAt?: Maybe<Scalars['Int']>;
  customerApprovalRequired?: Maybe<Scalars['Boolean']>;
};

export type StripePaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode = {
  __typename?: 'StripePaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode';
  hostedInstructionsUrl: Scalars['String'];
  mobileAuthUrl: Scalars['String'];
  qrCode: StripePaymentIntentNextActionCashappQrCode;
};

export type StripePaymentIntentNextActionCashappQrCode = {
  __typename?: 'StripePaymentIntentNextActionCashappQrCode';
  expiresAt: Scalars['Int'];
  imageUrlPng: Scalars['String'];
  imageUrlSvg: Scalars['String'];
};

export type StripePaymentIntentNextActionDisplayBankTransferInstructions = {
  __typename?: 'StripePaymentIntentNextActionDisplayBankTransferInstructions';
  amountRemaining?: Maybe<Scalars['Int']>;
  currency?: Maybe<Scalars['String']>;
  financialAddresses?: Maybe<Array<StripeFundingInstructionsBankTransferFinancialAddress>>;
  hostedInstructionsUrl?: Maybe<Scalars['String']>;
  reference?: Maybe<Scalars['String']>;
  type: StripePaymentIntentNextActionDisplayBankTransferInstructionsType;
};

export enum StripePaymentIntentNextActionDisplayBankTransferInstructionsType {
  EuBankTransfer = 'EU_BANK_TRANSFER',
  GbBankTransfer = 'GB_BANK_TRANSFER',
  JpBankTransfer = 'JP_BANK_TRANSFER',
  MxBankTransfer = 'MX_BANK_TRANSFER'
}

export type StripePaymentIntentNextActionDisplayOxxoDetails = {
  __typename?: 'StripePaymentIntentNextActionDisplayOxxoDetails';
  expiresAfter?: Maybe<Scalars['Int']>;
  hostedVoucherUrl?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
};

export type StripePaymentIntentNextActionKonbini = {
  __typename?: 'StripePaymentIntentNextActionKonbini';
  expiresAt: Scalars['Int'];
  hostedVoucherUrl?: Maybe<Scalars['String']>;
  stores: StripePaymentIntentNextActionKonbiniStores;
};

export type StripePaymentIntentNextActionKonbiniFamilymart = {
  __typename?: 'StripePaymentIntentNextActionKonbiniFamilymart';
  confirmationNumber?: Maybe<Scalars['String']>;
  paymentCode: Scalars['String'];
};

export type StripePaymentIntentNextActionKonbiniLawson = {
  __typename?: 'StripePaymentIntentNextActionKonbiniLawson';
  confirmationNumber?: Maybe<Scalars['String']>;
  paymentCode: Scalars['String'];
};

export type StripePaymentIntentNextActionKonbiniMinistop = {
  __typename?: 'StripePaymentIntentNextActionKonbiniMinistop';
  confirmationNumber?: Maybe<Scalars['String']>;
  paymentCode: Scalars['String'];
};

export type StripePaymentIntentNextActionKonbiniSeicomart = {
  __typename?: 'StripePaymentIntentNextActionKonbiniSeicomart';
  confirmationNumber?: Maybe<Scalars['String']>;
  paymentCode: Scalars['String'];
};

export type StripePaymentIntentNextActionKonbiniStores = {
  __typename?: 'StripePaymentIntentNextActionKonbiniStores';
  familymart?: Maybe<StripePaymentIntentNextActionKonbiniFamilymart>;
  lawson?: Maybe<StripePaymentIntentNextActionKonbiniLawson>;
  ministop?: Maybe<StripePaymentIntentNextActionKonbiniMinistop>;
  seicomart?: Maybe<StripePaymentIntentNextActionKonbiniSeicomart>;
};

export type StripePaymentIntentNextActionPaynowDisplayQrCode = {
  __typename?: 'StripePaymentIntentNextActionPaynowDisplayQrCode';
  data: Scalars['String'];
  hostedInstructionsUrl?: Maybe<Scalars['String']>;
  imageUrlPng: Scalars['String'];
  imageUrlSvg: Scalars['String'];
};

export type StripePaymentIntentNextActionPixDisplayQrCode = {
  __typename?: 'StripePaymentIntentNextActionPixDisplayQrCode';
  data?: Maybe<Scalars['String']>;
  expiresAt?: Maybe<Scalars['Int']>;
  hostedInstructionsUrl?: Maybe<Scalars['String']>;
  imageUrlPng?: Maybe<Scalars['String']>;
  imageUrlSvg?: Maybe<Scalars['String']>;
};

export type StripePaymentIntentNextActionPromptpayDisplayQrCode = {
  __typename?: 'StripePaymentIntentNextActionPromptpayDisplayQrCode';
  data: Scalars['String'];
  hostedInstructionsUrl: Scalars['String'];
  imageUrlPng: Scalars['String'];
  imageUrlSvg: Scalars['String'];
};

export type StripePaymentIntentNextActionRedirectToUrl = {
  __typename?: 'StripePaymentIntentNextActionRedirectToUrl';
  returnUrl?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

export type StripePaymentIntentNextActionVerifyWithMicrodeposits = {
  __typename?: 'StripePaymentIntentNextActionVerifyWithMicrodeposits';
  arrivalDate: Scalars['Int'];
  hostedVerificationUrl: Scalars['String'];
  microdepositType?: Maybe<StripePaymentIntentNextActionVerifyWithMicrodepositsMicrodepositType>;
};

export enum StripePaymentIntentNextActionVerifyWithMicrodepositsMicrodepositType {
  Amounts = 'AMOUNTS',
  DescriptorCode = 'DESCRIPTOR_CODE'
}

export type StripePaymentIntentNextActionWechatPayDisplayQrCode = {
  __typename?: 'StripePaymentIntentNextActionWechatPayDisplayQrCode';
  data: Scalars['String'];
  hostedInstructionsUrl: Scalars['String'];
  imageDataUrl: Scalars['String'];
  imageUrlPng: Scalars['String'];
  imageUrlSvg: Scalars['String'];
};

export type StripePaymentIntentNextActionWechatPayRedirectToAndroidApp = {
  __typename?: 'StripePaymentIntentNextActionWechatPayRedirectToAndroidApp';
  appId: Scalars['String'];
  nonceStr: Scalars['String'];
  package: Scalars['String'];
  partnerId: Scalars['String'];
  prepayId: Scalars['String'];
  sign: Scalars['String'];
  timestamp: Scalars['String'];
};

export type StripePaymentIntentNextActionWechatPayRedirectToIosApp = {
  __typename?: 'StripePaymentIntentNextActionWechatPayRedirectToIosApp';
  nativeUrl: Scalars['String'];
};

export enum StripePaymentIntentObject {
  PaymentIntent = 'PAYMENT_INTENT'
}

export type StripePaymentIntentPaymentMethodOptions = {
  __typename?: 'StripePaymentIntentPaymentMethodOptions';
  acssDebit?: Maybe<StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsAcssDebitUnion>;
  affirm?: Maybe<StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsAffirmUnion>;
  afterpayClearpay?: Maybe<StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsAfterpayClearpayUnion>;
  alipay?: Maybe<StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsAlipayUnion>;
  auBecsDebit?: Maybe<StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsAuBecsDebitUnion>;
  bacsDebit?: Maybe<StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsBacsDebitUnion>;
  bancontact?: Maybe<StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsBancontactUnion>;
  blik?: Maybe<StripePaymentIntentTypeSpecificPaymentMethodOptionsClientUnion>;
  boleto?: Maybe<StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsBoletoUnion>;
  card?: Maybe<StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsCardUnion>;
  cardPresent?: Maybe<StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsCardPresentUnion>;
  cashapp?: Maybe<StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsCashappUnion>;
  customerBalance?: Maybe<StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsCustomerBalanceUnion>;
  eps?: Maybe<StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsEpsUnion>;
  fpx?: Maybe<StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsFpxUnion>;
  giropay?: Maybe<StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsGiropayUnion>;
  grabpay?: Maybe<StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsGrabpayUnion>;
  ideal?: Maybe<StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsIdealUnion>;
  interacPresent?: Maybe<StripePaymentIntentTypeSpecificPaymentMethodOptionsClientUnion>;
  klarna?: Maybe<StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsKlarnaUnion>;
  konbini?: Maybe<StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsKonbiniUnion>;
  link?: Maybe<StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsLinkUnion>;
  oxxo?: Maybe<StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsOxxoUnion>;
  p24?: Maybe<StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsP24Union>;
  paynow?: Maybe<StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsPaynowUnion>;
  paypal?: Maybe<StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsPaypalUnion>;
  pix?: Maybe<StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsPixUnion>;
  promptpay?: Maybe<StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsPromptpayUnion>;
  sepaDebit?: Maybe<StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsSepaDebitUnion>;
  sofort?: Maybe<StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsSofortUnion>;
  usBankAccount?: Maybe<StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsUsBankAccountUnion>;
  wechatPay?: Maybe<StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsWechatPayUnion>;
};

export type StripePaymentIntentPaymentMethodOptionsAcssDebit = {
  __typename?: 'StripePaymentIntentPaymentMethodOptionsAcssDebit';
  mandateOptions?: Maybe<StripePaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit>;
  setupFutureUsage?: Maybe<StripePaymentIntentPaymentMethodOptionsAcssDebitSetupFutureUsage>;
  verificationMethod?: Maybe<StripePaymentIntentPaymentMethodOptionsAcssDebitVerificationMethod>;
};

export enum StripePaymentIntentPaymentMethodOptionsAcssDebitSetupFutureUsage {
  None = 'NONE',
  OffSession = 'OFF_SESSION',
  OnSession = 'ON_SESSION'
}

export enum StripePaymentIntentPaymentMethodOptionsAcssDebitVerificationMethod {
  Automatic = 'AUTOMATIC',
  Instant = 'INSTANT',
  Microdeposits = 'MICRODEPOSITS'
}

export type StripePaymentIntentPaymentMethodOptionsAuBecsDebit = {
  __typename?: 'StripePaymentIntentPaymentMethodOptionsAuBecsDebit';
  setupFutureUsage?: Maybe<StripePaymentIntentPaymentMethodOptionsAuBecsDebitSetupFutureUsage>;
};

export enum StripePaymentIntentPaymentMethodOptionsAuBecsDebitSetupFutureUsage {
  None = 'NONE',
  OffSession = 'OFF_SESSION',
  OnSession = 'ON_SESSION'
}

export type StripePaymentIntentPaymentMethodOptionsCard = {
  __typename?: 'StripePaymentIntentPaymentMethodOptionsCard';
  captureMethod?: Maybe<StripePaymentIntentPaymentMethodOptionsCardCaptureMethod>;
  installments?: Maybe<StripePaymentMethodOptionsCardInstallments>;
  mandateOptions?: Maybe<StripePaymentMethodOptionsCardMandateOptions>;
  network?: Maybe<StripePaymentIntentPaymentMethodOptionsCardNetwork>;
  requestThreeDSecure?: Maybe<StripePaymentIntentPaymentMethodOptionsCardRequestThreeDSecure>;
  setupFutureUsage?: Maybe<StripePaymentIntentPaymentMethodOptionsCardSetupFutureUsage>;
  statementDescriptorSuffixKana?: Maybe<Scalars['String']>;
  statementDescriptorSuffixKanji?: Maybe<Scalars['String']>;
};

export enum StripePaymentIntentPaymentMethodOptionsCardCaptureMethod {
  Manual = 'MANUAL'
}

export enum StripePaymentIntentPaymentMethodOptionsCardNetwork {
  Amex = 'AMEX',
  CartesBancaires = 'CARTES_BANCAIRES',
  Diners = 'DINERS',
  Discover = 'DISCOVER',
  EftposAu = 'EFTPOS_AU',
  Interac = 'INTERAC',
  Jcb = 'JCB',
  Mastercard = 'MASTERCARD',
  Unionpay = 'UNIONPAY',
  Unknown = 'UNKNOWN',
  Visa = 'VISA'
}

export enum StripePaymentIntentPaymentMethodOptionsCardRequestThreeDSecure {
  Any = 'ANY',
  Automatic = 'AUTOMATIC',
  ChallengeOnly = 'CHALLENGE_ONLY'
}

export enum StripePaymentIntentPaymentMethodOptionsCardSetupFutureUsage {
  None = 'NONE',
  OffSession = 'OFF_SESSION',
  OnSession = 'ON_SESSION'
}

export type StripePaymentIntentPaymentMethodOptionsEps = {
  __typename?: 'StripePaymentIntentPaymentMethodOptionsEps';
  setupFutureUsage?: Maybe<StripePaymentIntentPaymentMethodOptionsEpsSetupFutureUsage>;
};

export enum StripePaymentIntentPaymentMethodOptionsEpsSetupFutureUsage {
  None = 'NONE'
}

export type StripePaymentIntentPaymentMethodOptionsLink = {
  __typename?: 'StripePaymentIntentPaymentMethodOptionsLink';
  captureMethod?: Maybe<StripePaymentIntentPaymentMethodOptionsLinkCaptureMethod>;
  persistentToken?: Maybe<Scalars['String']>;
  setupFutureUsage?: Maybe<StripePaymentIntentPaymentMethodOptionsLinkSetupFutureUsage>;
};

export enum StripePaymentIntentPaymentMethodOptionsLinkCaptureMethod {
  Manual = 'MANUAL'
}

export enum StripePaymentIntentPaymentMethodOptionsLinkSetupFutureUsage {
  None = 'NONE',
  OffSession = 'OFF_SESSION'
}

export type StripePaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit = {
  __typename?: 'StripePaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit';
  customMandateUrl?: Maybe<Scalars['String']>;
  intervalDescription?: Maybe<Scalars['String']>;
  paymentSchedule?: Maybe<StripePaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitPaymentSchedule>;
  transactionType?: Maybe<StripePaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitTransactionType>;
};

export enum StripePaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitPaymentSchedule {
  Combined = 'COMBINED',
  Interval = 'INTERVAL',
  Sporadic = 'SPORADIC'
}

export enum StripePaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitTransactionType {
  Business = 'BUSINESS',
  Personal = 'PERSONAL'
}

export type StripePaymentIntentPaymentMethodOptionsSepaDebit = {
  __typename?: 'StripePaymentIntentPaymentMethodOptionsSepaDebit';
  mandateOptions?: Maybe<Scalars['JSON']>;
  setupFutureUsage?: Maybe<StripePaymentIntentPaymentMethodOptionsSepaDebitSetupFutureUsage>;
};

export enum StripePaymentIntentPaymentMethodOptionsSepaDebitSetupFutureUsage {
  None = 'NONE',
  OffSession = 'OFF_SESSION',
  OnSession = 'ON_SESSION'
}

export type StripePaymentIntentPaymentMethodOptionsUsBankAccount = {
  __typename?: 'StripePaymentIntentPaymentMethodOptionsUsBankAccount';
  financialConnections?: Maybe<StripeLinkedAccountOptionsUsBankAccount>;
  setupFutureUsage?: Maybe<StripePaymentIntentPaymentMethodOptionsUsBankAccountSetupFutureUsage>;
  verificationMethod?: Maybe<StripePaymentIntentPaymentMethodOptionsUsBankAccountVerificationMethod>;
};

export enum StripePaymentIntentPaymentMethodOptionsUsBankAccountSetupFutureUsage {
  None = 'NONE',
  OffSession = 'OFF_SESSION',
  OnSession = 'ON_SESSION'
}

export enum StripePaymentIntentPaymentMethodOptionsUsBankAccountVerificationMethod {
  Automatic = 'AUTOMATIC',
  Instant = 'INSTANT',
  Microdeposits = 'MICRODEPOSITS'
}

export type StripePaymentIntentProcessing = {
  __typename?: 'StripePaymentIntentProcessing';
  card?: Maybe<StripePaymentIntentCardProcessing>;
  type: StripePaymentIntentProcessingType;
};

export type StripePaymentIntentProcessingCustomerNotification = {
  __typename?: 'StripePaymentIntentProcessingCustomerNotification';
  approvalRequested?: Maybe<Scalars['Boolean']>;
  completesAt?: Maybe<Scalars['Int']>;
};

export enum StripePaymentIntentProcessingType {
  Card = 'CARD'
}

export enum StripePaymentIntentSetupFutureUsage {
  OffSession = 'OFF_SESSION',
  OnSession = 'ON_SESSION'
}

export enum StripePaymentIntentStatus {
  Canceled = 'CANCELED',
  Processing = 'PROCESSING',
  RequiresAction = 'REQUIRES_ACTION',
  RequiresCapture = 'REQUIRES_CAPTURE',
  RequiresConfirmation = 'REQUIRES_CONFIRMATION',
  RequiresPaymentMethod = 'REQUIRES_PAYMENT_METHOD',
  Succeeded = 'SUCCEEDED'
}

export type StripePaymentIntentTypeSpecificPaymentMethodOptionsClient = {
  __typename?: 'StripePaymentIntentTypeSpecificPaymentMethodOptionsClient';
  captureMethod?: Maybe<StripePaymentIntentTypeSpecificPaymentMethodOptionsClientCaptureMethod>;
  installments?: Maybe<StripePaymentFlowsInstallmentOptions>;
  setupFutureUsage?: Maybe<StripePaymentIntentTypeSpecificPaymentMethodOptionsClientSetupFutureUsage>;
  verificationMethod?: Maybe<StripePaymentIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod>;
};

export enum StripePaymentIntentTypeSpecificPaymentMethodOptionsClientCaptureMethod {
  Manual = 'MANUAL',
  ManualPreferred = 'MANUAL_PREFERRED'
}

export type StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsAcssDebitUnion = StripePaymentIntentPaymentMethodOptionsAcssDebit | StripePaymentIntentTypeSpecificPaymentMethodOptionsClient;

export type StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsAuBecsDebitUnion = StripePaymentIntentPaymentMethodOptionsAuBecsDebit | StripePaymentIntentTypeSpecificPaymentMethodOptionsClient;

export type StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsCardUnion = StripePaymentIntentPaymentMethodOptionsCard | StripePaymentIntentTypeSpecificPaymentMethodOptionsClient;

export type StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsEpsUnion = StripePaymentIntentPaymentMethodOptionsEps | StripePaymentIntentTypeSpecificPaymentMethodOptionsClient;

export type StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsLinkUnion = StripePaymentIntentPaymentMethodOptionsLink | StripePaymentIntentTypeSpecificPaymentMethodOptionsClient;

export type StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsSepaDebitUnion = StripePaymentIntentPaymentMethodOptionsSepaDebit | StripePaymentIntentTypeSpecificPaymentMethodOptionsClient;

export type StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentIntentPaymentMethodOptionsUsBankAccountUnion = StripePaymentIntentPaymentMethodOptionsUsBankAccount | StripePaymentIntentTypeSpecificPaymentMethodOptionsClient;

export type StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsAffirmUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsAffirm;

export type StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsAfterpayClearpayUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsAfterpayClearpay;

export type StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsAlipayUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsAlipay;

export type StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsBacsDebitUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsBacsDebit;

export type StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsBancontactUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsBancontact;

export type StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsBoletoUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsBoleto;

export type StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsCardPresentUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsCardPresent;

export type StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsCashappUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsCashapp;

export type StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsCustomerBalanceUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsCustomerBalance;

export type StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsFpxUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsFpx;

export type StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsGiropayUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsGiropay;

export type StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsGrabpayUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsGrabpay;

export type StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsIdealUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsIdeal;

export type StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsKlarnaUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsKlarna;

export type StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsKonbiniUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsKonbini;

export type StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsOxxoUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsOxxo;

export type StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsP24Union = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsP24;

export type StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsPaynowUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsPaynow;

export type StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsPaypalUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsPaypal;

export type StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsPixUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsPix;

export type StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsPromptpayUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsPromptpay;

export type StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsSofortUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsSofort;

export type StripePaymentIntentTypeSpecificPaymentMethodOptionsClientOrPaymentMethodOptionsWechatPayUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient | StripePaymentMethodOptionsWechatPay;

export enum StripePaymentIntentTypeSpecificPaymentMethodOptionsClientSetupFutureUsage {
  None = 'NONE',
  OffSession = 'OFF_SESSION',
  OnSession = 'ON_SESSION'
}

export type StripePaymentIntentTypeSpecificPaymentMethodOptionsClientUnion = StripePaymentIntentTypeSpecificPaymentMethodOptionsClient;

export enum StripePaymentIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod {
  Automatic = 'AUTOMATIC',
  Instant = 'INSTANT',
  Microdeposits = 'MICRODEPOSITS'
}

export type StripePaymentLink = {
  __typename?: 'StripePaymentLink';
  active: Scalars['Boolean'];
  afterCompletion: StripePaymentLinksResourceAfterCompletion;
  allowPromotionCodes: Scalars['Boolean'];
  applicationFeeAmount?: Maybe<Scalars['Int']>;
  applicationFeePercent?: Maybe<Scalars['Float']>;
  automaticTax: StripePaymentLinksResourceAutomaticTax;
  billingAddressCollection: StripePaymentLinkBillingAddressCollection;
  consentCollection?: Maybe<StripePaymentLinksResourceConsentCollection>;
  currency: Scalars['String'];
  customFields: Array<StripePaymentLinksResourceCustomFields>;
  customText: StripePaymentLinksResourceCustomText;
  customerCreation: StripePaymentLinkCustomerCreation;
  id: Scalars['String'];
  invoiceCreation?: Maybe<StripePaymentLinksResourceInvoiceCreation>;
  lineItems?: Maybe<StripePaymentLinkLineItems>;
  livemode: Scalars['Boolean'];
  metadata: Scalars['JSON'];
  object: StripePaymentLinkObject;
  onBehalfOf?: Maybe<StripeStringOrAccountUnion>;
  paymentIntentData?: Maybe<StripePaymentLinksResourcePaymentIntentData>;
  paymentMethodCollection: StripePaymentLinkPaymentMethodCollection;
  paymentMethodTypes?: Maybe<Array<StripePaymentLinkPaymentMethodTypes>>;
  phoneNumberCollection: StripePaymentLinksResourcePhoneNumberCollection;
  shippingAddressCollection?: Maybe<StripePaymentLinksResourceShippingAddressCollection>;
  shippingOptions: Array<StripePaymentLinksResourceShippingOption>;
  submitType: StripePaymentLinkSubmitType;
  subscriptionData?: Maybe<StripePaymentLinksResourceSubscriptionData>;
  taxIdCollection: StripePaymentLinksResourceTaxIdCollection;
  transferData?: Maybe<StripePaymentLinksResourceTransferData>;
  url: Scalars['String'];
};

export enum StripePaymentLinkBillingAddressCollection {
  Auto = 'AUTO',
  Required = 'REQUIRED'
}

export enum StripePaymentLinkCustomerCreation {
  Always = 'ALWAYS',
  IfRequired = 'IF_REQUIRED'
}

export type StripePaymentLinkLineItems = {
  __typename?: 'StripePaymentLinkLineItems';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeItem>;
  object: StripePaymentLinkObjectLineItems;
  url: Scalars['String'];
};

export enum StripePaymentLinkObject {
  PaymentLink = 'PAYMENT_LINK'
}

export enum StripePaymentLinkObjectLineItems {
  List = 'LIST'
}

export enum StripePaymentLinkPaymentMethodCollection {
  Always = 'ALWAYS',
  IfRequired = 'IF_REQUIRED'
}

export enum StripePaymentLinkPaymentMethodTypes {
  Affirm = 'AFFIRM',
  AfterpayClearpay = 'AFTERPAY_CLEARPAY',
  Alipay = 'ALIPAY',
  AuBecsDebit = 'AU_BECS_DEBIT',
  BacsDebit = 'BACS_DEBIT',
  Bancontact = 'BANCONTACT',
  Blik = 'BLIK',
  Boleto = 'BOLETO',
  Card = 'CARD',
  Cashapp = 'CASHAPP',
  Eps = 'EPS',
  Fpx = 'FPX',
  Giropay = 'GIROPAY',
  Grabpay = 'GRABPAY',
  Ideal = 'IDEAL',
  Klarna = 'KLARNA',
  Konbini = 'KONBINI',
  Link = 'LINK',
  Oxxo = 'OXXO',
  Paynow = 'PAYNOW',
  Paypal = 'PAYPAL',
  Pix = 'PIX',
  Promptpay = 'PROMPTPAY',
  P_24 = 'P_24',
  SepaDebit = 'SEPA_DEBIT',
  Sofort = 'SOFORT',
  UsBankAccount = 'US_BANK_ACCOUNT',
  WechatPay = 'WECHAT_PAY'
}

export enum StripePaymentLinkSubmitType {
  Auto = 'AUTO',
  Book = 'BOOK',
  Donate = 'DONATE',
  Pay = 'PAY'
}

export type StripePaymentLinksResourceAfterCompletion = {
  __typename?: 'StripePaymentLinksResourceAfterCompletion';
  hostedConfirmation?: Maybe<StripePaymentLinksResourceCompletionBehaviorConfirmationPage>;
  redirect?: Maybe<StripePaymentLinksResourceCompletionBehaviorRedirect>;
  type: StripePaymentLinksResourceAfterCompletionType;
};

export enum StripePaymentLinksResourceAfterCompletionType {
  HostedConfirmation = 'HOSTED_CONFIRMATION',
  Redirect = 'REDIRECT'
}

export type StripePaymentLinksResourceAutomaticTax = {
  __typename?: 'StripePaymentLinksResourceAutomaticTax';
  enabled: Scalars['Boolean'];
};

export type StripePaymentLinksResourceCompletionBehaviorConfirmationPage = {
  __typename?: 'StripePaymentLinksResourceCompletionBehaviorConfirmationPage';
  customMessage?: Maybe<Scalars['String']>;
};

export type StripePaymentLinksResourceCompletionBehaviorRedirect = {
  __typename?: 'StripePaymentLinksResourceCompletionBehaviorRedirect';
  url: Scalars['String'];
};

export type StripePaymentLinksResourceConsentCollection = {
  __typename?: 'StripePaymentLinksResourceConsentCollection';
  promotions?: Maybe<StripePaymentLinksResourceConsentCollectionPromotions>;
  termsOfService?: Maybe<StripePaymentLinksResourceConsentCollectionTermsOfService>;
};

export enum StripePaymentLinksResourceConsentCollectionPromotions {
  Auto = 'AUTO',
  None = 'NONE'
}

export enum StripePaymentLinksResourceConsentCollectionTermsOfService {
  None = 'NONE',
  Required = 'REQUIRED'
}

export type StripePaymentLinksResourceCustomFields = {
  __typename?: 'StripePaymentLinksResourceCustomFields';
  dropdown?: Maybe<StripePaymentLinksResourceCustomFieldsDropdown>;
  key: Scalars['String'];
  label: StripePaymentLinksResourceCustomFieldsLabel;
  optional: Scalars['Boolean'];
  type: StripePaymentLinksResourceCustomFieldsType;
};

export type StripePaymentLinksResourceCustomFieldsDropdown = {
  __typename?: 'StripePaymentLinksResourceCustomFieldsDropdown';
  options: Array<StripePaymentLinksResourceCustomFieldsDropdownOption>;
};

export type StripePaymentLinksResourceCustomFieldsDropdownOption = {
  __typename?: 'StripePaymentLinksResourceCustomFieldsDropdownOption';
  label: Scalars['String'];
  value: Scalars['String'];
};

export type StripePaymentLinksResourceCustomFieldsLabel = {
  __typename?: 'StripePaymentLinksResourceCustomFieldsLabel';
  custom?: Maybe<Scalars['String']>;
  type: StripePaymentLinksResourceCustomFieldsLabelType;
};

export enum StripePaymentLinksResourceCustomFieldsLabelType {
  Custom = 'CUSTOM'
}

export enum StripePaymentLinksResourceCustomFieldsType {
  Dropdown = 'DROPDOWN',
  Numeric = 'NUMERIC',
  Text = 'TEXT'
}

export type StripePaymentLinksResourceCustomText = {
  __typename?: 'StripePaymentLinksResourceCustomText';
  shippingAddress?: Maybe<StripePaymentLinksResourceCustomTextPosition>;
  submit?: Maybe<StripePaymentLinksResourceCustomTextPosition>;
};

export type StripePaymentLinksResourceCustomTextPosition = {
  __typename?: 'StripePaymentLinksResourceCustomTextPosition';
  message: Scalars['String'];
};

export type StripePaymentLinksResourceInvoiceCreation = {
  __typename?: 'StripePaymentLinksResourceInvoiceCreation';
  enabled: Scalars['Boolean'];
  invoiceData?: Maybe<StripePaymentLinksResourceInvoiceSettings>;
};

export type StripePaymentLinksResourceInvoiceSettings = {
  __typename?: 'StripePaymentLinksResourceInvoiceSettings';
  accountTaxIds?: Maybe<Array<StripeStringOrDeletedTaxIdOrTaxIdUnion>>;
  customFields?: Maybe<Array<StripeInvoiceSettingCustomField>>;
  description?: Maybe<Scalars['String']>;
  footer?: Maybe<Scalars['String']>;
  metadata?: Maybe<Scalars['JSON']>;
  renderingOptions?: Maybe<StripeInvoiceSettingRenderingOptions>;
};

export type StripePaymentLinksResourcePaymentIntentData = {
  __typename?: 'StripePaymentLinksResourcePaymentIntentData';
  captureMethod?: Maybe<StripePaymentLinksResourcePaymentIntentDataCaptureMethod>;
  setupFutureUsage?: Maybe<StripePaymentLinksResourcePaymentIntentDataSetupFutureUsage>;
};

export enum StripePaymentLinksResourcePaymentIntentDataCaptureMethod {
  Automatic = 'AUTOMATIC',
  AutomaticAsync = 'AUTOMATIC_ASYNC',
  Manual = 'MANUAL'
}

export enum StripePaymentLinksResourcePaymentIntentDataSetupFutureUsage {
  OffSession = 'OFF_SESSION',
  OnSession = 'ON_SESSION'
}

export type StripePaymentLinksResourcePhoneNumberCollection = {
  __typename?: 'StripePaymentLinksResourcePhoneNumberCollection';
  enabled: Scalars['Boolean'];
};

export type StripePaymentLinksResourceShippingAddressCollection = {
  __typename?: 'StripePaymentLinksResourceShippingAddressCollection';
  allowedCountries: Array<StripePaymentLinksResourceShippingAddressCollectionAllowedCountries>;
};

export enum StripePaymentLinksResourceShippingAddressCollectionAllowedCountries {
  Ac = 'AC',
  Ad = 'AD',
  Ae = 'AE',
  Af = 'AF',
  Ag = 'AG',
  Ai = 'AI',
  Al = 'AL',
  Am = 'AM',
  Ao = 'AO',
  Aq = 'AQ',
  Ar = 'AR',
  At = 'AT',
  Au = 'AU',
  Aw = 'AW',
  Ax = 'AX',
  Az = 'AZ',
  Ba = 'BA',
  Bb = 'BB',
  Bd = 'BD',
  Be = 'BE',
  Bf = 'BF',
  Bg = 'BG',
  Bh = 'BH',
  Bi = 'BI',
  Bj = 'BJ',
  Bl = 'BL',
  Bm = 'BM',
  Bn = 'BN',
  Bo = 'BO',
  Bq = 'BQ',
  Br = 'BR',
  Bs = 'BS',
  Bt = 'BT',
  Bv = 'BV',
  Bw = 'BW',
  By = 'BY',
  Bz = 'BZ',
  Ca = 'CA',
  Cd = 'CD',
  Cf = 'CF',
  Cg = 'CG',
  Ch = 'CH',
  Ci = 'CI',
  Ck = 'CK',
  Cl = 'CL',
  Cm = 'CM',
  Cn = 'CN',
  Co = 'CO',
  Cr = 'CR',
  Cv = 'CV',
  Cw = 'CW',
  Cy = 'CY',
  Cz = 'CZ',
  De = 'DE',
  Dj = 'DJ',
  Dk = 'DK',
  Dm = 'DM',
  Do = 'DO',
  Dz = 'DZ',
  Ec = 'EC',
  Ee = 'EE',
  Eg = 'EG',
  Eh = 'EH',
  Er = 'ER',
  Es = 'ES',
  Et = 'ET',
  Fi = 'FI',
  Fj = 'FJ',
  Fk = 'FK',
  Fo = 'FO',
  Fr = 'FR',
  Ga = 'GA',
  Gb = 'GB',
  Gd = 'GD',
  Ge = 'GE',
  Gf = 'GF',
  Gg = 'GG',
  Gh = 'GH',
  Gi = 'GI',
  Gl = 'GL',
  Gm = 'GM',
  Gn = 'GN',
  Gp = 'GP',
  Gq = 'GQ',
  Gr = 'GR',
  Gs = 'GS',
  Gt = 'GT',
  Gu = 'GU',
  Gw = 'GW',
  Gy = 'GY',
  Hk = 'HK',
  Hn = 'HN',
  Hr = 'HR',
  Ht = 'HT',
  Hu = 'HU',
  Id = 'ID',
  Ie = 'IE',
  Il = 'IL',
  Im = 'IM',
  In = 'IN',
  Io = 'IO',
  Iq = 'IQ',
  Is = 'IS',
  It = 'IT',
  Je = 'JE',
  Jm = 'JM',
  Jo = 'JO',
  Jp = 'JP',
  Ke = 'KE',
  Kg = 'KG',
  Kh = 'KH',
  Ki = 'KI',
  Km = 'KM',
  Kn = 'KN',
  Kr = 'KR',
  Kw = 'KW',
  Ky = 'KY',
  Kz = 'KZ',
  La = 'LA',
  Lb = 'LB',
  Lc = 'LC',
  Li = 'LI',
  Lk = 'LK',
  Lr = 'LR',
  Ls = 'LS',
  Lt = 'LT',
  Lu = 'LU',
  Lv = 'LV',
  Ly = 'LY',
  Ma = 'MA',
  Mc = 'MC',
  Md = 'MD',
  Me = 'ME',
  Mf = 'MF',
  Mg = 'MG',
  Mk = 'MK',
  Ml = 'ML',
  Mm = 'MM',
  Mn = 'MN',
  Mo = 'MO',
  Mq = 'MQ',
  Mr = 'MR',
  Ms = 'MS',
  Mt = 'MT',
  Mu = 'MU',
  Mv = 'MV',
  Mw = 'MW',
  Mx = 'MX',
  My = 'MY',
  Mz = 'MZ',
  Na = 'NA',
  Nc = 'NC',
  Ne = 'NE',
  Ng = 'NG',
  Ni = 'NI',
  Nl = 'NL',
  No = 'NO',
  Np = 'NP',
  Nr = 'NR',
  Nu = 'NU',
  Nz = 'NZ',
  Om = 'OM',
  Pa = 'PA',
  Pe = 'PE',
  Pf = 'PF',
  Pg = 'PG',
  Ph = 'PH',
  Pk = 'PK',
  Pl = 'PL',
  Pm = 'PM',
  Pn = 'PN',
  Pr = 'PR',
  Ps = 'PS',
  Pt = 'PT',
  Py = 'PY',
  Qa = 'QA',
  Re = 'RE',
  Ro = 'RO',
  Rs = 'RS',
  Ru = 'RU',
  Rw = 'RW',
  Sa = 'SA',
  Sb = 'SB',
  Sc = 'SC',
  Se = 'SE',
  Sg = 'SG',
  Sh = 'SH',
  Si = 'SI',
  Sj = 'SJ',
  Sk = 'SK',
  Sl = 'SL',
  Sm = 'SM',
  Sn = 'SN',
  So = 'SO',
  Sr = 'SR',
  Ss = 'SS',
  St = 'ST',
  Sv = 'SV',
  Sx = 'SX',
  Sz = 'SZ',
  Ta = 'TA',
  Tc = 'TC',
  Td = 'TD',
  Tf = 'TF',
  Tg = 'TG',
  Th = 'TH',
  Tj = 'TJ',
  Tk = 'TK',
  Tl = 'TL',
  Tm = 'TM',
  Tn = 'TN',
  To = 'TO',
  Tr = 'TR',
  Tt = 'TT',
  Tv = 'TV',
  Tw = 'TW',
  Tz = 'TZ',
  Ua = 'UA',
  Ug = 'UG',
  Us = 'US',
  Uy = 'UY',
  Uz = 'UZ',
  Va = 'VA',
  Vc = 'VC',
  Ve = 'VE',
  Vg = 'VG',
  Vn = 'VN',
  Vu = 'VU',
  Wf = 'WF',
  Ws = 'WS',
  Xk = 'XK',
  Ye = 'YE',
  Yt = 'YT',
  Za = 'ZA',
  Zm = 'ZM',
  Zw = 'ZW',
  Zz = 'ZZ'
}

export type StripePaymentLinksResourceShippingOption = {
  __typename?: 'StripePaymentLinksResourceShippingOption';
  shippingAmount: Scalars['Int'];
  shippingRate: StripeStringOrShippingRateUnion;
};

export type StripePaymentLinksResourceSubscriptionData = {
  __typename?: 'StripePaymentLinksResourceSubscriptionData';
  description?: Maybe<Scalars['String']>;
  trialPeriodDays?: Maybe<Scalars['Int']>;
};

export type StripePaymentLinksResourceTaxIdCollection = {
  __typename?: 'StripePaymentLinksResourceTaxIdCollection';
  enabled: Scalars['Boolean'];
};

export type StripePaymentLinksResourceTransferData = {
  __typename?: 'StripePaymentLinksResourceTransferData';
  amount?: Maybe<Scalars['Int']>;
  destination: StripeStringOrAccountUnion;
};

export type StripePaymentMethod = {
  __typename?: 'StripePaymentMethod';
  acssDebit?: Maybe<StripePaymentMethodAcssDebit>;
  affirm?: Maybe<Scalars['JSON']>;
  afterpayClearpay?: Maybe<Scalars['JSON']>;
  alipay?: Maybe<Scalars['JSON']>;
  auBecsDebit?: Maybe<StripePaymentMethodAuBecsDebit>;
  bacsDebit?: Maybe<StripePaymentMethodBacsDebit>;
  bancontact?: Maybe<Scalars['JSON']>;
  billingDetails: StripeBillingDetails;
  blik?: Maybe<Scalars['JSON']>;
  boleto?: Maybe<StripePaymentMethodBoleto>;
  card?: Maybe<StripePaymentMethodCard>;
  cardPresent?: Maybe<StripePaymentMethodCardPresent>;
  cashapp?: Maybe<StripePaymentMethodCashapp>;
  created: Scalars['Int'];
  customer?: Maybe<StripeStringOrCustomerUnion>;
  customerBalance?: Maybe<Scalars['JSON']>;
  eps?: Maybe<StripePaymentMethodEps>;
  fpx?: Maybe<StripePaymentMethodFpx>;
  giropay?: Maybe<Scalars['JSON']>;
  grabpay?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
  ideal?: Maybe<StripePaymentMethodIdeal>;
  interacPresent?: Maybe<StripePaymentMethodInteracPresent>;
  klarna?: Maybe<StripePaymentMethodKlarna>;
  konbini?: Maybe<Scalars['JSON']>;
  link?: Maybe<StripePaymentMethodLink>;
  livemode: Scalars['Boolean'];
  metadata?: Maybe<Scalars['JSON']>;
  object: StripePaymentMethodObject;
  oxxo?: Maybe<Scalars['JSON']>;
  p24?: Maybe<StripePaymentMethodP24>;
  paynow?: Maybe<Scalars['JSON']>;
  paypal?: Maybe<StripePaymentMethodPaypal>;
  pix?: Maybe<Scalars['JSON']>;
  promptpay?: Maybe<Scalars['JSON']>;
  radarOptions?: Maybe<StripeRadarRadarOptions>;
  sepaDebit?: Maybe<StripePaymentMethodSepaDebit>;
  sofort?: Maybe<StripePaymentMethodSofort>;
  type: StripePaymentMethodType;
  usBankAccount?: Maybe<StripePaymentMethodUsBankAccount>;
  wechatPay?: Maybe<Scalars['JSON']>;
};

export type StripePaymentMethodAcssDebit = {
  __typename?: 'StripePaymentMethodAcssDebit';
  bankName?: Maybe<Scalars['String']>;
  fingerprint?: Maybe<Scalars['String']>;
  institutionNumber?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  transitNumber?: Maybe<Scalars['String']>;
};

export type StripePaymentMethodAuBecsDebit = {
  __typename?: 'StripePaymentMethodAuBecsDebit';
  bsbNumber?: Maybe<Scalars['String']>;
  fingerprint?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
};

export type StripePaymentMethodBacsDebit = {
  __typename?: 'StripePaymentMethodBacsDebit';
  fingerprint?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  sortCode?: Maybe<Scalars['String']>;
};

export type StripePaymentMethodBoleto = {
  __typename?: 'StripePaymentMethodBoleto';
  taxId: Scalars['String'];
};

export type StripePaymentMethodCard = {
  __typename?: 'StripePaymentMethodCard';
  brand: Scalars['String'];
  checks?: Maybe<StripePaymentMethodCardChecks>;
  country?: Maybe<Scalars['String']>;
  expMonth: Scalars['Int'];
  expYear: Scalars['Int'];
  fingerprint?: Maybe<Scalars['String']>;
  funding: Scalars['String'];
  generatedFrom?: Maybe<StripePaymentMethodCardGeneratedCard>;
  last4: Scalars['String'];
  networks?: Maybe<StripeNetworks>;
  threeDSecureUsage?: Maybe<StripeThreeDSecureUsage>;
  wallet?: Maybe<StripePaymentMethodCardWallet>;
};

export type StripePaymentMethodCardChecks = {
  __typename?: 'StripePaymentMethodCardChecks';
  addressLine1Check?: Maybe<Scalars['String']>;
  addressPostalCodeCheck?: Maybe<Scalars['String']>;
  cvcCheck?: Maybe<Scalars['String']>;
};

export type StripePaymentMethodCardGeneratedCard = {
  __typename?: 'StripePaymentMethodCardGeneratedCard';
  charge?: Maybe<Scalars['String']>;
  paymentMethodDetails?: Maybe<StripeCardGeneratedFromPaymentMethodDetails>;
  setupAttempt?: Maybe<StripeStringOrSetupAttemptUnion>;
};

export type StripePaymentMethodCardPresent = {
  __typename?: 'StripePaymentMethodCardPresent';
  brand?: Maybe<Scalars['String']>;
  cardholderName?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  expMonth: Scalars['Int'];
  expYear: Scalars['Int'];
  fingerprint?: Maybe<Scalars['String']>;
  funding?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  networks?: Maybe<StripePaymentMethodCardPresentNetworks>;
  readMethod?: Maybe<StripePaymentMethodCardPresentReadMethod>;
};

export type StripePaymentMethodCardPresentNetworks = {
  __typename?: 'StripePaymentMethodCardPresentNetworks';
  available: Array<Scalars['String']>;
  preferred?: Maybe<Scalars['String']>;
};

export enum StripePaymentMethodCardPresentReadMethod {
  ContactlessEmv = 'CONTACTLESS_EMV',
  ContactlessMagstripeMode = 'CONTACTLESS_MAGSTRIPE_MODE',
  ContactEmv = 'CONTACT_EMV',
  MagneticStripeFallback = 'MAGNETIC_STRIPE_FALLBACK',
  MagneticStripeTrack_2 = 'MAGNETIC_STRIPE_TRACK_2'
}

export type StripePaymentMethodCardWallet = {
  __typename?: 'StripePaymentMethodCardWallet';
  amexExpressCheckout?: Maybe<Scalars['JSON']>;
  applePay?: Maybe<Scalars['JSON']>;
  dynamicLast4?: Maybe<Scalars['String']>;
  googlePay?: Maybe<Scalars['JSON']>;
  link?: Maybe<Scalars['JSON']>;
  masterpass?: Maybe<StripePaymentMethodCardWalletMasterpass>;
  samsungPay?: Maybe<Scalars['JSON']>;
  type: StripePaymentMethodCardWalletType;
  visaCheckout?: Maybe<StripePaymentMethodCardWalletVisaCheckout>;
};

export type StripePaymentMethodCardWalletMasterpass = {
  __typename?: 'StripePaymentMethodCardWalletMasterpass';
  billingAddress?: Maybe<StripeAddress>;
  email?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  shippingAddress?: Maybe<StripeAddress>;
};

export enum StripePaymentMethodCardWalletType {
  AmexExpressCheckout = 'AMEX_EXPRESS_CHECKOUT',
  ApplePay = 'APPLE_PAY',
  GooglePay = 'GOOGLE_PAY',
  Link = 'LINK',
  Masterpass = 'MASTERPASS',
  SamsungPay = 'SAMSUNG_PAY',
  VisaCheckout = 'VISA_CHECKOUT'
}

export type StripePaymentMethodCardWalletVisaCheckout = {
  __typename?: 'StripePaymentMethodCardWalletVisaCheckout';
  billingAddress?: Maybe<StripeAddress>;
  email?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  shippingAddress?: Maybe<StripeAddress>;
};

export type StripePaymentMethodCashapp = {
  __typename?: 'StripePaymentMethodCashapp';
  buyerId?: Maybe<Scalars['String']>;
  cashtag?: Maybe<Scalars['String']>;
};

export type StripePaymentMethodDetails = {
  __typename?: 'StripePaymentMethodDetails';
  achCreditTransfer?: Maybe<StripePaymentMethodDetailsAchCreditTransfer>;
  achDebit?: Maybe<StripePaymentMethodDetailsAchDebit>;
  acssDebit?: Maybe<StripePaymentMethodDetailsAcssDebit>;
  affirm?: Maybe<Scalars['JSON']>;
  afterpayClearpay?: Maybe<StripePaymentMethodDetailsAfterpayClearpay>;
  alipay?: Maybe<StripePaymentFlowsPrivatePaymentMethodsAlipayDetails>;
  auBecsDebit?: Maybe<StripePaymentMethodDetailsAuBecsDebit>;
  bacsDebit?: Maybe<StripePaymentMethodDetailsBacsDebit>;
  bancontact?: Maybe<StripePaymentMethodDetailsBancontact>;
  blik?: Maybe<Scalars['JSON']>;
  boleto?: Maybe<StripePaymentMethodDetailsBoleto>;
  card?: Maybe<StripePaymentMethodDetailsCard>;
  cardPresent?: Maybe<StripePaymentMethodDetailsCardPresent>;
  cashapp?: Maybe<StripePaymentMethodDetailsCashapp>;
  customerBalance?: Maybe<Scalars['JSON']>;
  eps?: Maybe<StripePaymentMethodDetailsEps>;
  fpx?: Maybe<StripePaymentMethodDetailsFpx>;
  giropay?: Maybe<StripePaymentMethodDetailsGiropay>;
  grabpay?: Maybe<StripePaymentMethodDetailsGrabpay>;
  ideal?: Maybe<StripePaymentMethodDetailsIdeal>;
  interacPresent?: Maybe<StripePaymentMethodDetailsInteracPresent>;
  klarna?: Maybe<StripePaymentMethodDetailsKlarna>;
  konbini?: Maybe<StripePaymentMethodDetailsKonbini>;
  link?: Maybe<StripePaymentMethodDetailsLink>;
  multibanco?: Maybe<StripePaymentMethodDetailsMultibanco>;
  oxxo?: Maybe<StripePaymentMethodDetailsOxxo>;
  p24?: Maybe<StripePaymentMethodDetailsP24>;
  paynow?: Maybe<StripePaymentMethodDetailsPaynow>;
  paypal?: Maybe<StripePaymentMethodDetailsPaypal>;
  pix?: Maybe<StripePaymentMethodDetailsPix>;
  promptpay?: Maybe<StripePaymentMethodDetailsPromptpay>;
  sepaDebit?: Maybe<StripePaymentMethodDetailsSepaDebit>;
  sofort?: Maybe<StripePaymentMethodDetailsSofort>;
  stripeAccount?: Maybe<Scalars['JSON']>;
  type: Scalars['String'];
  usBankAccount?: Maybe<StripePaymentMethodDetailsUsBankAccount>;
  wechat?: Maybe<Scalars['JSON']>;
  wechatPay?: Maybe<StripePaymentMethodDetailsWechatPay>;
};

export type StripePaymentMethodDetailsAchCreditTransfer = {
  __typename?: 'StripePaymentMethodDetailsAchCreditTransfer';
  accountNumber?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  routingNumber?: Maybe<Scalars['String']>;
  swiftCode?: Maybe<Scalars['String']>;
};

export type StripePaymentMethodDetailsAchDebit = {
  __typename?: 'StripePaymentMethodDetailsAchDebit';
  accountHolderType?: Maybe<StripePaymentMethodDetailsAchDebitAccountHolderType>;
  bankName?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  fingerprint?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  routingNumber?: Maybe<Scalars['String']>;
};

export enum StripePaymentMethodDetailsAchDebitAccountHolderType {
  Company = 'COMPANY',
  Individual = 'INDIVIDUAL'
}

export type StripePaymentMethodDetailsAcssDebit = {
  __typename?: 'StripePaymentMethodDetailsAcssDebit';
  bankName?: Maybe<Scalars['String']>;
  fingerprint?: Maybe<Scalars['String']>;
  institutionNumber?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  mandate?: Maybe<Scalars['String']>;
  transitNumber?: Maybe<Scalars['String']>;
};

export type StripePaymentMethodDetailsAfterpayClearpay = {
  __typename?: 'StripePaymentMethodDetailsAfterpayClearpay';
  reference?: Maybe<Scalars['String']>;
};

export type StripePaymentMethodDetailsAuBecsDebit = {
  __typename?: 'StripePaymentMethodDetailsAuBecsDebit';
  bsbNumber?: Maybe<Scalars['String']>;
  fingerprint?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  mandate?: Maybe<Scalars['String']>;
};

export type StripePaymentMethodDetailsBacsDebit = {
  __typename?: 'StripePaymentMethodDetailsBacsDebit';
  fingerprint?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  mandate?: Maybe<Scalars['String']>;
  sortCode?: Maybe<Scalars['String']>;
};

export type StripePaymentMethodDetailsBancontact = {
  __typename?: 'StripePaymentMethodDetailsBancontact';
  bankCode?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  bic?: Maybe<Scalars['String']>;
  generatedSepaDebit?: Maybe<StripeStringOrPaymentMethodUnion>;
  generatedSepaDebitMandate?: Maybe<StripeStringOrMandateUnion>;
  ibanLast4?: Maybe<Scalars['String']>;
  preferredLanguage?: Maybe<StripePaymentMethodDetailsBancontactPreferredLanguage>;
  verifiedName?: Maybe<Scalars['String']>;
};

export enum StripePaymentMethodDetailsBancontactPreferredLanguage {
  De = 'DE',
  En = 'EN',
  Fr = 'FR',
  Nl = 'NL'
}

export type StripePaymentMethodDetailsBoleto = {
  __typename?: 'StripePaymentMethodDetailsBoleto';
  taxId: Scalars['String'];
};

export type StripePaymentMethodDetailsCard = {
  __typename?: 'StripePaymentMethodDetailsCard';
  brand?: Maybe<Scalars['String']>;
  checks?: Maybe<StripePaymentMethodDetailsCardChecks>;
  country?: Maybe<Scalars['String']>;
  expMonth: Scalars['Int'];
  expYear: Scalars['Int'];
  fingerprint?: Maybe<Scalars['String']>;
  funding?: Maybe<Scalars['String']>;
  installments?: Maybe<StripePaymentMethodDetailsCardInstallments>;
  last4?: Maybe<Scalars['String']>;
  mandate?: Maybe<Scalars['String']>;
  network?: Maybe<Scalars['String']>;
  networkToken?: Maybe<StripePaymentMethodDetailsCardNetworkToken>;
  threeDSecure?: Maybe<StripeThreeDSecureDetails>;
  wallet?: Maybe<StripePaymentMethodDetailsCardWallet>;
};

export type StripePaymentMethodDetailsCardChecks = {
  __typename?: 'StripePaymentMethodDetailsCardChecks';
  addressLine1Check?: Maybe<Scalars['String']>;
  addressPostalCodeCheck?: Maybe<Scalars['String']>;
  cvcCheck?: Maybe<Scalars['String']>;
};

export type StripePaymentMethodDetailsCardInstallments = {
  __typename?: 'StripePaymentMethodDetailsCardInstallments';
  plan?: Maybe<StripePaymentMethodDetailsCardInstallmentsPlan>;
};

export type StripePaymentMethodDetailsCardInstallmentsPlan = {
  __typename?: 'StripePaymentMethodDetailsCardInstallmentsPlan';
  count?: Maybe<Scalars['Int']>;
  interval?: Maybe<StripePaymentMethodDetailsCardInstallmentsPlanInterval>;
  type: StripePaymentMethodDetailsCardInstallmentsPlanType;
};

export enum StripePaymentMethodDetailsCardInstallmentsPlanInterval {
  Month = 'MONTH'
}

export enum StripePaymentMethodDetailsCardInstallmentsPlanType {
  FixedCount = 'FIXED_COUNT'
}

export type StripePaymentMethodDetailsCardNetworkToken = {
  __typename?: 'StripePaymentMethodDetailsCardNetworkToken';
  used: Scalars['Boolean'];
};

export type StripePaymentMethodDetailsCardPresent = {
  __typename?: 'StripePaymentMethodDetailsCardPresent';
  amountAuthorized?: Maybe<Scalars['Int']>;
  brand?: Maybe<Scalars['String']>;
  captureBefore?: Maybe<Scalars['Int']>;
  cardholderName?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  emvAuthData?: Maybe<Scalars['String']>;
  expMonth: Scalars['Int'];
  expYear: Scalars['Int'];
  fingerprint?: Maybe<Scalars['String']>;
  funding?: Maybe<Scalars['String']>;
  generatedCard?: Maybe<Scalars['String']>;
  incrementalAuthorizationSupported: Scalars['Boolean'];
  last4?: Maybe<Scalars['String']>;
  network?: Maybe<Scalars['String']>;
  overcaptureSupported: Scalars['Boolean'];
  readMethod?: Maybe<StripePaymentMethodDetailsCardPresentReadMethod>;
  receipt?: Maybe<StripePaymentMethodDetailsCardPresentReceipt>;
};

export enum StripePaymentMethodDetailsCardPresentReadMethod {
  ContactlessEmv = 'CONTACTLESS_EMV',
  ContactlessMagstripeMode = 'CONTACTLESS_MAGSTRIPE_MODE',
  ContactEmv = 'CONTACT_EMV',
  MagneticStripeFallback = 'MAGNETIC_STRIPE_FALLBACK',
  MagneticStripeTrack_2 = 'MAGNETIC_STRIPE_TRACK_2'
}

export type StripePaymentMethodDetailsCardPresentReceipt = {
  __typename?: 'StripePaymentMethodDetailsCardPresentReceipt';
  accountType?: Maybe<StripePaymentMethodDetailsCardPresentReceiptAccountType>;
  applicationCryptogram?: Maybe<Scalars['String']>;
  applicationPreferredName?: Maybe<Scalars['String']>;
  authorizationCode?: Maybe<Scalars['String']>;
  authorizationResponseCode?: Maybe<Scalars['String']>;
  cardholderVerificationMethod?: Maybe<Scalars['String']>;
  dedicatedFileName?: Maybe<Scalars['String']>;
  terminalVerificationResults?: Maybe<Scalars['String']>;
  transactionStatusInformation?: Maybe<Scalars['String']>;
};

export enum StripePaymentMethodDetailsCardPresentReceiptAccountType {
  Checking = 'CHECKING',
  Credit = 'CREDIT',
  Prepaid = 'PREPAID',
  Unknown = 'UNKNOWN'
}

export type StripePaymentMethodDetailsCardWallet = {
  __typename?: 'StripePaymentMethodDetailsCardWallet';
  amexExpressCheckout?: Maybe<Scalars['JSON']>;
  applePay?: Maybe<Scalars['JSON']>;
  dynamicLast4?: Maybe<Scalars['String']>;
  googlePay?: Maybe<Scalars['JSON']>;
  link?: Maybe<Scalars['JSON']>;
  masterpass?: Maybe<StripePaymentMethodDetailsCardWalletMasterpass>;
  samsungPay?: Maybe<Scalars['JSON']>;
  type: StripePaymentMethodDetailsCardWalletType;
  visaCheckout?: Maybe<StripePaymentMethodDetailsCardWalletVisaCheckout>;
};

export type StripePaymentMethodDetailsCardWalletMasterpass = {
  __typename?: 'StripePaymentMethodDetailsCardWalletMasterpass';
  billingAddress?: Maybe<StripeAddress>;
  email?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  shippingAddress?: Maybe<StripeAddress>;
};

export enum StripePaymentMethodDetailsCardWalletType {
  AmexExpressCheckout = 'AMEX_EXPRESS_CHECKOUT',
  ApplePay = 'APPLE_PAY',
  GooglePay = 'GOOGLE_PAY',
  Link = 'LINK',
  Masterpass = 'MASTERPASS',
  SamsungPay = 'SAMSUNG_PAY',
  VisaCheckout = 'VISA_CHECKOUT'
}

export type StripePaymentMethodDetailsCardWalletVisaCheckout = {
  __typename?: 'StripePaymentMethodDetailsCardWalletVisaCheckout';
  billingAddress?: Maybe<StripeAddress>;
  email?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  shippingAddress?: Maybe<StripeAddress>;
};

export type StripePaymentMethodDetailsCashapp = {
  __typename?: 'StripePaymentMethodDetailsCashapp';
  buyerId?: Maybe<Scalars['String']>;
  cashtag?: Maybe<Scalars['String']>;
};

export type StripePaymentMethodDetailsEps = {
  __typename?: 'StripePaymentMethodDetailsEps';
  bank?: Maybe<StripePaymentMethodDetailsEpsBank>;
  verifiedName?: Maybe<Scalars['String']>;
};

export enum StripePaymentMethodDetailsEpsBank {
  ArzteUndApothekerBank = 'ARZTE_UND_APOTHEKER_BANK',
  AustrianAnadiBankAg = 'AUSTRIAN_ANADI_BANK_AG',
  BankhausCarlSpangler = 'BANKHAUS_CARL_SPANGLER',
  BankhausSchelhammerUndSchatteraAg = 'BANKHAUS_SCHELHAMMER_UND_SCHATTERA_AG',
  BankAustria = 'BANK_AUSTRIA',
  BawagPskAg = 'BAWAG_PSK_AG',
  BksBankAg = 'BKS_BANK_AG',
  BrullKallmusBankAg = 'BRULL_KALLMUS_BANK_AG',
  BtvVierLanderBank = 'BTV_VIER_LANDER_BANK',
  CapitalBankGraweGruppeAg = 'CAPITAL_BANK_GRAWE_GRUPPE_AG',
  DeutscheBankAg = 'DEUTSCHE_BANK_AG',
  Dolomitenbank = 'DOLOMITENBANK',
  EasybankAg = 'EASYBANK_AG',
  ErsteBankUndSparkassen = 'ERSTE_BANK_UND_SPARKASSEN',
  HypoAlpeadriabankInternationalAg = 'HYPO_ALPEADRIABANK_INTERNATIONAL_AG',
  HypoBankBurgenlandAktiengesellschaft = 'HYPO_BANK_BURGENLAND_AKTIENGESELLSCHAFT',
  HypoNoeLbFurNiederosterreichUWien = 'HYPO_NOE_LB_FUR_NIEDEROSTERREICH_U_WIEN',
  HypoOberosterreichSalzburgSteiermark = 'HYPO_OBEROSTERREICH_SALZBURG_STEIERMARK',
  HypoTirolBankAg = 'HYPO_TIROL_BANK_AG',
  HypoVorarlbergBankAg = 'HYPO_VORARLBERG_BANK_AG',
  MarchfelderBank = 'MARCHFELDER_BANK',
  OberbankAg = 'OBERBANK_AG',
  RaiffeisenBankengruppeOsterreich = 'RAIFFEISEN_BANKENGRUPPE_OSTERREICH',
  SchoellerbankAg = 'SCHOELLERBANK_AG',
  SpardaBankWien = 'SPARDA_BANK_WIEN',
  VolksbankGruppe = 'VOLKSBANK_GRUPPE',
  VolkskreditbankAg = 'VOLKSKREDITBANK_AG',
  VrBankBraunau = 'VR_BANK_BRAUNAU'
}

export type StripePaymentMethodDetailsFpx = {
  __typename?: 'StripePaymentMethodDetailsFpx';
  bank: StripePaymentMethodDetailsFpxBank;
  transactionId?: Maybe<Scalars['String']>;
};

export enum StripePaymentMethodDetailsFpxBank {
  AffinBank = 'AFFIN_BANK',
  Agrobank = 'AGROBANK',
  AllianceBank = 'ALLIANCE_BANK',
  Ambank = 'AMBANK',
  BankIslam = 'BANK_ISLAM',
  BankMuamalat = 'BANK_MUAMALAT',
  BankOfChina = 'BANK_OF_CHINA',
  BankRakyat = 'BANK_RAKYAT',
  Bsn = 'BSN',
  Cimb = 'CIMB',
  DeutscheBank = 'DEUTSCHE_BANK',
  HongLeongBank = 'HONG_LEONG_BANK',
  Hsbc = 'HSBC',
  Kfh = 'KFH',
  Maybank_2E = 'MAYBANK_2E',
  Maybank_2U = 'MAYBANK_2U',
  Ocbc = 'OCBC',
  PbEnterprise = 'PB_ENTERPRISE',
  PublicBank = 'PUBLIC_BANK',
  Rhb = 'RHB',
  StandardChartered = 'STANDARD_CHARTERED',
  Uob = 'UOB'
}

export type StripePaymentMethodDetailsGiropay = {
  __typename?: 'StripePaymentMethodDetailsGiropay';
  bankCode?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  bic?: Maybe<Scalars['String']>;
  verifiedName?: Maybe<Scalars['String']>;
};

export type StripePaymentMethodDetailsGrabpay = {
  __typename?: 'StripePaymentMethodDetailsGrabpay';
  transactionId?: Maybe<Scalars['String']>;
};

export type StripePaymentMethodDetailsIdeal = {
  __typename?: 'StripePaymentMethodDetailsIdeal';
  bank?: Maybe<StripePaymentMethodDetailsIdealBank>;
  bic?: Maybe<StripePaymentMethodDetailsIdealBic>;
  generatedSepaDebit?: Maybe<StripeStringOrPaymentMethodUnion>;
  generatedSepaDebitMandate?: Maybe<StripeStringOrMandateUnion>;
  ibanLast4?: Maybe<Scalars['String']>;
  verifiedName?: Maybe<Scalars['String']>;
};

export enum StripePaymentMethodDetailsIdealBank {
  AbnAmro = 'ABN_AMRO',
  AsnBank = 'ASN_BANK',
  Bunq = 'BUNQ',
  Handelsbanken = 'HANDELSBANKEN',
  Ing = 'ING',
  Knab = 'KNAB',
  Moneyou = 'MONEYOU',
  Rabobank = 'RABOBANK',
  Regiobank = 'REGIOBANK',
  Revolut = 'REVOLUT',
  SnsBank = 'SNS_BANK',
  TriodosBank = 'TRIODOS_BANK',
  VanLanschot = 'VAN_LANSCHOT',
  Yoursafe = 'YOURSAFE'
}

export enum StripePaymentMethodDetailsIdealBic {
  Abnanl2A = 'ABNANL2A',
  Asnbnl21 = 'ASNBNL21',
  Bitsnl2A = 'BITSNL2A',
  Bunqnl2A = 'BUNQNL2A',
  Fvlbnl22 = 'FVLBNL22',
  Handnl2A = 'HANDNL2A',
  Ingbnl2A = 'INGBNL2A',
  Knabnl2H = 'KNABNL2H',
  Moyonl21 = 'MOYONL21',
  Rabonl2U = 'RABONL2U',
  Rbrbnl21 = 'RBRBNL21',
  Revoie23 = 'REVOIE23',
  Revolt21 = 'REVOLT21',
  Snsbnl2A = 'SNSBNL2A',
  Trionl2U = 'TRIONL2U'
}

export type StripePaymentMethodDetailsInteracPresent = {
  __typename?: 'StripePaymentMethodDetailsInteracPresent';
  brand?: Maybe<Scalars['String']>;
  cardholderName?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  emvAuthData?: Maybe<Scalars['String']>;
  expMonth: Scalars['Int'];
  expYear: Scalars['Int'];
  fingerprint?: Maybe<Scalars['String']>;
  funding?: Maybe<Scalars['String']>;
  generatedCard?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  network?: Maybe<Scalars['String']>;
  preferredLocales?: Maybe<Array<Scalars['String']>>;
  readMethod?: Maybe<StripePaymentMethodDetailsInteracPresentReadMethod>;
  receipt?: Maybe<StripePaymentMethodDetailsInteracPresentReceipt>;
};

export enum StripePaymentMethodDetailsInteracPresentReadMethod {
  ContactlessEmv = 'CONTACTLESS_EMV',
  ContactlessMagstripeMode = 'CONTACTLESS_MAGSTRIPE_MODE',
  ContactEmv = 'CONTACT_EMV',
  MagneticStripeFallback = 'MAGNETIC_STRIPE_FALLBACK',
  MagneticStripeTrack_2 = 'MAGNETIC_STRIPE_TRACK_2'
}

export type StripePaymentMethodDetailsInteracPresentReceipt = {
  __typename?: 'StripePaymentMethodDetailsInteracPresentReceipt';
  accountType?: Maybe<StripePaymentMethodDetailsInteracPresentReceiptAccountType>;
  applicationCryptogram?: Maybe<Scalars['String']>;
  applicationPreferredName?: Maybe<Scalars['String']>;
  authorizationCode?: Maybe<Scalars['String']>;
  authorizationResponseCode?: Maybe<Scalars['String']>;
  cardholderVerificationMethod?: Maybe<Scalars['String']>;
  dedicatedFileName?: Maybe<Scalars['String']>;
  terminalVerificationResults?: Maybe<Scalars['String']>;
  transactionStatusInformation?: Maybe<Scalars['String']>;
};

export enum StripePaymentMethodDetailsInteracPresentReceiptAccountType {
  Checking = 'CHECKING',
  Savings = 'SAVINGS',
  Unknown = 'UNKNOWN'
}

export type StripePaymentMethodDetailsKlarna = {
  __typename?: 'StripePaymentMethodDetailsKlarna';
  paymentMethodCategory?: Maybe<Scalars['String']>;
  preferredLocale?: Maybe<Scalars['String']>;
};

export type StripePaymentMethodDetailsKonbini = {
  __typename?: 'StripePaymentMethodDetailsKonbini';
  store?: Maybe<StripePaymentMethodDetailsKonbiniStore>;
};

export type StripePaymentMethodDetailsKonbiniStore = {
  __typename?: 'StripePaymentMethodDetailsKonbiniStore';
  chain?: Maybe<StripePaymentMethodDetailsKonbiniStoreChain>;
};

export enum StripePaymentMethodDetailsKonbiniStoreChain {
  Familymart = 'FAMILYMART',
  Lawson = 'LAWSON',
  Ministop = 'MINISTOP',
  Seicomart = 'SEICOMART'
}

export type StripePaymentMethodDetailsLink = {
  __typename?: 'StripePaymentMethodDetailsLink';
  country?: Maybe<Scalars['String']>;
};

export type StripePaymentMethodDetailsMultibanco = {
  __typename?: 'StripePaymentMethodDetailsMultibanco';
  entity?: Maybe<Scalars['String']>;
  reference?: Maybe<Scalars['String']>;
};

export type StripePaymentMethodDetailsOxxo = {
  __typename?: 'StripePaymentMethodDetailsOxxo';
  number?: Maybe<Scalars['String']>;
};

export type StripePaymentMethodDetailsP24 = {
  __typename?: 'StripePaymentMethodDetailsP24';
  bank?: Maybe<StripePaymentMethodDetailsP24Bank>;
  reference?: Maybe<Scalars['String']>;
  verifiedName?: Maybe<Scalars['String']>;
};

export enum StripePaymentMethodDetailsP24Bank {
  AliorBank = 'ALIOR_BANK',
  BankiSpbdzielcze = 'BANKI_SPBDZIELCZE',
  BankMillennium = 'BANK_MILLENNIUM',
  BankNowyBfgSa = 'BANK_NOWY_BFG_SA',
  BankPekaoSa = 'BANK_PEKAO_SA',
  Blik = 'BLIK',
  BnpParibas = 'BNP_PARIBAS',
  Boz = 'BOZ',
  CitiHandlowy = 'CITI_HANDLOWY',
  CreditAgricole = 'CREDIT_AGRICOLE',
  Envelobank = 'ENVELOBANK',
  EtransferPocztowy_24 = 'ETRANSFER_POCZTOWY_24',
  GetinBank = 'GETIN_BANK',
  Ideabank = 'IDEABANK',
  Ing = 'ING',
  Inteligo = 'INTELIGO',
  MbankMtransfer = 'MBANK_MTRANSFER',
  NestPrzelew = 'NEST_PRZELEW',
  NoblePay = 'NOBLE_PAY',
  PbacZIpko = 'PBAC_Z_IPKO',
  PlusBank = 'PLUS_BANK',
  SantanderPrzelew_24 = 'SANTANDER_PRZELEW_24',
  TmobileUsbugiBankowe = 'TMOBILE_USBUGI_BANKOWE',
  ToyotaBank = 'TOYOTA_BANK',
  VolkswagenBank = 'VOLKSWAGEN_BANK'
}

export type StripePaymentMethodDetailsPaynow = {
  __typename?: 'StripePaymentMethodDetailsPaynow';
  reference?: Maybe<Scalars['String']>;
};

export type StripePaymentMethodDetailsPaypal = {
  __typename?: 'StripePaymentMethodDetailsPaypal';
  payerEmail?: Maybe<Scalars['String']>;
  payerId?: Maybe<Scalars['String']>;
  payerName?: Maybe<Scalars['String']>;
  sellerProtection?: Maybe<StripePaypalSellerProtection>;
  transactionId?: Maybe<Scalars['String']>;
};

export type StripePaymentMethodDetailsPix = {
  __typename?: 'StripePaymentMethodDetailsPix';
  bankTransactionId?: Maybe<Scalars['String']>;
};

export type StripePaymentMethodDetailsPromptpay = {
  __typename?: 'StripePaymentMethodDetailsPromptpay';
  reference?: Maybe<Scalars['String']>;
};

export type StripePaymentMethodDetailsSepaDebit = {
  __typename?: 'StripePaymentMethodDetailsSepaDebit';
  bankCode?: Maybe<Scalars['String']>;
  branchCode?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  fingerprint?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  mandate?: Maybe<Scalars['String']>;
};

export type StripePaymentMethodDetailsSofort = {
  __typename?: 'StripePaymentMethodDetailsSofort';
  bankCode?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  bic?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  generatedSepaDebit?: Maybe<StripeStringOrPaymentMethodUnion>;
  generatedSepaDebitMandate?: Maybe<StripeStringOrMandateUnion>;
  ibanLast4?: Maybe<Scalars['String']>;
  preferredLanguage?: Maybe<StripePaymentMethodDetailsSofortPreferredLanguage>;
  verifiedName?: Maybe<Scalars['String']>;
};

export enum StripePaymentMethodDetailsSofortPreferredLanguage {
  De = 'DE',
  En = 'EN',
  Es = 'ES',
  Fr = 'FR',
  It = 'IT',
  Nl = 'NL',
  Pl = 'PL'
}

export type StripePaymentMethodDetailsUsBankAccount = {
  __typename?: 'StripePaymentMethodDetailsUsBankAccount';
  accountHolderType?: Maybe<StripePaymentMethodDetailsUsBankAccountAccountHolderType>;
  accountType?: Maybe<StripePaymentMethodDetailsUsBankAccountAccountType>;
  bankName?: Maybe<Scalars['String']>;
  fingerprint?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  routingNumber?: Maybe<Scalars['String']>;
};

export enum StripePaymentMethodDetailsUsBankAccountAccountHolderType {
  Company = 'COMPANY',
  Individual = 'INDIVIDUAL'
}

export enum StripePaymentMethodDetailsUsBankAccountAccountType {
  Checking = 'CHECKING',
  Savings = 'SAVINGS'
}

export type StripePaymentMethodDetailsWechatPay = {
  __typename?: 'StripePaymentMethodDetailsWechatPay';
  fingerprint?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
};

export type StripePaymentMethodEps = {
  __typename?: 'StripePaymentMethodEps';
  bank?: Maybe<StripePaymentMethodEpsBank>;
};

export enum StripePaymentMethodEpsBank {
  ArzteUndApothekerBank = 'ARZTE_UND_APOTHEKER_BANK',
  AustrianAnadiBankAg = 'AUSTRIAN_ANADI_BANK_AG',
  BankhausCarlSpangler = 'BANKHAUS_CARL_SPANGLER',
  BankhausSchelhammerUndSchatteraAg = 'BANKHAUS_SCHELHAMMER_UND_SCHATTERA_AG',
  BankAustria = 'BANK_AUSTRIA',
  BawagPskAg = 'BAWAG_PSK_AG',
  BksBankAg = 'BKS_BANK_AG',
  BrullKallmusBankAg = 'BRULL_KALLMUS_BANK_AG',
  BtvVierLanderBank = 'BTV_VIER_LANDER_BANK',
  CapitalBankGraweGruppeAg = 'CAPITAL_BANK_GRAWE_GRUPPE_AG',
  DeutscheBankAg = 'DEUTSCHE_BANK_AG',
  Dolomitenbank = 'DOLOMITENBANK',
  EasybankAg = 'EASYBANK_AG',
  ErsteBankUndSparkassen = 'ERSTE_BANK_UND_SPARKASSEN',
  HypoAlpeadriabankInternationalAg = 'HYPO_ALPEADRIABANK_INTERNATIONAL_AG',
  HypoBankBurgenlandAktiengesellschaft = 'HYPO_BANK_BURGENLAND_AKTIENGESELLSCHAFT',
  HypoNoeLbFurNiederosterreichUWien = 'HYPO_NOE_LB_FUR_NIEDEROSTERREICH_U_WIEN',
  HypoOberosterreichSalzburgSteiermark = 'HYPO_OBEROSTERREICH_SALZBURG_STEIERMARK',
  HypoTirolBankAg = 'HYPO_TIROL_BANK_AG',
  HypoVorarlbergBankAg = 'HYPO_VORARLBERG_BANK_AG',
  MarchfelderBank = 'MARCHFELDER_BANK',
  OberbankAg = 'OBERBANK_AG',
  RaiffeisenBankengruppeOsterreich = 'RAIFFEISEN_BANKENGRUPPE_OSTERREICH',
  SchoellerbankAg = 'SCHOELLERBANK_AG',
  SpardaBankWien = 'SPARDA_BANK_WIEN',
  VolksbankGruppe = 'VOLKSBANK_GRUPPE',
  VolkskreditbankAg = 'VOLKSKREDITBANK_AG',
  VrBankBraunau = 'VR_BANK_BRAUNAU'
}

export type StripePaymentMethodFpx = {
  __typename?: 'StripePaymentMethodFpx';
  bank: StripePaymentMethodFpxBank;
};

export enum StripePaymentMethodFpxBank {
  AffinBank = 'AFFIN_BANK',
  Agrobank = 'AGROBANK',
  AllianceBank = 'ALLIANCE_BANK',
  Ambank = 'AMBANK',
  BankIslam = 'BANK_ISLAM',
  BankMuamalat = 'BANK_MUAMALAT',
  BankOfChina = 'BANK_OF_CHINA',
  BankRakyat = 'BANK_RAKYAT',
  Bsn = 'BSN',
  Cimb = 'CIMB',
  DeutscheBank = 'DEUTSCHE_BANK',
  HongLeongBank = 'HONG_LEONG_BANK',
  Hsbc = 'HSBC',
  Kfh = 'KFH',
  Maybank_2E = 'MAYBANK_2E',
  Maybank_2U = 'MAYBANK_2U',
  Ocbc = 'OCBC',
  PbEnterprise = 'PB_ENTERPRISE',
  PublicBank = 'PUBLIC_BANK',
  Rhb = 'RHB',
  StandardChartered = 'STANDARD_CHARTERED',
  Uob = 'UOB'
}

export type StripePaymentMethodIdeal = {
  __typename?: 'StripePaymentMethodIdeal';
  bank?: Maybe<StripePaymentMethodIdealBank>;
  bic?: Maybe<StripePaymentMethodIdealBic>;
};

export enum StripePaymentMethodIdealBank {
  AbnAmro = 'ABN_AMRO',
  AsnBank = 'ASN_BANK',
  Bunq = 'BUNQ',
  Handelsbanken = 'HANDELSBANKEN',
  Ing = 'ING',
  Knab = 'KNAB',
  Moneyou = 'MONEYOU',
  Rabobank = 'RABOBANK',
  Regiobank = 'REGIOBANK',
  Revolut = 'REVOLUT',
  SnsBank = 'SNS_BANK',
  TriodosBank = 'TRIODOS_BANK',
  VanLanschot = 'VAN_LANSCHOT',
  Yoursafe = 'YOURSAFE'
}

export enum StripePaymentMethodIdealBic {
  Abnanl2A = 'ABNANL2A',
  Asnbnl21 = 'ASNBNL21',
  Bitsnl2A = 'BITSNL2A',
  Bunqnl2A = 'BUNQNL2A',
  Fvlbnl22 = 'FVLBNL22',
  Handnl2A = 'HANDNL2A',
  Ingbnl2A = 'INGBNL2A',
  Knabnl2H = 'KNABNL2H',
  Moyonl21 = 'MOYONL21',
  Rabonl2U = 'RABONL2U',
  Rbrbnl21 = 'RBRBNL21',
  Revoie23 = 'REVOIE23',
  Revolt21 = 'REVOLT21',
  Snsbnl2A = 'SNSBNL2A',
  Trionl2U = 'TRIONL2U'
}

export type StripePaymentMethodInteracPresent = {
  __typename?: 'StripePaymentMethodInteracPresent';
  brand?: Maybe<Scalars['String']>;
  cardholderName?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  expMonth: Scalars['Int'];
  expYear: Scalars['Int'];
  fingerprint?: Maybe<Scalars['String']>;
  funding?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  networks?: Maybe<StripePaymentMethodCardPresentNetworks>;
  preferredLocales?: Maybe<Array<Scalars['String']>>;
  readMethod?: Maybe<StripePaymentMethodInteracPresentReadMethod>;
};

export enum StripePaymentMethodInteracPresentReadMethod {
  ContactlessEmv = 'CONTACTLESS_EMV',
  ContactlessMagstripeMode = 'CONTACTLESS_MAGSTRIPE_MODE',
  ContactEmv = 'CONTACT_EMV',
  MagneticStripeFallback = 'MAGNETIC_STRIPE_FALLBACK',
  MagneticStripeTrack_2 = 'MAGNETIC_STRIPE_TRACK_2'
}

export type StripePaymentMethodKlarna = {
  __typename?: 'StripePaymentMethodKlarna';
  dob?: Maybe<StripePaymentFlowsPrivatePaymentMethodsKlarnaDob>;
};

export type StripePaymentMethodLink = {
  __typename?: 'StripePaymentMethodLink';
  email?: Maybe<Scalars['String']>;
  persistentToken?: Maybe<Scalars['String']>;
};

export enum StripePaymentMethodObject {
  PaymentMethod = 'PAYMENT_METHOD'
}

export type StripePaymentMethodOptionsAffirm = {
  __typename?: 'StripePaymentMethodOptionsAffirm';
  captureMethod?: Maybe<StripePaymentMethodOptionsAffirmCaptureMethod>;
  preferredLocale?: Maybe<Scalars['String']>;
  setupFutureUsage?: Maybe<StripePaymentMethodOptionsAffirmSetupFutureUsage>;
};

export enum StripePaymentMethodOptionsAffirmCaptureMethod {
  Manual = 'MANUAL'
}

export enum StripePaymentMethodOptionsAffirmSetupFutureUsage {
  None = 'NONE'
}

export type StripePaymentMethodOptionsAfterpayClearpay = {
  __typename?: 'StripePaymentMethodOptionsAfterpayClearpay';
  captureMethod?: Maybe<StripePaymentMethodOptionsAfterpayClearpayCaptureMethod>;
  reference?: Maybe<Scalars['String']>;
  setupFutureUsage?: Maybe<StripePaymentMethodOptionsAfterpayClearpaySetupFutureUsage>;
};

export enum StripePaymentMethodOptionsAfterpayClearpayCaptureMethod {
  Manual = 'MANUAL'
}

export enum StripePaymentMethodOptionsAfterpayClearpaySetupFutureUsage {
  None = 'NONE'
}

export type StripePaymentMethodOptionsAlipay = {
  __typename?: 'StripePaymentMethodOptionsAlipay';
  setupFutureUsage?: Maybe<StripePaymentMethodOptionsAlipaySetupFutureUsage>;
};

export enum StripePaymentMethodOptionsAlipaySetupFutureUsage {
  None = 'NONE',
  OffSession = 'OFF_SESSION'
}

export type StripePaymentMethodOptionsBacsDebit = {
  __typename?: 'StripePaymentMethodOptionsBacsDebit';
  setupFutureUsage?: Maybe<StripePaymentMethodOptionsBacsDebitSetupFutureUsage>;
};

export enum StripePaymentMethodOptionsBacsDebitSetupFutureUsage {
  None = 'NONE',
  OffSession = 'OFF_SESSION',
  OnSession = 'ON_SESSION'
}

export type StripePaymentMethodOptionsBancontact = {
  __typename?: 'StripePaymentMethodOptionsBancontact';
  preferredLanguage: StripePaymentMethodOptionsBancontactPreferredLanguage;
  setupFutureUsage?: Maybe<StripePaymentMethodOptionsBancontactSetupFutureUsage>;
};

export enum StripePaymentMethodOptionsBancontactPreferredLanguage {
  De = 'DE',
  En = 'EN',
  Fr = 'FR',
  Nl = 'NL'
}

export enum StripePaymentMethodOptionsBancontactSetupFutureUsage {
  None = 'NONE',
  OffSession = 'OFF_SESSION'
}

export type StripePaymentMethodOptionsBoleto = {
  __typename?: 'StripePaymentMethodOptionsBoleto';
  expiresAfterDays: Scalars['Int'];
  setupFutureUsage?: Maybe<StripePaymentMethodOptionsBoletoSetupFutureUsage>;
};

export enum StripePaymentMethodOptionsBoletoSetupFutureUsage {
  None = 'NONE',
  OffSession = 'OFF_SESSION',
  OnSession = 'ON_SESSION'
}

export type StripePaymentMethodOptionsCardInstallments = {
  __typename?: 'StripePaymentMethodOptionsCardInstallments';
  availablePlans?: Maybe<Array<StripePaymentMethodDetailsCardInstallmentsPlan>>;
  enabled: Scalars['Boolean'];
  plan?: Maybe<StripePaymentMethodDetailsCardInstallmentsPlan>;
};

export type StripePaymentMethodOptionsCardMandateOptions = {
  __typename?: 'StripePaymentMethodOptionsCardMandateOptions';
  amount: Scalars['Int'];
  amountType: StripePaymentMethodOptionsCardMandateOptionsAmountType;
  description?: Maybe<Scalars['String']>;
  endDate?: Maybe<Scalars['Int']>;
  interval: StripePaymentMethodOptionsCardMandateOptionsInterval;
  intervalCount?: Maybe<Scalars['Int']>;
  reference: Scalars['String'];
  startDate: Scalars['Int'];
  supportedTypes?: Maybe<Array<StripePaymentMethodOptionsCardMandateOptionsSupportedTypes>>;
};

export enum StripePaymentMethodOptionsCardMandateOptionsAmountType {
  Fixed = 'FIXED',
  Maximum = 'MAXIMUM'
}

export enum StripePaymentMethodOptionsCardMandateOptionsInterval {
  Day = 'DAY',
  Month = 'MONTH',
  Sporadic = 'SPORADIC',
  Week = 'WEEK',
  Year = 'YEAR'
}

export enum StripePaymentMethodOptionsCardMandateOptionsSupportedTypes {
  India = 'INDIA'
}

export type StripePaymentMethodOptionsCardPresent = {
  __typename?: 'StripePaymentMethodOptionsCardPresent';
  requestExtendedAuthorization?: Maybe<Scalars['Boolean']>;
  requestIncrementalAuthorizationSupport?: Maybe<Scalars['Boolean']>;
};

export type StripePaymentMethodOptionsCashapp = {
  __typename?: 'StripePaymentMethodOptionsCashapp';
  captureMethod?: Maybe<StripePaymentMethodOptionsCashappCaptureMethod>;
  setupFutureUsage?: Maybe<StripePaymentMethodOptionsCashappSetupFutureUsage>;
};

export enum StripePaymentMethodOptionsCashappCaptureMethod {
  Manual = 'MANUAL'
}

export enum StripePaymentMethodOptionsCashappSetupFutureUsage {
  None = 'NONE',
  OffSession = 'OFF_SESSION',
  OnSession = 'ON_SESSION'
}

export type StripePaymentMethodOptionsCustomerBalance = {
  __typename?: 'StripePaymentMethodOptionsCustomerBalance';
  bankTransfer?: Maybe<StripePaymentMethodOptionsCustomerBalanceBankTransfer>;
  fundingType?: Maybe<StripePaymentMethodOptionsCustomerBalanceFundingType>;
  setupFutureUsage?: Maybe<StripePaymentMethodOptionsCustomerBalanceSetupFutureUsage>;
};

export type StripePaymentMethodOptionsCustomerBalanceBankTransfer = {
  __typename?: 'StripePaymentMethodOptionsCustomerBalanceBankTransfer';
  euBankTransfer?: Maybe<StripePaymentMethodOptionsCustomerBalanceEuBankAccount>;
  requestedAddressTypes?: Maybe<Array<StripePaymentMethodOptionsCustomerBalanceBankTransferRequestedAddressTypes>>;
  type?: Maybe<StripePaymentMethodOptionsCustomerBalanceBankTransferType>;
};

export enum StripePaymentMethodOptionsCustomerBalanceBankTransferRequestedAddressTypes {
  Iban = 'IBAN',
  Sepa = 'SEPA',
  SortCode = 'SORT_CODE',
  Spei = 'SPEI',
  Zengin = 'ZENGIN'
}

export enum StripePaymentMethodOptionsCustomerBalanceBankTransferType {
  EuBankTransfer = 'EU_BANK_TRANSFER',
  GbBankTransfer = 'GB_BANK_TRANSFER',
  JpBankTransfer = 'JP_BANK_TRANSFER',
  MxBankTransfer = 'MX_BANK_TRANSFER'
}

export type StripePaymentMethodOptionsCustomerBalanceEuBankAccount = {
  __typename?: 'StripePaymentMethodOptionsCustomerBalanceEuBankAccount';
  country: StripePaymentMethodOptionsCustomerBalanceEuBankAccountCountry;
};

export enum StripePaymentMethodOptionsCustomerBalanceEuBankAccountCountry {
  Be = 'BE',
  De = 'DE',
  Es = 'ES',
  Fr = 'FR',
  Ie = 'IE',
  Nl = 'NL'
}

export enum StripePaymentMethodOptionsCustomerBalanceFundingType {
  BankTransfer = 'BANK_TRANSFER'
}

export enum StripePaymentMethodOptionsCustomerBalanceSetupFutureUsage {
  None = 'NONE'
}

export type StripePaymentMethodOptionsFpx = {
  __typename?: 'StripePaymentMethodOptionsFpx';
  setupFutureUsage?: Maybe<StripePaymentMethodOptionsFpxSetupFutureUsage>;
};

export enum StripePaymentMethodOptionsFpxSetupFutureUsage {
  None = 'NONE'
}

export type StripePaymentMethodOptionsGiropay = {
  __typename?: 'StripePaymentMethodOptionsGiropay';
  setupFutureUsage?: Maybe<StripePaymentMethodOptionsGiropaySetupFutureUsage>;
};

export enum StripePaymentMethodOptionsGiropaySetupFutureUsage {
  None = 'NONE'
}

export type StripePaymentMethodOptionsGrabpay = {
  __typename?: 'StripePaymentMethodOptionsGrabpay';
  setupFutureUsage?: Maybe<StripePaymentMethodOptionsGrabpaySetupFutureUsage>;
};

export enum StripePaymentMethodOptionsGrabpaySetupFutureUsage {
  None = 'NONE'
}

export type StripePaymentMethodOptionsIdeal = {
  __typename?: 'StripePaymentMethodOptionsIdeal';
  setupFutureUsage?: Maybe<StripePaymentMethodOptionsIdealSetupFutureUsage>;
};

export enum StripePaymentMethodOptionsIdealSetupFutureUsage {
  None = 'NONE',
  OffSession = 'OFF_SESSION'
}

export type StripePaymentMethodOptionsKlarna = {
  __typename?: 'StripePaymentMethodOptionsKlarna';
  captureMethod?: Maybe<StripePaymentMethodOptionsKlarnaCaptureMethod>;
  preferredLocale?: Maybe<Scalars['String']>;
  setupFutureUsage?: Maybe<StripePaymentMethodOptionsKlarnaSetupFutureUsage>;
};

export enum StripePaymentMethodOptionsKlarnaCaptureMethod {
  Manual = 'MANUAL'
}

export enum StripePaymentMethodOptionsKlarnaSetupFutureUsage {
  None = 'NONE'
}

export type StripePaymentMethodOptionsKonbini = {
  __typename?: 'StripePaymentMethodOptionsKonbini';
  confirmationNumber?: Maybe<Scalars['String']>;
  expiresAfterDays?: Maybe<Scalars['Int']>;
  expiresAt?: Maybe<Scalars['Int']>;
  productDescription?: Maybe<Scalars['String']>;
  setupFutureUsage?: Maybe<StripePaymentMethodOptionsKonbiniSetupFutureUsage>;
};

export enum StripePaymentMethodOptionsKonbiniSetupFutureUsage {
  None = 'NONE'
}

export type StripePaymentMethodOptionsOxxo = {
  __typename?: 'StripePaymentMethodOptionsOxxo';
  expiresAfterDays: Scalars['Int'];
  setupFutureUsage?: Maybe<StripePaymentMethodOptionsOxxoSetupFutureUsage>;
};

export enum StripePaymentMethodOptionsOxxoSetupFutureUsage {
  None = 'NONE'
}

export type StripePaymentMethodOptionsP24 = {
  __typename?: 'StripePaymentMethodOptionsP24';
  setupFutureUsage?: Maybe<StripePaymentMethodOptionsP24SetupFutureUsage>;
};

export enum StripePaymentMethodOptionsP24SetupFutureUsage {
  None = 'NONE'
}

export type StripePaymentMethodOptionsPaynow = {
  __typename?: 'StripePaymentMethodOptionsPaynow';
  setupFutureUsage?: Maybe<StripePaymentMethodOptionsPaynowSetupFutureUsage>;
};

export enum StripePaymentMethodOptionsPaynowSetupFutureUsage {
  None = 'NONE'
}

export type StripePaymentMethodOptionsPaypal = {
  __typename?: 'StripePaymentMethodOptionsPaypal';
  captureMethod?: Maybe<StripePaymentMethodOptionsPaypalCaptureMethod>;
  preferredLocale?: Maybe<Scalars['String']>;
  reference?: Maybe<Scalars['String']>;
  setupFutureUsage?: Maybe<StripePaymentMethodOptionsPaypalSetupFutureUsage>;
};

export enum StripePaymentMethodOptionsPaypalCaptureMethod {
  Manual = 'MANUAL'
}

export enum StripePaymentMethodOptionsPaypalSetupFutureUsage {
  None = 'NONE',
  OffSession = 'OFF_SESSION'
}

export type StripePaymentMethodOptionsPix = {
  __typename?: 'StripePaymentMethodOptionsPix';
  expiresAfterSeconds?: Maybe<Scalars['Int']>;
  expiresAt?: Maybe<Scalars['Int']>;
  setupFutureUsage?: Maybe<StripePaymentMethodOptionsPixSetupFutureUsage>;
};

export enum StripePaymentMethodOptionsPixSetupFutureUsage {
  None = 'NONE'
}

export type StripePaymentMethodOptionsPromptpay = {
  __typename?: 'StripePaymentMethodOptionsPromptpay';
  setupFutureUsage?: Maybe<StripePaymentMethodOptionsPromptpaySetupFutureUsage>;
};

export enum StripePaymentMethodOptionsPromptpaySetupFutureUsage {
  None = 'NONE'
}

export type StripePaymentMethodOptionsSofort = {
  __typename?: 'StripePaymentMethodOptionsSofort';
  preferredLanguage?: Maybe<StripePaymentMethodOptionsSofortPreferredLanguage>;
  setupFutureUsage?: Maybe<StripePaymentMethodOptionsSofortSetupFutureUsage>;
};

export enum StripePaymentMethodOptionsSofortPreferredLanguage {
  De = 'DE',
  En = 'EN',
  Es = 'ES',
  Fr = 'FR',
  It = 'IT',
  Nl = 'NL',
  Pl = 'PL'
}

export enum StripePaymentMethodOptionsSofortSetupFutureUsage {
  None = 'NONE',
  OffSession = 'OFF_SESSION'
}

export type StripePaymentMethodOptionsWechatPay = {
  __typename?: 'StripePaymentMethodOptionsWechatPay';
  appId?: Maybe<Scalars['String']>;
  client?: Maybe<StripePaymentMethodOptionsWechatPayClient>;
  setupFutureUsage?: Maybe<StripePaymentMethodOptionsWechatPaySetupFutureUsage>;
};

export enum StripePaymentMethodOptionsWechatPayClient {
  Android = 'ANDROID',
  Ios = 'IOS',
  Web = 'WEB'
}

export enum StripePaymentMethodOptionsWechatPaySetupFutureUsage {
  None = 'NONE'
}

export type StripePaymentMethodP24 = {
  __typename?: 'StripePaymentMethodP24';
  bank?: Maybe<StripePaymentMethodP24Bank>;
};

export enum StripePaymentMethodP24Bank {
  AliorBank = 'ALIOR_BANK',
  BankiSpbdzielcze = 'BANKI_SPBDZIELCZE',
  BankMillennium = 'BANK_MILLENNIUM',
  BankNowyBfgSa = 'BANK_NOWY_BFG_SA',
  BankPekaoSa = 'BANK_PEKAO_SA',
  Blik = 'BLIK',
  BnpParibas = 'BNP_PARIBAS',
  Boz = 'BOZ',
  CitiHandlowy = 'CITI_HANDLOWY',
  CreditAgricole = 'CREDIT_AGRICOLE',
  Envelobank = 'ENVELOBANK',
  EtransferPocztowy_24 = 'ETRANSFER_POCZTOWY_24',
  GetinBank = 'GETIN_BANK',
  Ideabank = 'IDEABANK',
  Ing = 'ING',
  Inteligo = 'INTELIGO',
  MbankMtransfer = 'MBANK_MTRANSFER',
  NestPrzelew = 'NEST_PRZELEW',
  NoblePay = 'NOBLE_PAY',
  PbacZIpko = 'PBAC_Z_IPKO',
  PlusBank = 'PLUS_BANK',
  SantanderPrzelew_24 = 'SANTANDER_PRZELEW_24',
  TmobileUsbugiBankowe = 'TMOBILE_USBUGI_BANKOWE',
  ToyotaBank = 'TOYOTA_BANK',
  VolkswagenBank = 'VOLKSWAGEN_BANK'
}

export type StripePaymentMethodPaypal = {
  __typename?: 'StripePaymentMethodPaypal';
  payerId?: Maybe<Scalars['String']>;
};

export type StripePaymentMethodSepaDebit = {
  __typename?: 'StripePaymentMethodSepaDebit';
  bankCode?: Maybe<Scalars['String']>;
  branchCode?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  fingerprint?: Maybe<Scalars['String']>;
  generatedFrom?: Maybe<StripeSepaDebitGeneratedFrom>;
  last4?: Maybe<Scalars['String']>;
};

export type StripePaymentMethodSofort = {
  __typename?: 'StripePaymentMethodSofort';
  country?: Maybe<Scalars['String']>;
};

export enum StripePaymentMethodType {
  AcssDebit = 'ACSS_DEBIT',
  Affirm = 'AFFIRM',
  AfterpayClearpay = 'AFTERPAY_CLEARPAY',
  Alipay = 'ALIPAY',
  AuBecsDebit = 'AU_BECS_DEBIT',
  BacsDebit = 'BACS_DEBIT',
  Bancontact = 'BANCONTACT',
  Blik = 'BLIK',
  Boleto = 'BOLETO',
  Card = 'CARD',
  CardPresent = 'CARD_PRESENT',
  Cashapp = 'CASHAPP',
  CustomerBalance = 'CUSTOMER_BALANCE',
  Eps = 'EPS',
  Fpx = 'FPX',
  Giropay = 'GIROPAY',
  Grabpay = 'GRABPAY',
  Ideal = 'IDEAL',
  InteracPresent = 'INTERAC_PRESENT',
  Klarna = 'KLARNA',
  Konbini = 'KONBINI',
  Link = 'LINK',
  Oxxo = 'OXXO',
  Paynow = 'PAYNOW',
  Paypal = 'PAYPAL',
  Pix = 'PIX',
  Promptpay = 'PROMPTPAY',
  P_24 = 'P_24',
  SepaDebit = 'SEPA_DEBIT',
  Sofort = 'SOFORT',
  UsBankAccount = 'US_BANK_ACCOUNT',
  WechatPay = 'WECHAT_PAY'
}

export type StripePaymentMethodUsBankAccount = {
  __typename?: 'StripePaymentMethodUsBankAccount';
  accountHolderType?: Maybe<StripePaymentMethodUsBankAccountAccountHolderType>;
  accountType?: Maybe<StripePaymentMethodUsBankAccountAccountType>;
  bankName?: Maybe<Scalars['String']>;
  financialConnectionsAccount?: Maybe<Scalars['String']>;
  fingerprint?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  networks?: Maybe<StripeUsBankAccountNetworks>;
  routingNumber?: Maybe<Scalars['String']>;
  statusDetails?: Maybe<StripePaymentMethodUsBankAccountStatusDetails>;
};

export enum StripePaymentMethodUsBankAccountAccountHolderType {
  Company = 'COMPANY',
  Individual = 'INDIVIDUAL'
}

export enum StripePaymentMethodUsBankAccountAccountType {
  Checking = 'CHECKING',
  Savings = 'SAVINGS'
}

export type StripePaymentMethodUsBankAccountBlocked = {
  __typename?: 'StripePaymentMethodUsBankAccountBlocked';
  networkCode?: Maybe<StripePaymentMethodUsBankAccountBlockedNetworkCode>;
  reason?: Maybe<StripePaymentMethodUsBankAccountBlockedReason>;
};

export enum StripePaymentMethodUsBankAccountBlockedNetworkCode {
  R02 = 'R02',
  R03 = 'R03',
  R04 = 'R04',
  R05 = 'R05',
  R07 = 'R07',
  R08 = 'R08',
  R10 = 'R10',
  R11 = 'R11',
  R16 = 'R16',
  R20 = 'R20',
  R29 = 'R29',
  R31 = 'R31'
}

export enum StripePaymentMethodUsBankAccountBlockedReason {
  BankAccountClosed = 'BANK_ACCOUNT_CLOSED',
  BankAccountFrozen = 'BANK_ACCOUNT_FROZEN',
  BankAccountInvalidDetails = 'BANK_ACCOUNT_INVALID_DETAILS',
  BankAccountRestricted = 'BANK_ACCOUNT_RESTRICTED',
  BankAccountUnusable = 'BANK_ACCOUNT_UNUSABLE',
  DebitNotAuthorized = 'DEBIT_NOT_AUTHORIZED'
}

export type StripePaymentMethodUsBankAccountStatusDetails = {
  __typename?: 'StripePaymentMethodUsBankAccountStatusDetails';
  blocked?: Maybe<StripePaymentMethodUsBankAccountBlocked>;
};

export type StripePaymentPagesCheckoutSessionAfterExpiration = {
  __typename?: 'StripePaymentPagesCheckoutSessionAfterExpiration';
  recovery?: Maybe<StripePaymentPagesCheckoutSessionAfterExpirationRecovery>;
};

export type StripePaymentPagesCheckoutSessionAfterExpirationRecovery = {
  __typename?: 'StripePaymentPagesCheckoutSessionAfterExpirationRecovery';
  allowPromotionCodes: Scalars['Boolean'];
  enabled: Scalars['Boolean'];
  expiresAt?: Maybe<Scalars['Int']>;
  url?: Maybe<Scalars['String']>;
};

export type StripePaymentPagesCheckoutSessionAutomaticTax = {
  __typename?: 'StripePaymentPagesCheckoutSessionAutomaticTax';
  enabled: Scalars['Boolean'];
  status?: Maybe<StripePaymentPagesCheckoutSessionAutomaticTaxStatus>;
};

export enum StripePaymentPagesCheckoutSessionAutomaticTaxStatus {
  Complete = 'COMPLETE',
  Failed = 'FAILED',
  RequiresLocationInputs = 'REQUIRES_LOCATION_INPUTS'
}

export type StripePaymentPagesCheckoutSessionConsent = {
  __typename?: 'StripePaymentPagesCheckoutSessionConsent';
  promotions?: Maybe<StripePaymentPagesCheckoutSessionConsentPromotions>;
  termsOfService?: Maybe<StripePaymentPagesCheckoutSessionConsentTermsOfService>;
};

export type StripePaymentPagesCheckoutSessionConsentCollection = {
  __typename?: 'StripePaymentPagesCheckoutSessionConsentCollection';
  promotions?: Maybe<StripePaymentPagesCheckoutSessionConsentCollectionPromotions>;
  termsOfService?: Maybe<StripePaymentPagesCheckoutSessionConsentCollectionTermsOfService>;
};

export enum StripePaymentPagesCheckoutSessionConsentCollectionPromotions {
  Auto = 'AUTO',
  None = 'NONE'
}

export enum StripePaymentPagesCheckoutSessionConsentCollectionTermsOfService {
  None = 'NONE',
  Required = 'REQUIRED'
}

export enum StripePaymentPagesCheckoutSessionConsentPromotions {
  OptIn = 'OPT_IN',
  OptOut = 'OPT_OUT'
}

export enum StripePaymentPagesCheckoutSessionConsentTermsOfService {
  Accepted = 'ACCEPTED'
}

export type StripePaymentPagesCheckoutSessionCurrencyConversion = {
  __typename?: 'StripePaymentPagesCheckoutSessionCurrencyConversion';
  amountSubtotal: Scalars['Int'];
  amountTotal: Scalars['Int'];
  fxRate: Scalars['String'];
  sourceCurrency: Scalars['String'];
};

export type StripePaymentPagesCheckoutSessionCustomFields = {
  __typename?: 'StripePaymentPagesCheckoutSessionCustomFields';
  dropdown?: Maybe<StripePaymentPagesCheckoutSessionCustomFieldsDropdown>;
  key: Scalars['String'];
  label: StripePaymentPagesCheckoutSessionCustomFieldsLabel;
  numeric?: Maybe<StripePaymentPagesCheckoutSessionCustomFieldsNumeric>;
  optional: Scalars['Boolean'];
  text?: Maybe<StripePaymentPagesCheckoutSessionCustomFieldsText>;
  type: StripePaymentPagesCheckoutSessionCustomFieldsType;
};

export type StripePaymentPagesCheckoutSessionCustomFieldsDropdown = {
  __typename?: 'StripePaymentPagesCheckoutSessionCustomFieldsDropdown';
  options: Array<StripePaymentPagesCheckoutSessionCustomFieldsOption>;
  value?: Maybe<Scalars['String']>;
};

export type StripePaymentPagesCheckoutSessionCustomFieldsLabel = {
  __typename?: 'StripePaymentPagesCheckoutSessionCustomFieldsLabel';
  custom?: Maybe<Scalars['String']>;
  type: StripePaymentPagesCheckoutSessionCustomFieldsLabelType;
};

export enum StripePaymentPagesCheckoutSessionCustomFieldsLabelType {
  Custom = 'CUSTOM'
}

export type StripePaymentPagesCheckoutSessionCustomFieldsNumeric = {
  __typename?: 'StripePaymentPagesCheckoutSessionCustomFieldsNumeric';
  value?: Maybe<Scalars['String']>;
};

export type StripePaymentPagesCheckoutSessionCustomFieldsOption = {
  __typename?: 'StripePaymentPagesCheckoutSessionCustomFieldsOption';
  label: Scalars['String'];
  value: Scalars['String'];
};

export type StripePaymentPagesCheckoutSessionCustomFieldsText = {
  __typename?: 'StripePaymentPagesCheckoutSessionCustomFieldsText';
  value?: Maybe<Scalars['String']>;
};

export enum StripePaymentPagesCheckoutSessionCustomFieldsType {
  Dropdown = 'DROPDOWN',
  Numeric = 'NUMERIC',
  Text = 'TEXT'
}

export type StripePaymentPagesCheckoutSessionCustomText = {
  __typename?: 'StripePaymentPagesCheckoutSessionCustomText';
  shippingAddress?: Maybe<StripePaymentPagesCheckoutSessionCustomTextPosition>;
  submit?: Maybe<StripePaymentPagesCheckoutSessionCustomTextPosition>;
};

export type StripePaymentPagesCheckoutSessionCustomTextPosition = {
  __typename?: 'StripePaymentPagesCheckoutSessionCustomTextPosition';
  message: Scalars['String'];
};

export type StripePaymentPagesCheckoutSessionCustomerDetails = {
  __typename?: 'StripePaymentPagesCheckoutSessionCustomerDetails';
  address?: Maybe<StripeAddress>;
  email?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  taxExempt?: Maybe<StripePaymentPagesCheckoutSessionCustomerDetailsTaxExempt>;
  taxIds?: Maybe<Array<StripePaymentPagesCheckoutSessionTaxId>>;
};

export enum StripePaymentPagesCheckoutSessionCustomerDetailsTaxExempt {
  Exempt = 'EXEMPT',
  None = 'NONE',
  Reverse = 'REVERSE'
}

export type StripePaymentPagesCheckoutSessionInvoiceCreation = {
  __typename?: 'StripePaymentPagesCheckoutSessionInvoiceCreation';
  enabled: Scalars['Boolean'];
  invoiceData: StripePaymentPagesCheckoutSessionInvoiceSettings;
};

export type StripePaymentPagesCheckoutSessionInvoiceSettings = {
  __typename?: 'StripePaymentPagesCheckoutSessionInvoiceSettings';
  accountTaxIds?: Maybe<Array<StripeStringOrDeletedTaxIdOrTaxIdUnion>>;
  customFields?: Maybe<Array<StripeInvoiceSettingCustomField>>;
  description?: Maybe<Scalars['String']>;
  footer?: Maybe<Scalars['String']>;
  metadata?: Maybe<Scalars['JSON']>;
  renderingOptions?: Maybe<StripeInvoiceSettingRenderingOptions>;
};

export type StripePaymentPagesCheckoutSessionPhoneNumberCollection = {
  __typename?: 'StripePaymentPagesCheckoutSessionPhoneNumberCollection';
  enabled: Scalars['Boolean'];
};

export type StripePaymentPagesCheckoutSessionShippingAddressCollection = {
  __typename?: 'StripePaymentPagesCheckoutSessionShippingAddressCollection';
  allowedCountries: Array<StripePaymentPagesCheckoutSessionShippingAddressCollectionAllowedCountries>;
};

export enum StripePaymentPagesCheckoutSessionShippingAddressCollectionAllowedCountries {
  Ac = 'AC',
  Ad = 'AD',
  Ae = 'AE',
  Af = 'AF',
  Ag = 'AG',
  Ai = 'AI',
  Al = 'AL',
  Am = 'AM',
  Ao = 'AO',
  Aq = 'AQ',
  Ar = 'AR',
  At = 'AT',
  Au = 'AU',
  Aw = 'AW',
  Ax = 'AX',
  Az = 'AZ',
  Ba = 'BA',
  Bb = 'BB',
  Bd = 'BD',
  Be = 'BE',
  Bf = 'BF',
  Bg = 'BG',
  Bh = 'BH',
  Bi = 'BI',
  Bj = 'BJ',
  Bl = 'BL',
  Bm = 'BM',
  Bn = 'BN',
  Bo = 'BO',
  Bq = 'BQ',
  Br = 'BR',
  Bs = 'BS',
  Bt = 'BT',
  Bv = 'BV',
  Bw = 'BW',
  By = 'BY',
  Bz = 'BZ',
  Ca = 'CA',
  Cd = 'CD',
  Cf = 'CF',
  Cg = 'CG',
  Ch = 'CH',
  Ci = 'CI',
  Ck = 'CK',
  Cl = 'CL',
  Cm = 'CM',
  Cn = 'CN',
  Co = 'CO',
  Cr = 'CR',
  Cv = 'CV',
  Cw = 'CW',
  Cy = 'CY',
  Cz = 'CZ',
  De = 'DE',
  Dj = 'DJ',
  Dk = 'DK',
  Dm = 'DM',
  Do = 'DO',
  Dz = 'DZ',
  Ec = 'EC',
  Ee = 'EE',
  Eg = 'EG',
  Eh = 'EH',
  Er = 'ER',
  Es = 'ES',
  Et = 'ET',
  Fi = 'FI',
  Fj = 'FJ',
  Fk = 'FK',
  Fo = 'FO',
  Fr = 'FR',
  Ga = 'GA',
  Gb = 'GB',
  Gd = 'GD',
  Ge = 'GE',
  Gf = 'GF',
  Gg = 'GG',
  Gh = 'GH',
  Gi = 'GI',
  Gl = 'GL',
  Gm = 'GM',
  Gn = 'GN',
  Gp = 'GP',
  Gq = 'GQ',
  Gr = 'GR',
  Gs = 'GS',
  Gt = 'GT',
  Gu = 'GU',
  Gw = 'GW',
  Gy = 'GY',
  Hk = 'HK',
  Hn = 'HN',
  Hr = 'HR',
  Ht = 'HT',
  Hu = 'HU',
  Id = 'ID',
  Ie = 'IE',
  Il = 'IL',
  Im = 'IM',
  In = 'IN',
  Io = 'IO',
  Iq = 'IQ',
  Is = 'IS',
  It = 'IT',
  Je = 'JE',
  Jm = 'JM',
  Jo = 'JO',
  Jp = 'JP',
  Ke = 'KE',
  Kg = 'KG',
  Kh = 'KH',
  Ki = 'KI',
  Km = 'KM',
  Kn = 'KN',
  Kr = 'KR',
  Kw = 'KW',
  Ky = 'KY',
  Kz = 'KZ',
  La = 'LA',
  Lb = 'LB',
  Lc = 'LC',
  Li = 'LI',
  Lk = 'LK',
  Lr = 'LR',
  Ls = 'LS',
  Lt = 'LT',
  Lu = 'LU',
  Lv = 'LV',
  Ly = 'LY',
  Ma = 'MA',
  Mc = 'MC',
  Md = 'MD',
  Me = 'ME',
  Mf = 'MF',
  Mg = 'MG',
  Mk = 'MK',
  Ml = 'ML',
  Mm = 'MM',
  Mn = 'MN',
  Mo = 'MO',
  Mq = 'MQ',
  Mr = 'MR',
  Ms = 'MS',
  Mt = 'MT',
  Mu = 'MU',
  Mv = 'MV',
  Mw = 'MW',
  Mx = 'MX',
  My = 'MY',
  Mz = 'MZ',
  Na = 'NA',
  Nc = 'NC',
  Ne = 'NE',
  Ng = 'NG',
  Ni = 'NI',
  Nl = 'NL',
  No = 'NO',
  Np = 'NP',
  Nr = 'NR',
  Nu = 'NU',
  Nz = 'NZ',
  Om = 'OM',
  Pa = 'PA',
  Pe = 'PE',
  Pf = 'PF',
  Pg = 'PG',
  Ph = 'PH',
  Pk = 'PK',
  Pl = 'PL',
  Pm = 'PM',
  Pn = 'PN',
  Pr = 'PR',
  Ps = 'PS',
  Pt = 'PT',
  Py = 'PY',
  Qa = 'QA',
  Re = 'RE',
  Ro = 'RO',
  Rs = 'RS',
  Ru = 'RU',
  Rw = 'RW',
  Sa = 'SA',
  Sb = 'SB',
  Sc = 'SC',
  Se = 'SE',
  Sg = 'SG',
  Sh = 'SH',
  Si = 'SI',
  Sj = 'SJ',
  Sk = 'SK',
  Sl = 'SL',
  Sm = 'SM',
  Sn = 'SN',
  So = 'SO',
  Sr = 'SR',
  Ss = 'SS',
  St = 'ST',
  Sv = 'SV',
  Sx = 'SX',
  Sz = 'SZ',
  Ta = 'TA',
  Tc = 'TC',
  Td = 'TD',
  Tf = 'TF',
  Tg = 'TG',
  Th = 'TH',
  Tj = 'TJ',
  Tk = 'TK',
  Tl = 'TL',
  Tm = 'TM',
  Tn = 'TN',
  To = 'TO',
  Tr = 'TR',
  Tt = 'TT',
  Tv = 'TV',
  Tw = 'TW',
  Tz = 'TZ',
  Ua = 'UA',
  Ug = 'UG',
  Us = 'US',
  Uy = 'UY',
  Uz = 'UZ',
  Va = 'VA',
  Vc = 'VC',
  Ve = 'VE',
  Vg = 'VG',
  Vn = 'VN',
  Vu = 'VU',
  Wf = 'WF',
  Ws = 'WS',
  Xk = 'XK',
  Ye = 'YE',
  Yt = 'YT',
  Za = 'ZA',
  Zm = 'ZM',
  Zw = 'ZW',
  Zz = 'ZZ'
}

export type StripePaymentPagesCheckoutSessionShippingCost = {
  __typename?: 'StripePaymentPagesCheckoutSessionShippingCost';
  amountSubtotal: Scalars['Int'];
  amountTax: Scalars['Int'];
  amountTotal: Scalars['Int'];
  shippingRate?: Maybe<StripeStringOrShippingRateUnion>;
  taxes?: Maybe<Array<StripeLineItemsTaxAmount>>;
};

export type StripePaymentPagesCheckoutSessionShippingOption = {
  __typename?: 'StripePaymentPagesCheckoutSessionShippingOption';
  shippingAmount: Scalars['Int'];
  shippingRate: StripeStringOrShippingRateUnion;
};

export type StripePaymentPagesCheckoutSessionTaxId = {
  __typename?: 'StripePaymentPagesCheckoutSessionTaxId';
  type: StripePaymentPagesCheckoutSessionTaxIdType;
  value?: Maybe<Scalars['String']>;
};

export type StripePaymentPagesCheckoutSessionTaxIdCollection = {
  __typename?: 'StripePaymentPagesCheckoutSessionTaxIdCollection';
  enabled: Scalars['Boolean'];
};

export enum StripePaymentPagesCheckoutSessionTaxIdType {
  AeTrn = 'AE_TRN',
  AuAbn = 'AU_ABN',
  AuArn = 'AU_ARN',
  BgUic = 'BG_UIC',
  BrCnpj = 'BR_CNPJ',
  BrCpf = 'BR_CPF',
  CaBn = 'CA_BN',
  CaGstHst = 'CA_GST_HST',
  CaPstBc = 'CA_PST_BC',
  CaPstMb = 'CA_PST_MB',
  CaPstSk = 'CA_PST_SK',
  CaQst = 'CA_QST',
  ChVat = 'CH_VAT',
  ClTin = 'CL_TIN',
  EgTin = 'EG_TIN',
  EsCif = 'ES_CIF',
  EuOssVat = 'EU_OSS_VAT',
  EuVat = 'EU_VAT',
  GbVat = 'GB_VAT',
  GeVat = 'GE_VAT',
  HkBr = 'HK_BR',
  HuTin = 'HU_TIN',
  IdNpwp = 'ID_NPWP',
  IlVat = 'IL_VAT',
  InGst = 'IN_GST',
  IsVat = 'IS_VAT',
  JpCn = 'JP_CN',
  JpRn = 'JP_RN',
  JpTrn = 'JP_TRN',
  KePin = 'KE_PIN',
  KrBrn = 'KR_BRN',
  LiUid = 'LI_UID',
  MxRfc = 'MX_RFC',
  MyFrp = 'MY_FRP',
  MyItn = 'MY_ITN',
  MySst = 'MY_SST',
  NoVat = 'NO_VAT',
  NzGst = 'NZ_GST',
  PhTin = 'PH_TIN',
  RuInn = 'RU_INN',
  RuKpp = 'RU_KPP',
  SaVat = 'SA_VAT',
  SgGst = 'SG_GST',
  SgUen = 'SG_UEN',
  SiTin = 'SI_TIN',
  ThVat = 'TH_VAT',
  TrTin = 'TR_TIN',
  TwVat = 'TW_VAT',
  UaVat = 'UA_VAT',
  Unknown = 'UNKNOWN',
  UsEin = 'US_EIN',
  ZaVat = 'ZA_VAT'
}

export type StripePaymentPagesCheckoutSessionTotalDetails = {
  __typename?: 'StripePaymentPagesCheckoutSessionTotalDetails';
  amountDiscount: Scalars['Int'];
  amountShipping?: Maybe<Scalars['Int']>;
  amountTax: Scalars['Int'];
  breakdown?: Maybe<StripePaymentPagesCheckoutSessionTotalDetailsResourceBreakdown>;
};

export type StripePaymentPagesCheckoutSessionTotalDetailsResourceBreakdown = {
  __typename?: 'StripePaymentPagesCheckoutSessionTotalDetailsResourceBreakdown';
  discounts: Array<StripeLineItemsDiscountAmount>;
  taxes: Array<StripeLineItemsTaxAmount>;
};

export type StripePaymentSource = StripeAccount | StripeBankAccount | StripeCard | StripeSource;

export type StripePayout = {
  __typename?: 'StripePayout';
  amount: Scalars['Int'];
  arrivalDate: Scalars['Int'];
  automatic: Scalars['Boolean'];
  balanceTransaction?: Maybe<StripeStringOrBalanceTransactionUnion>;
  created: Scalars['Int'];
  currency: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  destination?: Maybe<StripeStringOrDeletedCardOrDeletedBankAccountOrCardOrBankAccountUnion>;
  failureBalanceTransaction?: Maybe<StripeStringOrBalanceTransactionUnion>;
  failureCode?: Maybe<Scalars['String']>;
  failureMessage?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  metadata?: Maybe<Scalars['JSON']>;
  method: Scalars['String'];
  object: StripePayoutObject;
  originalPayout?: Maybe<StripeStringOrPayoutUnion>;
  reconciliationStatus: StripePayoutReconciliationStatus;
  reversedBy?: Maybe<StripeStringOrPayoutUnion>;
  sourceType: Scalars['String'];
  statementDescriptor?: Maybe<Scalars['String']>;
  status: Scalars['String'];
  type: StripePayoutType;
};

export enum StripePayoutObject {
  Payout = 'PAYOUT'
}

export enum StripePayoutReconciliationStatus {
  Completed = 'COMPLETED',
  InProgress = 'IN_PROGRESS',
  NotApplicable = 'NOT_APPLICABLE'
}

export enum StripePayoutType {
  BankAccount = 'BANK_ACCOUNT',
  Card = 'CARD'
}

export type StripePaypalSellerProtection = {
  __typename?: 'StripePaypalSellerProtection';
  disputeCategories?: Maybe<Array<StripePaypalSellerProtectionDisputeCategories>>;
  status: StripePaypalSellerProtectionStatus;
};

export enum StripePaypalSellerProtectionDisputeCategories {
  Fraudulent = 'FRAUDULENT',
  ProductNotReceived = 'PRODUCT_NOT_RECEIVED'
}

export enum StripePaypalSellerProtectionStatus {
  Eligible = 'ELIGIBLE',
  NotEligible = 'NOT_ELIGIBLE',
  PartiallyEligible = 'PARTIALLY_ELIGIBLE'
}

export type StripePeriod = {
  __typename?: 'StripePeriod';
  end?: Maybe<Scalars['Int']>;
  start?: Maybe<Scalars['Int']>;
};

export type StripePerson = {
  __typename?: 'StripePerson';
  account: Scalars['String'];
  address?: Maybe<StripeAddress>;
  addressKana?: Maybe<StripeLegalEntityJapanAddress>;
  addressKanji?: Maybe<StripeLegalEntityJapanAddress>;
  created: Scalars['Int'];
  dob?: Maybe<StripeLegalEntityDob>;
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  firstNameKana?: Maybe<Scalars['String']>;
  firstNameKanji?: Maybe<Scalars['String']>;
  fullNameAliases?: Maybe<Array<Scalars['String']>>;
  futureRequirements?: Maybe<StripePersonFutureRequirements>;
  gender?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  idNumberProvided?: Maybe<Scalars['Boolean']>;
  idNumberSecondaryProvided?: Maybe<Scalars['Boolean']>;
  lastName?: Maybe<Scalars['String']>;
  lastNameKana?: Maybe<Scalars['String']>;
  lastNameKanji?: Maybe<Scalars['String']>;
  maidenName?: Maybe<Scalars['String']>;
  metadata?: Maybe<Scalars['JSON']>;
  nationality?: Maybe<Scalars['String']>;
  object: StripePersonObject;
  phone?: Maybe<Scalars['String']>;
  politicalExposure?: Maybe<StripePersonPoliticalExposure>;
  registeredAddress?: Maybe<StripeAddress>;
  relationship?: Maybe<StripePersonRelationship>;
  requirements?: Maybe<StripePersonRequirements>;
  ssnLast4Provided?: Maybe<Scalars['Boolean']>;
  verification?: Maybe<StripeLegalEntityPersonVerification>;
};

export type StripePersonFutureRequirements = {
  __typename?: 'StripePersonFutureRequirements';
  alternatives?: Maybe<Array<StripeAccountRequirementsAlternative>>;
  currentlyDue: Array<Scalars['String']>;
  errors: Array<StripeAccountRequirementsError>;
  eventuallyDue: Array<Scalars['String']>;
  pastDue: Array<Scalars['String']>;
  pendingVerification: Array<Scalars['String']>;
};

export enum StripePersonObject {
  Person = 'PERSON'
}

export enum StripePersonPoliticalExposure {
  Existing = 'EXISTING',
  None = 'NONE'
}

export type StripePersonRelationship = {
  __typename?: 'StripePersonRelationship';
  director?: Maybe<Scalars['Boolean']>;
  executive?: Maybe<Scalars['Boolean']>;
  owner?: Maybe<Scalars['Boolean']>;
  percentOwnership?: Maybe<Scalars['Float']>;
  representative?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
};

export type StripePersonRequirements = {
  __typename?: 'StripePersonRequirements';
  alternatives?: Maybe<Array<StripeAccountRequirementsAlternative>>;
  currentlyDue: Array<Scalars['String']>;
  errors: Array<StripeAccountRequirementsError>;
  eventuallyDue: Array<Scalars['String']>;
  pastDue: Array<Scalars['String']>;
  pendingVerification: Array<Scalars['String']>;
};

export type StripePlan = {
  __typename?: 'StripePlan';
  active: Scalars['Boolean'];
  aggregateUsage?: Maybe<StripePlanAggregateUsage>;
  amount?: Maybe<Scalars['Int']>;
  amountDecimal?: Maybe<Scalars['String']>;
  billingScheme: StripePlanBillingScheme;
  created: Scalars['Int'];
  currency: Scalars['String'];
  id: Scalars['String'];
  interval: StripePlanInterval;
  intervalCount: Scalars['Int'];
  livemode: Scalars['Boolean'];
  metadata?: Maybe<Scalars['JSON']>;
  nickname?: Maybe<Scalars['String']>;
  object: StripePlanObject;
  product?: Maybe<StripeStringOrDeletedProductOrProductUnion>;
  tiers?: Maybe<Array<StripePlanTier>>;
  tiersMode?: Maybe<StripePlanTiersMode>;
  transformUsage?: Maybe<StripeTransformUsage>;
  trialPeriodDays?: Maybe<Scalars['Int']>;
  usageType: StripePlanUsageType;
};

export enum StripePlanAggregateUsage {
  LastDuringPeriod = 'LAST_DURING_PERIOD',
  LastEver = 'LAST_EVER',
  Max = 'MAX',
  Sum = 'SUM'
}

export enum StripePlanBillingScheme {
  PerUnit = 'PER_UNIT',
  Tiered = 'TIERED'
}

export enum StripePlanInterval {
  Day = 'DAY',
  Month = 'MONTH',
  Week = 'WEEK',
  Year = 'YEAR'
}

export enum StripePlanObject {
  Plan = 'PLAN'
}

export type StripePlanTier = {
  __typename?: 'StripePlanTier';
  flatAmount?: Maybe<Scalars['Int']>;
  flatAmountDecimal?: Maybe<Scalars['String']>;
  unitAmount?: Maybe<Scalars['Int']>;
  unitAmountDecimal?: Maybe<Scalars['String']>;
  upTo?: Maybe<Scalars['Int']>;
};

export enum StripePlanTiersMode {
  Graduated = 'GRADUATED',
  Volume = 'VOLUME'
}

export enum StripePlanUsageType {
  Licensed = 'LICENSED',
  Metered = 'METERED'
}

export type StripePlatformTaxFee = {
  __typename?: 'StripePlatformTaxFee';
  account: Scalars['String'];
  id: Scalars['String'];
  object: StripePlatformTaxFeeObject;
  sourceTransaction: Scalars['String'];
  type: Scalars['String'];
};

export enum StripePlatformTaxFeeObject {
  PlatformTaxFee = 'PLATFORM_TAX_FEE'
}

export type StripePortalBusinessProfile = {
  __typename?: 'StripePortalBusinessProfile';
  headline?: Maybe<Scalars['String']>;
  privacyPolicyUrl?: Maybe<Scalars['String']>;
  termsOfServiceUrl?: Maybe<Scalars['String']>;
};

export type StripePortalCustomerUpdate = {
  __typename?: 'StripePortalCustomerUpdate';
  allowedUpdates: Array<StripePortalCustomerUpdateAllowedUpdates>;
  enabled: Scalars['Boolean'];
};

export enum StripePortalCustomerUpdateAllowedUpdates {
  Address = 'ADDRESS',
  Email = 'EMAIL',
  Name = 'NAME',
  Phone = 'PHONE',
  Shipping = 'SHIPPING',
  TaxId = 'TAX_ID'
}

export type StripePortalFeatures = {
  __typename?: 'StripePortalFeatures';
  customerUpdate: StripePortalCustomerUpdate;
  invoiceHistory: StripePortalInvoiceList;
  paymentMethodUpdate: StripePortalPaymentMethodUpdate;
  subscriptionCancel: StripePortalSubscriptionCancel;
  subscriptionPause: StripePortalSubscriptionPause;
  subscriptionUpdate: StripePortalSubscriptionUpdate;
};

export type StripePortalFlowsAfterCompletionHostedConfirmation = {
  __typename?: 'StripePortalFlowsAfterCompletionHostedConfirmation';
  customMessage?: Maybe<Scalars['String']>;
};

export type StripePortalFlowsAfterCompletionRedirect = {
  __typename?: 'StripePortalFlowsAfterCompletionRedirect';
  returnUrl: Scalars['String'];
};

export type StripePortalFlowsFlow = {
  __typename?: 'StripePortalFlowsFlow';
  afterCompletion: StripePortalFlowsFlowAfterCompletion;
  subscriptionCancel?: Maybe<StripePortalFlowsFlowSubscriptionCancel>;
  subscriptionUpdate?: Maybe<StripePortalFlowsFlowSubscriptionUpdate>;
  subscriptionUpdateConfirm?: Maybe<StripePortalFlowsFlowSubscriptionUpdateConfirm>;
  type: StripePortalFlowsFlowType;
};

export type StripePortalFlowsFlowAfterCompletion = {
  __typename?: 'StripePortalFlowsFlowAfterCompletion';
  hostedConfirmation?: Maybe<StripePortalFlowsAfterCompletionHostedConfirmation>;
  redirect?: Maybe<StripePortalFlowsAfterCompletionRedirect>;
  type: StripePortalFlowsFlowAfterCompletionType;
};

export enum StripePortalFlowsFlowAfterCompletionType {
  HostedConfirmation = 'HOSTED_CONFIRMATION',
  PortalHomepage = 'PORTAL_HOMEPAGE',
  Redirect = 'REDIRECT'
}

export type StripePortalFlowsFlowSubscriptionCancel = {
  __typename?: 'StripePortalFlowsFlowSubscriptionCancel';
  subscription: Scalars['String'];
};

export type StripePortalFlowsFlowSubscriptionUpdate = {
  __typename?: 'StripePortalFlowsFlowSubscriptionUpdate';
  subscription: Scalars['String'];
};

export type StripePortalFlowsFlowSubscriptionUpdateConfirm = {
  __typename?: 'StripePortalFlowsFlowSubscriptionUpdateConfirm';
  discounts?: Maybe<Array<StripePortalFlowsSubscriptionUpdateConfirmDiscount>>;
  items: Array<StripePortalFlowsSubscriptionUpdateConfirmItem>;
  subscription: Scalars['String'];
};

export enum StripePortalFlowsFlowType {
  PaymentMethodUpdate = 'PAYMENT_METHOD_UPDATE',
  SubscriptionCancel = 'SUBSCRIPTION_CANCEL',
  SubscriptionUpdate = 'SUBSCRIPTION_UPDATE',
  SubscriptionUpdateConfirm = 'SUBSCRIPTION_UPDATE_CONFIRM'
}

export type StripePortalFlowsSubscriptionUpdateConfirmDiscount = {
  __typename?: 'StripePortalFlowsSubscriptionUpdateConfirmDiscount';
  coupon?: Maybe<Scalars['String']>;
  promotionCode?: Maybe<Scalars['String']>;
};

export type StripePortalFlowsSubscriptionUpdateConfirmItem = {
  __typename?: 'StripePortalFlowsSubscriptionUpdateConfirmItem';
  id?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['Int']>;
};

export type StripePortalInvoiceList = {
  __typename?: 'StripePortalInvoiceList';
  enabled: Scalars['Boolean'];
};

export type StripePortalLoginPage = {
  __typename?: 'StripePortalLoginPage';
  enabled: Scalars['Boolean'];
  url?: Maybe<Scalars['String']>;
};

export type StripePortalPaymentMethodUpdate = {
  __typename?: 'StripePortalPaymentMethodUpdate';
  enabled: Scalars['Boolean'];
};

export type StripePortalSubscriptionCancel = {
  __typename?: 'StripePortalSubscriptionCancel';
  cancellationReason: StripePortalSubscriptionCancellationReason;
  enabled: Scalars['Boolean'];
  mode: StripePortalSubscriptionCancelMode;
  prorationBehavior: StripePortalSubscriptionCancelProrationBehavior;
};

export enum StripePortalSubscriptionCancelMode {
  AtPeriodEnd = 'AT_PERIOD_END',
  Immediately = 'IMMEDIATELY'
}

export enum StripePortalSubscriptionCancelProrationBehavior {
  AlwaysInvoice = 'ALWAYS_INVOICE',
  CreateProrations = 'CREATE_PRORATIONS',
  None = 'NONE'
}

export type StripePortalSubscriptionCancellationReason = {
  __typename?: 'StripePortalSubscriptionCancellationReason';
  enabled: Scalars['Boolean'];
  options: Array<StripePortalSubscriptionCancellationReasonOptions>;
};

export enum StripePortalSubscriptionCancellationReasonOptions {
  CustomerService = 'CUSTOMER_SERVICE',
  LowQuality = 'LOW_QUALITY',
  MissingFeatures = 'MISSING_FEATURES',
  Other = 'OTHER',
  SwitchedService = 'SWITCHED_SERVICE',
  TooComplex = 'TOO_COMPLEX',
  TooExpensive = 'TOO_EXPENSIVE',
  Unused = 'UNUSED'
}

export type StripePortalSubscriptionPause = {
  __typename?: 'StripePortalSubscriptionPause';
  enabled: Scalars['Boolean'];
};

export type StripePortalSubscriptionUpdate = {
  __typename?: 'StripePortalSubscriptionUpdate';
  defaultAllowedUpdates: Array<StripePortalSubscriptionUpdateDefaultAllowedUpdates>;
  enabled: Scalars['Boolean'];
  products?: Maybe<Array<StripePortalSubscriptionUpdateProduct>>;
  prorationBehavior: StripePortalSubscriptionUpdateProrationBehavior;
};

export enum StripePortalSubscriptionUpdateDefaultAllowedUpdates {
  Price = 'PRICE',
  PromotionCode = 'PROMOTION_CODE',
  Quantity = 'QUANTITY'
}

export type StripePortalSubscriptionUpdateProduct = {
  __typename?: 'StripePortalSubscriptionUpdateProduct';
  prices: Array<Scalars['String']>;
  product: Scalars['String'];
};

export enum StripePortalSubscriptionUpdateProrationBehavior {
  AlwaysInvoice = 'ALWAYS_INVOICE',
  CreateProrations = 'CREATE_PRORATIONS',
  None = 'NONE'
}

export enum StripePostAccountLinksCollect {
  CurrentlyDue = 'CURRENTLY_DUE',
  EventuallyDue = 'EVENTUALLY_DUE'
}

export type StripePostAccountLinksInput = {
  account: Scalars['String'];
  collect?: InputMaybe<StripePostAccountLinksCollect>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  refreshUrl?: InputMaybe<Scalars['String']>;
  returnUrl?: InputMaybe<Scalars['String']>;
  type: StripePostAccountLinksType;
};

export enum StripePostAccountLinksType {
  AccountOnboarding = 'ACCOUNT_ONBOARDING',
  AccountUpdate = 'ACCOUNT_UPDATE'
}

export type StripePostAccountsAccountAcssDebitPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsAccountAdditionalDocumentVerificationIndividualInput = {
  back?: InputMaybe<Scalars['String']>;
  front?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountAddressCompanyInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountAddressIndividualInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountAddressKanaCompanyInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
  town?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountAddressKanaIndividualInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
  town?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountAddressKanjiCompanyInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
  town?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountAddressKanjiIndividualInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
  town?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountAffirmPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsAccountAfterpayClearpayPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsAccountAuBecsDebitPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsAccountBacsDebitPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsAccountBancontactPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsAccountBankAccountOwnershipVerificationDocumentsInput = {
  files?: InputMaybe<Array<Scalars['String']>>;
};

export enum StripePostAccountsAccountBankAccountsAccountHolderTypeBankAccount {
  Company = 'COMPANY',
  Individual = 'INDIVIDUAL'
}

export enum StripePostAccountsAccountBankAccountsAccountTypeBankAccount {
  Checking = 'CHECKING',
  Futsu = 'FUTSU',
  Savings = 'SAVINGS',
  Toza = 'TOZA'
}

export type StripePostAccountsAccountBankAccountsBankAccountInput = {
  accountHolderName?: InputMaybe<Scalars['String']>;
  accountHolderType?: InputMaybe<StripePostAccountsAccountBankAccountsAccountHolderTypeBankAccount>;
  accountNumber: Scalars['String'];
  accountType?: InputMaybe<StripePostAccountsAccountBankAccountsAccountTypeBankAccount>;
  country: Scalars['String'];
  currency?: InputMaybe<Scalars['String']>;
  documents?: InputMaybe<StripePostAccountsAccountBankAccountsDocumentsBankAccountInput>;
  object?: InputMaybe<StripePostAccountsAccountBankAccountsObjectBankAccount>;
  routingNumber?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountBankAccountsBankAccountOwnershipVerificationDocumentsBankAccountInput = {
  files?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostAccountsAccountBankAccountsDocumentsBankAccountInput = {
  bankAccountOwnershipVerification?: InputMaybe<StripePostAccountsAccountBankAccountsBankAccountOwnershipVerificationDocumentsBankAccountInput>;
};

export enum StripePostAccountsAccountBankAccountsIdAccountType {
  Checking = 'CHECKING',
  Futsu = 'FUTSU',
  Savings = 'SAVINGS',
  Toza = 'TOZA'
}

export type StripePostAccountsAccountBankAccountsIdBankAccountOwnershipVerificationDocumentsInput = {
  files?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostAccountsAccountBankAccountsIdDocumentsInput = {
  bankAccountOwnershipVerification?: InputMaybe<StripePostAccountsAccountBankAccountsIdBankAccountOwnershipVerificationDocumentsInput>;
};

export type StripePostAccountsAccountBankAccountsIdInput = {
  accountHolderName?: InputMaybe<Scalars['String']>;
  accountHolderType?: InputMaybe<Scalars['String']>;
  accountType?: InputMaybe<StripePostAccountsAccountBankAccountsIdAccountType>;
  addressCity?: InputMaybe<Scalars['String']>;
  addressCountry?: InputMaybe<Scalars['String']>;
  addressLine1?: InputMaybe<Scalars['String']>;
  addressLine2?: InputMaybe<Scalars['String']>;
  addressState?: InputMaybe<Scalars['String']>;
  addressZip?: InputMaybe<Scalars['String']>;
  defaultForCurrency?: InputMaybe<Scalars['Boolean']>;
  documents?: InputMaybe<StripePostAccountsAccountBankAccountsIdDocumentsInput>;
  expMonth?: InputMaybe<Scalars['String']>;
  expYear?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  name?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountBankAccountsInput = {
  bankAccount?: InputMaybe<StripeStringOrPostAccountsAccountBankAccountsBankAccountUnionInput>;
  defaultForCurrency?: InputMaybe<Scalars['Boolean']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  externalAccount?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
};

export enum StripePostAccountsAccountBankAccountsObjectBankAccount {
  BankAccount = 'BANK_ACCOUNT'
}

export type StripePostAccountsAccountBankTransferPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsAccountBlikPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsAccountBoletoPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsAccountBrandingSettingsInput = {
  icon?: InputMaybe<Scalars['String']>;
  logo?: InputMaybe<Scalars['String']>;
  primaryColor?: InputMaybe<Scalars['String']>;
  secondaryColor?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountBusinessProfileInput = {
  mcc?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  productDescription?: InputMaybe<Scalars['String']>;
  supportAddress?: InputMaybe<StripePostAccountsAccountSupportAddressBusinessProfileInput>;
  supportEmail?: InputMaybe<Scalars['String']>;
  supportPhone?: InputMaybe<Scalars['String']>;
  supportUrl?: InputMaybe<Scalars['JSON']>;
  url?: InputMaybe<Scalars['String']>;
};

export enum StripePostAccountsAccountBusinessType {
  Company = 'COMPANY',
  GovernmentEntity = 'GOVERNMENT_ENTITY',
  Individual = 'INDIVIDUAL',
  NonProfit = 'NON_PROFIT'
}

export type StripePostAccountsAccountCapabilitiesCapabilityInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsAccountCapabilitiesInput = {
  acssDebitPayments?: InputMaybe<StripePostAccountsAccountAcssDebitPaymentsCapabilitiesInput>;
  affirmPayments?: InputMaybe<StripePostAccountsAccountAffirmPaymentsCapabilitiesInput>;
  afterpayClearpayPayments?: InputMaybe<StripePostAccountsAccountAfterpayClearpayPaymentsCapabilitiesInput>;
  auBecsDebitPayments?: InputMaybe<StripePostAccountsAccountAuBecsDebitPaymentsCapabilitiesInput>;
  bacsDebitPayments?: InputMaybe<StripePostAccountsAccountBacsDebitPaymentsCapabilitiesInput>;
  bancontactPayments?: InputMaybe<StripePostAccountsAccountBancontactPaymentsCapabilitiesInput>;
  bankTransferPayments?: InputMaybe<StripePostAccountsAccountBankTransferPaymentsCapabilitiesInput>;
  blikPayments?: InputMaybe<StripePostAccountsAccountBlikPaymentsCapabilitiesInput>;
  boletoPayments?: InputMaybe<StripePostAccountsAccountBoletoPaymentsCapabilitiesInput>;
  cardIssuing?: InputMaybe<StripePostAccountsAccountCardIssuingCapabilitiesInput>;
  cardPayments?: InputMaybe<StripePostAccountsAccountCardPaymentsCapabilitiesInput>;
  cartesBancairesPayments?: InputMaybe<StripePostAccountsAccountCartesBancairesPaymentsCapabilitiesInput>;
  cashappPayments?: InputMaybe<StripePostAccountsAccountCashappPaymentsCapabilitiesInput>;
  epsPayments?: InputMaybe<StripePostAccountsAccountEpsPaymentsCapabilitiesInput>;
  fpxPayments?: InputMaybe<StripePostAccountsAccountFpxPaymentsCapabilitiesInput>;
  giropayPayments?: InputMaybe<StripePostAccountsAccountGiropayPaymentsCapabilitiesInput>;
  grabpayPayments?: InputMaybe<StripePostAccountsAccountGrabpayPaymentsCapabilitiesInput>;
  idealPayments?: InputMaybe<StripePostAccountsAccountIdealPaymentsCapabilitiesInput>;
  indiaInternationalPayments?: InputMaybe<StripePostAccountsAccountIndiaInternationalPaymentsCapabilitiesInput>;
  jcbPayments?: InputMaybe<StripePostAccountsAccountJcbPaymentsCapabilitiesInput>;
  klarnaPayments?: InputMaybe<StripePostAccountsAccountKlarnaPaymentsCapabilitiesInput>;
  konbiniPayments?: InputMaybe<StripePostAccountsAccountKonbiniPaymentsCapabilitiesInput>;
  legacyPayments?: InputMaybe<StripePostAccountsAccountLegacyPaymentsCapabilitiesInput>;
  linkPayments?: InputMaybe<StripePostAccountsAccountLinkPaymentsCapabilitiesInput>;
  oxxoPayments?: InputMaybe<StripePostAccountsAccountOxxoPaymentsCapabilitiesInput>;
  p24Payments?: InputMaybe<StripePostAccountsAccountP24PaymentsCapabilitiesInput>;
  paynowPayments?: InputMaybe<StripePostAccountsAccountPaynowPaymentsCapabilitiesInput>;
  promptpayPayments?: InputMaybe<StripePostAccountsAccountPromptpayPaymentsCapabilitiesInput>;
  sepaDebitPayments?: InputMaybe<StripePostAccountsAccountSepaDebitPaymentsCapabilitiesInput>;
  sofortPayments?: InputMaybe<StripePostAccountsAccountSofortPaymentsCapabilitiesInput>;
  taxReportingUs1099K?: InputMaybe<StripePostAccountsAccountTaxReportingUs1099KCapabilitiesInput>;
  taxReportingUs1099Misc?: InputMaybe<StripePostAccountsAccountTaxReportingUs1099MiscCapabilitiesInput>;
  transfers?: InputMaybe<StripePostAccountsAccountTransfersCapabilitiesInput>;
  treasury?: InputMaybe<StripePostAccountsAccountTreasuryCapabilitiesInput>;
  usBankAccountAchPayments?: InputMaybe<StripePostAccountsAccountUsBankAccountAchPaymentsCapabilitiesInput>;
};

export type StripePostAccountsAccountCardIssuingCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsAccountCardIssuingSettingsInput = {
  tosAcceptance?: InputMaybe<StripePostAccountsAccountTosAcceptanceCardIssuingSettingsInput>;
};

export type StripePostAccountsAccountCardPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsAccountCardPaymentsSettingsInput = {
  declineOn?: InputMaybe<StripePostAccountsAccountDeclineOnCardPaymentsSettingsInput>;
  statementDescriptorPrefix?: InputMaybe<Scalars['String']>;
  statementDescriptorPrefixKana?: InputMaybe<Scalars['JSON']>;
  statementDescriptorPrefixKanji?: InputMaybe<Scalars['JSON']>;
};

export type StripePostAccountsAccountCartesBancairesPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsAccountCashappPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsAccountCompanyInput = {
  address?: InputMaybe<StripePostAccountsAccountAddressCompanyInput>;
  addressKana?: InputMaybe<StripePostAccountsAccountAddressKanaCompanyInput>;
  addressKanji?: InputMaybe<StripePostAccountsAccountAddressKanjiCompanyInput>;
  directorsProvided?: InputMaybe<Scalars['Boolean']>;
  executivesProvided?: InputMaybe<Scalars['Boolean']>;
  exportLicenseId?: InputMaybe<Scalars['String']>;
  exportPurposeCode?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  nameKana?: InputMaybe<Scalars['String']>;
  nameKanji?: InputMaybe<Scalars['String']>;
  ownersProvided?: InputMaybe<Scalars['Boolean']>;
  ownershipDeclaration?: InputMaybe<StripePostAccountsAccountOwnershipDeclarationCompanyInput>;
  phone?: InputMaybe<Scalars['String']>;
  registrationNumber?: InputMaybe<Scalars['String']>;
  structure?: InputMaybe<Scalars['String']>;
  taxId?: InputMaybe<Scalars['String']>;
  taxIdRegistrar?: InputMaybe<Scalars['String']>;
  vatId?: InputMaybe<Scalars['String']>;
  verification?: InputMaybe<StripePostAccountsAccountVerificationCompanyInput>;
};

export type StripePostAccountsAccountCompanyLicenseDocumentsInput = {
  files?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostAccountsAccountCompanyMemorandumOfAssociationDocumentsInput = {
  files?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostAccountsAccountCompanyMinisterialDecreeDocumentsInput = {
  files?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostAccountsAccountCompanyRegistrationVerificationDocumentsInput = {
  files?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostAccountsAccountCompanyTaxIdVerificationDocumentsInput = {
  files?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostAccountsAccountDeclineOnCardPaymentsSettingsInput = {
  avsFailure?: InputMaybe<Scalars['Boolean']>;
  cvcFailure?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsAccountDobIndividualInput = {
  day: Scalars['Int'];
  month: Scalars['Int'];
  year: Scalars['Int'];
};

export type StripePostAccountsAccountDocumentVerificationCompanyInput = {
  back?: InputMaybe<Scalars['String']>;
  front?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountDocumentVerificationIndividualInput = {
  back?: InputMaybe<Scalars['String']>;
  front?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountDocumentsInput = {
  bankAccountOwnershipVerification?: InputMaybe<StripePostAccountsAccountBankAccountOwnershipVerificationDocumentsInput>;
  companyLicense?: InputMaybe<StripePostAccountsAccountCompanyLicenseDocumentsInput>;
  companyMemorandumOfAssociation?: InputMaybe<StripePostAccountsAccountCompanyMemorandumOfAssociationDocumentsInput>;
  companyMinisterialDecree?: InputMaybe<StripePostAccountsAccountCompanyMinisterialDecreeDocumentsInput>;
  companyRegistrationVerification?: InputMaybe<StripePostAccountsAccountCompanyRegistrationVerificationDocumentsInput>;
  companyTaxIdVerification?: InputMaybe<StripePostAccountsAccountCompanyTaxIdVerificationDocumentsInput>;
  proofOfRegistration?: InputMaybe<StripePostAccountsAccountProofOfRegistrationDocumentsInput>;
};

export type StripePostAccountsAccountEpsPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export enum StripePostAccountsAccountExternalAccountsAccountHolderTypeBankAccount {
  Company = 'COMPANY',
  Individual = 'INDIVIDUAL'
}

export enum StripePostAccountsAccountExternalAccountsAccountTypeBankAccount {
  Checking = 'CHECKING',
  Futsu = 'FUTSU',
  Savings = 'SAVINGS',
  Toza = 'TOZA'
}

export type StripePostAccountsAccountExternalAccountsBankAccountInput = {
  accountHolderName?: InputMaybe<Scalars['String']>;
  accountHolderType?: InputMaybe<StripePostAccountsAccountExternalAccountsAccountHolderTypeBankAccount>;
  accountNumber: Scalars['String'];
  accountType?: InputMaybe<StripePostAccountsAccountExternalAccountsAccountTypeBankAccount>;
  country: Scalars['String'];
  currency?: InputMaybe<Scalars['String']>;
  documents?: InputMaybe<StripePostAccountsAccountExternalAccountsDocumentsBankAccountInput>;
  object?: InputMaybe<StripePostAccountsAccountExternalAccountsObjectBankAccount>;
  routingNumber?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountExternalAccountsBankAccountOwnershipVerificationDocumentsBankAccountInput = {
  files?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostAccountsAccountExternalAccountsDocumentsBankAccountInput = {
  bankAccountOwnershipVerification?: InputMaybe<StripePostAccountsAccountExternalAccountsBankAccountOwnershipVerificationDocumentsBankAccountInput>;
};

export enum StripePostAccountsAccountExternalAccountsIdAccountType {
  Checking = 'CHECKING',
  Futsu = 'FUTSU',
  Savings = 'SAVINGS',
  Toza = 'TOZA'
}

export type StripePostAccountsAccountExternalAccountsIdBankAccountOwnershipVerificationDocumentsInput = {
  files?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostAccountsAccountExternalAccountsIdDocumentsInput = {
  bankAccountOwnershipVerification?: InputMaybe<StripePostAccountsAccountExternalAccountsIdBankAccountOwnershipVerificationDocumentsInput>;
};

export type StripePostAccountsAccountExternalAccountsIdInput = {
  accountHolderName?: InputMaybe<Scalars['String']>;
  accountHolderType?: InputMaybe<Scalars['String']>;
  accountType?: InputMaybe<StripePostAccountsAccountExternalAccountsIdAccountType>;
  addressCity?: InputMaybe<Scalars['String']>;
  addressCountry?: InputMaybe<Scalars['String']>;
  addressLine1?: InputMaybe<Scalars['String']>;
  addressLine2?: InputMaybe<Scalars['String']>;
  addressState?: InputMaybe<Scalars['String']>;
  addressZip?: InputMaybe<Scalars['String']>;
  defaultForCurrency?: InputMaybe<Scalars['Boolean']>;
  documents?: InputMaybe<StripePostAccountsAccountExternalAccountsIdDocumentsInput>;
  expMonth?: InputMaybe<Scalars['String']>;
  expYear?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  name?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountExternalAccountsInput = {
  bankAccount?: InputMaybe<StripeStringOrPostAccountsAccountExternalAccountsBankAccountUnionInput>;
  defaultForCurrency?: InputMaybe<Scalars['Boolean']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  externalAccount?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
};

export enum StripePostAccountsAccountExternalAccountsObjectBankAccount {
  BankAccount = 'BANK_ACCOUNT'
}

export type StripePostAccountsAccountFpxPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsAccountGiropayPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsAccountGrabpayPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export enum StripePostAccountsAccountHolderTypeBankAccount {
  Company = 'COMPANY',
  Individual = 'INDIVIDUAL'
}

export type StripePostAccountsAccountIdealPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsAccountIndiaInternationalPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsAccountIndividualInput = {
  address?: InputMaybe<StripePostAccountsAccountAddressIndividualInput>;
  addressKana?: InputMaybe<StripePostAccountsAccountAddressKanaIndividualInput>;
  addressKanji?: InputMaybe<StripePostAccountsAccountAddressKanjiIndividualInput>;
  dob?: InputMaybe<StripeStringOrPostAccountsAccountDobIndividualUnionInput>;
  email?: InputMaybe<Scalars['String']>;
  firstName?: InputMaybe<Scalars['String']>;
  firstNameKana?: InputMaybe<Scalars['String']>;
  firstNameKanji?: InputMaybe<Scalars['String']>;
  fullNameAliases?: InputMaybe<Scalars['JSON']>;
  gender?: InputMaybe<Scalars['String']>;
  idNumber?: InputMaybe<Scalars['String']>;
  idNumberSecondary?: InputMaybe<Scalars['String']>;
  lastName?: InputMaybe<Scalars['String']>;
  lastNameKana?: InputMaybe<Scalars['String']>;
  lastNameKanji?: InputMaybe<Scalars['String']>;
  maidenName?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  phone?: InputMaybe<Scalars['String']>;
  politicalExposure?: InputMaybe<StripePostAccountsAccountPoliticalExposureIndividual>;
  registeredAddress?: InputMaybe<StripePostAccountsAccountRegisteredAddressIndividualInput>;
  ssnLast4?: InputMaybe<Scalars['String']>;
  verification?: InputMaybe<StripePostAccountsAccountVerificationIndividualInput>;
};

export type StripePostAccountsAccountInput = {
  accountToken?: InputMaybe<Scalars['String']>;
  businessProfile?: InputMaybe<StripePostAccountsAccountBusinessProfileInput>;
  businessType?: InputMaybe<StripePostAccountsAccountBusinessType>;
  capabilities?: InputMaybe<StripePostAccountsAccountCapabilitiesInput>;
  company?: InputMaybe<StripePostAccountsAccountCompanyInput>;
  defaultCurrency?: InputMaybe<Scalars['String']>;
  documents?: InputMaybe<StripePostAccountsAccountDocumentsInput>;
  email?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  externalAccount?: InputMaybe<Scalars['String']>;
  individual?: InputMaybe<StripePostAccountsAccountIndividualInput>;
  metadata?: InputMaybe<Scalars['JSON']>;
  settings?: InputMaybe<StripePostAccountsAccountSettingsInput>;
  tosAcceptance?: InputMaybe<StripePostAccountsAccountTosAcceptanceInput>;
};

export enum StripePostAccountsAccountIntervalSchedulePayoutsSettings {
  Daily = 'DAILY',
  Manual = 'MANUAL',
  Monthly = 'MONTHLY',
  Weekly = 'WEEKLY'
}

export type StripePostAccountsAccountJcbPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsAccountKlarnaPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsAccountKonbiniPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsAccountLegacyPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsAccountLinkPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsAccountLoginLinksInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostAccountsAccountOwnershipDeclarationCompanyInput = {
  date?: InputMaybe<Scalars['Int']>;
  ip?: InputMaybe<Scalars['String']>;
  userAgent?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountOxxoPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsAccountP24PaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsAccountPaymentsSettingsInput = {
  statementDescriptor?: InputMaybe<Scalars['String']>;
  statementDescriptorKana?: InputMaybe<Scalars['String']>;
  statementDescriptorKanji?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountPaynowPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsAccountPayoutsSettingsInput = {
  debitNegativeBalances?: InputMaybe<Scalars['Boolean']>;
  schedule?: InputMaybe<StripePostAccountsAccountSchedulePayoutsSettingsInput>;
  statementDescriptor?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountPeopleAdditionalDocumentVerificationInput = {
  back?: InputMaybe<Scalars['String']>;
  front?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountPeopleAddressInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountPeopleAddressKanaInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
  town?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountPeopleAddressKanjiInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
  town?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountPeopleCompanyAuthorizationDocumentsInput = {
  files?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostAccountsAccountPeopleDobInput = {
  day: Scalars['Int'];
  month: Scalars['Int'];
  year: Scalars['Int'];
};

export type StripePostAccountsAccountPeopleDocumentVerificationInput = {
  back?: InputMaybe<Scalars['String']>;
  front?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountPeopleDocumentsInput = {
  companyAuthorization?: InputMaybe<StripePostAccountsAccountPeopleCompanyAuthorizationDocumentsInput>;
  passport?: InputMaybe<StripePostAccountsAccountPeoplePassportDocumentsInput>;
  visa?: InputMaybe<StripePostAccountsAccountPeopleVisaDocumentsInput>;
};

export type StripePostAccountsAccountPeopleInput = {
  address?: InputMaybe<StripePostAccountsAccountPeopleAddressInput>;
  addressKana?: InputMaybe<StripePostAccountsAccountPeopleAddressKanaInput>;
  addressKanji?: InputMaybe<StripePostAccountsAccountPeopleAddressKanjiInput>;
  dob?: InputMaybe<StripeStringOrPostAccountsAccountPeopleDobUnionInput>;
  documents?: InputMaybe<StripePostAccountsAccountPeopleDocumentsInput>;
  email?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  firstName?: InputMaybe<Scalars['String']>;
  firstNameKana?: InputMaybe<Scalars['String']>;
  firstNameKanji?: InputMaybe<Scalars['String']>;
  fullNameAliases?: InputMaybe<Scalars['JSON']>;
  gender?: InputMaybe<Scalars['String']>;
  idNumber?: InputMaybe<Scalars['String']>;
  idNumberSecondary?: InputMaybe<Scalars['String']>;
  lastName?: InputMaybe<Scalars['String']>;
  lastNameKana?: InputMaybe<Scalars['String']>;
  lastNameKanji?: InputMaybe<Scalars['String']>;
  maidenName?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  nationality?: InputMaybe<Scalars['String']>;
  personToken?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
  politicalExposure?: InputMaybe<Scalars['String']>;
  registeredAddress?: InputMaybe<StripePostAccountsAccountPeopleRegisteredAddressInput>;
  relationship?: InputMaybe<StripePostAccountsAccountPeopleRelationshipInput>;
  ssnLast4?: InputMaybe<Scalars['String']>;
  verification?: InputMaybe<StripePostAccountsAccountPeopleVerificationInput>;
};

export type StripePostAccountsAccountPeoplePassportDocumentsInput = {
  files?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostAccountsAccountPeoplePersonAdditionalDocumentVerificationInput = {
  back?: InputMaybe<Scalars['String']>;
  front?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountPeoplePersonAddressInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountPeoplePersonAddressKanaInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
  town?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountPeoplePersonAddressKanjiInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
  town?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountPeoplePersonCompanyAuthorizationDocumentsInput = {
  files?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostAccountsAccountPeoplePersonDobInput = {
  day: Scalars['Int'];
  month: Scalars['Int'];
  year: Scalars['Int'];
};

export type StripePostAccountsAccountPeoplePersonDocumentVerificationInput = {
  back?: InputMaybe<Scalars['String']>;
  front?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountPeoplePersonDocumentsInput = {
  companyAuthorization?: InputMaybe<StripePostAccountsAccountPeoplePersonCompanyAuthorizationDocumentsInput>;
  passport?: InputMaybe<StripePostAccountsAccountPeoplePersonPassportDocumentsInput>;
  visa?: InputMaybe<StripePostAccountsAccountPeoplePersonVisaDocumentsInput>;
};

export type StripePostAccountsAccountPeoplePersonInput = {
  address?: InputMaybe<StripePostAccountsAccountPeoplePersonAddressInput>;
  addressKana?: InputMaybe<StripePostAccountsAccountPeoplePersonAddressKanaInput>;
  addressKanji?: InputMaybe<StripePostAccountsAccountPeoplePersonAddressKanjiInput>;
  dob?: InputMaybe<StripeStringOrPostAccountsAccountPeoplePersonDobUnionInput>;
  documents?: InputMaybe<StripePostAccountsAccountPeoplePersonDocumentsInput>;
  email?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  firstName?: InputMaybe<Scalars['String']>;
  firstNameKana?: InputMaybe<Scalars['String']>;
  firstNameKanji?: InputMaybe<Scalars['String']>;
  fullNameAliases?: InputMaybe<Scalars['JSON']>;
  gender?: InputMaybe<Scalars['String']>;
  idNumber?: InputMaybe<Scalars['String']>;
  idNumberSecondary?: InputMaybe<Scalars['String']>;
  lastName?: InputMaybe<Scalars['String']>;
  lastNameKana?: InputMaybe<Scalars['String']>;
  lastNameKanji?: InputMaybe<Scalars['String']>;
  maidenName?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  nationality?: InputMaybe<Scalars['String']>;
  personToken?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
  politicalExposure?: InputMaybe<Scalars['String']>;
  registeredAddress?: InputMaybe<StripePostAccountsAccountPeoplePersonRegisteredAddressInput>;
  relationship?: InputMaybe<StripePostAccountsAccountPeoplePersonRelationshipInput>;
  ssnLast4?: InputMaybe<Scalars['String']>;
  verification?: InputMaybe<StripePostAccountsAccountPeoplePersonVerificationInput>;
};

export type StripePostAccountsAccountPeoplePersonPassportDocumentsInput = {
  files?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostAccountsAccountPeoplePersonRegisteredAddressInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountPeoplePersonRelationshipInput = {
  director?: InputMaybe<Scalars['Boolean']>;
  executive?: InputMaybe<Scalars['Boolean']>;
  owner?: InputMaybe<Scalars['Boolean']>;
  percentOwnership?: InputMaybe<Scalars['JSON']>;
  representative?: InputMaybe<Scalars['Boolean']>;
  title?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountPeoplePersonVerificationInput = {
  additionalDocument?: InputMaybe<StripePostAccountsAccountPeoplePersonAdditionalDocumentVerificationInput>;
  document?: InputMaybe<StripePostAccountsAccountPeoplePersonDocumentVerificationInput>;
};

export type StripePostAccountsAccountPeoplePersonVisaDocumentsInput = {
  files?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostAccountsAccountPeopleRegisteredAddressInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountPeopleRelationshipInput = {
  director?: InputMaybe<Scalars['Boolean']>;
  executive?: InputMaybe<Scalars['Boolean']>;
  owner?: InputMaybe<Scalars['Boolean']>;
  percentOwnership?: InputMaybe<Scalars['JSON']>;
  representative?: InputMaybe<Scalars['Boolean']>;
  title?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountPeopleVerificationInput = {
  additionalDocument?: InputMaybe<StripePostAccountsAccountPeopleAdditionalDocumentVerificationInput>;
  document?: InputMaybe<StripePostAccountsAccountPeopleDocumentVerificationInput>;
};

export type StripePostAccountsAccountPeopleVisaDocumentsInput = {
  files?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostAccountsAccountPersonsAdditionalDocumentVerificationInput = {
  back?: InputMaybe<Scalars['String']>;
  front?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountPersonsAddressInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountPersonsAddressKanaInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
  town?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountPersonsAddressKanjiInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
  town?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountPersonsCompanyAuthorizationDocumentsInput = {
  files?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostAccountsAccountPersonsDobInput = {
  day: Scalars['Int'];
  month: Scalars['Int'];
  year: Scalars['Int'];
};

export type StripePostAccountsAccountPersonsDocumentVerificationInput = {
  back?: InputMaybe<Scalars['String']>;
  front?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountPersonsDocumentsInput = {
  companyAuthorization?: InputMaybe<StripePostAccountsAccountPersonsCompanyAuthorizationDocumentsInput>;
  passport?: InputMaybe<StripePostAccountsAccountPersonsPassportDocumentsInput>;
  visa?: InputMaybe<StripePostAccountsAccountPersonsVisaDocumentsInput>;
};

export type StripePostAccountsAccountPersonsInput = {
  address?: InputMaybe<StripePostAccountsAccountPersonsAddressInput>;
  addressKana?: InputMaybe<StripePostAccountsAccountPersonsAddressKanaInput>;
  addressKanji?: InputMaybe<StripePostAccountsAccountPersonsAddressKanjiInput>;
  dob?: InputMaybe<StripeStringOrPostAccountsAccountPersonsDobUnionInput>;
  documents?: InputMaybe<StripePostAccountsAccountPersonsDocumentsInput>;
  email?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  firstName?: InputMaybe<Scalars['String']>;
  firstNameKana?: InputMaybe<Scalars['String']>;
  firstNameKanji?: InputMaybe<Scalars['String']>;
  fullNameAliases?: InputMaybe<Scalars['JSON']>;
  gender?: InputMaybe<Scalars['String']>;
  idNumber?: InputMaybe<Scalars['String']>;
  idNumberSecondary?: InputMaybe<Scalars['String']>;
  lastName?: InputMaybe<Scalars['String']>;
  lastNameKana?: InputMaybe<Scalars['String']>;
  lastNameKanji?: InputMaybe<Scalars['String']>;
  maidenName?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  nationality?: InputMaybe<Scalars['String']>;
  personToken?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
  politicalExposure?: InputMaybe<Scalars['String']>;
  registeredAddress?: InputMaybe<StripePostAccountsAccountPersonsRegisteredAddressInput>;
  relationship?: InputMaybe<StripePostAccountsAccountPersonsRelationshipInput>;
  ssnLast4?: InputMaybe<Scalars['String']>;
  verification?: InputMaybe<StripePostAccountsAccountPersonsVerificationInput>;
};

export type StripePostAccountsAccountPersonsPassportDocumentsInput = {
  files?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostAccountsAccountPersonsPersonAdditionalDocumentVerificationInput = {
  back?: InputMaybe<Scalars['String']>;
  front?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountPersonsPersonAddressInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountPersonsPersonAddressKanaInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
  town?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountPersonsPersonAddressKanjiInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
  town?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountPersonsPersonCompanyAuthorizationDocumentsInput = {
  files?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostAccountsAccountPersonsPersonDobInput = {
  day: Scalars['Int'];
  month: Scalars['Int'];
  year: Scalars['Int'];
};

export type StripePostAccountsAccountPersonsPersonDocumentVerificationInput = {
  back?: InputMaybe<Scalars['String']>;
  front?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountPersonsPersonDocumentsInput = {
  companyAuthorization?: InputMaybe<StripePostAccountsAccountPersonsPersonCompanyAuthorizationDocumentsInput>;
  passport?: InputMaybe<StripePostAccountsAccountPersonsPersonPassportDocumentsInput>;
  visa?: InputMaybe<StripePostAccountsAccountPersonsPersonVisaDocumentsInput>;
};

export type StripePostAccountsAccountPersonsPersonInput = {
  address?: InputMaybe<StripePostAccountsAccountPersonsPersonAddressInput>;
  addressKana?: InputMaybe<StripePostAccountsAccountPersonsPersonAddressKanaInput>;
  addressKanji?: InputMaybe<StripePostAccountsAccountPersonsPersonAddressKanjiInput>;
  dob?: InputMaybe<StripeStringOrPostAccountsAccountPersonsPersonDobUnionInput>;
  documents?: InputMaybe<StripePostAccountsAccountPersonsPersonDocumentsInput>;
  email?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  firstName?: InputMaybe<Scalars['String']>;
  firstNameKana?: InputMaybe<Scalars['String']>;
  firstNameKanji?: InputMaybe<Scalars['String']>;
  fullNameAliases?: InputMaybe<Scalars['JSON']>;
  gender?: InputMaybe<Scalars['String']>;
  idNumber?: InputMaybe<Scalars['String']>;
  idNumberSecondary?: InputMaybe<Scalars['String']>;
  lastName?: InputMaybe<Scalars['String']>;
  lastNameKana?: InputMaybe<Scalars['String']>;
  lastNameKanji?: InputMaybe<Scalars['String']>;
  maidenName?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  nationality?: InputMaybe<Scalars['String']>;
  personToken?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
  politicalExposure?: InputMaybe<Scalars['String']>;
  registeredAddress?: InputMaybe<StripePostAccountsAccountPersonsPersonRegisteredAddressInput>;
  relationship?: InputMaybe<StripePostAccountsAccountPersonsPersonRelationshipInput>;
  ssnLast4?: InputMaybe<Scalars['String']>;
  verification?: InputMaybe<StripePostAccountsAccountPersonsPersonVerificationInput>;
};

export type StripePostAccountsAccountPersonsPersonPassportDocumentsInput = {
  files?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostAccountsAccountPersonsPersonRegisteredAddressInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountPersonsPersonRelationshipInput = {
  director?: InputMaybe<Scalars['Boolean']>;
  executive?: InputMaybe<Scalars['Boolean']>;
  owner?: InputMaybe<Scalars['Boolean']>;
  percentOwnership?: InputMaybe<Scalars['JSON']>;
  representative?: InputMaybe<Scalars['Boolean']>;
  title?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountPersonsPersonVerificationInput = {
  additionalDocument?: InputMaybe<StripePostAccountsAccountPersonsPersonAdditionalDocumentVerificationInput>;
  document?: InputMaybe<StripePostAccountsAccountPersonsPersonDocumentVerificationInput>;
};

export type StripePostAccountsAccountPersonsPersonVisaDocumentsInput = {
  files?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostAccountsAccountPersonsRegisteredAddressInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountPersonsRelationshipInput = {
  director?: InputMaybe<Scalars['Boolean']>;
  executive?: InputMaybe<Scalars['Boolean']>;
  owner?: InputMaybe<Scalars['Boolean']>;
  percentOwnership?: InputMaybe<Scalars['JSON']>;
  representative?: InputMaybe<Scalars['Boolean']>;
  title?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountPersonsVerificationInput = {
  additionalDocument?: InputMaybe<StripePostAccountsAccountPersonsAdditionalDocumentVerificationInput>;
  document?: InputMaybe<StripePostAccountsAccountPersonsDocumentVerificationInput>;
};

export type StripePostAccountsAccountPersonsVisaDocumentsInput = {
  files?: InputMaybe<Array<Scalars['String']>>;
};

export enum StripePostAccountsAccountPoliticalExposureIndividual {
  Existing = 'EXISTING',
  None = 'NONE'
}

export type StripePostAccountsAccountPromptpayPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsAccountProofOfRegistrationDocumentsInput = {
  files?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostAccountsAccountRegisteredAddressIndividualInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountRejectInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  reason: Scalars['String'];
};

export type StripePostAccountsAccountSchedulePayoutsSettingsInput = {
  delayDays?: InputMaybe<Scalars['JSON']>;
  interval?: InputMaybe<StripePostAccountsAccountIntervalSchedulePayoutsSettings>;
  monthlyAnchor?: InputMaybe<Scalars['Int']>;
  weeklyAnchor?: InputMaybe<StripePostAccountsAccountWeeklyAnchorSchedulePayoutsSettings>;
};

export type StripePostAccountsAccountSepaDebitPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsAccountSettingsInput = {
  branding?: InputMaybe<StripePostAccountsAccountBrandingSettingsInput>;
  cardIssuing?: InputMaybe<StripePostAccountsAccountCardIssuingSettingsInput>;
  cardPayments?: InputMaybe<StripePostAccountsAccountCardPaymentsSettingsInput>;
  payments?: InputMaybe<StripePostAccountsAccountPaymentsSettingsInput>;
  payouts?: InputMaybe<StripePostAccountsAccountPayoutsSettingsInput>;
  treasury?: InputMaybe<StripePostAccountsAccountTreasurySettingsInput>;
};

export type StripePostAccountsAccountSofortPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsAccountSupportAddressBusinessProfileInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountTaxReportingUs1099KCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsAccountTaxReportingUs1099MiscCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsAccountTosAcceptanceCardIssuingSettingsInput = {
  date?: InputMaybe<Scalars['Int']>;
  ip?: InputMaybe<Scalars['String']>;
  userAgent?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountTosAcceptanceInput = {
  date?: InputMaybe<Scalars['Int']>;
  ip?: InputMaybe<Scalars['String']>;
  serviceAgreement?: InputMaybe<Scalars['String']>;
  userAgent?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountTosAcceptanceTreasurySettingsInput = {
  date?: InputMaybe<Scalars['Int']>;
  ip?: InputMaybe<Scalars['String']>;
  userAgent?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAccountTransfersCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsAccountTreasuryCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsAccountTreasurySettingsInput = {
  tosAcceptance?: InputMaybe<StripePostAccountsAccountTosAcceptanceTreasurySettingsInput>;
};

export enum StripePostAccountsAccountTypeBankAccount {
  Checking = 'CHECKING',
  Futsu = 'FUTSU',
  Savings = 'SAVINGS',
  Toza = 'TOZA'
}

export type StripePostAccountsAccountUsBankAccountAchPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsAccountVerificationCompanyInput = {
  document?: InputMaybe<StripePostAccountsAccountDocumentVerificationCompanyInput>;
};

export type StripePostAccountsAccountVerificationIndividualInput = {
  additionalDocument?: InputMaybe<StripePostAccountsAccountAdditionalDocumentVerificationIndividualInput>;
  document?: InputMaybe<StripePostAccountsAccountDocumentVerificationIndividualInput>;
};

export enum StripePostAccountsAccountWeeklyAnchorSchedulePayoutsSettings {
  Friday = 'FRIDAY',
  Monday = 'MONDAY',
  Saturday = 'SATURDAY',
  Sunday = 'SUNDAY',
  Thursday = 'THURSDAY',
  Tuesday = 'TUESDAY',
  Wednesday = 'WEDNESDAY'
}

export type StripePostAccountsAcssDebitPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsAdditionalDocumentVerificationIndividualInput = {
  back?: InputMaybe<Scalars['String']>;
  front?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAddressCompanyInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAddressIndividualInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAddressKanaCompanyInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
  town?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAddressKanaIndividualInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
  town?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAddressKanjiCompanyInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
  town?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAddressKanjiIndividualInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
  town?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsAffirmPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsAfterpayClearpayPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsAuBecsDebitPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsBacsDebitPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsBancontactPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsBankAccountInput = {
  accountHolderName?: InputMaybe<Scalars['String']>;
  accountHolderType?: InputMaybe<StripePostAccountsAccountHolderTypeBankAccount>;
  accountNumber: Scalars['String'];
  accountType?: InputMaybe<StripePostAccountsAccountTypeBankAccount>;
  country: Scalars['String'];
  currency?: InputMaybe<Scalars['String']>;
  documents?: InputMaybe<StripePostAccountsDocumentsBankAccountInput>;
  object?: InputMaybe<StripePostAccountsObjectBankAccount>;
  routingNumber?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsBankAccountOwnershipVerificationDocumentsBankAccountInput = {
  files?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostAccountsBankAccountOwnershipVerificationDocumentsInput = {
  files?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostAccountsBankTransferPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsBlikPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsBoletoPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsBrandingSettingsInput = {
  icon?: InputMaybe<Scalars['String']>;
  logo?: InputMaybe<Scalars['String']>;
  primaryColor?: InputMaybe<Scalars['String']>;
  secondaryColor?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsBusinessProfileInput = {
  mcc?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  productDescription?: InputMaybe<Scalars['String']>;
  supportAddress?: InputMaybe<StripePostAccountsSupportAddressBusinessProfileInput>;
  supportEmail?: InputMaybe<Scalars['String']>;
  supportPhone?: InputMaybe<Scalars['String']>;
  supportUrl?: InputMaybe<Scalars['JSON']>;
  url?: InputMaybe<Scalars['String']>;
};

export enum StripePostAccountsBusinessType {
  Company = 'COMPANY',
  GovernmentEntity = 'GOVERNMENT_ENTITY',
  Individual = 'INDIVIDUAL',
  NonProfit = 'NON_PROFIT'
}

export type StripePostAccountsCapabilitiesInput = {
  acssDebitPayments?: InputMaybe<StripePostAccountsAcssDebitPaymentsCapabilitiesInput>;
  affirmPayments?: InputMaybe<StripePostAccountsAffirmPaymentsCapabilitiesInput>;
  afterpayClearpayPayments?: InputMaybe<StripePostAccountsAfterpayClearpayPaymentsCapabilitiesInput>;
  auBecsDebitPayments?: InputMaybe<StripePostAccountsAuBecsDebitPaymentsCapabilitiesInput>;
  bacsDebitPayments?: InputMaybe<StripePostAccountsBacsDebitPaymentsCapabilitiesInput>;
  bancontactPayments?: InputMaybe<StripePostAccountsBancontactPaymentsCapabilitiesInput>;
  bankTransferPayments?: InputMaybe<StripePostAccountsBankTransferPaymentsCapabilitiesInput>;
  blikPayments?: InputMaybe<StripePostAccountsBlikPaymentsCapabilitiesInput>;
  boletoPayments?: InputMaybe<StripePostAccountsBoletoPaymentsCapabilitiesInput>;
  cardIssuing?: InputMaybe<StripePostAccountsCardIssuingCapabilitiesInput>;
  cardPayments?: InputMaybe<StripePostAccountsCardPaymentsCapabilitiesInput>;
  cartesBancairesPayments?: InputMaybe<StripePostAccountsCartesBancairesPaymentsCapabilitiesInput>;
  cashappPayments?: InputMaybe<StripePostAccountsCashappPaymentsCapabilitiesInput>;
  epsPayments?: InputMaybe<StripePostAccountsEpsPaymentsCapabilitiesInput>;
  fpxPayments?: InputMaybe<StripePostAccountsFpxPaymentsCapabilitiesInput>;
  giropayPayments?: InputMaybe<StripePostAccountsGiropayPaymentsCapabilitiesInput>;
  grabpayPayments?: InputMaybe<StripePostAccountsGrabpayPaymentsCapabilitiesInput>;
  idealPayments?: InputMaybe<StripePostAccountsIdealPaymentsCapabilitiesInput>;
  indiaInternationalPayments?: InputMaybe<StripePostAccountsIndiaInternationalPaymentsCapabilitiesInput>;
  jcbPayments?: InputMaybe<StripePostAccountsJcbPaymentsCapabilitiesInput>;
  klarnaPayments?: InputMaybe<StripePostAccountsKlarnaPaymentsCapabilitiesInput>;
  konbiniPayments?: InputMaybe<StripePostAccountsKonbiniPaymentsCapabilitiesInput>;
  legacyPayments?: InputMaybe<StripePostAccountsLegacyPaymentsCapabilitiesInput>;
  linkPayments?: InputMaybe<StripePostAccountsLinkPaymentsCapabilitiesInput>;
  oxxoPayments?: InputMaybe<StripePostAccountsOxxoPaymentsCapabilitiesInput>;
  p24Payments?: InputMaybe<StripePostAccountsP24PaymentsCapabilitiesInput>;
  paynowPayments?: InputMaybe<StripePostAccountsPaynowPaymentsCapabilitiesInput>;
  promptpayPayments?: InputMaybe<StripePostAccountsPromptpayPaymentsCapabilitiesInput>;
  sepaDebitPayments?: InputMaybe<StripePostAccountsSepaDebitPaymentsCapabilitiesInput>;
  sofortPayments?: InputMaybe<StripePostAccountsSofortPaymentsCapabilitiesInput>;
  taxReportingUs1099K?: InputMaybe<StripePostAccountsTaxReportingUs1099KCapabilitiesInput>;
  taxReportingUs1099Misc?: InputMaybe<StripePostAccountsTaxReportingUs1099MiscCapabilitiesInput>;
  transfers?: InputMaybe<StripePostAccountsTransfersCapabilitiesInput>;
  treasury?: InputMaybe<StripePostAccountsTreasuryCapabilitiesInput>;
  usBankAccountAchPayments?: InputMaybe<StripePostAccountsUsBankAccountAchPaymentsCapabilitiesInput>;
};

export type StripePostAccountsCardIssuingCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsCardIssuingSettingsInput = {
  tosAcceptance?: InputMaybe<StripePostAccountsTosAcceptanceCardIssuingSettingsInput>;
};

export type StripePostAccountsCardPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsCardPaymentsSettingsInput = {
  declineOn?: InputMaybe<StripePostAccountsDeclineOnCardPaymentsSettingsInput>;
  statementDescriptorPrefix?: InputMaybe<Scalars['String']>;
  statementDescriptorPrefixKana?: InputMaybe<Scalars['JSON']>;
  statementDescriptorPrefixKanji?: InputMaybe<Scalars['JSON']>;
};

export type StripePostAccountsCartesBancairesPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsCashappPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsCompanyInput = {
  address?: InputMaybe<StripePostAccountsAddressCompanyInput>;
  addressKana?: InputMaybe<StripePostAccountsAddressKanaCompanyInput>;
  addressKanji?: InputMaybe<StripePostAccountsAddressKanjiCompanyInput>;
  directorsProvided?: InputMaybe<Scalars['Boolean']>;
  executivesProvided?: InputMaybe<Scalars['Boolean']>;
  exportLicenseId?: InputMaybe<Scalars['String']>;
  exportPurposeCode?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  nameKana?: InputMaybe<Scalars['String']>;
  nameKanji?: InputMaybe<Scalars['String']>;
  ownersProvided?: InputMaybe<Scalars['Boolean']>;
  ownershipDeclaration?: InputMaybe<StripePostAccountsOwnershipDeclarationCompanyInput>;
  phone?: InputMaybe<Scalars['String']>;
  registrationNumber?: InputMaybe<Scalars['String']>;
  structure?: InputMaybe<Scalars['String']>;
  taxId?: InputMaybe<Scalars['String']>;
  taxIdRegistrar?: InputMaybe<Scalars['String']>;
  vatId?: InputMaybe<Scalars['String']>;
  verification?: InputMaybe<StripePostAccountsVerificationCompanyInput>;
};

export type StripePostAccountsCompanyLicenseDocumentsInput = {
  files?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostAccountsCompanyMemorandumOfAssociationDocumentsInput = {
  files?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostAccountsCompanyMinisterialDecreeDocumentsInput = {
  files?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostAccountsCompanyRegistrationVerificationDocumentsInput = {
  files?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostAccountsCompanyTaxIdVerificationDocumentsInput = {
  files?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostAccountsDeclineOnCardPaymentsSettingsInput = {
  avsFailure?: InputMaybe<Scalars['Boolean']>;
  cvcFailure?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsDobIndividualInput = {
  day: Scalars['Int'];
  month: Scalars['Int'];
  year: Scalars['Int'];
};

export type StripePostAccountsDocumentVerificationCompanyInput = {
  back?: InputMaybe<Scalars['String']>;
  front?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsDocumentVerificationIndividualInput = {
  back?: InputMaybe<Scalars['String']>;
  front?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsDocumentsBankAccountInput = {
  bankAccountOwnershipVerification?: InputMaybe<StripePostAccountsBankAccountOwnershipVerificationDocumentsBankAccountInput>;
};

export type StripePostAccountsDocumentsInput = {
  bankAccountOwnershipVerification?: InputMaybe<StripePostAccountsBankAccountOwnershipVerificationDocumentsInput>;
  companyLicense?: InputMaybe<StripePostAccountsCompanyLicenseDocumentsInput>;
  companyMemorandumOfAssociation?: InputMaybe<StripePostAccountsCompanyMemorandumOfAssociationDocumentsInput>;
  companyMinisterialDecree?: InputMaybe<StripePostAccountsCompanyMinisterialDecreeDocumentsInput>;
  companyRegistrationVerification?: InputMaybe<StripePostAccountsCompanyRegistrationVerificationDocumentsInput>;
  companyTaxIdVerification?: InputMaybe<StripePostAccountsCompanyTaxIdVerificationDocumentsInput>;
  proofOfRegistration?: InputMaybe<StripePostAccountsProofOfRegistrationDocumentsInput>;
};

export type StripePostAccountsEpsPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsFpxPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsGiropayPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsGrabpayPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsIdealPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsIndiaInternationalPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsIndividualInput = {
  address?: InputMaybe<StripePostAccountsAddressIndividualInput>;
  addressKana?: InputMaybe<StripePostAccountsAddressKanaIndividualInput>;
  addressKanji?: InputMaybe<StripePostAccountsAddressKanjiIndividualInput>;
  dob?: InputMaybe<StripeStringOrPostAccountsDobIndividualUnionInput>;
  email?: InputMaybe<Scalars['String']>;
  firstName?: InputMaybe<Scalars['String']>;
  firstNameKana?: InputMaybe<Scalars['String']>;
  firstNameKanji?: InputMaybe<Scalars['String']>;
  fullNameAliases?: InputMaybe<Scalars['JSON']>;
  gender?: InputMaybe<Scalars['String']>;
  idNumber?: InputMaybe<Scalars['String']>;
  idNumberSecondary?: InputMaybe<Scalars['String']>;
  lastName?: InputMaybe<Scalars['String']>;
  lastNameKana?: InputMaybe<Scalars['String']>;
  lastNameKanji?: InputMaybe<Scalars['String']>;
  maidenName?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  phone?: InputMaybe<Scalars['String']>;
  politicalExposure?: InputMaybe<StripePostAccountsPoliticalExposureIndividual>;
  registeredAddress?: InputMaybe<StripePostAccountsRegisteredAddressIndividualInput>;
  ssnLast4?: InputMaybe<Scalars['String']>;
  verification?: InputMaybe<StripePostAccountsVerificationIndividualInput>;
};

export type StripePostAccountsInput = {
  accountToken?: InputMaybe<Scalars['String']>;
  bankAccount?: InputMaybe<StripeStringOrPostAccountsBankAccountUnionInput>;
  businessProfile?: InputMaybe<StripePostAccountsBusinessProfileInput>;
  businessType?: InputMaybe<StripePostAccountsBusinessType>;
  capabilities?: InputMaybe<StripePostAccountsCapabilitiesInput>;
  company?: InputMaybe<StripePostAccountsCompanyInput>;
  country?: InputMaybe<Scalars['String']>;
  defaultCurrency?: InputMaybe<Scalars['String']>;
  documents?: InputMaybe<StripePostAccountsDocumentsInput>;
  email?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  externalAccount?: InputMaybe<Scalars['String']>;
  individual?: InputMaybe<StripePostAccountsIndividualInput>;
  metadata?: InputMaybe<Scalars['JSON']>;
  settings?: InputMaybe<StripePostAccountsSettingsInput>;
  tosAcceptance?: InputMaybe<StripePostAccountsTosAcceptanceInput>;
  type?: InputMaybe<StripePostAccountsType>;
};

export enum StripePostAccountsIntervalSchedulePayoutsSettings {
  Daily = 'DAILY',
  Manual = 'MANUAL',
  Monthly = 'MONTHLY',
  Weekly = 'WEEKLY'
}

export type StripePostAccountsJcbPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsKlarnaPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsKonbiniPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsLegacyPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsLinkPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export enum StripePostAccountsObjectBankAccount {
  BankAccount = 'BANK_ACCOUNT'
}

export type StripePostAccountsOwnershipDeclarationCompanyInput = {
  date?: InputMaybe<Scalars['Int']>;
  ip?: InputMaybe<Scalars['String']>;
  userAgent?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsOxxoPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsP24PaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsPaymentsSettingsInput = {
  statementDescriptor?: InputMaybe<Scalars['String']>;
  statementDescriptorKana?: InputMaybe<Scalars['String']>;
  statementDescriptorKanji?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsPaynowPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsPayoutsSettingsInput = {
  debitNegativeBalances?: InputMaybe<Scalars['Boolean']>;
  schedule?: InputMaybe<StripePostAccountsSchedulePayoutsSettingsInput>;
  statementDescriptor?: InputMaybe<Scalars['String']>;
};

export enum StripePostAccountsPoliticalExposureIndividual {
  Existing = 'EXISTING',
  None = 'NONE'
}

export type StripePostAccountsPromptpayPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsProofOfRegistrationDocumentsInput = {
  files?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostAccountsRegisteredAddressIndividualInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsSchedulePayoutsSettingsInput = {
  delayDays?: InputMaybe<Scalars['JSON']>;
  interval?: InputMaybe<StripePostAccountsIntervalSchedulePayoutsSettings>;
  monthlyAnchor?: InputMaybe<Scalars['Int']>;
  weeklyAnchor?: InputMaybe<StripePostAccountsWeeklyAnchorSchedulePayoutsSettings>;
};

export type StripePostAccountsSepaDebitPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsSettingsInput = {
  branding?: InputMaybe<StripePostAccountsBrandingSettingsInput>;
  cardIssuing?: InputMaybe<StripePostAccountsCardIssuingSettingsInput>;
  cardPayments?: InputMaybe<StripePostAccountsCardPaymentsSettingsInput>;
  payments?: InputMaybe<StripePostAccountsPaymentsSettingsInput>;
  payouts?: InputMaybe<StripePostAccountsPayoutsSettingsInput>;
  treasury?: InputMaybe<StripePostAccountsTreasurySettingsInput>;
};

export type StripePostAccountsSofortPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsSupportAddressBusinessProfileInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsTaxReportingUs1099KCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsTaxReportingUs1099MiscCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsTosAcceptanceCardIssuingSettingsInput = {
  date?: InputMaybe<Scalars['Int']>;
  ip?: InputMaybe<Scalars['String']>;
  userAgent?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsTosAcceptanceInput = {
  date?: InputMaybe<Scalars['Int']>;
  ip?: InputMaybe<Scalars['String']>;
  serviceAgreement?: InputMaybe<Scalars['String']>;
  userAgent?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsTosAcceptanceTreasurySettingsInput = {
  date?: InputMaybe<Scalars['Int']>;
  ip?: InputMaybe<Scalars['String']>;
  userAgent?: InputMaybe<Scalars['String']>;
};

export type StripePostAccountsTransfersCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsTreasuryCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsTreasurySettingsInput = {
  tosAcceptance?: InputMaybe<StripePostAccountsTosAcceptanceTreasurySettingsInput>;
};

export enum StripePostAccountsType {
  Custom = 'CUSTOM',
  Express = 'EXPRESS',
  Standard = 'STANDARD'
}

export type StripePostAccountsUsBankAccountAchPaymentsCapabilitiesInput = {
  requested?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostAccountsVerificationCompanyInput = {
  document?: InputMaybe<StripePostAccountsDocumentVerificationCompanyInput>;
};

export type StripePostAccountsVerificationIndividualInput = {
  additionalDocument?: InputMaybe<StripePostAccountsAdditionalDocumentVerificationIndividualInput>;
  document?: InputMaybe<StripePostAccountsDocumentVerificationIndividualInput>;
};

export enum StripePostAccountsWeeklyAnchorSchedulePayoutsSettings {
  Friday = 'FRIDAY',
  Monday = 'MONDAY',
  Saturday = 'SATURDAY',
  Sunday = 'SUNDAY',
  Thursday = 'THURSDAY',
  Tuesday = 'TUESDAY',
  Wednesday = 'WEDNESDAY'
}

export type StripePostApplePayDomainsInput = {
  domainName: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostApplicationFeesFeeRefundsIdInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
};

export type StripePostApplicationFeesIdRefundInput = {
  amount?: InputMaybe<Scalars['Int']>;
  directive?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostApplicationFeesIdRefundsInput = {
  amount?: InputMaybe<Scalars['Int']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
};

export type StripePostAppsSecretsDeleteInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  name: Scalars['String'];
  scope: StripePostAppsSecretsDeleteScopeInput;
};

export type StripePostAppsSecretsDeleteScopeInput = {
  type: StripePostAppsSecretsDeleteTypeScope;
  user?: InputMaybe<Scalars['String']>;
};

export enum StripePostAppsSecretsDeleteTypeScope {
  Account = 'ACCOUNT',
  User = 'USER'
}

export type StripePostAppsSecretsInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  expiresAt?: InputMaybe<Scalars['Int']>;
  name: Scalars['String'];
  payload: Scalars['String'];
  scope: StripePostAppsSecretsScopeInput;
};

export type StripePostAppsSecretsScopeInput = {
  type: StripePostAppsSecretsTypeScope;
  user?: InputMaybe<Scalars['String']>;
};

export enum StripePostAppsSecretsTypeScope {
  Account = 'ACCOUNT',
  User = 'USER'
}

export type StripePostBillingPortalConfigurationsBusinessProfileInput = {
  headline?: InputMaybe<Scalars['String']>;
  privacyPolicyUrl?: InputMaybe<Scalars['String']>;
  termsOfServiceUrl?: InputMaybe<Scalars['String']>;
};

export type StripePostBillingPortalConfigurationsCancellationReasonSubscriptionCancelFeaturesInput = {
  enabled: Scalars['Boolean'];
  options: Scalars['JSON'];
};

export type StripePostBillingPortalConfigurationsConfigurationBusinessProfileInput = {
  headline?: InputMaybe<Scalars['String']>;
  privacyPolicyUrl?: InputMaybe<Scalars['JSON']>;
  termsOfServiceUrl?: InputMaybe<Scalars['JSON']>;
};

export type StripePostBillingPortalConfigurationsConfigurationCancellationReasonSubscriptionCancelFeaturesInput = {
  enabled: Scalars['Boolean'];
  options?: InputMaybe<Scalars['JSON']>;
};

export type StripePostBillingPortalConfigurationsConfigurationCustomerUpdateFeaturesInput = {
  allowedUpdates?: InputMaybe<Scalars['JSON']>;
  enabled?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostBillingPortalConfigurationsConfigurationFeaturesInput = {
  customerUpdate?: InputMaybe<StripePostBillingPortalConfigurationsConfigurationCustomerUpdateFeaturesInput>;
  invoiceHistory?: InputMaybe<StripePostBillingPortalConfigurationsConfigurationInvoiceHistoryFeaturesInput>;
  paymentMethodUpdate?: InputMaybe<StripePostBillingPortalConfigurationsConfigurationPaymentMethodUpdateFeaturesInput>;
  subscriptionCancel?: InputMaybe<StripePostBillingPortalConfigurationsConfigurationSubscriptionCancelFeaturesInput>;
  subscriptionPause?: InputMaybe<StripePostBillingPortalConfigurationsConfigurationSubscriptionPauseFeaturesInput>;
  subscriptionUpdate?: InputMaybe<StripePostBillingPortalConfigurationsConfigurationSubscriptionUpdateFeaturesInput>;
};

export type StripePostBillingPortalConfigurationsConfigurationInput = {
  active?: InputMaybe<Scalars['Boolean']>;
  businessProfile?: InputMaybe<StripePostBillingPortalConfigurationsConfigurationBusinessProfileInput>;
  defaultReturnUrl?: InputMaybe<Scalars['JSON']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  features?: InputMaybe<StripePostBillingPortalConfigurationsConfigurationFeaturesInput>;
  loginPage?: InputMaybe<StripePostBillingPortalConfigurationsConfigurationLoginPageInput>;
  metadata?: InputMaybe<Scalars['JSON']>;
};

export type StripePostBillingPortalConfigurationsConfigurationInvoiceHistoryFeaturesInput = {
  enabled: Scalars['Boolean'];
};

export type StripePostBillingPortalConfigurationsConfigurationLoginPageInput = {
  enabled: Scalars['Boolean'];
};

export enum StripePostBillingPortalConfigurationsConfigurationModeSubscriptionCancelFeatures {
  AtPeriodEnd = 'AT_PERIOD_END',
  Immediately = 'IMMEDIATELY'
}

export type StripePostBillingPortalConfigurationsConfigurationPaymentMethodUpdateFeaturesInput = {
  enabled: Scalars['Boolean'];
};

export type StripePostBillingPortalConfigurationsConfigurationProductsSubscriptionUpdateFeaturesInput = {
  prices: Array<Scalars['String']>;
  product: Scalars['String'];
};

export enum StripePostBillingPortalConfigurationsConfigurationProrationBehaviorSubscriptionCancelFeatures {
  AlwaysInvoice = 'ALWAYS_INVOICE',
  CreateProrations = 'CREATE_PRORATIONS',
  None = 'NONE'
}

export enum StripePostBillingPortalConfigurationsConfigurationProrationBehaviorSubscriptionUpdateFeatures {
  AlwaysInvoice = 'ALWAYS_INVOICE',
  CreateProrations = 'CREATE_PRORATIONS',
  None = 'NONE'
}

export type StripePostBillingPortalConfigurationsConfigurationSubscriptionCancelFeaturesInput = {
  cancellationReason?: InputMaybe<StripePostBillingPortalConfigurationsConfigurationCancellationReasonSubscriptionCancelFeaturesInput>;
  enabled?: InputMaybe<Scalars['Boolean']>;
  mode?: InputMaybe<StripePostBillingPortalConfigurationsConfigurationModeSubscriptionCancelFeatures>;
  prorationBehavior?: InputMaybe<StripePostBillingPortalConfigurationsConfigurationProrationBehaviorSubscriptionCancelFeatures>;
};

export type StripePostBillingPortalConfigurationsConfigurationSubscriptionPauseFeaturesInput = {
  enabled?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostBillingPortalConfigurationsConfigurationSubscriptionUpdateFeaturesInput = {
  defaultAllowedUpdates?: InputMaybe<Scalars['JSON']>;
  enabled?: InputMaybe<Scalars['Boolean']>;
  products?: InputMaybe<StripeStringOrPostBillingPortalConfigurationsConfigurationProductsSubscriptionUpdateFeaturesUnionInput>;
  prorationBehavior?: InputMaybe<StripePostBillingPortalConfigurationsConfigurationProrationBehaviorSubscriptionUpdateFeatures>;
};

export type StripePostBillingPortalConfigurationsCustomerUpdateFeaturesInput = {
  allowedUpdates?: InputMaybe<Scalars['JSON']>;
  enabled: Scalars['Boolean'];
};

export type StripePostBillingPortalConfigurationsFeaturesInput = {
  customerUpdate?: InputMaybe<StripePostBillingPortalConfigurationsCustomerUpdateFeaturesInput>;
  invoiceHistory?: InputMaybe<StripePostBillingPortalConfigurationsInvoiceHistoryFeaturesInput>;
  paymentMethodUpdate?: InputMaybe<StripePostBillingPortalConfigurationsPaymentMethodUpdateFeaturesInput>;
  subscriptionCancel?: InputMaybe<StripePostBillingPortalConfigurationsSubscriptionCancelFeaturesInput>;
  subscriptionPause?: InputMaybe<StripePostBillingPortalConfigurationsSubscriptionPauseFeaturesInput>;
  subscriptionUpdate?: InputMaybe<StripePostBillingPortalConfigurationsSubscriptionUpdateFeaturesInput>;
};

export type StripePostBillingPortalConfigurationsInput = {
  businessProfile: StripePostBillingPortalConfigurationsBusinessProfileInput;
  defaultReturnUrl?: InputMaybe<Scalars['JSON']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  features: StripePostBillingPortalConfigurationsFeaturesInput;
  loginPage?: InputMaybe<StripePostBillingPortalConfigurationsLoginPageInput>;
  metadata?: InputMaybe<Scalars['JSON']>;
};

export type StripePostBillingPortalConfigurationsInvoiceHistoryFeaturesInput = {
  enabled: Scalars['Boolean'];
};

export type StripePostBillingPortalConfigurationsLoginPageInput = {
  enabled: Scalars['Boolean'];
};

export enum StripePostBillingPortalConfigurationsModeSubscriptionCancelFeatures {
  AtPeriodEnd = 'AT_PERIOD_END',
  Immediately = 'IMMEDIATELY'
}

export type StripePostBillingPortalConfigurationsPaymentMethodUpdateFeaturesInput = {
  enabled: Scalars['Boolean'];
};

export type StripePostBillingPortalConfigurationsProductsSubscriptionUpdateFeaturesInput = {
  prices: Array<Scalars['String']>;
  product: Scalars['String'];
};

export enum StripePostBillingPortalConfigurationsProrationBehaviorSubscriptionCancelFeatures {
  AlwaysInvoice = 'ALWAYS_INVOICE',
  CreateProrations = 'CREATE_PRORATIONS',
  None = 'NONE'
}

export enum StripePostBillingPortalConfigurationsProrationBehaviorSubscriptionUpdateFeatures {
  AlwaysInvoice = 'ALWAYS_INVOICE',
  CreateProrations = 'CREATE_PRORATIONS',
  None = 'NONE'
}

export type StripePostBillingPortalConfigurationsSubscriptionCancelFeaturesInput = {
  cancellationReason?: InputMaybe<StripePostBillingPortalConfigurationsCancellationReasonSubscriptionCancelFeaturesInput>;
  enabled: Scalars['Boolean'];
  mode?: InputMaybe<StripePostBillingPortalConfigurationsModeSubscriptionCancelFeatures>;
  prorationBehavior?: InputMaybe<StripePostBillingPortalConfigurationsProrationBehaviorSubscriptionCancelFeatures>;
};

export type StripePostBillingPortalConfigurationsSubscriptionPauseFeaturesInput = {
  enabled?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostBillingPortalConfigurationsSubscriptionUpdateFeaturesInput = {
  defaultAllowedUpdates: Scalars['JSON'];
  enabled: Scalars['Boolean'];
  products: StripeStringOrPostBillingPortalConfigurationsProductsSubscriptionUpdateFeaturesUnionInput;
  prorationBehavior?: InputMaybe<StripePostBillingPortalConfigurationsProrationBehaviorSubscriptionUpdateFeatures>;
};

export type StripePostBillingPortalSessionsAfterCompletionFlowDataInput = {
  hostedConfirmation?: InputMaybe<StripePostBillingPortalSessionsHostedConfirmationAfterCompletionFlowDataInput>;
  redirect?: InputMaybe<StripePostBillingPortalSessionsRedirectAfterCompletionFlowDataInput>;
  type: StripePostBillingPortalSessionsTypeAfterCompletionFlowData;
};

export type StripePostBillingPortalSessionsDiscountsSubscriptionUpdateConfirmFlowDataInput = {
  coupon?: InputMaybe<Scalars['String']>;
  promotionCode?: InputMaybe<Scalars['String']>;
};

export type StripePostBillingPortalSessionsFlowDataInput = {
  afterCompletion?: InputMaybe<StripePostBillingPortalSessionsAfterCompletionFlowDataInput>;
  subscriptionCancel?: InputMaybe<StripePostBillingPortalSessionsSubscriptionCancelFlowDataInput>;
  subscriptionUpdate?: InputMaybe<StripePostBillingPortalSessionsSubscriptionUpdateFlowDataInput>;
  subscriptionUpdateConfirm?: InputMaybe<StripePostBillingPortalSessionsSubscriptionUpdateConfirmFlowDataInput>;
  type: StripePostBillingPortalSessionsTypeFlowData;
};

export type StripePostBillingPortalSessionsHostedConfirmationAfterCompletionFlowDataInput = {
  customMessage?: InputMaybe<Scalars['String']>;
};

export type StripePostBillingPortalSessionsInput = {
  configuration?: InputMaybe<Scalars['String']>;
  customer: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
  flowData?: InputMaybe<StripePostBillingPortalSessionsFlowDataInput>;
  locale?: InputMaybe<StripePostBillingPortalSessionsLocale>;
  onBehalfOf?: InputMaybe<Scalars['String']>;
  returnUrl?: InputMaybe<Scalars['String']>;
};

export type StripePostBillingPortalSessionsItemsSubscriptionUpdateConfirmFlowDataInput = {
  id: Scalars['String'];
  price?: InputMaybe<Scalars['String']>;
  quantity?: InputMaybe<Scalars['Int']>;
};

export enum StripePostBillingPortalSessionsLocale {
  Auto = 'AUTO',
  Bg = 'BG',
  Cs = 'CS',
  Da = 'DA',
  De = 'DE',
  El = 'EL',
  En = 'EN',
  EnAu = 'EN_AU',
  EnCa = 'EN_CA',
  EnGb = 'EN_GB',
  EnIe = 'EN_IE',
  EnIn = 'EN_IN',
  EnNz = 'EN_NZ',
  EnSg = 'EN_SG',
  Es = 'ES',
  Es_419 = 'ES_419',
  Et = 'ET',
  Fi = 'FI',
  Fil = 'FIL',
  Fr = 'FR',
  FrCa = 'FR_CA',
  Hr = 'HR',
  Hu = 'HU',
  Id = 'ID',
  It = 'IT',
  Ja = 'JA',
  Ko = 'KO',
  Lt = 'LT',
  Lv = 'LV',
  Ms = 'MS',
  Mt = 'MT',
  Nb = 'NB',
  Nl = 'NL',
  Pl = 'PL',
  Pt = 'PT',
  PtBr = 'PT_BR',
  Ro = 'RO',
  Ru = 'RU',
  Sk = 'SK',
  Sl = 'SL',
  Sv = 'SV',
  Th = 'TH',
  Tr = 'TR',
  Vi = 'VI',
  Zh = 'ZH',
  ZhHk = 'ZH_HK',
  ZhTw = 'ZH_TW'
}

export type StripePostBillingPortalSessionsRedirectAfterCompletionFlowDataInput = {
  returnUrl: Scalars['String'];
};

export type StripePostBillingPortalSessionsSubscriptionCancelFlowDataInput = {
  subscription: Scalars['String'];
};

export type StripePostBillingPortalSessionsSubscriptionUpdateConfirmFlowDataInput = {
  discounts?: InputMaybe<Array<StripePostBillingPortalSessionsDiscountsSubscriptionUpdateConfirmFlowDataInput>>;
  items: Array<StripePostBillingPortalSessionsItemsSubscriptionUpdateConfirmFlowDataInput>;
  subscription: Scalars['String'];
};

export type StripePostBillingPortalSessionsSubscriptionUpdateFlowDataInput = {
  subscription: Scalars['String'];
};

export enum StripePostBillingPortalSessionsTypeAfterCompletionFlowData {
  HostedConfirmation = 'HOSTED_CONFIRMATION',
  PortalHomepage = 'PORTAL_HOMEPAGE',
  Redirect = 'REDIRECT'
}

export enum StripePostBillingPortalSessionsTypeFlowData {
  PaymentMethodUpdate = 'PAYMENT_METHOD_UPDATE',
  SubscriptionCancel = 'SUBSCRIPTION_CANCEL',
  SubscriptionUpdate = 'SUBSCRIPTION_UPDATE',
  SubscriptionUpdateConfirm = 'SUBSCRIPTION_UPDATE_CONFIRM'
}

export type StripePostChargesAddressShippingInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostChargesCardInput = {
  addressCity?: InputMaybe<Scalars['String']>;
  addressCountry?: InputMaybe<Scalars['String']>;
  addressLine1?: InputMaybe<Scalars['String']>;
  addressLine2?: InputMaybe<Scalars['String']>;
  addressState?: InputMaybe<Scalars['String']>;
  addressZip?: InputMaybe<Scalars['String']>;
  cvc?: InputMaybe<Scalars['String']>;
  expMonth: Scalars['Int'];
  expYear: Scalars['Int'];
  metadata?: InputMaybe<Scalars['JSON']>;
  name?: InputMaybe<Scalars['String']>;
  number: Scalars['String'];
  object?: InputMaybe<StripePostChargesObjectCard>;
};

export type StripePostChargesChargeAddressShippingInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostChargesChargeCaptureInput = {
  amount?: InputMaybe<Scalars['Int']>;
  applicationFee?: InputMaybe<Scalars['Int']>;
  applicationFeeAmount?: InputMaybe<Scalars['Int']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  receiptEmail?: InputMaybe<Scalars['String']>;
  statementDescriptor?: InputMaybe<Scalars['String']>;
  statementDescriptorSuffix?: InputMaybe<Scalars['String']>;
  transferData?: InputMaybe<StripePostChargesChargeCaptureTransferDataInput>;
  transferGroup?: InputMaybe<Scalars['String']>;
};

export type StripePostChargesChargeCaptureTransferDataInput = {
  amount?: InputMaybe<Scalars['Int']>;
};

export type StripePostChargesChargeDisputeCloseInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostChargesChargeDisputeEvidenceInput = {
  accessActivityLog?: InputMaybe<Scalars['String']>;
  billingAddress?: InputMaybe<Scalars['String']>;
  cancellationPolicy?: InputMaybe<Scalars['String']>;
  cancellationPolicyDisclosure?: InputMaybe<Scalars['String']>;
  cancellationRebuttal?: InputMaybe<Scalars['String']>;
  customerCommunication?: InputMaybe<Scalars['String']>;
  customerEmailAddress?: InputMaybe<Scalars['String']>;
  customerName?: InputMaybe<Scalars['String']>;
  customerPurchaseIp?: InputMaybe<Scalars['String']>;
  customerSignature?: InputMaybe<Scalars['String']>;
  duplicateChargeDocumentation?: InputMaybe<Scalars['String']>;
  duplicateChargeExplanation?: InputMaybe<Scalars['String']>;
  duplicateChargeId?: InputMaybe<Scalars['String']>;
  productDescription?: InputMaybe<Scalars['String']>;
  receipt?: InputMaybe<Scalars['String']>;
  refundPolicy?: InputMaybe<Scalars['String']>;
  refundPolicyDisclosure?: InputMaybe<Scalars['String']>;
  refundRefusalExplanation?: InputMaybe<Scalars['String']>;
  serviceDate?: InputMaybe<Scalars['String']>;
  serviceDocumentation?: InputMaybe<Scalars['String']>;
  shippingAddress?: InputMaybe<Scalars['String']>;
  shippingCarrier?: InputMaybe<Scalars['String']>;
  shippingDate?: InputMaybe<Scalars['String']>;
  shippingDocumentation?: InputMaybe<Scalars['String']>;
  shippingTrackingNumber?: InputMaybe<Scalars['String']>;
  uncategorizedFile?: InputMaybe<Scalars['String']>;
  uncategorizedText?: InputMaybe<Scalars['String']>;
};

export type StripePostChargesChargeDisputeInput = {
  evidence?: InputMaybe<StripePostChargesChargeDisputeEvidenceInput>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  submit?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostChargesChargeFraudDetailsInput = {
  userReport: Scalars['String'];
};

export type StripePostChargesChargeInput = {
  customer?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  fraudDetails?: InputMaybe<StripePostChargesChargeFraudDetailsInput>;
  metadata?: InputMaybe<Scalars['JSON']>;
  receiptEmail?: InputMaybe<Scalars['String']>;
  shipping?: InputMaybe<StripePostChargesChargeShippingInput>;
  transferGroup?: InputMaybe<Scalars['String']>;
};

export type StripePostChargesChargeRefundInput = {
  amount?: InputMaybe<Scalars['Int']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  instructionsEmail?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  paymentIntent?: InputMaybe<Scalars['String']>;
  reason?: InputMaybe<StripePostChargesChargeRefundReason>;
  refundApplicationFee?: InputMaybe<Scalars['Boolean']>;
  reverseTransfer?: InputMaybe<Scalars['Boolean']>;
};

export enum StripePostChargesChargeRefundReason {
  Duplicate = 'DUPLICATE',
  Fraudulent = 'FRAUDULENT',
  RequestedByCustomer = 'REQUESTED_BY_CUSTOMER'
}

export type StripePostChargesChargeRefundsInput = {
  amount?: InputMaybe<Scalars['Int']>;
  currency?: InputMaybe<Scalars['String']>;
  customer?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  instructionsEmail?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  origin?: InputMaybe<StripePostChargesChargeRefundsOrigin>;
  paymentIntent?: InputMaybe<Scalars['String']>;
  reason?: InputMaybe<StripePostChargesChargeRefundsReason>;
  refundApplicationFee?: InputMaybe<Scalars['Boolean']>;
  reverseTransfer?: InputMaybe<Scalars['Boolean']>;
};

export enum StripePostChargesChargeRefundsOrigin {
  CustomerBalance = 'CUSTOMER_BALANCE'
}

export enum StripePostChargesChargeRefundsReason {
  Duplicate = 'DUPLICATE',
  Fraudulent = 'FRAUDULENT',
  RequestedByCustomer = 'REQUESTED_BY_CUSTOMER'
}

export type StripePostChargesChargeRefundsRefundInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
};

export type StripePostChargesChargeShippingInput = {
  address: StripePostChargesChargeAddressShippingInput;
  carrier?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  phone?: InputMaybe<Scalars['String']>;
  trackingNumber?: InputMaybe<Scalars['String']>;
};

export type StripePostChargesDestinationInput = {
  account: Scalars['String'];
  amount?: InputMaybe<Scalars['Int']>;
};

export type StripePostChargesInput = {
  amount?: InputMaybe<Scalars['Int']>;
  applicationFee?: InputMaybe<Scalars['Int']>;
  applicationFeeAmount?: InputMaybe<Scalars['Int']>;
  capture?: InputMaybe<Scalars['Boolean']>;
  card?: InputMaybe<StripeStringOrPostChargesCardUnionInput>;
  currency?: InputMaybe<Scalars['String']>;
  customer?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  destination?: InputMaybe<StripeStringOrPostChargesDestinationUnionInput>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  onBehalfOf?: InputMaybe<Scalars['String']>;
  radarOptions?: InputMaybe<StripePostChargesRadarOptionsInput>;
  receiptEmail?: InputMaybe<Scalars['String']>;
  shipping?: InputMaybe<StripePostChargesShippingInput>;
  source?: InputMaybe<Scalars['String']>;
  statementDescriptor?: InputMaybe<Scalars['String']>;
  statementDescriptorSuffix?: InputMaybe<Scalars['String']>;
  transferData?: InputMaybe<StripePostChargesTransferDataInput>;
  transferGroup?: InputMaybe<Scalars['String']>;
};

export enum StripePostChargesObjectCard {
  Card = 'CARD'
}

export type StripePostChargesRadarOptionsInput = {
  session?: InputMaybe<Scalars['String']>;
};

export type StripePostChargesShippingInput = {
  address: StripePostChargesAddressShippingInput;
  carrier?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  phone?: InputMaybe<Scalars['String']>;
  trackingNumber?: InputMaybe<Scalars['String']>;
};

export type StripePostChargesTransferDataInput = {
  amount?: InputMaybe<Scalars['Int']>;
  destination: Scalars['String'];
};

export type StripePostCheckoutSessionsAcssDebitPaymentMethodOptionsInput = {
  currency?: InputMaybe<StripePostCheckoutSessionsCurrencyAcssDebitPaymentMethodOptions>;
  mandateOptions?: InputMaybe<StripePostCheckoutSessionsMandateOptionsAcssDebitPaymentMethodOptionsInput>;
  setupFutureUsage?: InputMaybe<StripePostCheckoutSessionsSetupFutureUsageAcssDebitPaymentMethodOptions>;
  verificationMethod?: InputMaybe<StripePostCheckoutSessionsVerificationMethodAcssDebitPaymentMethodOptions>;
};

export enum StripePostCheckoutSessionsAddressCustomerUpdate {
  Auto = 'AUTO',
  Never = 'NEVER'
}

export type StripePostCheckoutSessionsAddressShippingPaymentIntentDataInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1: Scalars['String'];
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostCheckoutSessionsAdjustableQuantityLineItemsInput = {
  enabled: Scalars['Boolean'];
  maximum?: InputMaybe<Scalars['Int']>;
  minimum?: InputMaybe<Scalars['Int']>;
};

export type StripePostCheckoutSessionsAffirmPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostCheckoutSessionsSetupFutureUsageAffirmPaymentMethodOptions>;
};

export type StripePostCheckoutSessionsAfterExpirationInput = {
  recovery?: InputMaybe<StripePostCheckoutSessionsRecoveryAfterExpirationInput>;
};

export type StripePostCheckoutSessionsAfterpayClearpayPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostCheckoutSessionsSetupFutureUsageAfterpayClearpayPaymentMethodOptions>;
};

export type StripePostCheckoutSessionsAlipayPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostCheckoutSessionsSetupFutureUsageAlipayPaymentMethodOptions>;
};

export enum StripePostCheckoutSessionsAllowedCountriesShippingAddressCollection {
  Ac = 'AC',
  Ad = 'AD',
  Ae = 'AE',
  Af = 'AF',
  Ag = 'AG',
  Ai = 'AI',
  Al = 'AL',
  Am = 'AM',
  Ao = 'AO',
  Aq = 'AQ',
  Ar = 'AR',
  At = 'AT',
  Au = 'AU',
  Aw = 'AW',
  Ax = 'AX',
  Az = 'AZ',
  Ba = 'BA',
  Bb = 'BB',
  Bd = 'BD',
  Be = 'BE',
  Bf = 'BF',
  Bg = 'BG',
  Bh = 'BH',
  Bi = 'BI',
  Bj = 'BJ',
  Bl = 'BL',
  Bm = 'BM',
  Bn = 'BN',
  Bo = 'BO',
  Bq = 'BQ',
  Br = 'BR',
  Bs = 'BS',
  Bt = 'BT',
  Bv = 'BV',
  Bw = 'BW',
  By = 'BY',
  Bz = 'BZ',
  Ca = 'CA',
  Cd = 'CD',
  Cf = 'CF',
  Cg = 'CG',
  Ch = 'CH',
  Ci = 'CI',
  Ck = 'CK',
  Cl = 'CL',
  Cm = 'CM',
  Cn = 'CN',
  Co = 'CO',
  Cr = 'CR',
  Cv = 'CV',
  Cw = 'CW',
  Cy = 'CY',
  Cz = 'CZ',
  De = 'DE',
  Dj = 'DJ',
  Dk = 'DK',
  Dm = 'DM',
  Do = 'DO',
  Dz = 'DZ',
  Ec = 'EC',
  Ee = 'EE',
  Eg = 'EG',
  Eh = 'EH',
  Er = 'ER',
  Es = 'ES',
  Et = 'ET',
  Fi = 'FI',
  Fj = 'FJ',
  Fk = 'FK',
  Fo = 'FO',
  Fr = 'FR',
  Ga = 'GA',
  Gb = 'GB',
  Gd = 'GD',
  Ge = 'GE',
  Gf = 'GF',
  Gg = 'GG',
  Gh = 'GH',
  Gi = 'GI',
  Gl = 'GL',
  Gm = 'GM',
  Gn = 'GN',
  Gp = 'GP',
  Gq = 'GQ',
  Gr = 'GR',
  Gs = 'GS',
  Gt = 'GT',
  Gu = 'GU',
  Gw = 'GW',
  Gy = 'GY',
  Hk = 'HK',
  Hn = 'HN',
  Hr = 'HR',
  Ht = 'HT',
  Hu = 'HU',
  Id = 'ID',
  Ie = 'IE',
  Il = 'IL',
  Im = 'IM',
  In = 'IN',
  Io = 'IO',
  Iq = 'IQ',
  Is = 'IS',
  It = 'IT',
  Je = 'JE',
  Jm = 'JM',
  Jo = 'JO',
  Jp = 'JP',
  Ke = 'KE',
  Kg = 'KG',
  Kh = 'KH',
  Ki = 'KI',
  Km = 'KM',
  Kn = 'KN',
  Kr = 'KR',
  Kw = 'KW',
  Ky = 'KY',
  Kz = 'KZ',
  La = 'LA',
  Lb = 'LB',
  Lc = 'LC',
  Li = 'LI',
  Lk = 'LK',
  Lr = 'LR',
  Ls = 'LS',
  Lt = 'LT',
  Lu = 'LU',
  Lv = 'LV',
  Ly = 'LY',
  Ma = 'MA',
  Mc = 'MC',
  Md = 'MD',
  Me = 'ME',
  Mf = 'MF',
  Mg = 'MG',
  Mk = 'MK',
  Ml = 'ML',
  Mm = 'MM',
  Mn = 'MN',
  Mo = 'MO',
  Mq = 'MQ',
  Mr = 'MR',
  Ms = 'MS',
  Mt = 'MT',
  Mu = 'MU',
  Mv = 'MV',
  Mw = 'MW',
  Mx = 'MX',
  My = 'MY',
  Mz = 'MZ',
  Na = 'NA',
  Nc = 'NC',
  Ne = 'NE',
  Ng = 'NG',
  Ni = 'NI',
  Nl = 'NL',
  No = 'NO',
  Np = 'NP',
  Nr = 'NR',
  Nu = 'NU',
  Nz = 'NZ',
  Om = 'OM',
  Pa = 'PA',
  Pe = 'PE',
  Pf = 'PF',
  Pg = 'PG',
  Ph = 'PH',
  Pk = 'PK',
  Pl = 'PL',
  Pm = 'PM',
  Pn = 'PN',
  Pr = 'PR',
  Ps = 'PS',
  Pt = 'PT',
  Py = 'PY',
  Qa = 'QA',
  Re = 'RE',
  Ro = 'RO',
  Rs = 'RS',
  Ru = 'RU',
  Rw = 'RW',
  Sa = 'SA',
  Sb = 'SB',
  Sc = 'SC',
  Se = 'SE',
  Sg = 'SG',
  Sh = 'SH',
  Si = 'SI',
  Sj = 'SJ',
  Sk = 'SK',
  Sl = 'SL',
  Sm = 'SM',
  Sn = 'SN',
  So = 'SO',
  Sr = 'SR',
  Ss = 'SS',
  St = 'ST',
  Sv = 'SV',
  Sx = 'SX',
  Sz = 'SZ',
  Ta = 'TA',
  Tc = 'TC',
  Td = 'TD',
  Tf = 'TF',
  Tg = 'TG',
  Th = 'TH',
  Tj = 'TJ',
  Tk = 'TK',
  Tl = 'TL',
  Tm = 'TM',
  Tn = 'TN',
  To = 'TO',
  Tr = 'TR',
  Tt = 'TT',
  Tv = 'TV',
  Tw = 'TW',
  Tz = 'TZ',
  Ua = 'UA',
  Ug = 'UG',
  Us = 'US',
  Uy = 'UY',
  Uz = 'UZ',
  Va = 'VA',
  Vc = 'VC',
  Ve = 'VE',
  Vg = 'VG',
  Vn = 'VN',
  Vu = 'VU',
  Wf = 'WF',
  Ws = 'WS',
  Xk = 'XK',
  Ye = 'YE',
  Yt = 'YT',
  Za = 'ZA',
  Zm = 'ZM',
  Zw = 'ZW',
  Zz = 'ZZ'
}

export type StripePostCheckoutSessionsAuBecsDebitPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostCheckoutSessionsSetupFutureUsageAuBecsDebitPaymentMethodOptions>;
};

export type StripePostCheckoutSessionsAutomaticTaxInput = {
  enabled: Scalars['Boolean'];
};

export type StripePostCheckoutSessionsBacsDebitPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostCheckoutSessionsSetupFutureUsageBacsDebitPaymentMethodOptions>;
};

export type StripePostCheckoutSessionsBancontactPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostCheckoutSessionsSetupFutureUsageBancontactPaymentMethodOptions>;
};

export type StripePostCheckoutSessionsBankTransferCustomerBalancePaymentMethodOptionsInput = {
  euBankTransfer?: InputMaybe<StripePostCheckoutSessionsEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsInput>;
  requestedAddressTypes?: InputMaybe<Array<StripePostCheckoutSessionsRequestedAddressTypesBankTransferCustomerBalancePaymentMethodOptions>>;
  type: StripePostCheckoutSessionsTypeBankTransferCustomerBalancePaymentMethodOptions;
};

export enum StripePostCheckoutSessionsBillingAddressCollection {
  Auto = 'AUTO',
  Required = 'REQUIRED'
}

export type StripePostCheckoutSessionsBoletoPaymentMethodOptionsInput = {
  expiresAfterDays?: InputMaybe<Scalars['Int']>;
  setupFutureUsage?: InputMaybe<StripePostCheckoutSessionsSetupFutureUsageBoletoPaymentMethodOptions>;
};

export enum StripePostCheckoutSessionsCaptureMethodPaymentIntentData {
  Automatic = 'AUTOMATIC',
  AutomaticAsync = 'AUTOMATIC_ASYNC',
  Manual = 'MANUAL'
}

export type StripePostCheckoutSessionsCardPaymentMethodOptionsInput = {
  installments?: InputMaybe<StripePostCheckoutSessionsInstallmentsCardPaymentMethodOptionsInput>;
  setupFutureUsage?: InputMaybe<StripePostCheckoutSessionsSetupFutureUsageCardPaymentMethodOptions>;
  statementDescriptorSuffixKana?: InputMaybe<Scalars['String']>;
  statementDescriptorSuffixKanji?: InputMaybe<Scalars['String']>;
};

export type StripePostCheckoutSessionsCashappPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostCheckoutSessionsSetupFutureUsageCashappPaymentMethodOptions>;
};

export enum StripePostCheckoutSessionsClientWechatPayPaymentMethodOptions {
  Android = 'ANDROID',
  Ios = 'IOS',
  Web = 'WEB'
}

export type StripePostCheckoutSessionsConsentCollectionInput = {
  promotions?: InputMaybe<StripePostCheckoutSessionsPromotionsConsentCollection>;
  termsOfService?: InputMaybe<StripePostCheckoutSessionsTermsOfServiceConsentCollection>;
};

export enum StripePostCheckoutSessionsCurrencyAcssDebitPaymentMethodOptions {
  Cad = 'CAD',
  Usd = 'USD'
}

export type StripePostCheckoutSessionsCustomFieldsInput = {
  dropdown?: InputMaybe<StripePostCheckoutSessionsDropdownCustomFieldsInput>;
  key: Scalars['String'];
  label: StripePostCheckoutSessionsLabelCustomFieldsInput;
  optional?: InputMaybe<Scalars['Boolean']>;
  type: StripePostCheckoutSessionsTypeCustomFields;
};

export type StripePostCheckoutSessionsCustomFieldsInvoiceDataInvoiceCreationInput = {
  name: Scalars['String'];
  value: Scalars['String'];
};

export type StripePostCheckoutSessionsCustomTextInput = {
  shippingAddress?: InputMaybe<StripeStringOrPostCheckoutSessionsShippingAddressCustomTextUnionInput>;
  submit?: InputMaybe<StripeStringOrPostCheckoutSessionsSubmitCustomTextUnionInput>;
};

export type StripePostCheckoutSessionsCustomerBalancePaymentMethodOptionsInput = {
  bankTransfer?: InputMaybe<StripePostCheckoutSessionsBankTransferCustomerBalancePaymentMethodOptionsInput>;
  fundingType?: InputMaybe<StripePostCheckoutSessionsFundingTypeCustomerBalancePaymentMethodOptions>;
  setupFutureUsage?: InputMaybe<StripePostCheckoutSessionsSetupFutureUsageCustomerBalancePaymentMethodOptions>;
};

export enum StripePostCheckoutSessionsCustomerCreation {
  Always = 'ALWAYS',
  IfRequired = 'IF_REQUIRED'
}

export type StripePostCheckoutSessionsCustomerUpdateInput = {
  address?: InputMaybe<StripePostCheckoutSessionsAddressCustomerUpdate>;
  name?: InputMaybe<StripePostCheckoutSessionsNameCustomerUpdate>;
  shipping?: InputMaybe<StripePostCheckoutSessionsShippingCustomerUpdate>;
};

export enum StripePostCheckoutSessionsDefaultForMandateOptionsAcssDebitPaymentMethodOptions {
  Invoice = 'INVOICE',
  Subscription = 'SUBSCRIPTION'
}

export type StripePostCheckoutSessionsDeliveryEstimateShippingRateDataShippingOptionsInput = {
  maximum?: InputMaybe<StripePostCheckoutSessionsMaximumDeliveryEstimateShippingRateDataShippingOptionsInput>;
  minimum?: InputMaybe<StripePostCheckoutSessionsMinimumDeliveryEstimateShippingRateDataShippingOptionsInput>;
};

export type StripePostCheckoutSessionsDiscountsInput = {
  coupon?: InputMaybe<Scalars['String']>;
  promotionCode?: InputMaybe<Scalars['String']>;
};

export type StripePostCheckoutSessionsDropdownCustomFieldsInput = {
  options: Array<StripePostCheckoutSessionsOptionsDropdownCustomFieldsInput>;
};

export type StripePostCheckoutSessionsEndBehaviorTrialSettingsSubscriptionDataInput = {
  missingPaymentMethod: StripePostCheckoutSessionsMissingPaymentMethodEndBehaviorTrialSettingsSubscriptionData;
};

export type StripePostCheckoutSessionsEpsPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostCheckoutSessionsSetupFutureUsageEpsPaymentMethodOptions>;
};

export type StripePostCheckoutSessionsEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsInput = {
  country: Scalars['String'];
};

export type StripePostCheckoutSessionsFinancialConnectionsUsBankAccountPaymentMethodOptionsInput = {
  permissions?: InputMaybe<Array<StripePostCheckoutSessionsPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions>>;
};

export type StripePostCheckoutSessionsFixedAmountShippingRateDataShippingOptionsInput = {
  amount: Scalars['Int'];
  currency: Scalars['String'];
  currencyOptions?: InputMaybe<Scalars['JSON']>;
};

export type StripePostCheckoutSessionsFpxPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostCheckoutSessionsSetupFutureUsageFpxPaymentMethodOptions>;
};

export enum StripePostCheckoutSessionsFundingTypeCustomerBalancePaymentMethodOptions {
  BankTransfer = 'BANK_TRANSFER'
}

export type StripePostCheckoutSessionsGiropayPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostCheckoutSessionsSetupFutureUsageGiropayPaymentMethodOptions>;
};

export type StripePostCheckoutSessionsGrabpayPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostCheckoutSessionsSetupFutureUsageGrabpayPaymentMethodOptions>;
};

export type StripePostCheckoutSessionsIdealPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostCheckoutSessionsSetupFutureUsageIdealPaymentMethodOptions>;
};

export type StripePostCheckoutSessionsInput = {
  afterExpiration?: InputMaybe<StripePostCheckoutSessionsAfterExpirationInput>;
  allowPromotionCodes?: InputMaybe<Scalars['Boolean']>;
  automaticTax?: InputMaybe<StripePostCheckoutSessionsAutomaticTaxInput>;
  billingAddressCollection?: InputMaybe<StripePostCheckoutSessionsBillingAddressCollection>;
  cancelUrl?: InputMaybe<Scalars['String']>;
  clientReferenceId?: InputMaybe<Scalars['String']>;
  consentCollection?: InputMaybe<StripePostCheckoutSessionsConsentCollectionInput>;
  currency?: InputMaybe<Scalars['String']>;
  customFields?: InputMaybe<Array<StripePostCheckoutSessionsCustomFieldsInput>>;
  customText?: InputMaybe<StripePostCheckoutSessionsCustomTextInput>;
  customer?: InputMaybe<Scalars['String']>;
  customerCreation?: InputMaybe<StripePostCheckoutSessionsCustomerCreation>;
  customerEmail?: InputMaybe<Scalars['String']>;
  customerUpdate?: InputMaybe<StripePostCheckoutSessionsCustomerUpdateInput>;
  discounts?: InputMaybe<Array<StripePostCheckoutSessionsDiscountsInput>>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  expiresAt?: InputMaybe<Scalars['Int']>;
  invoiceCreation?: InputMaybe<StripePostCheckoutSessionsInvoiceCreationInput>;
  lineItems?: InputMaybe<Array<StripePostCheckoutSessionsLineItemsInput>>;
  locale?: InputMaybe<StripePostCheckoutSessionsLocale>;
  metadata?: InputMaybe<Scalars['JSON']>;
  mode?: InputMaybe<StripePostCheckoutSessionsMode>;
  paymentIntentData?: InputMaybe<StripePostCheckoutSessionsPaymentIntentDataInput>;
  paymentMethodCollection?: InputMaybe<StripePostCheckoutSessionsPaymentMethodCollection>;
  paymentMethodOptions?: InputMaybe<StripePostCheckoutSessionsPaymentMethodOptionsInput>;
  paymentMethodTypes?: InputMaybe<Array<StripePostCheckoutSessionsPaymentMethodTypes>>;
  phoneNumberCollection?: InputMaybe<StripePostCheckoutSessionsPhoneNumberCollectionInput>;
  setupIntentData?: InputMaybe<StripePostCheckoutSessionsSetupIntentDataInput>;
  shippingAddressCollection?: InputMaybe<StripePostCheckoutSessionsShippingAddressCollectionInput>;
  shippingOptions?: InputMaybe<Array<StripePostCheckoutSessionsShippingOptionsInput>>;
  submitType?: InputMaybe<StripePostCheckoutSessionsSubmitType>;
  subscriptionData?: InputMaybe<StripePostCheckoutSessionsSubscriptionDataInput>;
  successUrl: Scalars['String'];
  taxIdCollection?: InputMaybe<StripePostCheckoutSessionsTaxIdCollectionInput>;
};

export type StripePostCheckoutSessionsInstallmentsCardPaymentMethodOptionsInput = {
  enabled?: InputMaybe<Scalars['Boolean']>;
};

export enum StripePostCheckoutSessionsIntervalRecurringPriceDataLineItems {
  Day = 'DAY',
  Month = 'MONTH',
  Week = 'WEEK',
  Year = 'YEAR'
}

export type StripePostCheckoutSessionsInvoiceCreationInput = {
  enabled: Scalars['Boolean'];
  invoiceData?: InputMaybe<StripePostCheckoutSessionsInvoiceDataInvoiceCreationInput>;
};

export type StripePostCheckoutSessionsInvoiceDataInvoiceCreationInput = {
  accountTaxIds?: InputMaybe<Scalars['JSON']>;
  customFields?: InputMaybe<StripeStringOrPostCheckoutSessionsCustomFieldsInvoiceDataInvoiceCreationUnionInput>;
  description?: InputMaybe<Scalars['String']>;
  footer?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  renderingOptions?: InputMaybe<StripeStringOrPostCheckoutSessionsRenderingOptionsInvoiceDataInvoiceCreationUnionInput>;
};

export type StripePostCheckoutSessionsKlarnaPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostCheckoutSessionsSetupFutureUsageKlarnaPaymentMethodOptions>;
};

export type StripePostCheckoutSessionsKonbiniPaymentMethodOptionsInput = {
  expiresAfterDays?: InputMaybe<Scalars['Int']>;
  setupFutureUsage?: InputMaybe<StripePostCheckoutSessionsSetupFutureUsageKonbiniPaymentMethodOptions>;
};

export type StripePostCheckoutSessionsLabelCustomFieldsInput = {
  custom: Scalars['String'];
  type: StripePostCheckoutSessionsTypeLabelCustomFields;
};

export type StripePostCheckoutSessionsLineItemsInput = {
  adjustableQuantity?: InputMaybe<StripePostCheckoutSessionsAdjustableQuantityLineItemsInput>;
  dynamicTaxRates?: InputMaybe<Array<Scalars['String']>>;
  price?: InputMaybe<Scalars['String']>;
  priceData?: InputMaybe<StripePostCheckoutSessionsPriceDataLineItemsInput>;
  quantity?: InputMaybe<Scalars['Int']>;
  taxRates?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostCheckoutSessionsLinkPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostCheckoutSessionsSetupFutureUsageLinkPaymentMethodOptions>;
};

export enum StripePostCheckoutSessionsLocale {
  Auto = 'AUTO',
  Bg = 'BG',
  Cs = 'CS',
  Da = 'DA',
  De = 'DE',
  El = 'EL',
  En = 'EN',
  EnGb = 'EN_GB',
  Es = 'ES',
  Es_419 = 'ES_419',
  Et = 'ET',
  Fi = 'FI',
  Fil = 'FIL',
  Fr = 'FR',
  FrCa = 'FR_CA',
  Hr = 'HR',
  Hu = 'HU',
  Id = 'ID',
  It = 'IT',
  Ja = 'JA',
  Ko = 'KO',
  Lt = 'LT',
  Lv = 'LV',
  Ms = 'MS',
  Mt = 'MT',
  Nb = 'NB',
  Nl = 'NL',
  Pl = 'PL',
  Pt = 'PT',
  PtBr = 'PT_BR',
  Ro = 'RO',
  Ru = 'RU',
  Sk = 'SK',
  Sl = 'SL',
  Sv = 'SV',
  Th = 'TH',
  Tr = 'TR',
  Vi = 'VI',
  Zh = 'ZH',
  ZhHk = 'ZH_HK',
  ZhTw = 'ZH_TW'
}

export type StripePostCheckoutSessionsMandateOptionsAcssDebitPaymentMethodOptionsInput = {
  customMandateUrl?: InputMaybe<Scalars['JSON']>;
  defaultFor?: InputMaybe<Array<StripePostCheckoutSessionsDefaultForMandateOptionsAcssDebitPaymentMethodOptions>>;
  intervalDescription?: InputMaybe<Scalars['String']>;
  paymentSchedule?: InputMaybe<StripePostCheckoutSessionsPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions>;
  transactionType?: InputMaybe<StripePostCheckoutSessionsTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions>;
};

export type StripePostCheckoutSessionsMaximumDeliveryEstimateShippingRateDataShippingOptionsInput = {
  unit: StripePostCheckoutSessionsUnitMaximumDeliveryEstimateShippingRateDataShippingOptions;
  value: Scalars['Int'];
};

export type StripePostCheckoutSessionsMinimumDeliveryEstimateShippingRateDataShippingOptionsInput = {
  unit: StripePostCheckoutSessionsUnitMinimumDeliveryEstimateShippingRateDataShippingOptions;
  value: Scalars['Int'];
};

export enum StripePostCheckoutSessionsMissingPaymentMethodEndBehaviorTrialSettingsSubscriptionData {
  Cancel = 'CANCEL',
  CreateInvoice = 'CREATE_INVOICE',
  Pause = 'PAUSE'
}

export enum StripePostCheckoutSessionsMode {
  Payment = 'PAYMENT',
  Setup = 'SETUP',
  Subscription = 'SUBSCRIPTION'
}

export enum StripePostCheckoutSessionsNameCustomerUpdate {
  Auto = 'AUTO',
  Never = 'NEVER'
}

export type StripePostCheckoutSessionsOptionsDropdownCustomFieldsInput = {
  label: Scalars['String'];
  value: Scalars['String'];
};

export type StripePostCheckoutSessionsOxxoPaymentMethodOptionsInput = {
  expiresAfterDays?: InputMaybe<Scalars['Int']>;
  setupFutureUsage?: InputMaybe<StripePostCheckoutSessionsSetupFutureUsageOxxoPaymentMethodOptions>;
};

export type StripePostCheckoutSessionsP24PaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostCheckoutSessionsSetupFutureUsageP24PaymentMethodOptions>;
  tosShownAndAccepted?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostCheckoutSessionsPaymentIntentDataInput = {
  applicationFeeAmount?: InputMaybe<Scalars['Int']>;
  captureMethod?: InputMaybe<StripePostCheckoutSessionsCaptureMethodPaymentIntentData>;
  description?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  onBehalfOf?: InputMaybe<Scalars['String']>;
  receiptEmail?: InputMaybe<Scalars['String']>;
  setupFutureUsage?: InputMaybe<StripePostCheckoutSessionsSetupFutureUsagePaymentIntentData>;
  shipping?: InputMaybe<StripePostCheckoutSessionsShippingPaymentIntentDataInput>;
  statementDescriptor?: InputMaybe<Scalars['String']>;
  statementDescriptorSuffix?: InputMaybe<Scalars['String']>;
  transferData?: InputMaybe<StripePostCheckoutSessionsTransferDataPaymentIntentDataInput>;
  transferGroup?: InputMaybe<Scalars['String']>;
};

export enum StripePostCheckoutSessionsPaymentMethodCollection {
  Always = 'ALWAYS',
  IfRequired = 'IF_REQUIRED'
}

export type StripePostCheckoutSessionsPaymentMethodOptionsInput = {
  acssDebit?: InputMaybe<StripePostCheckoutSessionsAcssDebitPaymentMethodOptionsInput>;
  affirm?: InputMaybe<StripePostCheckoutSessionsAffirmPaymentMethodOptionsInput>;
  afterpayClearpay?: InputMaybe<StripePostCheckoutSessionsAfterpayClearpayPaymentMethodOptionsInput>;
  alipay?: InputMaybe<StripePostCheckoutSessionsAlipayPaymentMethodOptionsInput>;
  auBecsDebit?: InputMaybe<StripePostCheckoutSessionsAuBecsDebitPaymentMethodOptionsInput>;
  bacsDebit?: InputMaybe<StripePostCheckoutSessionsBacsDebitPaymentMethodOptionsInput>;
  bancontact?: InputMaybe<StripePostCheckoutSessionsBancontactPaymentMethodOptionsInput>;
  boleto?: InputMaybe<StripePostCheckoutSessionsBoletoPaymentMethodOptionsInput>;
  card?: InputMaybe<StripePostCheckoutSessionsCardPaymentMethodOptionsInput>;
  cashapp?: InputMaybe<StripePostCheckoutSessionsCashappPaymentMethodOptionsInput>;
  customerBalance?: InputMaybe<StripePostCheckoutSessionsCustomerBalancePaymentMethodOptionsInput>;
  eps?: InputMaybe<StripePostCheckoutSessionsEpsPaymentMethodOptionsInput>;
  fpx?: InputMaybe<StripePostCheckoutSessionsFpxPaymentMethodOptionsInput>;
  giropay?: InputMaybe<StripePostCheckoutSessionsGiropayPaymentMethodOptionsInput>;
  grabpay?: InputMaybe<StripePostCheckoutSessionsGrabpayPaymentMethodOptionsInput>;
  ideal?: InputMaybe<StripePostCheckoutSessionsIdealPaymentMethodOptionsInput>;
  klarna?: InputMaybe<StripePostCheckoutSessionsKlarnaPaymentMethodOptionsInput>;
  konbini?: InputMaybe<StripePostCheckoutSessionsKonbiniPaymentMethodOptionsInput>;
  link?: InputMaybe<StripePostCheckoutSessionsLinkPaymentMethodOptionsInput>;
  oxxo?: InputMaybe<StripePostCheckoutSessionsOxxoPaymentMethodOptionsInput>;
  p24?: InputMaybe<StripePostCheckoutSessionsP24PaymentMethodOptionsInput>;
  paynow?: InputMaybe<StripePostCheckoutSessionsPaynowPaymentMethodOptionsInput>;
  paypal?: InputMaybe<StripePostCheckoutSessionsPaypalPaymentMethodOptionsInput>;
  pix?: InputMaybe<StripePostCheckoutSessionsPixPaymentMethodOptionsInput>;
  sepaDebit?: InputMaybe<StripePostCheckoutSessionsSepaDebitPaymentMethodOptionsInput>;
  sofort?: InputMaybe<StripePostCheckoutSessionsSofortPaymentMethodOptionsInput>;
  usBankAccount?: InputMaybe<StripePostCheckoutSessionsUsBankAccountPaymentMethodOptionsInput>;
  wechatPay?: InputMaybe<StripePostCheckoutSessionsWechatPayPaymentMethodOptionsInput>;
};

export enum StripePostCheckoutSessionsPaymentMethodTypes {
  AcssDebit = 'ACSS_DEBIT',
  Affirm = 'AFFIRM',
  AfterpayClearpay = 'AFTERPAY_CLEARPAY',
  Alipay = 'ALIPAY',
  AuBecsDebit = 'AU_BECS_DEBIT',
  BacsDebit = 'BACS_DEBIT',
  Bancontact = 'BANCONTACT',
  Blik = 'BLIK',
  Boleto = 'BOLETO',
  Card = 'CARD',
  Cashapp = 'CASHAPP',
  CustomerBalance = 'CUSTOMER_BALANCE',
  Eps = 'EPS',
  Fpx = 'FPX',
  Giropay = 'GIROPAY',
  Grabpay = 'GRABPAY',
  Ideal = 'IDEAL',
  Klarna = 'KLARNA',
  Konbini = 'KONBINI',
  Link = 'LINK',
  Oxxo = 'OXXO',
  Paynow = 'PAYNOW',
  Paypal = 'PAYPAL',
  Pix = 'PIX',
  Promptpay = 'PROMPTPAY',
  P_24 = 'P_24',
  SepaDebit = 'SEPA_DEBIT',
  Sofort = 'SOFORT',
  UsBankAccount = 'US_BANK_ACCOUNT',
  WechatPay = 'WECHAT_PAY'
}

export enum StripePostCheckoutSessionsPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions {
  Combined = 'COMBINED',
  Interval = 'INTERVAL',
  Sporadic = 'SPORADIC'
}

export type StripePostCheckoutSessionsPaynowPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostCheckoutSessionsSetupFutureUsagePaynowPaymentMethodOptions>;
};

export type StripePostCheckoutSessionsPaypalPaymentMethodOptionsInput = {
  captureMethod?: InputMaybe<Scalars['String']>;
  preferredLocale?: InputMaybe<StripePostCheckoutSessionsPreferredLocalePaypalPaymentMethodOptions>;
  reference?: InputMaybe<Scalars['String']>;
  riskCorrelationId?: InputMaybe<Scalars['String']>;
  setupFutureUsage?: InputMaybe<Scalars['String']>;
};

export enum StripePostCheckoutSessionsPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions {
  Balances = 'BALANCES',
  Ownership = 'OWNERSHIP',
  PaymentMethod = 'PAYMENT_METHOD',
  Transactions = 'TRANSACTIONS'
}

export type StripePostCheckoutSessionsPhoneNumberCollectionInput = {
  enabled: Scalars['Boolean'];
};

export type StripePostCheckoutSessionsPixPaymentMethodOptionsInput = {
  expiresAfterSeconds?: InputMaybe<Scalars['Int']>;
};

export enum StripePostCheckoutSessionsPreferredLocalePaypalPaymentMethodOptions {
  CsCz = 'CS_CZ',
  DaDk = 'DA_DK',
  DeAt = 'DE_AT',
  DeDe = 'DE_DE',
  DeLu = 'DE_LU',
  ElGr = 'EL_GR',
  EnGb = 'EN_GB',
  EnUs = 'EN_US',
  EsEs = 'ES_ES',
  FiFi = 'FI_FI',
  FrBe = 'FR_BE',
  FrFr = 'FR_FR',
  FrLu = 'FR_LU',
  HuHu = 'HU_HU',
  ItIt = 'IT_IT',
  NlBe = 'NL_BE',
  NlNl = 'NL_NL',
  PlPl = 'PL_PL',
  PtPt = 'PT_PT',
  SkSk = 'SK_SK',
  SvSe = 'SV_SE'
}

export type StripePostCheckoutSessionsPriceDataLineItemsInput = {
  currency: Scalars['String'];
  product?: InputMaybe<Scalars['String']>;
  productData?: InputMaybe<StripePostCheckoutSessionsProductDataPriceDataLineItemsInput>;
  recurring?: InputMaybe<StripePostCheckoutSessionsRecurringPriceDataLineItemsInput>;
  taxBehavior?: InputMaybe<StripePostCheckoutSessionsTaxBehaviorPriceDataLineItems>;
  unitAmount?: InputMaybe<Scalars['Int']>;
  unitAmountDecimal?: InputMaybe<Scalars['String']>;
};

export type StripePostCheckoutSessionsProductDataPriceDataLineItemsInput = {
  description?: InputMaybe<Scalars['String']>;
  images?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  name: Scalars['String'];
  taxCode?: InputMaybe<Scalars['String']>;
};

export enum StripePostCheckoutSessionsPromotionsConsentCollection {
  Auto = 'AUTO',
  None = 'NONE'
}

export enum StripePostCheckoutSessionsProrationBehaviorSubscriptionData {
  CreateProrations = 'CREATE_PRORATIONS',
  None = 'NONE'
}

export type StripePostCheckoutSessionsRecoveryAfterExpirationInput = {
  allowPromotionCodes?: InputMaybe<Scalars['Boolean']>;
  enabled: Scalars['Boolean'];
};

export type StripePostCheckoutSessionsRecurringPriceDataLineItemsInput = {
  interval: StripePostCheckoutSessionsIntervalRecurringPriceDataLineItems;
  intervalCount?: InputMaybe<Scalars['Int']>;
};

export type StripePostCheckoutSessionsRenderingOptionsInvoiceDataInvoiceCreationInput = {
  amountTaxDisplay?: InputMaybe<Scalars['String']>;
};

export enum StripePostCheckoutSessionsRequestedAddressTypesBankTransferCustomerBalancePaymentMethodOptions {
  Iban = 'IBAN',
  Sepa = 'SEPA',
  SortCode = 'SORT_CODE',
  Spei = 'SPEI',
  Zengin = 'ZENGIN'
}

export type StripePostCheckoutSessionsSepaDebitPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostCheckoutSessionsSetupFutureUsageSepaDebitPaymentMethodOptions>;
};

export type StripePostCheckoutSessionsSessionExpireInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export enum StripePostCheckoutSessionsSetupFutureUsageAcssDebitPaymentMethodOptions {
  None = 'NONE',
  OffSession = 'OFF_SESSION',
  OnSession = 'ON_SESSION'
}

export enum StripePostCheckoutSessionsSetupFutureUsageAffirmPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostCheckoutSessionsSetupFutureUsageAfterpayClearpayPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostCheckoutSessionsSetupFutureUsageAlipayPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostCheckoutSessionsSetupFutureUsageAuBecsDebitPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostCheckoutSessionsSetupFutureUsageBacsDebitPaymentMethodOptions {
  None = 'NONE',
  OffSession = 'OFF_SESSION',
  OnSession = 'ON_SESSION'
}

export enum StripePostCheckoutSessionsSetupFutureUsageBancontactPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostCheckoutSessionsSetupFutureUsageBoletoPaymentMethodOptions {
  None = 'NONE',
  OffSession = 'OFF_SESSION',
  OnSession = 'ON_SESSION'
}

export enum StripePostCheckoutSessionsSetupFutureUsageCardPaymentMethodOptions {
  OffSession = 'OFF_SESSION',
  OnSession = 'ON_SESSION'
}

export enum StripePostCheckoutSessionsSetupFutureUsageCashappPaymentMethodOptions {
  None = 'NONE',
  OffSession = 'OFF_SESSION',
  OnSession = 'ON_SESSION'
}

export enum StripePostCheckoutSessionsSetupFutureUsageCustomerBalancePaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostCheckoutSessionsSetupFutureUsageEpsPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostCheckoutSessionsSetupFutureUsageFpxPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostCheckoutSessionsSetupFutureUsageGiropayPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostCheckoutSessionsSetupFutureUsageGrabpayPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostCheckoutSessionsSetupFutureUsageIdealPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostCheckoutSessionsSetupFutureUsageKlarnaPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostCheckoutSessionsSetupFutureUsageKonbiniPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostCheckoutSessionsSetupFutureUsageLinkPaymentMethodOptions {
  None = 'NONE',
  OffSession = 'OFF_SESSION'
}

export enum StripePostCheckoutSessionsSetupFutureUsageOxxoPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostCheckoutSessionsSetupFutureUsageP24PaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostCheckoutSessionsSetupFutureUsagePaymentIntentData {
  OffSession = 'OFF_SESSION',
  OnSession = 'ON_SESSION'
}

export enum StripePostCheckoutSessionsSetupFutureUsagePaynowPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostCheckoutSessionsSetupFutureUsageSepaDebitPaymentMethodOptions {
  None = 'NONE',
  OffSession = 'OFF_SESSION',
  OnSession = 'ON_SESSION'
}

export enum StripePostCheckoutSessionsSetupFutureUsageSofortPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostCheckoutSessionsSetupFutureUsageUsBankAccountPaymentMethodOptions {
  None = 'NONE',
  OffSession = 'OFF_SESSION',
  OnSession = 'ON_SESSION'
}

export enum StripePostCheckoutSessionsSetupFutureUsageWechatPayPaymentMethodOptions {
  None = 'NONE'
}

export type StripePostCheckoutSessionsSetupIntentDataInput = {
  description?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  onBehalfOf?: InputMaybe<Scalars['String']>;
};

export type StripePostCheckoutSessionsShippingAddressCollectionInput = {
  allowedCountries: Array<StripePostCheckoutSessionsAllowedCountriesShippingAddressCollection>;
};

export type StripePostCheckoutSessionsShippingAddressCustomTextInput = {
  message: Scalars['String'];
};

export enum StripePostCheckoutSessionsShippingCustomerUpdate {
  Auto = 'AUTO',
  Never = 'NEVER'
}

export type StripePostCheckoutSessionsShippingOptionsInput = {
  shippingRate?: InputMaybe<Scalars['String']>;
  shippingRateData?: InputMaybe<StripePostCheckoutSessionsShippingRateDataShippingOptionsInput>;
};

export type StripePostCheckoutSessionsShippingPaymentIntentDataInput = {
  address: StripePostCheckoutSessionsAddressShippingPaymentIntentDataInput;
  carrier?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  phone?: InputMaybe<Scalars['String']>;
  trackingNumber?: InputMaybe<Scalars['String']>;
};

export type StripePostCheckoutSessionsShippingRateDataShippingOptionsInput = {
  deliveryEstimate?: InputMaybe<StripePostCheckoutSessionsDeliveryEstimateShippingRateDataShippingOptionsInput>;
  displayName: Scalars['String'];
  fixedAmount?: InputMaybe<StripePostCheckoutSessionsFixedAmountShippingRateDataShippingOptionsInput>;
  metadata?: InputMaybe<Scalars['JSON']>;
  taxBehavior?: InputMaybe<StripePostCheckoutSessionsTaxBehaviorShippingRateDataShippingOptions>;
  taxCode?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<StripePostCheckoutSessionsTypeShippingRateDataShippingOptions>;
};

export type StripePostCheckoutSessionsSofortPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostCheckoutSessionsSetupFutureUsageSofortPaymentMethodOptions>;
};

export type StripePostCheckoutSessionsSubmitCustomTextInput = {
  message: Scalars['String'];
};

export enum StripePostCheckoutSessionsSubmitType {
  Auto = 'AUTO',
  Book = 'BOOK',
  Donate = 'DONATE',
  Pay = 'PAY'
}

export type StripePostCheckoutSessionsSubscriptionDataInput = {
  applicationFeePercent?: InputMaybe<Scalars['Float']>;
  billingCycleAnchor?: InputMaybe<Scalars['Int']>;
  defaultTaxRates?: InputMaybe<Array<Scalars['String']>>;
  description?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  onBehalfOf?: InputMaybe<Scalars['String']>;
  prorationBehavior?: InputMaybe<StripePostCheckoutSessionsProrationBehaviorSubscriptionData>;
  transferData?: InputMaybe<StripePostCheckoutSessionsTransferDataSubscriptionDataInput>;
  trialEnd?: InputMaybe<Scalars['Int']>;
  trialPeriodDays?: InputMaybe<Scalars['Int']>;
  trialSettings?: InputMaybe<StripePostCheckoutSessionsTrialSettingsSubscriptionDataInput>;
};

export enum StripePostCheckoutSessionsTaxBehaviorPriceDataLineItems {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE',
  Unspecified = 'UNSPECIFIED'
}

export enum StripePostCheckoutSessionsTaxBehaviorShippingRateDataShippingOptions {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE',
  Unspecified = 'UNSPECIFIED'
}

export type StripePostCheckoutSessionsTaxIdCollectionInput = {
  enabled: Scalars['Boolean'];
};

export enum StripePostCheckoutSessionsTermsOfServiceConsentCollection {
  None = 'NONE',
  Required = 'REQUIRED'
}

export enum StripePostCheckoutSessionsTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions {
  Business = 'BUSINESS',
  Personal = 'PERSONAL'
}

export type StripePostCheckoutSessionsTransferDataPaymentIntentDataInput = {
  amount?: InputMaybe<Scalars['Int']>;
  destination: Scalars['String'];
};

export type StripePostCheckoutSessionsTransferDataSubscriptionDataInput = {
  amountPercent?: InputMaybe<Scalars['Float']>;
  destination: Scalars['String'];
};

export type StripePostCheckoutSessionsTrialSettingsSubscriptionDataInput = {
  endBehavior: StripePostCheckoutSessionsEndBehaviorTrialSettingsSubscriptionDataInput;
};

export enum StripePostCheckoutSessionsTypeBankTransferCustomerBalancePaymentMethodOptions {
  EuBankTransfer = 'EU_BANK_TRANSFER',
  GbBankTransfer = 'GB_BANK_TRANSFER',
  JpBankTransfer = 'JP_BANK_TRANSFER',
  MxBankTransfer = 'MX_BANK_TRANSFER'
}

export enum StripePostCheckoutSessionsTypeCustomFields {
  Dropdown = 'DROPDOWN',
  Numeric = 'NUMERIC',
  Text = 'TEXT'
}

export enum StripePostCheckoutSessionsTypeLabelCustomFields {
  Custom = 'CUSTOM'
}

export enum StripePostCheckoutSessionsTypeShippingRateDataShippingOptions {
  FixedAmount = 'FIXED_AMOUNT'
}

export enum StripePostCheckoutSessionsUnitMaximumDeliveryEstimateShippingRateDataShippingOptions {
  BusinessDay = 'BUSINESS_DAY',
  Day = 'DAY',
  Hour = 'HOUR',
  Month = 'MONTH',
  Week = 'WEEK'
}

export enum StripePostCheckoutSessionsUnitMinimumDeliveryEstimateShippingRateDataShippingOptions {
  BusinessDay = 'BUSINESS_DAY',
  Day = 'DAY',
  Hour = 'HOUR',
  Month = 'MONTH',
  Week = 'WEEK'
}

export type StripePostCheckoutSessionsUsBankAccountPaymentMethodOptionsInput = {
  financialConnections?: InputMaybe<StripePostCheckoutSessionsFinancialConnectionsUsBankAccountPaymentMethodOptionsInput>;
  setupFutureUsage?: InputMaybe<StripePostCheckoutSessionsSetupFutureUsageUsBankAccountPaymentMethodOptions>;
  verificationMethod?: InputMaybe<StripePostCheckoutSessionsVerificationMethodUsBankAccountPaymentMethodOptions>;
};

export enum StripePostCheckoutSessionsVerificationMethodAcssDebitPaymentMethodOptions {
  Automatic = 'AUTOMATIC',
  Instant = 'INSTANT',
  Microdeposits = 'MICRODEPOSITS'
}

export enum StripePostCheckoutSessionsVerificationMethodUsBankAccountPaymentMethodOptions {
  Automatic = 'AUTOMATIC',
  Instant = 'INSTANT'
}

export type StripePostCheckoutSessionsWechatPayPaymentMethodOptionsInput = {
  appId?: InputMaybe<Scalars['String']>;
  client: StripePostCheckoutSessionsClientWechatPayPaymentMethodOptions;
  setupFutureUsage?: InputMaybe<StripePostCheckoutSessionsSetupFutureUsageWechatPayPaymentMethodOptions>;
};

export type StripePostCouponsAppliesToInput = {
  products?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostCouponsCouponInput = {
  currencyOptions?: InputMaybe<Scalars['JSON']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  name?: InputMaybe<Scalars['String']>;
};

export enum StripePostCouponsDuration {
  Forever = 'FOREVER',
  Once = 'ONCE',
  Repeating = 'REPEATING'
}

export type StripePostCouponsInput = {
  amountOff?: InputMaybe<Scalars['Int']>;
  appliesTo?: InputMaybe<StripePostCouponsAppliesToInput>;
  currency?: InputMaybe<Scalars['String']>;
  currencyOptions?: InputMaybe<Scalars['JSON']>;
  duration?: InputMaybe<StripePostCouponsDuration>;
  durationInMonths?: InputMaybe<Scalars['Int']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  id?: InputMaybe<Scalars['String']>;
  maxRedemptions?: InputMaybe<Scalars['Int']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  name?: InputMaybe<Scalars['String']>;
  percentOff?: InputMaybe<Scalars['Float']>;
  redeemBy?: InputMaybe<Scalars['Int']>;
};

export type StripePostCreditNotesIdInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  memo?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
};

export type StripePostCreditNotesIdVoidInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostCreditNotesInput = {
  amount?: InputMaybe<Scalars['Int']>;
  creditAmount?: InputMaybe<Scalars['Int']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  invoice: Scalars['String'];
  lines?: InputMaybe<Array<StripePostCreditNotesLinesInput>>;
  memo?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  outOfBandAmount?: InputMaybe<Scalars['Int']>;
  reason?: InputMaybe<StripePostCreditNotesReason>;
  refund?: InputMaybe<Scalars['String']>;
  refundAmount?: InputMaybe<Scalars['Int']>;
  shippingCost?: InputMaybe<StripePostCreditNotesShippingCostInput>;
};

export type StripePostCreditNotesLinesInput = {
  amount?: InputMaybe<Scalars['Int']>;
  description?: InputMaybe<Scalars['String']>;
  invoiceLineItem?: InputMaybe<Scalars['String']>;
  quantity?: InputMaybe<Scalars['Int']>;
  taxRates?: InputMaybe<Scalars['JSON']>;
  type: StripePostCreditNotesTypeLines;
  unitAmount?: InputMaybe<Scalars['Int']>;
  unitAmountDecimal?: InputMaybe<Scalars['String']>;
};

export enum StripePostCreditNotesReason {
  Duplicate = 'DUPLICATE',
  Fraudulent = 'FRAUDULENT',
  OrderChange = 'ORDER_CHANGE',
  ProductUnsatisfactory = 'PRODUCT_UNSATISFACTORY'
}

export type StripePostCreditNotesShippingCostInput = {
  shippingRate?: InputMaybe<Scalars['String']>;
};

export enum StripePostCreditNotesTypeLines {
  CustomLineItem = 'CUSTOM_LINE_ITEM',
  InvoiceLineItem = 'INVOICE_LINE_ITEM'
}

export type StripePostCustomersAddressInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostCustomersAddressShippingInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostCustomersCashBalanceInput = {
  settings?: InputMaybe<StripePostCustomersSettingsCashBalanceInput>;
};

export type StripePostCustomersCustomFieldsInvoiceSettingsInput = {
  name: Scalars['String'];
  value: Scalars['String'];
};

export enum StripePostCustomersCustomerAccountHolderTypeBankAccount {
  Company = 'COMPANY',
  Individual = 'INDIVIDUAL'
}

export type StripePostCustomersCustomerAddressInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostCustomersCustomerAddressShippingInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostCustomersCustomerBalanceTransactionsInput = {
  amount: Scalars['Int'];
  currency: Scalars['String'];
  description?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
};

export type StripePostCustomersCustomerBalanceTransactionsTransactionInput = {
  description?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
};

export type StripePostCustomersCustomerBankAccountInput = {
  accountHolderName?: InputMaybe<Scalars['String']>;
  accountHolderType?: InputMaybe<StripePostCustomersCustomerAccountHolderTypeBankAccount>;
  accountNumber: Scalars['String'];
  country: Scalars['String'];
  currency?: InputMaybe<Scalars['String']>;
  object?: InputMaybe<StripePostCustomersCustomerObjectBankAccount>;
  routingNumber?: InputMaybe<Scalars['String']>;
};

export enum StripePostCustomersCustomerBankAccountsAccountHolderTypeBankAccount {
  Company = 'COMPANY',
  Individual = 'INDIVIDUAL'
}

export type StripePostCustomersCustomerBankAccountsBankAccountInput = {
  accountHolderName?: InputMaybe<Scalars['String']>;
  accountHolderType?: InputMaybe<StripePostCustomersCustomerBankAccountsAccountHolderTypeBankAccount>;
  accountNumber: Scalars['String'];
  country: Scalars['String'];
  currency?: InputMaybe<Scalars['String']>;
  object?: InputMaybe<StripePostCustomersCustomerBankAccountsObjectBankAccount>;
  routingNumber?: InputMaybe<Scalars['String']>;
};

export type StripePostCustomersCustomerBankAccountsCardInput = {
  addressCity?: InputMaybe<Scalars['String']>;
  addressCountry?: InputMaybe<Scalars['String']>;
  addressLine1?: InputMaybe<Scalars['String']>;
  addressLine2?: InputMaybe<Scalars['String']>;
  addressState?: InputMaybe<Scalars['String']>;
  addressZip?: InputMaybe<Scalars['String']>;
  cvc?: InputMaybe<Scalars['String']>;
  expMonth: Scalars['Int'];
  expYear: Scalars['Int'];
  metadata?: InputMaybe<Scalars['JSON']>;
  name?: InputMaybe<Scalars['String']>;
  number: Scalars['String'];
  object?: InputMaybe<StripePostCustomersCustomerBankAccountsObjectCard>;
};

export enum StripePostCustomersCustomerBankAccountsIdAccountHolderType {
  Company = 'COMPANY',
  Individual = 'INDIVIDUAL'
}

export type StripePostCustomersCustomerBankAccountsIdAddressOwnerInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostCustomersCustomerBankAccountsIdInput = {
  accountHolderName?: InputMaybe<Scalars['String']>;
  accountHolderType?: InputMaybe<StripePostCustomersCustomerBankAccountsIdAccountHolderType>;
  addressCity?: InputMaybe<Scalars['String']>;
  addressCountry?: InputMaybe<Scalars['String']>;
  addressLine1?: InputMaybe<Scalars['String']>;
  addressLine2?: InputMaybe<Scalars['String']>;
  addressState?: InputMaybe<Scalars['String']>;
  addressZip?: InputMaybe<Scalars['String']>;
  expMonth?: InputMaybe<Scalars['String']>;
  expYear?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  name?: InputMaybe<Scalars['String']>;
  owner?: InputMaybe<StripePostCustomersCustomerBankAccountsIdOwnerInput>;
};

export type StripePostCustomersCustomerBankAccountsIdOwnerInput = {
  address?: InputMaybe<StripePostCustomersCustomerBankAccountsIdAddressOwnerInput>;
  email?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
};

export type StripePostCustomersCustomerBankAccountsIdVerifyInput = {
  amounts?: InputMaybe<Array<Scalars['Int']>>;
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostCustomersCustomerBankAccountsInput = {
  alipayAccount?: InputMaybe<Scalars['String']>;
  bankAccount?: InputMaybe<StripeStringOrPostCustomersCustomerBankAccountsBankAccountUnionInput>;
  card?: InputMaybe<StripeStringOrPostCustomersCustomerBankAccountsCardUnionInput>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  source?: InputMaybe<Scalars['String']>;
};

export enum StripePostCustomersCustomerBankAccountsObjectBankAccount {
  BankAccount = 'BANK_ACCOUNT'
}

export enum StripePostCustomersCustomerBankAccountsObjectCard {
  Card = 'CARD'
}

export type StripePostCustomersCustomerCardInput = {
  addressCity?: InputMaybe<Scalars['String']>;
  addressCountry?: InputMaybe<Scalars['String']>;
  addressLine1?: InputMaybe<Scalars['String']>;
  addressLine2?: InputMaybe<Scalars['String']>;
  addressState?: InputMaybe<Scalars['String']>;
  addressZip?: InputMaybe<Scalars['String']>;
  cvc?: InputMaybe<Scalars['String']>;
  expMonth: Scalars['Int'];
  expYear: Scalars['Int'];
  metadata?: InputMaybe<Scalars['JSON']>;
  name?: InputMaybe<Scalars['String']>;
  number: Scalars['String'];
  object?: InputMaybe<StripePostCustomersCustomerObjectCard>;
};

export enum StripePostCustomersCustomerCardsAccountHolderTypeBankAccount {
  Company = 'COMPANY',
  Individual = 'INDIVIDUAL'
}

export type StripePostCustomersCustomerCardsBankAccountInput = {
  accountHolderName?: InputMaybe<Scalars['String']>;
  accountHolderType?: InputMaybe<StripePostCustomersCustomerCardsAccountHolderTypeBankAccount>;
  accountNumber: Scalars['String'];
  country: Scalars['String'];
  currency?: InputMaybe<Scalars['String']>;
  object?: InputMaybe<StripePostCustomersCustomerCardsObjectBankAccount>;
  routingNumber?: InputMaybe<Scalars['String']>;
};

export type StripePostCustomersCustomerCardsCardInput = {
  addressCity?: InputMaybe<Scalars['String']>;
  addressCountry?: InputMaybe<Scalars['String']>;
  addressLine1?: InputMaybe<Scalars['String']>;
  addressLine2?: InputMaybe<Scalars['String']>;
  addressState?: InputMaybe<Scalars['String']>;
  addressZip?: InputMaybe<Scalars['String']>;
  cvc?: InputMaybe<Scalars['String']>;
  expMonth: Scalars['Int'];
  expYear: Scalars['Int'];
  metadata?: InputMaybe<Scalars['JSON']>;
  name?: InputMaybe<Scalars['String']>;
  number: Scalars['String'];
  object?: InputMaybe<StripePostCustomersCustomerCardsObjectCard>;
};

export enum StripePostCustomersCustomerCardsIdAccountHolderType {
  Company = 'COMPANY',
  Individual = 'INDIVIDUAL'
}

export type StripePostCustomersCustomerCardsIdAddressOwnerInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostCustomersCustomerCardsIdInput = {
  accountHolderName?: InputMaybe<Scalars['String']>;
  accountHolderType?: InputMaybe<StripePostCustomersCustomerCardsIdAccountHolderType>;
  addressCity?: InputMaybe<Scalars['String']>;
  addressCountry?: InputMaybe<Scalars['String']>;
  addressLine1?: InputMaybe<Scalars['String']>;
  addressLine2?: InputMaybe<Scalars['String']>;
  addressState?: InputMaybe<Scalars['String']>;
  addressZip?: InputMaybe<Scalars['String']>;
  expMonth?: InputMaybe<Scalars['String']>;
  expYear?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  name?: InputMaybe<Scalars['String']>;
  owner?: InputMaybe<StripePostCustomersCustomerCardsIdOwnerInput>;
};

export type StripePostCustomersCustomerCardsIdOwnerInput = {
  address?: InputMaybe<StripePostCustomersCustomerCardsIdAddressOwnerInput>;
  email?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
};

export type StripePostCustomersCustomerCardsInput = {
  alipayAccount?: InputMaybe<Scalars['String']>;
  bankAccount?: InputMaybe<StripeStringOrPostCustomersCustomerCardsBankAccountUnionInput>;
  card?: InputMaybe<StripeStringOrPostCustomersCustomerCardsCardUnionInput>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  source?: InputMaybe<Scalars['String']>;
};

export enum StripePostCustomersCustomerCardsObjectBankAccount {
  BankAccount = 'BANK_ACCOUNT'
}

export enum StripePostCustomersCustomerCardsObjectCard {
  Card = 'CARD'
}

export type StripePostCustomersCustomerCashBalanceInput = {
  settings?: InputMaybe<StripePostCustomersCustomerSettingsCashBalanceInput>;
};

export type StripePostCustomersCustomerCustomFieldsInvoiceSettingsInput = {
  name: Scalars['String'];
  value: Scalars['String'];
};

export type StripePostCustomersCustomerFundingInstructionsBankTransferInput = {
  euBankTransfer?: InputMaybe<StripePostCustomersCustomerFundingInstructionsEuBankTransferBankTransferInput>;
  requestedAddressTypes?: InputMaybe<Array<StripePostCustomersCustomerFundingInstructionsRequestedAddressTypesBankTransfer>>;
  type: StripePostCustomersCustomerFundingInstructionsTypeBankTransfer;
};

export type StripePostCustomersCustomerFundingInstructionsEuBankTransferBankTransferInput = {
  country: Scalars['String'];
};

export enum StripePostCustomersCustomerFundingInstructionsFundingType {
  BankTransfer = 'BANK_TRANSFER'
}

export type StripePostCustomersCustomerFundingInstructionsInput = {
  bankTransfer: StripePostCustomersCustomerFundingInstructionsBankTransferInput;
  currency: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
  fundingType: StripePostCustomersCustomerFundingInstructionsFundingType;
};

export enum StripePostCustomersCustomerFundingInstructionsRequestedAddressTypesBankTransfer {
  Iban = 'IBAN',
  SortCode = 'SORT_CODE',
  Spei = 'SPEI',
  Zengin = 'ZENGIN'
}

export enum StripePostCustomersCustomerFundingInstructionsTypeBankTransfer {
  EuBankTransfer = 'EU_BANK_TRANSFER',
  GbBankTransfer = 'GB_BANK_TRANSFER',
  JpBankTransfer = 'JP_BANK_TRANSFER',
  MxBankTransfer = 'MX_BANK_TRANSFER'
}

export type StripePostCustomersCustomerInput = {
  address?: InputMaybe<StripeStringOrPostCustomersCustomerAddressUnionInput>;
  balance?: InputMaybe<Scalars['Int']>;
  bankAccount?: InputMaybe<StripeStringOrPostCustomersCustomerBankAccountUnionInput>;
  card?: InputMaybe<StripeStringOrPostCustomersCustomerCardUnionInput>;
  cashBalance?: InputMaybe<StripePostCustomersCustomerCashBalanceInput>;
  coupon?: InputMaybe<Scalars['String']>;
  defaultAlipayAccount?: InputMaybe<Scalars['String']>;
  defaultBankAccount?: InputMaybe<Scalars['String']>;
  defaultCard?: InputMaybe<Scalars['String']>;
  defaultSource?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  invoicePrefix?: InputMaybe<Scalars['String']>;
  invoiceSettings?: InputMaybe<StripePostCustomersCustomerInvoiceSettingsInput>;
  metadata?: InputMaybe<Scalars['JSON']>;
  name?: InputMaybe<Scalars['String']>;
  nextInvoiceSequence?: InputMaybe<Scalars['Int']>;
  phone?: InputMaybe<Scalars['String']>;
  preferredLocales?: InputMaybe<Array<Scalars['String']>>;
  promotionCode?: InputMaybe<Scalars['String']>;
  shipping?: InputMaybe<StripeStringOrPostCustomersCustomerShippingUnionInput>;
  source?: InputMaybe<Scalars['String']>;
  tax?: InputMaybe<StripePostCustomersCustomerTaxInput>;
  taxExempt?: InputMaybe<Scalars['String']>;
};

export type StripePostCustomersCustomerInvoiceSettingsInput = {
  customFields?: InputMaybe<StripeStringOrPostCustomersCustomerCustomFieldsInvoiceSettingsUnionInput>;
  defaultPaymentMethod?: InputMaybe<Scalars['String']>;
  footer?: InputMaybe<Scalars['String']>;
  renderingOptions?: InputMaybe<StripeStringOrPostCustomersCustomerRenderingOptionsInvoiceSettingsUnionInput>;
};

export enum StripePostCustomersCustomerObjectBankAccount {
  BankAccount = 'BANK_ACCOUNT'
}

export enum StripePostCustomersCustomerObjectCard {
  Card = 'CARD'
}

export enum StripePostCustomersCustomerReconciliationModeSettingsCashBalance {
  Automatic = 'AUTOMATIC',
  Manual = 'MANUAL',
  MerchantDefault = 'MERCHANT_DEFAULT'
}

export type StripePostCustomersCustomerRenderingOptionsInvoiceSettingsInput = {
  amountTaxDisplay?: InputMaybe<Scalars['String']>;
};

export type StripePostCustomersCustomerSettingsCashBalanceInput = {
  reconciliationMode?: InputMaybe<StripePostCustomersCustomerReconciliationModeSettingsCashBalance>;
};

export type StripePostCustomersCustomerShippingInput = {
  address: StripePostCustomersCustomerAddressShippingInput;
  name: Scalars['String'];
  phone?: InputMaybe<Scalars['String']>;
};

export enum StripePostCustomersCustomerSourcesAccountHolderTypeBankAccount {
  Company = 'COMPANY',
  Individual = 'INDIVIDUAL'
}

export type StripePostCustomersCustomerSourcesBankAccountInput = {
  accountHolderName?: InputMaybe<Scalars['String']>;
  accountHolderType?: InputMaybe<StripePostCustomersCustomerSourcesAccountHolderTypeBankAccount>;
  accountNumber: Scalars['String'];
  country: Scalars['String'];
  currency?: InputMaybe<Scalars['String']>;
  object?: InputMaybe<StripePostCustomersCustomerSourcesObjectBankAccount>;
  routingNumber?: InputMaybe<Scalars['String']>;
};

export type StripePostCustomersCustomerSourcesCardInput = {
  addressCity?: InputMaybe<Scalars['String']>;
  addressCountry?: InputMaybe<Scalars['String']>;
  addressLine1?: InputMaybe<Scalars['String']>;
  addressLine2?: InputMaybe<Scalars['String']>;
  addressState?: InputMaybe<Scalars['String']>;
  addressZip?: InputMaybe<Scalars['String']>;
  cvc?: InputMaybe<Scalars['String']>;
  expMonth: Scalars['Int'];
  expYear: Scalars['Int'];
  metadata?: InputMaybe<Scalars['JSON']>;
  name?: InputMaybe<Scalars['String']>;
  number: Scalars['String'];
  object?: InputMaybe<StripePostCustomersCustomerSourcesObjectCard>;
};

export enum StripePostCustomersCustomerSourcesIdAccountHolderType {
  Company = 'COMPANY',
  Individual = 'INDIVIDUAL'
}

export type StripePostCustomersCustomerSourcesIdAddressOwnerInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostCustomersCustomerSourcesIdInput = {
  accountHolderName?: InputMaybe<Scalars['String']>;
  accountHolderType?: InputMaybe<StripePostCustomersCustomerSourcesIdAccountHolderType>;
  addressCity?: InputMaybe<Scalars['String']>;
  addressCountry?: InputMaybe<Scalars['String']>;
  addressLine1?: InputMaybe<Scalars['String']>;
  addressLine2?: InputMaybe<Scalars['String']>;
  addressState?: InputMaybe<Scalars['String']>;
  addressZip?: InputMaybe<Scalars['String']>;
  expMonth?: InputMaybe<Scalars['String']>;
  expYear?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  name?: InputMaybe<Scalars['String']>;
  owner?: InputMaybe<StripePostCustomersCustomerSourcesIdOwnerInput>;
};

export type StripePostCustomersCustomerSourcesIdOwnerInput = {
  address?: InputMaybe<StripePostCustomersCustomerSourcesIdAddressOwnerInput>;
  email?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
};

export type StripePostCustomersCustomerSourcesIdVerifyInput = {
  amounts?: InputMaybe<Array<Scalars['Int']>>;
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostCustomersCustomerSourcesInput = {
  alipayAccount?: InputMaybe<Scalars['String']>;
  bankAccount?: InputMaybe<StripeStringOrPostCustomersCustomerSourcesBankAccountUnionInput>;
  card?: InputMaybe<StripeStringOrPostCustomersCustomerSourcesCardUnionInput>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  source?: InputMaybe<Scalars['String']>;
};

export enum StripePostCustomersCustomerSourcesObjectBankAccount {
  BankAccount = 'BANK_ACCOUNT'
}

export enum StripePostCustomersCustomerSourcesObjectCard {
  Card = 'CARD'
}

export type StripePostCustomersCustomerSubscriptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput = {
  mandateOptions?: InputMaybe<StripePostCustomersCustomerSubscriptionsMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput>;
  verificationMethod?: InputMaybe<StripePostCustomersCustomerSubscriptionsVerificationMethodAcssDebitPaymentMethodOptionsPaymentSettings>;
};

export type StripePostCustomersCustomerSubscriptionsAddInvoiceItemsInput = {
  price?: InputMaybe<Scalars['String']>;
  priceData?: InputMaybe<StripePostCustomersCustomerSubscriptionsPriceDataAddInvoiceItemsInput>;
  quantity?: InputMaybe<Scalars['Int']>;
  taxRates?: InputMaybe<Scalars['JSON']>;
};

export enum StripePostCustomersCustomerSubscriptionsAmountTypeMandateOptionsCardPaymentMethodOptionsPaymentSettings {
  Fixed = 'FIXED',
  Maximum = 'MAXIMUM'
}

export type StripePostCustomersCustomerSubscriptionsAutomaticTaxInput = {
  enabled: Scalars['Boolean'];
};

export type StripePostCustomersCustomerSubscriptionsBancontactPaymentMethodOptionsPaymentSettingsInput = {
  preferredLanguage?: InputMaybe<StripePostCustomersCustomerSubscriptionsPreferredLanguageBancontactPaymentMethodOptionsPaymentSettings>;
};

export type StripePostCustomersCustomerSubscriptionsBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput = {
  euBankTransfer?: InputMaybe<StripePostCustomersCustomerSubscriptionsEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput>;
  type?: InputMaybe<Scalars['String']>;
};

export type StripePostCustomersCustomerSubscriptionsBillingThresholdsInput = {
  amountGte?: InputMaybe<Scalars['Int']>;
  resetBillingCycleAnchor?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostCustomersCustomerSubscriptionsBillingThresholdsItemsInput = {
  usageGte: Scalars['Int'];
};

export type StripePostCustomersCustomerSubscriptionsCardPaymentMethodOptionsPaymentSettingsInput = {
  mandateOptions?: InputMaybe<StripePostCustomersCustomerSubscriptionsMandateOptionsCardPaymentMethodOptionsPaymentSettingsInput>;
  network?: InputMaybe<StripePostCustomersCustomerSubscriptionsNetworkCardPaymentMethodOptionsPaymentSettings>;
  requestThreeDSecure?: InputMaybe<StripePostCustomersCustomerSubscriptionsRequestThreeDSecureCardPaymentMethodOptionsPaymentSettings>;
};

export enum StripePostCustomersCustomerSubscriptionsCollectionMethod {
  ChargeAutomatically = 'CHARGE_AUTOMATICALLY',
  SendInvoice = 'SEND_INVOICE'
}

export type StripePostCustomersCustomerSubscriptionsCustomerBalancePaymentMethodOptionsPaymentSettingsInput = {
  bankTransfer?: InputMaybe<StripePostCustomersCustomerSubscriptionsBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput>;
  fundingType?: InputMaybe<Scalars['String']>;
};

export type StripePostCustomersCustomerSubscriptionsEndBehaviorTrialSettingsInput = {
  missingPaymentMethod: StripePostCustomersCustomerSubscriptionsMissingPaymentMethodEndBehaviorTrialSettings;
};

export type StripePostCustomersCustomerSubscriptionsEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput = {
  country: Scalars['String'];
};

export type StripePostCustomersCustomerSubscriptionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput = {
  permissions?: InputMaybe<Array<StripePostCustomersCustomerSubscriptionsPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettings>>;
};

export type StripePostCustomersCustomerSubscriptionsInput = {
  addInvoiceItems?: InputMaybe<Array<StripePostCustomersCustomerSubscriptionsAddInvoiceItemsInput>>;
  applicationFeePercent?: InputMaybe<Scalars['Float']>;
  automaticTax?: InputMaybe<StripePostCustomersCustomerSubscriptionsAutomaticTaxInput>;
  backdateStartDate?: InputMaybe<Scalars['Int']>;
  billingCycleAnchor?: InputMaybe<Scalars['Int']>;
  billingThresholds?: InputMaybe<StripeStringOrPostCustomersCustomerSubscriptionsBillingThresholdsUnionInput>;
  cancelAt?: InputMaybe<Scalars['Int']>;
  cancelAtPeriodEnd?: InputMaybe<Scalars['Boolean']>;
  collectionMethod?: InputMaybe<StripePostCustomersCustomerSubscriptionsCollectionMethod>;
  coupon?: InputMaybe<Scalars['String']>;
  currency?: InputMaybe<Scalars['String']>;
  daysUntilDue?: InputMaybe<Scalars['Int']>;
  defaultPaymentMethod?: InputMaybe<Scalars['String']>;
  defaultSource?: InputMaybe<Scalars['String']>;
  defaultTaxRates?: InputMaybe<Scalars['JSON']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  items?: InputMaybe<Array<StripePostCustomersCustomerSubscriptionsItemsInput>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  offSession?: InputMaybe<Scalars['Boolean']>;
  paymentBehavior?: InputMaybe<StripePostCustomersCustomerSubscriptionsPaymentBehavior>;
  paymentSettings?: InputMaybe<StripePostCustomersCustomerSubscriptionsPaymentSettingsInput>;
  pendingInvoiceItemInterval?: InputMaybe<StripeStringOrPostCustomersCustomerSubscriptionsPendingInvoiceItemIntervalUnionInput>;
  promotionCode?: InputMaybe<Scalars['String']>;
  prorationBehavior?: InputMaybe<StripePostCustomersCustomerSubscriptionsProrationBehavior>;
  transferData?: InputMaybe<StripePostCustomersCustomerSubscriptionsTransferDataInput>;
  trialEnd?: InputMaybe<Scalars['JSON']>;
  trialFromPlan?: InputMaybe<Scalars['Boolean']>;
  trialPeriodDays?: InputMaybe<Scalars['Int']>;
  trialSettings?: InputMaybe<StripePostCustomersCustomerSubscriptionsTrialSettingsInput>;
};

export enum StripePostCustomersCustomerSubscriptionsIntervalPendingInvoiceItemInterval {
  Day = 'DAY',
  Month = 'MONTH',
  Week = 'WEEK',
  Year = 'YEAR'
}

export enum StripePostCustomersCustomerSubscriptionsIntervalRecurringPriceDataItems {
  Day = 'DAY',
  Month = 'MONTH',
  Week = 'WEEK',
  Year = 'YEAR'
}

export type StripePostCustomersCustomerSubscriptionsItemsInput = {
  billingThresholds?: InputMaybe<StripeStringOrPostCustomersCustomerSubscriptionsBillingThresholdsItemsUnionInput>;
  metadata?: InputMaybe<Scalars['JSON']>;
  price?: InputMaybe<Scalars['String']>;
  priceData?: InputMaybe<StripePostCustomersCustomerSubscriptionsPriceDataItemsInput>;
  quantity?: InputMaybe<Scalars['Int']>;
  taxRates?: InputMaybe<Scalars['JSON']>;
};

export type StripePostCustomersCustomerSubscriptionsMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput = {
  transactionType?: InputMaybe<StripePostCustomersCustomerSubscriptionsTransactionTypeMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettings>;
};

export type StripePostCustomersCustomerSubscriptionsMandateOptionsCardPaymentMethodOptionsPaymentSettingsInput = {
  amount?: InputMaybe<Scalars['Int']>;
  amountType?: InputMaybe<StripePostCustomersCustomerSubscriptionsAmountTypeMandateOptionsCardPaymentMethodOptionsPaymentSettings>;
  description?: InputMaybe<Scalars['String']>;
};

export enum StripePostCustomersCustomerSubscriptionsMissingPaymentMethodEndBehaviorTrialSettings {
  Cancel = 'CANCEL',
  CreateInvoice = 'CREATE_INVOICE',
  Pause = 'PAUSE'
}

export enum StripePostCustomersCustomerSubscriptionsNetworkCardPaymentMethodOptionsPaymentSettings {
  Amex = 'AMEX',
  CartesBancaires = 'CARTES_BANCAIRES',
  Diners = 'DINERS',
  Discover = 'DISCOVER',
  EftposAu = 'EFTPOS_AU',
  Interac = 'INTERAC',
  Jcb = 'JCB',
  Mastercard = 'MASTERCARD',
  Unionpay = 'UNIONPAY',
  Unknown = 'UNKNOWN',
  Visa = 'VISA'
}

export enum StripePostCustomersCustomerSubscriptionsPaymentBehavior {
  AllowIncomplete = 'ALLOW_INCOMPLETE',
  DefaultIncomplete = 'DEFAULT_INCOMPLETE',
  ErrorIfIncomplete = 'ERROR_IF_INCOMPLETE',
  PendingIfIncomplete = 'PENDING_IF_INCOMPLETE'
}

export type StripePostCustomersCustomerSubscriptionsPaymentMethodOptionsPaymentSettingsInput = {
  acssDebit?: InputMaybe<StripeStringOrPostCustomersCustomerSubscriptionsAcssDebitPaymentMethodOptionsPaymentSettingsUnionInput>;
  bancontact?: InputMaybe<StripeStringOrPostCustomersCustomerSubscriptionsBancontactPaymentMethodOptionsPaymentSettingsUnionInput>;
  card?: InputMaybe<StripeStringOrPostCustomersCustomerSubscriptionsCardPaymentMethodOptionsPaymentSettingsUnionInput>;
  customerBalance?: InputMaybe<StripeStringOrPostCustomersCustomerSubscriptionsCustomerBalancePaymentMethodOptionsPaymentSettingsUnionInput>;
  konbini?: InputMaybe<Scalars['JSON']>;
  usBankAccount?: InputMaybe<StripeStringOrPostCustomersCustomerSubscriptionsUsBankAccountPaymentMethodOptionsPaymentSettingsUnionInput>;
};

export type StripePostCustomersCustomerSubscriptionsPaymentSettingsInput = {
  paymentMethodOptions?: InputMaybe<StripePostCustomersCustomerSubscriptionsPaymentMethodOptionsPaymentSettingsInput>;
  paymentMethodTypes?: InputMaybe<Scalars['JSON']>;
  saveDefaultPaymentMethod?: InputMaybe<StripePostCustomersCustomerSubscriptionsSaveDefaultPaymentMethodPaymentSettings>;
};

export type StripePostCustomersCustomerSubscriptionsPendingInvoiceItemIntervalInput = {
  interval: StripePostCustomersCustomerSubscriptionsIntervalPendingInvoiceItemInterval;
  intervalCount?: InputMaybe<Scalars['Int']>;
};

export enum StripePostCustomersCustomerSubscriptionsPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettings {
  Balances = 'BALANCES',
  Ownership = 'OWNERSHIP',
  PaymentMethod = 'PAYMENT_METHOD',
  Transactions = 'TRANSACTIONS'
}

export enum StripePostCustomersCustomerSubscriptionsPreferredLanguageBancontactPaymentMethodOptionsPaymentSettings {
  De = 'DE',
  En = 'EN',
  Fr = 'FR',
  Nl = 'NL'
}

export type StripePostCustomersCustomerSubscriptionsPriceDataAddInvoiceItemsInput = {
  currency: Scalars['String'];
  product: Scalars['String'];
  taxBehavior?: InputMaybe<StripePostCustomersCustomerSubscriptionsTaxBehaviorPriceDataAddInvoiceItems>;
  unitAmount?: InputMaybe<Scalars['Int']>;
  unitAmountDecimal?: InputMaybe<Scalars['String']>;
};

export type StripePostCustomersCustomerSubscriptionsPriceDataItemsInput = {
  currency: Scalars['String'];
  product: Scalars['String'];
  recurring: StripePostCustomersCustomerSubscriptionsRecurringPriceDataItemsInput;
  taxBehavior?: InputMaybe<StripePostCustomersCustomerSubscriptionsTaxBehaviorPriceDataItems>;
  unitAmount?: InputMaybe<Scalars['Int']>;
  unitAmountDecimal?: InputMaybe<Scalars['String']>;
};

export enum StripePostCustomersCustomerSubscriptionsProrationBehavior {
  AlwaysInvoice = 'ALWAYS_INVOICE',
  CreateProrations = 'CREATE_PRORATIONS',
  None = 'NONE'
}

export type StripePostCustomersCustomerSubscriptionsRecurringPriceDataItemsInput = {
  interval: StripePostCustomersCustomerSubscriptionsIntervalRecurringPriceDataItems;
  intervalCount?: InputMaybe<Scalars['Int']>;
};

export enum StripePostCustomersCustomerSubscriptionsRequestThreeDSecureCardPaymentMethodOptionsPaymentSettings {
  Any = 'ANY',
  Automatic = 'AUTOMATIC'
}

export enum StripePostCustomersCustomerSubscriptionsSaveDefaultPaymentMethodPaymentSettings {
  Off = 'OFF',
  OnSubscription = 'ON_SUBSCRIPTION'
}

export type StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdAcssDebitPaymentMethodOptionsPaymentSettingsInput = {
  mandateOptions?: InputMaybe<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput>;
  verificationMethod?: InputMaybe<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdVerificationMethodAcssDebitPaymentMethodOptionsPaymentSettings>;
};

export type StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdAddInvoiceItemsInput = {
  price?: InputMaybe<Scalars['String']>;
  priceData?: InputMaybe<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPriceDataAddInvoiceItemsInput>;
  quantity?: InputMaybe<Scalars['Int']>;
  taxRates?: InputMaybe<Scalars['JSON']>;
};

export enum StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdAmountTypeMandateOptionsCardPaymentMethodOptionsPaymentSettings {
  Fixed = 'FIXED',
  Maximum = 'MAXIMUM'
}

export type StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdAutomaticTaxInput = {
  enabled: Scalars['Boolean'];
};

export type StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdBancontactPaymentMethodOptionsPaymentSettingsInput = {
  preferredLanguage?: InputMaybe<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPreferredLanguageBancontactPaymentMethodOptionsPaymentSettings>;
};

export type StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput = {
  euBankTransfer?: InputMaybe<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput>;
  type?: InputMaybe<Scalars['String']>;
};

export enum StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdBehaviorPauseCollection {
  KeepAsDraft = 'KEEP_AS_DRAFT',
  MarkUncollectible = 'MARK_UNCOLLECTIBLE',
  Void = 'VOID'
}

export enum StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdBillingCycleAnchor {
  Now = 'NOW',
  Unchanged = 'UNCHANGED'
}

export type StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdBillingThresholdsInput = {
  amountGte?: InputMaybe<Scalars['Int']>;
  resetBillingCycleAnchor?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdBillingThresholdsItemsInput = {
  usageGte: Scalars['Int'];
};

export type StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdCancellationDetailsInput = {
  comment?: InputMaybe<Scalars['String']>;
  feedback?: InputMaybe<Scalars['String']>;
};

export type StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdCardPaymentMethodOptionsPaymentSettingsInput = {
  mandateOptions?: InputMaybe<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdMandateOptionsCardPaymentMethodOptionsPaymentSettingsInput>;
  network?: InputMaybe<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdNetworkCardPaymentMethodOptionsPaymentSettings>;
  requestThreeDSecure?: InputMaybe<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestThreeDSecureCardPaymentMethodOptionsPaymentSettings>;
};

export enum StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdCollectionMethod {
  ChargeAutomatically = 'CHARGE_AUTOMATICALLY',
  SendInvoice = 'SEND_INVOICE'
}

export type StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdCustomerBalancePaymentMethodOptionsPaymentSettingsInput = {
  bankTransfer?: InputMaybe<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput>;
  fundingType?: InputMaybe<Scalars['String']>;
};

export type StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdEndBehaviorTrialSettingsInput = {
  missingPaymentMethod: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdMissingPaymentMethodEndBehaviorTrialSettings;
};

export type StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput = {
  country: Scalars['String'];
};

export type StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput = {
  permissions?: InputMaybe<Array<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettings>>;
};

export type StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdInput = {
  addInvoiceItems?: InputMaybe<Array<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdAddInvoiceItemsInput>>;
  applicationFeePercent?: InputMaybe<Scalars['Float']>;
  automaticTax?: InputMaybe<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdAutomaticTaxInput>;
  billingCycleAnchor?: InputMaybe<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdBillingCycleAnchor>;
  billingThresholds?: InputMaybe<StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdBillingThresholdsUnionInput>;
  cancelAt?: InputMaybe<Scalars['JSON']>;
  cancelAtPeriodEnd?: InputMaybe<Scalars['Boolean']>;
  cancellationDetails?: InputMaybe<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdCancellationDetailsInput>;
  collectionMethod?: InputMaybe<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdCollectionMethod>;
  coupon?: InputMaybe<Scalars['String']>;
  daysUntilDue?: InputMaybe<Scalars['Int']>;
  defaultPaymentMethod?: InputMaybe<Scalars['String']>;
  defaultSource?: InputMaybe<Scalars['String']>;
  defaultTaxRates?: InputMaybe<Scalars['JSON']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  items?: InputMaybe<Array<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdItemsInput>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  offSession?: InputMaybe<Scalars['Boolean']>;
  pauseCollection?: InputMaybe<StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdPauseCollectionUnionInput>;
  paymentBehavior?: InputMaybe<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPaymentBehavior>;
  paymentSettings?: InputMaybe<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPaymentSettingsInput>;
  pendingInvoiceItemInterval?: InputMaybe<StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdPendingInvoiceItemIntervalUnionInput>;
  promotionCode?: InputMaybe<Scalars['String']>;
  prorationBehavior?: InputMaybe<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdProrationBehavior>;
  prorationDate?: InputMaybe<Scalars['Int']>;
  transferData?: InputMaybe<StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdTransferDataUnionInput>;
  trialEnd?: InputMaybe<Scalars['JSON']>;
  trialFromPlan?: InputMaybe<Scalars['Boolean']>;
  trialSettings?: InputMaybe<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdTrialSettingsInput>;
};

export enum StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdIntervalPendingInvoiceItemInterval {
  Day = 'DAY',
  Month = 'MONTH',
  Week = 'WEEK',
  Year = 'YEAR'
}

export enum StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdIntervalRecurringPriceDataItems {
  Day = 'DAY',
  Month = 'MONTH',
  Week = 'WEEK',
  Year = 'YEAR'
}

export type StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdItemsInput = {
  billingThresholds?: InputMaybe<StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdBillingThresholdsItemsUnionInput>;
  clearUsage?: InputMaybe<Scalars['Boolean']>;
  deleted?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  price?: InputMaybe<Scalars['String']>;
  priceData?: InputMaybe<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPriceDataItemsInput>;
  quantity?: InputMaybe<Scalars['Int']>;
  taxRates?: InputMaybe<Scalars['JSON']>;
};

export type StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput = {
  transactionType?: InputMaybe<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdTransactionTypeMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettings>;
};

export type StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdMandateOptionsCardPaymentMethodOptionsPaymentSettingsInput = {
  amount?: InputMaybe<Scalars['Int']>;
  amountType?: InputMaybe<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdAmountTypeMandateOptionsCardPaymentMethodOptionsPaymentSettings>;
  description?: InputMaybe<Scalars['String']>;
};

export enum StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdMissingPaymentMethodEndBehaviorTrialSettings {
  Cancel = 'CANCEL',
  CreateInvoice = 'CREATE_INVOICE',
  Pause = 'PAUSE'
}

export enum StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdNetworkCardPaymentMethodOptionsPaymentSettings {
  Amex = 'AMEX',
  CartesBancaires = 'CARTES_BANCAIRES',
  Diners = 'DINERS',
  Discover = 'DISCOVER',
  EftposAu = 'EFTPOS_AU',
  Interac = 'INTERAC',
  Jcb = 'JCB',
  Mastercard = 'MASTERCARD',
  Unionpay = 'UNIONPAY',
  Unknown = 'UNKNOWN',
  Visa = 'VISA'
}

export type StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPauseCollectionInput = {
  behavior: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdBehaviorPauseCollection;
  resumesAt?: InputMaybe<Scalars['Int']>;
};

export enum StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPaymentBehavior {
  AllowIncomplete = 'ALLOW_INCOMPLETE',
  DefaultIncomplete = 'DEFAULT_INCOMPLETE',
  ErrorIfIncomplete = 'ERROR_IF_INCOMPLETE',
  PendingIfIncomplete = 'PENDING_IF_INCOMPLETE'
}

export type StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPaymentMethodOptionsPaymentSettingsInput = {
  acssDebit?: InputMaybe<StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdAcssDebitPaymentMethodOptionsPaymentSettingsUnionInput>;
  bancontact?: InputMaybe<StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdBancontactPaymentMethodOptionsPaymentSettingsUnionInput>;
  card?: InputMaybe<StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdCardPaymentMethodOptionsPaymentSettingsUnionInput>;
  customerBalance?: InputMaybe<StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdCustomerBalancePaymentMethodOptionsPaymentSettingsUnionInput>;
  konbini?: InputMaybe<Scalars['JSON']>;
  usBankAccount?: InputMaybe<StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdUsBankAccountPaymentMethodOptionsPaymentSettingsUnionInput>;
};

export type StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPaymentSettingsInput = {
  paymentMethodOptions?: InputMaybe<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPaymentMethodOptionsPaymentSettingsInput>;
  paymentMethodTypes?: InputMaybe<Scalars['JSON']>;
  saveDefaultPaymentMethod?: InputMaybe<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdSaveDefaultPaymentMethodPaymentSettings>;
};

export type StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPendingInvoiceItemIntervalInput = {
  interval: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdIntervalPendingInvoiceItemInterval;
  intervalCount?: InputMaybe<Scalars['Int']>;
};

export enum StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettings {
  Balances = 'BALANCES',
  Ownership = 'OWNERSHIP',
  PaymentMethod = 'PAYMENT_METHOD',
  Transactions = 'TRANSACTIONS'
}

export enum StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPreferredLanguageBancontactPaymentMethodOptionsPaymentSettings {
  De = 'DE',
  En = 'EN',
  Fr = 'FR',
  Nl = 'NL'
}

export type StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPriceDataAddInvoiceItemsInput = {
  currency: Scalars['String'];
  product: Scalars['String'];
  taxBehavior?: InputMaybe<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdTaxBehaviorPriceDataAddInvoiceItems>;
  unitAmount?: InputMaybe<Scalars['Int']>;
  unitAmountDecimal?: InputMaybe<Scalars['String']>;
};

export type StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPriceDataItemsInput = {
  currency: Scalars['String'];
  product: Scalars['String'];
  recurring: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdRecurringPriceDataItemsInput;
  taxBehavior?: InputMaybe<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdTaxBehaviorPriceDataItems>;
  unitAmount?: InputMaybe<Scalars['Int']>;
  unitAmountDecimal?: InputMaybe<Scalars['String']>;
};

export enum StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdProrationBehavior {
  AlwaysInvoice = 'ALWAYS_INVOICE',
  CreateProrations = 'CREATE_PRORATIONS',
  None = 'NONE'
}

export type StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdRecurringPriceDataItemsInput = {
  interval: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdIntervalRecurringPriceDataItems;
  intervalCount?: InputMaybe<Scalars['Int']>;
};

export enum StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestThreeDSecureCardPaymentMethodOptionsPaymentSettings {
  Any = 'ANY',
  Automatic = 'AUTOMATIC'
}

export enum StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdSaveDefaultPaymentMethodPaymentSettings {
  Off = 'OFF',
  OnSubscription = 'ON_SUBSCRIPTION'
}

export enum StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdTaxBehaviorPriceDataAddInvoiceItems {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE',
  Unspecified = 'UNSPECIFIED'
}

export enum StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdTaxBehaviorPriceDataItems {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE',
  Unspecified = 'UNSPECIFIED'
}

export enum StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdTransactionTypeMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettings {
  Business = 'BUSINESS',
  Personal = 'PERSONAL'
}

export type StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdTransferDataInput = {
  amountPercent?: InputMaybe<Scalars['Float']>;
  destination: Scalars['String'];
};

export type StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdTrialSettingsInput = {
  endBehavior: StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdEndBehaviorTrialSettingsInput;
};

export type StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdUsBankAccountPaymentMethodOptionsPaymentSettingsInput = {
  financialConnections?: InputMaybe<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput>;
  verificationMethod?: InputMaybe<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdVerificationMethodUsBankAccountPaymentMethodOptionsPaymentSettings>;
};

export enum StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdVerificationMethodAcssDebitPaymentMethodOptionsPaymentSettings {
  Automatic = 'AUTOMATIC',
  Instant = 'INSTANT',
  Microdeposits = 'MICRODEPOSITS'
}

export enum StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdVerificationMethodUsBankAccountPaymentMethodOptionsPaymentSettings {
  Automatic = 'AUTOMATIC',
  Instant = 'INSTANT',
  Microdeposits = 'MICRODEPOSITS'
}

export enum StripePostCustomersCustomerSubscriptionsTaxBehaviorPriceDataAddInvoiceItems {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE',
  Unspecified = 'UNSPECIFIED'
}

export enum StripePostCustomersCustomerSubscriptionsTaxBehaviorPriceDataItems {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE',
  Unspecified = 'UNSPECIFIED'
}

export enum StripePostCustomersCustomerSubscriptionsTransactionTypeMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettings {
  Business = 'BUSINESS',
  Personal = 'PERSONAL'
}

export type StripePostCustomersCustomerSubscriptionsTransferDataInput = {
  amountPercent?: InputMaybe<Scalars['Float']>;
  destination: Scalars['String'];
};

export type StripePostCustomersCustomerSubscriptionsTrialSettingsInput = {
  endBehavior: StripePostCustomersCustomerSubscriptionsEndBehaviorTrialSettingsInput;
};

export type StripePostCustomersCustomerSubscriptionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput = {
  financialConnections?: InputMaybe<StripePostCustomersCustomerSubscriptionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput>;
  verificationMethod?: InputMaybe<StripePostCustomersCustomerSubscriptionsVerificationMethodUsBankAccountPaymentMethodOptionsPaymentSettings>;
};

export enum StripePostCustomersCustomerSubscriptionsVerificationMethodAcssDebitPaymentMethodOptionsPaymentSettings {
  Automatic = 'AUTOMATIC',
  Instant = 'INSTANT',
  Microdeposits = 'MICRODEPOSITS'
}

export enum StripePostCustomersCustomerSubscriptionsVerificationMethodUsBankAccountPaymentMethodOptionsPaymentSettings {
  Automatic = 'AUTOMATIC',
  Instant = 'INSTANT',
  Microdeposits = 'MICRODEPOSITS'
}

export type StripePostCustomersCustomerTaxIdsInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  type: StripePostCustomersCustomerTaxIdsType;
  value: Scalars['String'];
};

export enum StripePostCustomersCustomerTaxIdsType {
  AeTrn = 'AE_TRN',
  AuAbn = 'AU_ABN',
  AuArn = 'AU_ARN',
  BgUic = 'BG_UIC',
  BrCnpj = 'BR_CNPJ',
  BrCpf = 'BR_CPF',
  CaBn = 'CA_BN',
  CaGstHst = 'CA_GST_HST',
  CaPstBc = 'CA_PST_BC',
  CaPstMb = 'CA_PST_MB',
  CaPstSk = 'CA_PST_SK',
  CaQst = 'CA_QST',
  ChVat = 'CH_VAT',
  ClTin = 'CL_TIN',
  EgTin = 'EG_TIN',
  EsCif = 'ES_CIF',
  EuOssVat = 'EU_OSS_VAT',
  EuVat = 'EU_VAT',
  GbVat = 'GB_VAT',
  GeVat = 'GE_VAT',
  HkBr = 'HK_BR',
  HuTin = 'HU_TIN',
  IdNpwp = 'ID_NPWP',
  IlVat = 'IL_VAT',
  InGst = 'IN_GST',
  IsVat = 'IS_VAT',
  JpCn = 'JP_CN',
  JpRn = 'JP_RN',
  JpTrn = 'JP_TRN',
  KePin = 'KE_PIN',
  KrBrn = 'KR_BRN',
  LiUid = 'LI_UID',
  MxRfc = 'MX_RFC',
  MyFrp = 'MY_FRP',
  MyItn = 'MY_ITN',
  MySst = 'MY_SST',
  NoVat = 'NO_VAT',
  NzGst = 'NZ_GST',
  PhTin = 'PH_TIN',
  RuInn = 'RU_INN',
  RuKpp = 'RU_KPP',
  SaVat = 'SA_VAT',
  SgGst = 'SG_GST',
  SgUen = 'SG_UEN',
  SiTin = 'SI_TIN',
  ThVat = 'TH_VAT',
  TrTin = 'TR_TIN',
  TwVat = 'TW_VAT',
  UaVat = 'UA_VAT',
  UsEin = 'US_EIN',
  ZaVat = 'ZA_VAT'
}

export type StripePostCustomersCustomerTaxInput = {
  ipAddress?: InputMaybe<Scalars['JSON']>;
};

export type StripePostCustomersInput = {
  address?: InputMaybe<StripeStringOrPostCustomersAddressUnionInput>;
  balance?: InputMaybe<Scalars['Int']>;
  cashBalance?: InputMaybe<StripePostCustomersCashBalanceInput>;
  coupon?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  invoicePrefix?: InputMaybe<Scalars['String']>;
  invoiceSettings?: InputMaybe<StripePostCustomersInvoiceSettingsInput>;
  metadata?: InputMaybe<Scalars['JSON']>;
  name?: InputMaybe<Scalars['String']>;
  nextInvoiceSequence?: InputMaybe<Scalars['Int']>;
  paymentMethod?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
  preferredLocales?: InputMaybe<Array<Scalars['String']>>;
  promotionCode?: InputMaybe<Scalars['String']>;
  shipping?: InputMaybe<StripeStringOrPostCustomersShippingUnionInput>;
  source?: InputMaybe<Scalars['String']>;
  tax?: InputMaybe<StripePostCustomersTaxInput>;
  taxExempt?: InputMaybe<Scalars['String']>;
  taxIdData?: InputMaybe<Array<StripePostCustomersTaxIdDataInput>>;
  testClock?: InputMaybe<Scalars['String']>;
};

export type StripePostCustomersInvoiceSettingsInput = {
  customFields?: InputMaybe<StripeStringOrPostCustomersCustomFieldsInvoiceSettingsUnionInput>;
  defaultPaymentMethod?: InputMaybe<Scalars['String']>;
  footer?: InputMaybe<Scalars['String']>;
  renderingOptions?: InputMaybe<StripeStringOrPostCustomersRenderingOptionsInvoiceSettingsUnionInput>;
};

export enum StripePostCustomersReconciliationModeSettingsCashBalance {
  Automatic = 'AUTOMATIC',
  Manual = 'MANUAL',
  MerchantDefault = 'MERCHANT_DEFAULT'
}

export type StripePostCustomersRenderingOptionsInvoiceSettingsInput = {
  amountTaxDisplay?: InputMaybe<Scalars['String']>;
};

export type StripePostCustomersSettingsCashBalanceInput = {
  reconciliationMode?: InputMaybe<StripePostCustomersReconciliationModeSettingsCashBalance>;
};

export type StripePostCustomersShippingInput = {
  address: StripePostCustomersAddressShippingInput;
  name: Scalars['String'];
  phone?: InputMaybe<Scalars['String']>;
};

export type StripePostCustomersTaxIdDataInput = {
  type: StripePostCustomersTypeTaxIdData;
  value: Scalars['String'];
};

export type StripePostCustomersTaxInput = {
  ipAddress?: InputMaybe<Scalars['JSON']>;
};

export enum StripePostCustomersTypeTaxIdData {
  AeTrn = 'AE_TRN',
  AuAbn = 'AU_ABN',
  AuArn = 'AU_ARN',
  BgUic = 'BG_UIC',
  BrCnpj = 'BR_CNPJ',
  BrCpf = 'BR_CPF',
  CaBn = 'CA_BN',
  CaGstHst = 'CA_GST_HST',
  CaPstBc = 'CA_PST_BC',
  CaPstMb = 'CA_PST_MB',
  CaPstSk = 'CA_PST_SK',
  CaQst = 'CA_QST',
  ChVat = 'CH_VAT',
  ClTin = 'CL_TIN',
  EgTin = 'EG_TIN',
  EsCif = 'ES_CIF',
  EuOssVat = 'EU_OSS_VAT',
  EuVat = 'EU_VAT',
  GbVat = 'GB_VAT',
  GeVat = 'GE_VAT',
  HkBr = 'HK_BR',
  HuTin = 'HU_TIN',
  IdNpwp = 'ID_NPWP',
  IlVat = 'IL_VAT',
  InGst = 'IN_GST',
  IsVat = 'IS_VAT',
  JpCn = 'JP_CN',
  JpRn = 'JP_RN',
  JpTrn = 'JP_TRN',
  KePin = 'KE_PIN',
  KrBrn = 'KR_BRN',
  LiUid = 'LI_UID',
  MxRfc = 'MX_RFC',
  MyFrp = 'MY_FRP',
  MyItn = 'MY_ITN',
  MySst = 'MY_SST',
  NoVat = 'NO_VAT',
  NzGst = 'NZ_GST',
  PhTin = 'PH_TIN',
  RuInn = 'RU_INN',
  RuKpp = 'RU_KPP',
  SaVat = 'SA_VAT',
  SgGst = 'SG_GST',
  SgUen = 'SG_UEN',
  SiTin = 'SI_TIN',
  ThVat = 'TH_VAT',
  TrTin = 'TR_TIN',
  TwVat = 'TW_VAT',
  UaVat = 'UA_VAT',
  UsEin = 'US_EIN',
  ZaVat = 'ZA_VAT'
}

export type StripePostDisputesDisputeCloseInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostDisputesDisputeEvidenceInput = {
  accessActivityLog?: InputMaybe<Scalars['String']>;
  billingAddress?: InputMaybe<Scalars['String']>;
  cancellationPolicy?: InputMaybe<Scalars['String']>;
  cancellationPolicyDisclosure?: InputMaybe<Scalars['String']>;
  cancellationRebuttal?: InputMaybe<Scalars['String']>;
  customerCommunication?: InputMaybe<Scalars['String']>;
  customerEmailAddress?: InputMaybe<Scalars['String']>;
  customerName?: InputMaybe<Scalars['String']>;
  customerPurchaseIp?: InputMaybe<Scalars['String']>;
  customerSignature?: InputMaybe<Scalars['String']>;
  duplicateChargeDocumentation?: InputMaybe<Scalars['String']>;
  duplicateChargeExplanation?: InputMaybe<Scalars['String']>;
  duplicateChargeId?: InputMaybe<Scalars['String']>;
  productDescription?: InputMaybe<Scalars['String']>;
  receipt?: InputMaybe<Scalars['String']>;
  refundPolicy?: InputMaybe<Scalars['String']>;
  refundPolicyDisclosure?: InputMaybe<Scalars['String']>;
  refundRefusalExplanation?: InputMaybe<Scalars['String']>;
  serviceDate?: InputMaybe<Scalars['String']>;
  serviceDocumentation?: InputMaybe<Scalars['String']>;
  shippingAddress?: InputMaybe<Scalars['String']>;
  shippingCarrier?: InputMaybe<Scalars['String']>;
  shippingDate?: InputMaybe<Scalars['String']>;
  shippingDocumentation?: InputMaybe<Scalars['String']>;
  shippingTrackingNumber?: InputMaybe<Scalars['String']>;
  uncategorizedFile?: InputMaybe<Scalars['String']>;
  uncategorizedText?: InputMaybe<Scalars['String']>;
};

export type StripePostDisputesDisputeInput = {
  evidence?: InputMaybe<StripePostDisputesDisputeEvidenceInput>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  submit?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostEphemeralKeysInput = {
  customer?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  issuingCard?: InputMaybe<Scalars['String']>;
  verificationSession?: InputMaybe<Scalars['String']>;
};

export type StripePostFileLinksInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  expiresAt?: InputMaybe<Scalars['Int']>;
  file: Scalars['String'];
  metadata?: InputMaybe<Scalars['JSON']>;
};

export type StripePostFileLinksLinkInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  expiresAt?: InputMaybe<Scalars['JSON']>;
  metadata?: InputMaybe<Scalars['JSON']>;
};

export type StripePostFinancialConnectionsAccountsAccountDisconnectInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export enum StripePostFinancialConnectionsAccountsAccountRefreshFeatures {
  Balance = 'BALANCE',
  Ownership = 'OWNERSHIP'
}

export type StripePostFinancialConnectionsAccountsAccountRefreshInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  features: Array<StripePostFinancialConnectionsAccountsAccountRefreshFeatures>;
};

export type StripePostFinancialConnectionsSessionsAccountHolderInput = {
  account?: InputMaybe<Scalars['String']>;
  customer?: InputMaybe<Scalars['String']>;
  type: StripePostFinancialConnectionsSessionsTypeAccountHolder;
};

export type StripePostFinancialConnectionsSessionsFiltersInput = {
  countries: Array<Scalars['String']>;
};

export type StripePostFinancialConnectionsSessionsInput = {
  accountHolder: StripePostFinancialConnectionsSessionsAccountHolderInput;
  expand?: InputMaybe<Array<Scalars['String']>>;
  filters?: InputMaybe<StripePostFinancialConnectionsSessionsFiltersInput>;
  permissions: Array<StripePostFinancialConnectionsSessionsPermissions>;
  returnUrl?: InputMaybe<Scalars['String']>;
};

export enum StripePostFinancialConnectionsSessionsPermissions {
  Balances = 'BALANCES',
  Ownership = 'OWNERSHIP',
  PaymentMethod = 'PAYMENT_METHOD',
  Transactions = 'TRANSACTIONS'
}

export enum StripePostFinancialConnectionsSessionsTypeAccountHolder {
  Account = 'ACCOUNT',
  Customer = 'CUSTOMER'
}

export enum StripePostIdentityVerificationSessionsAllowedTypesDocumentOptions {
  DrivingLicense = 'DRIVING_LICENSE',
  IdCard = 'ID_CARD',
  Passport = 'PASSPORT'
}

export type StripePostIdentityVerificationSessionsDocumentOptionsInput = {
  allowedTypes?: InputMaybe<Array<StripePostIdentityVerificationSessionsAllowedTypesDocumentOptions>>;
  requireIdNumber?: InputMaybe<Scalars['Boolean']>;
  requireLiveCapture?: InputMaybe<Scalars['Boolean']>;
  requireMatchingSelfie?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostIdentityVerificationSessionsInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  options?: InputMaybe<StripePostIdentityVerificationSessionsOptionsInput>;
  returnUrl?: InputMaybe<Scalars['String']>;
  type: StripePostIdentityVerificationSessionsType;
};

export type StripePostIdentityVerificationSessionsOptionsInput = {
  document?: InputMaybe<StripeStringOrPostIdentityVerificationSessionsDocumentOptionsUnionInput>;
};

export enum StripePostIdentityVerificationSessionsSessionAllowedTypesDocumentOptions {
  DrivingLicense = 'DRIVING_LICENSE',
  IdCard = 'ID_CARD',
  Passport = 'PASSPORT'
}

export type StripePostIdentityVerificationSessionsSessionCancelInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostIdentityVerificationSessionsSessionDocumentOptionsInput = {
  allowedTypes?: InputMaybe<Array<StripePostIdentityVerificationSessionsSessionAllowedTypesDocumentOptions>>;
  requireIdNumber?: InputMaybe<Scalars['Boolean']>;
  requireLiveCapture?: InputMaybe<Scalars['Boolean']>;
  requireMatchingSelfie?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostIdentityVerificationSessionsSessionInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  options?: InputMaybe<StripePostIdentityVerificationSessionsSessionOptionsInput>;
  type?: InputMaybe<StripePostIdentityVerificationSessionsSessionType>;
};

export type StripePostIdentityVerificationSessionsSessionOptionsInput = {
  document?: InputMaybe<StripeStringOrPostIdentityVerificationSessionsSessionDocumentOptionsUnionInput>;
};

export type StripePostIdentityVerificationSessionsSessionRedactInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export enum StripePostIdentityVerificationSessionsSessionType {
  Document = 'DOCUMENT',
  IdNumber = 'ID_NUMBER'
}

export enum StripePostIdentityVerificationSessionsType {
  Document = 'DOCUMENT',
  IdNumber = 'ID_NUMBER'
}

export type StripePostInvoiceitemsDiscountsInput = {
  coupon?: InputMaybe<Scalars['String']>;
  discount?: InputMaybe<Scalars['String']>;
};

export type StripePostInvoiceitemsInput = {
  amount?: InputMaybe<Scalars['Int']>;
  currency?: InputMaybe<Scalars['String']>;
  customer: Scalars['String'];
  description?: InputMaybe<Scalars['String']>;
  discountable?: InputMaybe<Scalars['Boolean']>;
  discounts?: InputMaybe<StripeStringOrPostInvoiceitemsDiscountsUnionInput>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  invoice?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  period?: InputMaybe<StripePostInvoiceitemsPeriodInput>;
  price?: InputMaybe<Scalars['String']>;
  priceData?: InputMaybe<StripePostInvoiceitemsPriceDataInput>;
  quantity?: InputMaybe<Scalars['Int']>;
  subscription?: InputMaybe<Scalars['String']>;
  taxBehavior?: InputMaybe<StripePostInvoiceitemsTaxBehavior>;
  taxCode?: InputMaybe<Scalars['JSON']>;
  taxRates?: InputMaybe<Array<Scalars['String']>>;
  unitAmount?: InputMaybe<Scalars['Int']>;
  unitAmountDecimal?: InputMaybe<Scalars['String']>;
};

export type StripePostInvoiceitemsInvoiceitemDiscountsInput = {
  coupon?: InputMaybe<Scalars['String']>;
  discount?: InputMaybe<Scalars['String']>;
};

export type StripePostInvoiceitemsInvoiceitemInput = {
  amount?: InputMaybe<Scalars['Int']>;
  description?: InputMaybe<Scalars['String']>;
  discountable?: InputMaybe<Scalars['Boolean']>;
  discounts?: InputMaybe<StripeStringOrPostInvoiceitemsInvoiceitemDiscountsUnionInput>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  period?: InputMaybe<StripePostInvoiceitemsInvoiceitemPeriodInput>;
  price?: InputMaybe<Scalars['String']>;
  priceData?: InputMaybe<StripePostInvoiceitemsInvoiceitemPriceDataInput>;
  quantity?: InputMaybe<Scalars['Int']>;
  taxBehavior?: InputMaybe<StripePostInvoiceitemsInvoiceitemTaxBehavior>;
  taxCode?: InputMaybe<Scalars['JSON']>;
  taxRates?: InputMaybe<Scalars['JSON']>;
  unitAmount?: InputMaybe<Scalars['Int']>;
  unitAmountDecimal?: InputMaybe<Scalars['String']>;
};

export type StripePostInvoiceitemsInvoiceitemPeriodInput = {
  end: Scalars['Int'];
  start: Scalars['Int'];
};

export type StripePostInvoiceitemsInvoiceitemPriceDataInput = {
  currency: Scalars['String'];
  product: Scalars['String'];
  taxBehavior?: InputMaybe<StripePostInvoiceitemsInvoiceitemTaxBehaviorPriceData>;
  unitAmount?: InputMaybe<Scalars['Int']>;
  unitAmountDecimal?: InputMaybe<Scalars['String']>;
};

export enum StripePostInvoiceitemsInvoiceitemTaxBehavior {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE',
  Unspecified = 'UNSPECIFIED'
}

export enum StripePostInvoiceitemsInvoiceitemTaxBehaviorPriceData {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE',
  Unspecified = 'UNSPECIFIED'
}

export type StripePostInvoiceitemsPeriodInput = {
  end: Scalars['Int'];
  start: Scalars['Int'];
};

export type StripePostInvoiceitemsPriceDataInput = {
  currency: Scalars['String'];
  product: Scalars['String'];
  taxBehavior?: InputMaybe<StripePostInvoiceitemsTaxBehaviorPriceData>;
  unitAmount?: InputMaybe<Scalars['Int']>;
  unitAmountDecimal?: InputMaybe<Scalars['String']>;
};

export enum StripePostInvoiceitemsTaxBehavior {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE',
  Unspecified = 'UNSPECIFIED'
}

export enum StripePostInvoiceitemsTaxBehaviorPriceData {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE',
  Unspecified = 'UNSPECIFIED'
}

export type StripePostInvoicesAcssDebitPaymentMethodOptionsPaymentSettingsInput = {
  mandateOptions?: InputMaybe<StripePostInvoicesMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput>;
  verificationMethod?: InputMaybe<StripePostInvoicesVerificationMethodAcssDebitPaymentMethodOptionsPaymentSettings>;
};

export enum StripePostInvoicesActionFromInvoice {
  Revision = 'REVISION'
}

export type StripePostInvoicesAddressShippingDetailsInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostInvoicesAutomaticTaxInput = {
  enabled: Scalars['Boolean'];
};

export type StripePostInvoicesBancontactPaymentMethodOptionsPaymentSettingsInput = {
  preferredLanguage?: InputMaybe<StripePostInvoicesPreferredLanguageBancontactPaymentMethodOptionsPaymentSettings>;
};

export type StripePostInvoicesBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput = {
  euBankTransfer?: InputMaybe<StripePostInvoicesEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput>;
  type?: InputMaybe<Scalars['String']>;
};

export type StripePostInvoicesCardPaymentMethodOptionsPaymentSettingsInput = {
  installments?: InputMaybe<StripePostInvoicesInstallmentsCardPaymentMethodOptionsPaymentSettingsInput>;
  requestThreeDSecure?: InputMaybe<StripePostInvoicesRequestThreeDSecureCardPaymentMethodOptionsPaymentSettings>;
};

export enum StripePostInvoicesCollectionMethod {
  ChargeAutomatically = 'CHARGE_AUTOMATICALLY',
  SendInvoice = 'SEND_INVOICE'
}

export type StripePostInvoicesCustomFieldsInput = {
  name: Scalars['String'];
  value: Scalars['String'];
};

export type StripePostInvoicesCustomerBalancePaymentMethodOptionsPaymentSettingsInput = {
  bankTransfer?: InputMaybe<StripePostInvoicesBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput>;
  fundingType?: InputMaybe<Scalars['String']>;
};

export type StripePostInvoicesDeliveryEstimateShippingRateDataShippingCostInput = {
  maximum?: InputMaybe<StripePostInvoicesMaximumDeliveryEstimateShippingRateDataShippingCostInput>;
  minimum?: InputMaybe<StripePostInvoicesMinimumDeliveryEstimateShippingRateDataShippingCostInput>;
};

export type StripePostInvoicesDiscountsInput = {
  coupon?: InputMaybe<Scalars['String']>;
  discount?: InputMaybe<Scalars['String']>;
};

export type StripePostInvoicesEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput = {
  country: Scalars['String'];
};

export type StripePostInvoicesFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput = {
  permissions?: InputMaybe<Array<StripePostInvoicesPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettings>>;
};

export type StripePostInvoicesFixedAmountShippingRateDataShippingCostInput = {
  amount: Scalars['Int'];
  currency: Scalars['String'];
  currencyOptions?: InputMaybe<Scalars['JSON']>;
};

export type StripePostInvoicesFromInvoiceInput = {
  action: StripePostInvoicesActionFromInvoice;
  invoice: Scalars['String'];
};

export type StripePostInvoicesInput = {
  accountTaxIds?: InputMaybe<Scalars['JSON']>;
  applicationFeeAmount?: InputMaybe<Scalars['Int']>;
  autoAdvance?: InputMaybe<Scalars['Boolean']>;
  automaticTax?: InputMaybe<StripePostInvoicesAutomaticTaxInput>;
  collectionMethod?: InputMaybe<StripePostInvoicesCollectionMethod>;
  currency?: InputMaybe<Scalars['String']>;
  customFields?: InputMaybe<StripeStringOrPostInvoicesCustomFieldsUnionInput>;
  customer?: InputMaybe<Scalars['String']>;
  daysUntilDue?: InputMaybe<Scalars['Int']>;
  defaultPaymentMethod?: InputMaybe<Scalars['String']>;
  defaultSource?: InputMaybe<Scalars['String']>;
  defaultTaxRates?: InputMaybe<Array<Scalars['String']>>;
  description?: InputMaybe<Scalars['String']>;
  discounts?: InputMaybe<StripeStringOrPostInvoicesDiscountsUnionInput>;
  dueDate?: InputMaybe<Scalars['Int']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  footer?: InputMaybe<Scalars['String']>;
  fromInvoice?: InputMaybe<StripePostInvoicesFromInvoiceInput>;
  metadata?: InputMaybe<Scalars['JSON']>;
  onBehalfOf?: InputMaybe<Scalars['String']>;
  paymentSettings?: InputMaybe<StripePostInvoicesPaymentSettingsInput>;
  pendingInvoiceItemsBehavior?: InputMaybe<StripePostInvoicesPendingInvoiceItemsBehavior>;
  renderingOptions?: InputMaybe<StripeStringOrPostInvoicesRenderingOptionsUnionInput>;
  shippingCost?: InputMaybe<StripePostInvoicesShippingCostInput>;
  shippingDetails?: InputMaybe<StripePostInvoicesShippingDetailsInput>;
  statementDescriptor?: InputMaybe<Scalars['String']>;
  subscription?: InputMaybe<Scalars['String']>;
  transferData?: InputMaybe<StripePostInvoicesTransferDataInput>;
};

export type StripePostInvoicesInstallmentsCardPaymentMethodOptionsPaymentSettingsInput = {
  enabled?: InputMaybe<Scalars['Boolean']>;
  plan?: InputMaybe<StripeStringOrPostInvoicesPlanInstallmentsCardPaymentMethodOptionsPaymentSettingsUnionInput>;
};

export enum StripePostInvoicesIntervalPlanInstallmentsCardPaymentMethodOptionsPaymentSettings {
  Month = 'MONTH'
}

export type StripePostInvoicesInvoiceAcssDebitPaymentMethodOptionsPaymentSettingsInput = {
  mandateOptions?: InputMaybe<StripePostInvoicesInvoiceMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput>;
  verificationMethod?: InputMaybe<StripePostInvoicesInvoiceVerificationMethodAcssDebitPaymentMethodOptionsPaymentSettings>;
};

export type StripePostInvoicesInvoiceAddressShippingDetailsInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostInvoicesInvoiceAutomaticTaxInput = {
  enabled: Scalars['Boolean'];
};

export type StripePostInvoicesInvoiceBancontactPaymentMethodOptionsPaymentSettingsInput = {
  preferredLanguage?: InputMaybe<StripePostInvoicesInvoicePreferredLanguageBancontactPaymentMethodOptionsPaymentSettings>;
};

export type StripePostInvoicesInvoiceBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput = {
  euBankTransfer?: InputMaybe<StripePostInvoicesInvoiceEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput>;
  type?: InputMaybe<Scalars['String']>;
};

export type StripePostInvoicesInvoiceCardPaymentMethodOptionsPaymentSettingsInput = {
  installments?: InputMaybe<StripePostInvoicesInvoiceInstallmentsCardPaymentMethodOptionsPaymentSettingsInput>;
  requestThreeDSecure?: InputMaybe<StripePostInvoicesInvoiceRequestThreeDSecureCardPaymentMethodOptionsPaymentSettings>;
};

export enum StripePostInvoicesInvoiceCollectionMethod {
  ChargeAutomatically = 'CHARGE_AUTOMATICALLY',
  SendInvoice = 'SEND_INVOICE'
}

export type StripePostInvoicesInvoiceCustomFieldsInput = {
  name: Scalars['String'];
  value: Scalars['String'];
};

export type StripePostInvoicesInvoiceCustomerBalancePaymentMethodOptionsPaymentSettingsInput = {
  bankTransfer?: InputMaybe<StripePostInvoicesInvoiceBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput>;
  fundingType?: InputMaybe<Scalars['String']>;
};

export type StripePostInvoicesInvoiceDeliveryEstimateShippingRateDataShippingCostInput = {
  maximum?: InputMaybe<StripePostInvoicesInvoiceMaximumDeliveryEstimateShippingRateDataShippingCostInput>;
  minimum?: InputMaybe<StripePostInvoicesInvoiceMinimumDeliveryEstimateShippingRateDataShippingCostInput>;
};

export type StripePostInvoicesInvoiceDiscountsInput = {
  coupon?: InputMaybe<Scalars['String']>;
  discount?: InputMaybe<Scalars['String']>;
};

export type StripePostInvoicesInvoiceEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput = {
  country: Scalars['String'];
};

export type StripePostInvoicesInvoiceFinalizeInput = {
  autoAdvance?: InputMaybe<Scalars['Boolean']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostInvoicesInvoiceFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput = {
  permissions?: InputMaybe<Array<StripePostInvoicesInvoicePermissionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettings>>;
};

export type StripePostInvoicesInvoiceFixedAmountShippingRateDataShippingCostInput = {
  amount: Scalars['Int'];
  currency: Scalars['String'];
  currencyOptions?: InputMaybe<Scalars['JSON']>;
};

export type StripePostInvoicesInvoiceInput = {
  accountTaxIds?: InputMaybe<Scalars['JSON']>;
  applicationFeeAmount?: InputMaybe<Scalars['Int']>;
  autoAdvance?: InputMaybe<Scalars['Boolean']>;
  automaticTax?: InputMaybe<StripePostInvoicesInvoiceAutomaticTaxInput>;
  collectionMethod?: InputMaybe<StripePostInvoicesInvoiceCollectionMethod>;
  customFields?: InputMaybe<StripeStringOrPostInvoicesInvoiceCustomFieldsUnionInput>;
  daysUntilDue?: InputMaybe<Scalars['Int']>;
  defaultPaymentMethod?: InputMaybe<Scalars['String']>;
  defaultSource?: InputMaybe<Scalars['String']>;
  defaultTaxRates?: InputMaybe<Scalars['JSON']>;
  description?: InputMaybe<Scalars['String']>;
  discounts?: InputMaybe<StripeStringOrPostInvoicesInvoiceDiscountsUnionInput>;
  dueDate?: InputMaybe<Scalars['Int']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  footer?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  onBehalfOf?: InputMaybe<Scalars['JSON']>;
  paymentSettings?: InputMaybe<StripePostInvoicesInvoicePaymentSettingsInput>;
  renderingOptions?: InputMaybe<StripeStringOrPostInvoicesInvoiceRenderingOptionsUnionInput>;
  shippingCost?: InputMaybe<StripeStringOrPostInvoicesInvoiceShippingCostUnionInput>;
  shippingDetails?: InputMaybe<StripeStringOrPostInvoicesInvoiceShippingDetailsUnionInput>;
  statementDescriptor?: InputMaybe<Scalars['String']>;
  transferData?: InputMaybe<StripeStringOrPostInvoicesInvoiceTransferDataUnionInput>;
};

export type StripePostInvoicesInvoiceInstallmentsCardPaymentMethodOptionsPaymentSettingsInput = {
  enabled?: InputMaybe<Scalars['Boolean']>;
  plan?: InputMaybe<StripeStringOrPostInvoicesInvoicePlanInstallmentsCardPaymentMethodOptionsPaymentSettingsUnionInput>;
};

export enum StripePostInvoicesInvoiceIntervalPlanInstallmentsCardPaymentMethodOptionsPaymentSettings {
  Month = 'MONTH'
}

export type StripePostInvoicesInvoiceMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput = {
  transactionType?: InputMaybe<StripePostInvoicesInvoiceTransactionTypeMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettings>;
};

export type StripePostInvoicesInvoiceMarkUncollectibleInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostInvoicesInvoiceMaximumDeliveryEstimateShippingRateDataShippingCostInput = {
  unit: StripePostInvoicesInvoiceUnitMaximumDeliveryEstimateShippingRateDataShippingCost;
  value: Scalars['Int'];
};

export type StripePostInvoicesInvoiceMinimumDeliveryEstimateShippingRateDataShippingCostInput = {
  unit: StripePostInvoicesInvoiceUnitMinimumDeliveryEstimateShippingRateDataShippingCost;
  value: Scalars['Int'];
};

export type StripePostInvoicesInvoicePayInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  forgive?: InputMaybe<Scalars['Boolean']>;
  mandate?: InputMaybe<Scalars['String']>;
  offSession?: InputMaybe<Scalars['Boolean']>;
  paidOutOfBand?: InputMaybe<Scalars['Boolean']>;
  paymentMethod?: InputMaybe<Scalars['String']>;
  source?: InputMaybe<Scalars['String']>;
};

export type StripePostInvoicesInvoicePaymentMethodOptionsPaymentSettingsInput = {
  acssDebit?: InputMaybe<StripeStringOrPostInvoicesInvoiceAcssDebitPaymentMethodOptionsPaymentSettingsUnionInput>;
  bancontact?: InputMaybe<StripeStringOrPostInvoicesInvoiceBancontactPaymentMethodOptionsPaymentSettingsUnionInput>;
  card?: InputMaybe<StripeStringOrPostInvoicesInvoiceCardPaymentMethodOptionsPaymentSettingsUnionInput>;
  customerBalance?: InputMaybe<StripeStringOrPostInvoicesInvoiceCustomerBalancePaymentMethodOptionsPaymentSettingsUnionInput>;
  konbini?: InputMaybe<Scalars['JSON']>;
  usBankAccount?: InputMaybe<StripeStringOrPostInvoicesInvoiceUsBankAccountPaymentMethodOptionsPaymentSettingsUnionInput>;
};

export type StripePostInvoicesInvoicePaymentSettingsInput = {
  defaultMandate?: InputMaybe<Scalars['String']>;
  paymentMethodOptions?: InputMaybe<StripePostInvoicesInvoicePaymentMethodOptionsPaymentSettingsInput>;
  paymentMethodTypes?: InputMaybe<Scalars['JSON']>;
};

export enum StripePostInvoicesInvoicePermissionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettings {
  Balances = 'BALANCES',
  Ownership = 'OWNERSHIP',
  PaymentMethod = 'PAYMENT_METHOD',
  Transactions = 'TRANSACTIONS'
}

export type StripePostInvoicesInvoicePlanInstallmentsCardPaymentMethodOptionsPaymentSettingsInput = {
  count: Scalars['Int'];
  interval: StripePostInvoicesInvoiceIntervalPlanInstallmentsCardPaymentMethodOptionsPaymentSettings;
  type: StripePostInvoicesInvoiceTypePlanInstallmentsCardPaymentMethodOptionsPaymentSettings;
};

export enum StripePostInvoicesInvoicePreferredLanguageBancontactPaymentMethodOptionsPaymentSettings {
  De = 'DE',
  En = 'EN',
  Fr = 'FR',
  Nl = 'NL'
}

export type StripePostInvoicesInvoiceRenderingOptionsInput = {
  amountTaxDisplay?: InputMaybe<Scalars['String']>;
};

export enum StripePostInvoicesInvoiceRequestThreeDSecureCardPaymentMethodOptionsPaymentSettings {
  Any = 'ANY',
  Automatic = 'AUTOMATIC'
}

export type StripePostInvoicesInvoiceSendInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostInvoicesInvoiceShippingCostInput = {
  shippingRate?: InputMaybe<Scalars['String']>;
  shippingRateData?: InputMaybe<StripePostInvoicesInvoiceShippingRateDataShippingCostInput>;
};

export type StripePostInvoicesInvoiceShippingDetailsInput = {
  address: StripePostInvoicesInvoiceAddressShippingDetailsInput;
  name: Scalars['String'];
  phone?: InputMaybe<Scalars['String']>;
};

export type StripePostInvoicesInvoiceShippingRateDataShippingCostInput = {
  deliveryEstimate?: InputMaybe<StripePostInvoicesInvoiceDeliveryEstimateShippingRateDataShippingCostInput>;
  displayName: Scalars['String'];
  fixedAmount?: InputMaybe<StripePostInvoicesInvoiceFixedAmountShippingRateDataShippingCostInput>;
  metadata?: InputMaybe<Scalars['JSON']>;
  taxBehavior?: InputMaybe<StripePostInvoicesInvoiceTaxBehaviorShippingRateDataShippingCost>;
  taxCode?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<StripePostInvoicesInvoiceTypeShippingRateDataShippingCost>;
};

export enum StripePostInvoicesInvoiceTaxBehaviorShippingRateDataShippingCost {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE',
  Unspecified = 'UNSPECIFIED'
}

export enum StripePostInvoicesInvoiceTransactionTypeMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettings {
  Business = 'BUSINESS',
  Personal = 'PERSONAL'
}

export type StripePostInvoicesInvoiceTransferDataInput = {
  amount?: InputMaybe<Scalars['Int']>;
  destination: Scalars['String'];
};

export enum StripePostInvoicesInvoiceTypePlanInstallmentsCardPaymentMethodOptionsPaymentSettings {
  FixedCount = 'FIXED_COUNT'
}

export enum StripePostInvoicesInvoiceTypeShippingRateDataShippingCost {
  FixedAmount = 'FIXED_AMOUNT'
}

export enum StripePostInvoicesInvoiceUnitMaximumDeliveryEstimateShippingRateDataShippingCost {
  BusinessDay = 'BUSINESS_DAY',
  Day = 'DAY',
  Hour = 'HOUR',
  Month = 'MONTH',
  Week = 'WEEK'
}

export enum StripePostInvoicesInvoiceUnitMinimumDeliveryEstimateShippingRateDataShippingCost {
  BusinessDay = 'BUSINESS_DAY',
  Day = 'DAY',
  Hour = 'HOUR',
  Month = 'MONTH',
  Week = 'WEEK'
}

export type StripePostInvoicesInvoiceUsBankAccountPaymentMethodOptionsPaymentSettingsInput = {
  financialConnections?: InputMaybe<StripePostInvoicesInvoiceFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput>;
  verificationMethod?: InputMaybe<StripePostInvoicesInvoiceVerificationMethodUsBankAccountPaymentMethodOptionsPaymentSettings>;
};

export enum StripePostInvoicesInvoiceVerificationMethodAcssDebitPaymentMethodOptionsPaymentSettings {
  Automatic = 'AUTOMATIC',
  Instant = 'INSTANT',
  Microdeposits = 'MICRODEPOSITS'
}

export enum StripePostInvoicesInvoiceVerificationMethodUsBankAccountPaymentMethodOptionsPaymentSettings {
  Automatic = 'AUTOMATIC',
  Instant = 'INSTANT',
  Microdeposits = 'MICRODEPOSITS'
}

export type StripePostInvoicesInvoiceVoidInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostInvoicesMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput = {
  transactionType?: InputMaybe<StripePostInvoicesTransactionTypeMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettings>;
};

export type StripePostInvoicesMaximumDeliveryEstimateShippingRateDataShippingCostInput = {
  unit: StripePostInvoicesUnitMaximumDeliveryEstimateShippingRateDataShippingCost;
  value: Scalars['Int'];
};

export type StripePostInvoicesMinimumDeliveryEstimateShippingRateDataShippingCostInput = {
  unit: StripePostInvoicesUnitMinimumDeliveryEstimateShippingRateDataShippingCost;
  value: Scalars['Int'];
};

export type StripePostInvoicesPaymentMethodOptionsPaymentSettingsInput = {
  acssDebit?: InputMaybe<StripeStringOrPostInvoicesAcssDebitPaymentMethodOptionsPaymentSettingsUnionInput>;
  bancontact?: InputMaybe<StripeStringOrPostInvoicesBancontactPaymentMethodOptionsPaymentSettingsUnionInput>;
  card?: InputMaybe<StripeStringOrPostInvoicesCardPaymentMethodOptionsPaymentSettingsUnionInput>;
  customerBalance?: InputMaybe<StripeStringOrPostInvoicesCustomerBalancePaymentMethodOptionsPaymentSettingsUnionInput>;
  konbini?: InputMaybe<Scalars['JSON']>;
  usBankAccount?: InputMaybe<StripeStringOrPostInvoicesUsBankAccountPaymentMethodOptionsPaymentSettingsUnionInput>;
};

export type StripePostInvoicesPaymentSettingsInput = {
  defaultMandate?: InputMaybe<Scalars['String']>;
  paymentMethodOptions?: InputMaybe<StripePostInvoicesPaymentMethodOptionsPaymentSettingsInput>;
  paymentMethodTypes?: InputMaybe<Scalars['JSON']>;
};

export enum StripePostInvoicesPendingInvoiceItemsBehavior {
  Exclude = 'EXCLUDE',
  Include = 'INCLUDE',
  IncludeAndRequire = 'INCLUDE_AND_REQUIRE'
}

export enum StripePostInvoicesPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettings {
  Balances = 'BALANCES',
  Ownership = 'OWNERSHIP',
  PaymentMethod = 'PAYMENT_METHOD',
  Transactions = 'TRANSACTIONS'
}

export type StripePostInvoicesPlanInstallmentsCardPaymentMethodOptionsPaymentSettingsInput = {
  count: Scalars['Int'];
  interval: StripePostInvoicesIntervalPlanInstallmentsCardPaymentMethodOptionsPaymentSettings;
  type: StripePostInvoicesTypePlanInstallmentsCardPaymentMethodOptionsPaymentSettings;
};

export enum StripePostInvoicesPreferredLanguageBancontactPaymentMethodOptionsPaymentSettings {
  De = 'DE',
  En = 'EN',
  Fr = 'FR',
  Nl = 'NL'
}

export type StripePostInvoicesRenderingOptionsInput = {
  amountTaxDisplay?: InputMaybe<Scalars['String']>;
};

export enum StripePostInvoicesRequestThreeDSecureCardPaymentMethodOptionsPaymentSettings {
  Any = 'ANY',
  Automatic = 'AUTOMATIC'
}

export type StripePostInvoicesShippingCostInput = {
  shippingRate?: InputMaybe<Scalars['String']>;
  shippingRateData?: InputMaybe<StripePostInvoicesShippingRateDataShippingCostInput>;
};

export type StripePostInvoicesShippingDetailsInput = {
  address: StripePostInvoicesAddressShippingDetailsInput;
  name: Scalars['String'];
  phone?: InputMaybe<Scalars['String']>;
};

export type StripePostInvoicesShippingRateDataShippingCostInput = {
  deliveryEstimate?: InputMaybe<StripePostInvoicesDeliveryEstimateShippingRateDataShippingCostInput>;
  displayName: Scalars['String'];
  fixedAmount?: InputMaybe<StripePostInvoicesFixedAmountShippingRateDataShippingCostInput>;
  metadata?: InputMaybe<Scalars['JSON']>;
  taxBehavior?: InputMaybe<StripePostInvoicesTaxBehaviorShippingRateDataShippingCost>;
  taxCode?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<StripePostInvoicesTypeShippingRateDataShippingCost>;
};

export enum StripePostInvoicesTaxBehaviorShippingRateDataShippingCost {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE',
  Unspecified = 'UNSPECIFIED'
}

export enum StripePostInvoicesTransactionTypeMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettings {
  Business = 'BUSINESS',
  Personal = 'PERSONAL'
}

export type StripePostInvoicesTransferDataInput = {
  amount?: InputMaybe<Scalars['Int']>;
  destination: Scalars['String'];
};

export enum StripePostInvoicesTypePlanInstallmentsCardPaymentMethodOptionsPaymentSettings {
  FixedCount = 'FIXED_COUNT'
}

export enum StripePostInvoicesTypeShippingRateDataShippingCost {
  FixedAmount = 'FIXED_AMOUNT'
}

export enum StripePostInvoicesUnitMaximumDeliveryEstimateShippingRateDataShippingCost {
  BusinessDay = 'BUSINESS_DAY',
  Day = 'DAY',
  Hour = 'HOUR',
  Month = 'MONTH',
  Week = 'WEEK'
}

export enum StripePostInvoicesUnitMinimumDeliveryEstimateShippingRateDataShippingCost {
  BusinessDay = 'BUSINESS_DAY',
  Day = 'DAY',
  Hour = 'HOUR',
  Month = 'MONTH',
  Week = 'WEEK'
}

export type StripePostInvoicesUsBankAccountPaymentMethodOptionsPaymentSettingsInput = {
  financialConnections?: InputMaybe<StripePostInvoicesFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput>;
  verificationMethod?: InputMaybe<StripePostInvoicesVerificationMethodUsBankAccountPaymentMethodOptionsPaymentSettings>;
};

export enum StripePostInvoicesVerificationMethodAcssDebitPaymentMethodOptionsPaymentSettings {
  Automatic = 'AUTOMATIC',
  Instant = 'INSTANT',
  Microdeposits = 'MICRODEPOSITS'
}

export enum StripePostInvoicesVerificationMethodUsBankAccountPaymentMethodOptionsPaymentSettings {
  Automatic = 'AUTOMATIC',
  Instant = 'INSTANT',
  Microdeposits = 'MICRODEPOSITS'
}

export type StripePostIssuingAuthorizationsAuthorizationApproveInput = {
  amount?: InputMaybe<Scalars['Int']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
};

export type StripePostIssuingAuthorizationsAuthorizationDeclineInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
};

export type StripePostIssuingAuthorizationsAuthorizationInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
};

export type StripePostIssuingCardholdersAddressBillingInput = {
  city: Scalars['String'];
  country: Scalars['String'];
  line1: Scalars['String'];
  line2?: InputMaybe<Scalars['String']>;
  postalCode: Scalars['String'];
  state?: InputMaybe<Scalars['String']>;
};

export enum StripePostIssuingCardholdersAllowedCategoriesSpendingControls {
  AccountingBookkeepingServices = 'ACCOUNTING_BOOKKEEPING_SERVICES',
  AcRefrigerationRepair = 'AC_REFRIGERATION_REPAIR',
  AdvertisingServices = 'ADVERTISING_SERVICES',
  AgriculturalCooperative = 'AGRICULTURAL_COOPERATIVE',
  AirlinesAirCarriers = 'AIRLINES_AIR_CARRIERS',
  AirportsFlyingFields = 'AIRPORTS_FLYING_FIELDS',
  AmbulanceServices = 'AMBULANCE_SERVICES',
  AmusementParksCarnivals = 'AMUSEMENT_PARKS_CARNIVALS',
  AntiqueReproductions = 'ANTIQUE_REPRODUCTIONS',
  AntiqueShops = 'ANTIQUE_SHOPS',
  Aquariums = 'AQUARIUMS',
  ArchitecturalSurveyingServices = 'ARCHITECTURAL_SURVEYING_SERVICES',
  ArtistsSupplyAndCraftShops = 'ARTISTS_SUPPLY_AND_CRAFT_SHOPS',
  ArtDealersAndGalleries = 'ART_DEALERS_AND_GALLERIES',
  AutomatedCashDisburse = 'AUTOMATED_CASH_DISBURSE',
  AutomatedFuelDispensers = 'AUTOMATED_FUEL_DISPENSERS',
  AutomobileAssociations = 'AUTOMOBILE_ASSOCIATIONS',
  AutomotivePartsAndAccessoriesStores = 'AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES',
  AutomotiveTireStores = 'AUTOMOTIVE_TIRE_STORES',
  AutoAndHomeSupplyStores = 'AUTO_AND_HOME_SUPPLY_STORES',
  AutoBodyRepairShops = 'AUTO_BODY_REPAIR_SHOPS',
  AutoPaintShops = 'AUTO_PAINT_SHOPS',
  AutoServiceShops = 'AUTO_SERVICE_SHOPS',
  BailAndBondPayments = 'BAIL_AND_BOND_PAYMENTS',
  Bakeries = 'BAKERIES',
  BandsOrchestras = 'BANDS_ORCHESTRAS',
  BarberAndBeautyShops = 'BARBER_AND_BEAUTY_SHOPS',
  BettingCasinoGambling = 'BETTING_CASINO_GAMBLING',
  BicycleShops = 'BICYCLE_SHOPS',
  BilliardPoolEstablishments = 'BILLIARD_POOL_ESTABLISHMENTS',
  BoatDealers = 'BOAT_DEALERS',
  BoatRentalsAndLeases = 'BOAT_RENTALS_AND_LEASES',
  BooksPeriodicalsAndNewspapers = 'BOOKS_PERIODICALS_AND_NEWSPAPERS',
  BookStores = 'BOOK_STORES',
  BowlingAlleys = 'BOWLING_ALLEYS',
  BusinessSecretarialSchools = 'BUSINESS_SECRETARIAL_SCHOOLS',
  BusLines = 'BUS_LINES',
  BuyingShoppingServices = 'BUYING_SHOPPING_SERVICES',
  CableSatelliteAndOtherPayTelevisionAndRadio = 'CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO',
  CameraAndPhotographicSupplyStores = 'CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES',
  CandyNutAndConfectioneryStores = 'CANDY_NUT_AND_CONFECTIONERY_STORES',
  CarpentryServices = 'CARPENTRY_SERVICES',
  CarpetUpholsteryCleaning = 'CARPET_UPHOLSTERY_CLEANING',
  CarAndTruckDealersNewUsed = 'CAR_AND_TRUCK_DEALERS_NEW_USED',
  CarAndTruckDealersUsedOnly = 'CAR_AND_TRUCK_DEALERS_USED_ONLY',
  CarRentalAgencies = 'CAR_RENTAL_AGENCIES',
  CarWashes = 'CAR_WASHES',
  Caterers = 'CATERERS',
  CharitableAndSocialServiceOrganizationsFundraising = 'CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING',
  ChemicalsAndAlliedProducts = 'CHEMICALS_AND_ALLIED_PRODUCTS',
  ChildrensAndInfantsWearStores = 'CHILDRENS_AND_INFANTS_WEAR_STORES',
  ChildCareServices = 'CHILD_CARE_SERVICES',
  ChiropodistsPodiatrists = 'CHIROPODISTS_PODIATRISTS',
  Chiropractors = 'CHIROPRACTORS',
  CigarStoresAndStands = 'CIGAR_STORES_AND_STANDS',
  CivicSocialFraternalAssociations = 'CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS',
  CleaningAndMaintenance = 'CLEANING_AND_MAINTENANCE',
  ClothingRental = 'CLOTHING_RENTAL',
  CollegesUniversities = 'COLLEGES_UNIVERSITIES',
  CommercialEquipment = 'COMMERCIAL_EQUIPMENT',
  CommercialFootwear = 'COMMERCIAL_FOOTWEAR',
  CommercialPhotographyArtAndGraphics = 'COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS',
  CommuterTransportAndFerries = 'COMMUTER_TRANSPORT_AND_FERRIES',
  ComputersPeripheralsAndSoftware = 'COMPUTERS_PERIPHERALS_AND_SOFTWARE',
  ComputerNetworkServices = 'COMPUTER_NETWORK_SERVICES',
  ComputerProgramming = 'COMPUTER_PROGRAMMING',
  ComputerRepair = 'COMPUTER_REPAIR',
  ComputerSoftwareStores = 'COMPUTER_SOFTWARE_STORES',
  ConcreteWorkServices = 'CONCRETE_WORK_SERVICES',
  ConstructionMaterials = 'CONSTRUCTION_MATERIALS',
  ConsultingPublicRelations = 'CONSULTING_PUBLIC_RELATIONS',
  CorrespondenceSchools = 'CORRESPONDENCE_SCHOOLS',
  CosmeticStores = 'COSMETIC_STORES',
  CounselingServices = 'COUNSELING_SERVICES',
  CountryClubs = 'COUNTRY_CLUBS',
  CourierServices = 'COURIER_SERVICES',
  CourtCosts = 'COURT_COSTS',
  CreditReportingAgencies = 'CREDIT_REPORTING_AGENCIES',
  CruiseLines = 'CRUISE_LINES',
  DairyProductsStores = 'DAIRY_PRODUCTS_STORES',
  DanceHallStudiosSchools = 'DANCE_HALL_STUDIOS_SCHOOLS',
  DatingEscortServices = 'DATING_ESCORT_SERVICES',
  DentistsOrthodontists = 'DENTISTS_ORTHODONTISTS',
  DepartmentStores = 'DEPARTMENT_STORES',
  DetectiveAgencies = 'DETECTIVE_AGENCIES',
  DigitalGoodsApplications = 'DIGITAL_GOODS_APPLICATIONS',
  DigitalGoodsGames = 'DIGITAL_GOODS_GAMES',
  DigitalGoodsLargeVolume = 'DIGITAL_GOODS_LARGE_VOLUME',
  DigitalGoodsMedia = 'DIGITAL_GOODS_MEDIA',
  DirectMarketingCatalogMerchant = 'DIRECT_MARKETING_CATALOG_MERCHANT',
  DirectMarketingCombinationCatalogAndRetailMerchant = 'DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT',
  DirectMarketingInboundTelemarketing = 'DIRECT_MARKETING_INBOUND_TELEMARKETING',
  DirectMarketingInsuranceServices = 'DIRECT_MARKETING_INSURANCE_SERVICES',
  DirectMarketingOther = 'DIRECT_MARKETING_OTHER',
  DirectMarketingOutboundTelemarketing = 'DIRECT_MARKETING_OUTBOUND_TELEMARKETING',
  DirectMarketingSubscription = 'DIRECT_MARKETING_SUBSCRIPTION',
  DirectMarketingTravel = 'DIRECT_MARKETING_TRAVEL',
  DiscountStores = 'DISCOUNT_STORES',
  Doctors = 'DOCTORS',
  DoorToDoorSales = 'DOOR_TO_DOOR_SALES',
  DraperyWindowCoveringAndUpholsteryStores = 'DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES',
  DrinkingPlaces = 'DRINKING_PLACES',
  DrugsDrugProprietariesAndDruggistSundries = 'DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES',
  DrugStoresAndPharmacies = 'DRUG_STORES_AND_PHARMACIES',
  DryCleaners = 'DRY_CLEANERS',
  DurableGoods = 'DURABLE_GOODS',
  DutyFreeStores = 'DUTY_FREE_STORES',
  EatingPlacesRestaurants = 'EATING_PLACES_RESTAURANTS',
  EducationalServices = 'EDUCATIONAL_SERVICES',
  ElectricalPartsAndEquipment = 'ELECTRICAL_PARTS_AND_EQUIPMENT',
  ElectricalServices = 'ELECTRICAL_SERVICES',
  ElectricRazorStores = 'ELECTRIC_RAZOR_STORES',
  ElectricVehicleCharging = 'ELECTRIC_VEHICLE_CHARGING',
  ElectronicsRepairShops = 'ELECTRONICS_REPAIR_SHOPS',
  ElectronicsStores = 'ELECTRONICS_STORES',
  ElementarySecondarySchools = 'ELEMENTARY_SECONDARY_SCHOOLS',
  EmergencyServicesGcasVisaUseOnly = 'EMERGENCY_SERVICES_GCAS_VISA_USE_ONLY',
  EmploymentTempAgencies = 'EMPLOYMENT_TEMP_AGENCIES',
  EquipmentRental = 'EQUIPMENT_RENTAL',
  ExterminatingServices = 'EXTERMINATING_SERVICES',
  FamilyClothingStores = 'FAMILY_CLOTHING_STORES',
  FastFoodRestaurants = 'FAST_FOOD_RESTAURANTS',
  FinancialInstitutions = 'FINANCIAL_INSTITUTIONS',
  FinesGovernmentAdministrativeEntities = 'FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES',
  FireplaceFireplaceScreensAndAccessoriesStores = 'FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES',
  FloorCoveringStores = 'FLOOR_COVERING_STORES',
  Florists = 'FLORISTS',
  FloristsSuppliesNurseryStockAndFlowers = 'FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS',
  FreezerAndLockerMeatProvisioners = 'FREEZER_AND_LOCKER_MEAT_PROVISIONERS',
  FuelDealersNonAutomotive = 'FUEL_DEALERS_NON_AUTOMOTIVE',
  FuneralServicesCrematories = 'FUNERAL_SERVICES_CREMATORIES',
  FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances = 'FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES',
  FurnitureRepairRefinishing = 'FURNITURE_REPAIR_REFINISHING',
  FurriersAndFurShops = 'FURRIERS_AND_FUR_SHOPS',
  GeneralServices = 'GENERAL_SERVICES',
  GiftCardNoveltyAndSouvenirShops = 'GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS',
  GlasswareCrystalStores = 'GLASSWARE_CRYSTAL_STORES',
  GlassPaintAndWallpaperStores = 'GLASS_PAINT_AND_WALLPAPER_STORES',
  GolfCoursesPublic = 'GOLF_COURSES_PUBLIC',
  GovernmentLicensedHorseDogRacingUsRegionOnly = 'GOVERNMENT_LICENSED_HORSE_DOG_RACING_US_REGION_ONLY',
  GovernmentLicensedOnlineCasionsOnlineGamblingUsRegionOnly = 'GOVERNMENT_LICENSED_ONLINE_CASIONS_ONLINE_GAMBLING_US_REGION_ONLY',
  GovernmentOwnedLotteriesNonUsRegion = 'GOVERNMENT_OWNED_LOTTERIES_NON_US_REGION',
  GovernmentOwnedLotteriesUsRegionOnly = 'GOVERNMENT_OWNED_LOTTERIES_US_REGION_ONLY',
  GovernmentServices = 'GOVERNMENT_SERVICES',
  GroceryStoresSupermarkets = 'GROCERY_STORES_SUPERMARKETS',
  HardwareEquipmentAndSupplies = 'HARDWARE_EQUIPMENT_AND_SUPPLIES',
  HardwareStores = 'HARDWARE_STORES',
  HealthAndBeautySpas = 'HEALTH_AND_BEAUTY_SPAS',
  HearingAidsSalesAndSupplies = 'HEARING_AIDS_SALES_AND_SUPPLIES',
  HeatingPlumbingAC = 'HEATING_PLUMBING_A_C',
  HobbyToyAndGameShops = 'HOBBY_TOY_AND_GAME_SHOPS',
  HomeSupplyWarehouseStores = 'HOME_SUPPLY_WAREHOUSE_STORES',
  Hospitals = 'HOSPITALS',
  HotelsMotelsAndResorts = 'HOTELS_MOTELS_AND_RESORTS',
  HouseholdApplianceStores = 'HOUSEHOLD_APPLIANCE_STORES',
  IndustrialSupplies = 'INDUSTRIAL_SUPPLIES',
  InformationRetrievalServices = 'INFORMATION_RETRIEVAL_SERVICES',
  InsuranceDefault = 'INSURANCE_DEFAULT',
  InsuranceUnderwritingPremiums = 'INSURANCE_UNDERWRITING_PREMIUMS',
  IntraCompanyPurchases = 'INTRA_COMPANY_PURCHASES',
  JewelryStoresWatchesClocksAndSilverwareStores = 'JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES',
  LandscapingServices = 'LANDSCAPING_SERVICES',
  Laundries = 'LAUNDRIES',
  LaundryCleaningServices = 'LAUNDRY_CLEANING_SERVICES',
  LegalServicesAttorneys = 'LEGAL_SERVICES_ATTORNEYS',
  LuggageAndLeatherGoodsStores = 'LUGGAGE_AND_LEATHER_GOODS_STORES',
  LumberBuildingMaterialsStores = 'LUMBER_BUILDING_MATERIALS_STORES',
  ManualCashDisburse = 'MANUAL_CASH_DISBURSE',
  MarinasServiceAndSupplies = 'MARINAS_SERVICE_AND_SUPPLIES',
  Marketplaces = 'MARKETPLACES',
  MasonryStoneworkAndPlaster = 'MASONRY_STONEWORK_AND_PLASTER',
  MassageParlors = 'MASSAGE_PARLORS',
  MedicalAndDentalLabs = 'MEDICAL_AND_DENTAL_LABS',
  MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies = 'MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES',
  MedicalServices = 'MEDICAL_SERVICES',
  MembershipOrganizations = 'MEMBERSHIP_ORGANIZATIONS',
  MensAndBoysClothingAndAccessoriesStores = 'MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES',
  MensWomensClothingStores = 'MENS_WOMENS_CLOTHING_STORES',
  MetalServiceCenters = 'METAL_SERVICE_CENTERS',
  Miscellaneous = 'MISCELLANEOUS',
  MiscellaneousApparelAndAccessoryShops = 'MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS',
  MiscellaneousAutoDealers = 'MISCELLANEOUS_AUTO_DEALERS',
  MiscellaneousBusinessServices = 'MISCELLANEOUS_BUSINESS_SERVICES',
  MiscellaneousFoodStores = 'MISCELLANEOUS_FOOD_STORES',
  MiscellaneousGeneralMerchandise = 'MISCELLANEOUS_GENERAL_MERCHANDISE',
  MiscellaneousGeneralServices = 'MISCELLANEOUS_GENERAL_SERVICES',
  MiscellaneousHomeFurnishingSpecialtyStores = 'MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES',
  MiscellaneousPublishingAndPrinting = 'MISCELLANEOUS_PUBLISHING_AND_PRINTING',
  MiscellaneousRecreationServices = 'MISCELLANEOUS_RECREATION_SERVICES',
  MiscellaneousRepairShops = 'MISCELLANEOUS_REPAIR_SHOPS',
  MiscellaneousSpecialtyRetail = 'MISCELLANEOUS_SPECIALTY_RETAIL',
  MobileHomeDealers = 'MOBILE_HOME_DEALERS',
  MotionPictureTheaters = 'MOTION_PICTURE_THEATERS',
  MotorcycleShopsAndDealers = 'MOTORCYCLE_SHOPS_AND_DEALERS',
  MotorcycleShopsDealers = 'MOTORCYCLE_SHOPS_DEALERS',
  MotorFreightCarriersAndTrucking = 'MOTOR_FREIGHT_CARRIERS_AND_TRUCKING',
  MotorHomesDealers = 'MOTOR_HOMES_DEALERS',
  MotorVehicleSuppliesAndNewParts = 'MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS',
  MusicStoresMusicalInstrumentsPianosAndSheetMusic = 'MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC',
  NewsDealersAndNewsstands = 'NEWS_DEALERS_AND_NEWSSTANDS',
  NondurableGoods = 'NONDURABLE_GOODS',
  NonFiMoneyOrders = 'NON_FI_MONEY_ORDERS',
  NonFiStoredValueCardPurchaseLoad = 'NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD',
  NurseriesLawnAndGardenSupplyStores = 'NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES',
  NursingPersonalCare = 'NURSING_PERSONAL_CARE',
  OfficeAndCommercialFurniture = 'OFFICE_AND_COMMERCIAL_FURNITURE',
  OpticiansEyeglasses = 'OPTICIANS_EYEGLASSES',
  OptometristsOphthalmologist = 'OPTOMETRISTS_OPHTHALMOLOGIST',
  OrthopedicGoodsProstheticDevices = 'ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES',
  Osteopaths = 'OSTEOPATHS',
  PackageStoresBeerWineAndLiquor = 'PACKAGE_STORES_BEER_WINE_AND_LIQUOR',
  PaintsVarnishesAndSupplies = 'PAINTS_VARNISHES_AND_SUPPLIES',
  ParkingLotsGarages = 'PARKING_LOTS_GARAGES',
  PassengerRailways = 'PASSENGER_RAILWAYS',
  PawnShops = 'PAWN_SHOPS',
  PetroleumAndPetroleumProducts = 'PETROLEUM_AND_PETROLEUM_PRODUCTS',
  PetShopsPetFoodAndSupplies = 'PET_SHOPS_PET_FOOD_AND_SUPPLIES',
  PhotographicPhotocopyMicrofilmEquipmentAndSupplies = 'PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES',
  PhotographicStudios = 'PHOTOGRAPHIC_STUDIOS',
  PhotoDeveloping = 'PHOTO_DEVELOPING',
  PictureVideoProduction = 'PICTURE_VIDEO_PRODUCTION',
  PieceGoodsNotionsAndOtherDryGoods = 'PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS',
  PlumbingHeatingEquipmentAndSupplies = 'PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES',
  PoliticalOrganizations = 'POLITICAL_ORGANIZATIONS',
  PostalServicesGovernmentOnly = 'POSTAL_SERVICES_GOVERNMENT_ONLY',
  PreciousStonesAndMetalsWatchesAndJewelry = 'PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY',
  ProfessionalServices = 'PROFESSIONAL_SERVICES',
  PublicWarehousingAndStorage = 'PUBLIC_WAREHOUSING_AND_STORAGE',
  QuickCopyReproAndBlueprint = 'QUICK_COPY_REPRO_AND_BLUEPRINT',
  Railroads = 'RAILROADS',
  RealEstateAgentsAndManagersRentals = 'REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS',
  RecordStores = 'RECORD_STORES',
  RecreationalVehicleRentals = 'RECREATIONAL_VEHICLE_RENTALS',
  ReligiousGoodsStores = 'RELIGIOUS_GOODS_STORES',
  ReligiousOrganizations = 'RELIGIOUS_ORGANIZATIONS',
  RoofingSidingSheetMetal = 'ROOFING_SIDING_SHEET_METAL',
  SecretarialSupportServices = 'SECRETARIAL_SUPPORT_SERVICES',
  SecurityBrokersDealers = 'SECURITY_BROKERS_DEALERS',
  ServiceStations = 'SERVICE_STATIONS',
  SewingNeedleworkFabricAndPieceGoodsStores = 'SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES',
  ShoeRepairHatCleaning = 'SHOE_REPAIR_HAT_CLEANING',
  ShoeStores = 'SHOE_STORES',
  SmallApplianceRepair = 'SMALL_APPLIANCE_REPAIR',
  SnowmobileDealers = 'SNOWMOBILE_DEALERS',
  SpecialtyCleaning = 'SPECIALTY_CLEANING',
  SpecialTradeServices = 'SPECIAL_TRADE_SERVICES',
  SportingGoodsStores = 'SPORTING_GOODS_STORES',
  SportingRecreationCamps = 'SPORTING_RECREATION_CAMPS',
  SportsAndRidingApparelStores = 'SPORTS_AND_RIDING_APPAREL_STORES',
  SportsClubsFields = 'SPORTS_CLUBS_FIELDS',
  StampAndCoinStores = 'STAMP_AND_COIN_STORES',
  StationaryOfficeSuppliesPrintingAndWritingPaper = 'STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER',
  StationeryStoresOfficeAndSchoolSupplyStores = 'STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES',
  SwimmingPoolsSales = 'SWIMMING_POOLS_SALES',
  TailorsAlterations = 'TAILORS_ALTERATIONS',
  TaxicabsLimousines = 'TAXICABS_LIMOUSINES',
  TaxPaymentsGovernmentAgencies = 'TAX_PAYMENTS_GOVERNMENT_AGENCIES',
  TaxPreparationServices = 'TAX_PREPARATION_SERVICES',
  TelecommunicationEquipmentAndTelephoneSales = 'TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES',
  TelecommunicationServices = 'TELECOMMUNICATION_SERVICES',
  TelegraphServices = 'TELEGRAPH_SERVICES',
  TentAndAwningShops = 'TENT_AND_AWNING_SHOPS',
  TestingLaboratories = 'TESTING_LABORATORIES',
  TheatricalTicketAgencies = 'THEATRICAL_TICKET_AGENCIES',
  Timeshares = 'TIMESHARES',
  TireRetreadingAndRepair = 'TIRE_RETREADING_AND_REPAIR',
  TollsBridgeFees = 'TOLLS_BRIDGE_FEES',
  TouristAttractionsAndExhibits = 'TOURIST_ATTRACTIONS_AND_EXHIBITS',
  TowingServices = 'TOWING_SERVICES',
  TrailerParksCampgrounds = 'TRAILER_PARKS_CAMPGROUNDS',
  TransportationServices = 'TRANSPORTATION_SERVICES',
  TravelAgenciesTourOperators = 'TRAVEL_AGENCIES_TOUR_OPERATORS',
  TruckStopIteration = 'TRUCK_STOP_ITERATION',
  TruckUtilityTrailerRentals = 'TRUCK_UTILITY_TRAILER_RENTALS',
  TypesettingPlateMakingAndRelatedServices = 'TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES',
  TypewriterStores = 'TYPEWRITER_STORES',
  TUiTravelGermany = 'T_UI_TRAVEL_GERMANY',
  UniformsCommercialClothing = 'UNIFORMS_COMMERCIAL_CLOTHING',
  UsedMerchandiseAndSecondhandStores = 'USED_MERCHANDISE_AND_SECONDHAND_STORES',
  Utilities = 'UTILITIES',
  USFederalGovernmentAgenciesOrDepartments = 'U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS',
  VarietyStores = 'VARIETY_STORES',
  VeterinaryServices = 'VETERINARY_SERVICES',
  VideoAmusementGameSupplies = 'VIDEO_AMUSEMENT_GAME_SUPPLIES',
  VideoGameArcades = 'VIDEO_GAME_ARCADES',
  VideoTapeRentalStores = 'VIDEO_TAPE_RENTAL_STORES',
  VocationalTradeSchools = 'VOCATIONAL_TRADE_SCHOOLS',
  WatchJewelryRepair = 'WATCH_JEWELRY_REPAIR',
  WeldingRepair = 'WELDING_REPAIR',
  WholesaleClubs = 'WHOLESALE_CLUBS',
  WigAndToupeeStores = 'WIG_AND_TOUPEE_STORES',
  WiresMoneyOrders = 'WIRES_MONEY_ORDERS',
  WomensAccessoryAndSpecialtyShops = 'WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS',
  WomensReadyToWearStores = 'WOMENS_READY_TO_WEAR_STORES',
  WreckingAndSalvageYards = 'WRECKING_AND_SALVAGE_YARDS'
}

export type StripePostIssuingCardholdersBillingInput = {
  address: StripePostIssuingCardholdersAddressBillingInput;
};

export enum StripePostIssuingCardholdersBlockedCategoriesSpendingControls {
  AccountingBookkeepingServices = 'ACCOUNTING_BOOKKEEPING_SERVICES',
  AcRefrigerationRepair = 'AC_REFRIGERATION_REPAIR',
  AdvertisingServices = 'ADVERTISING_SERVICES',
  AgriculturalCooperative = 'AGRICULTURAL_COOPERATIVE',
  AirlinesAirCarriers = 'AIRLINES_AIR_CARRIERS',
  AirportsFlyingFields = 'AIRPORTS_FLYING_FIELDS',
  AmbulanceServices = 'AMBULANCE_SERVICES',
  AmusementParksCarnivals = 'AMUSEMENT_PARKS_CARNIVALS',
  AntiqueReproductions = 'ANTIQUE_REPRODUCTIONS',
  AntiqueShops = 'ANTIQUE_SHOPS',
  Aquariums = 'AQUARIUMS',
  ArchitecturalSurveyingServices = 'ARCHITECTURAL_SURVEYING_SERVICES',
  ArtistsSupplyAndCraftShops = 'ARTISTS_SUPPLY_AND_CRAFT_SHOPS',
  ArtDealersAndGalleries = 'ART_DEALERS_AND_GALLERIES',
  AutomatedCashDisburse = 'AUTOMATED_CASH_DISBURSE',
  AutomatedFuelDispensers = 'AUTOMATED_FUEL_DISPENSERS',
  AutomobileAssociations = 'AUTOMOBILE_ASSOCIATIONS',
  AutomotivePartsAndAccessoriesStores = 'AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES',
  AutomotiveTireStores = 'AUTOMOTIVE_TIRE_STORES',
  AutoAndHomeSupplyStores = 'AUTO_AND_HOME_SUPPLY_STORES',
  AutoBodyRepairShops = 'AUTO_BODY_REPAIR_SHOPS',
  AutoPaintShops = 'AUTO_PAINT_SHOPS',
  AutoServiceShops = 'AUTO_SERVICE_SHOPS',
  BailAndBondPayments = 'BAIL_AND_BOND_PAYMENTS',
  Bakeries = 'BAKERIES',
  BandsOrchestras = 'BANDS_ORCHESTRAS',
  BarberAndBeautyShops = 'BARBER_AND_BEAUTY_SHOPS',
  BettingCasinoGambling = 'BETTING_CASINO_GAMBLING',
  BicycleShops = 'BICYCLE_SHOPS',
  BilliardPoolEstablishments = 'BILLIARD_POOL_ESTABLISHMENTS',
  BoatDealers = 'BOAT_DEALERS',
  BoatRentalsAndLeases = 'BOAT_RENTALS_AND_LEASES',
  BooksPeriodicalsAndNewspapers = 'BOOKS_PERIODICALS_AND_NEWSPAPERS',
  BookStores = 'BOOK_STORES',
  BowlingAlleys = 'BOWLING_ALLEYS',
  BusinessSecretarialSchools = 'BUSINESS_SECRETARIAL_SCHOOLS',
  BusLines = 'BUS_LINES',
  BuyingShoppingServices = 'BUYING_SHOPPING_SERVICES',
  CableSatelliteAndOtherPayTelevisionAndRadio = 'CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO',
  CameraAndPhotographicSupplyStores = 'CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES',
  CandyNutAndConfectioneryStores = 'CANDY_NUT_AND_CONFECTIONERY_STORES',
  CarpentryServices = 'CARPENTRY_SERVICES',
  CarpetUpholsteryCleaning = 'CARPET_UPHOLSTERY_CLEANING',
  CarAndTruckDealersNewUsed = 'CAR_AND_TRUCK_DEALERS_NEW_USED',
  CarAndTruckDealersUsedOnly = 'CAR_AND_TRUCK_DEALERS_USED_ONLY',
  CarRentalAgencies = 'CAR_RENTAL_AGENCIES',
  CarWashes = 'CAR_WASHES',
  Caterers = 'CATERERS',
  CharitableAndSocialServiceOrganizationsFundraising = 'CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING',
  ChemicalsAndAlliedProducts = 'CHEMICALS_AND_ALLIED_PRODUCTS',
  ChildrensAndInfantsWearStores = 'CHILDRENS_AND_INFANTS_WEAR_STORES',
  ChildCareServices = 'CHILD_CARE_SERVICES',
  ChiropodistsPodiatrists = 'CHIROPODISTS_PODIATRISTS',
  Chiropractors = 'CHIROPRACTORS',
  CigarStoresAndStands = 'CIGAR_STORES_AND_STANDS',
  CivicSocialFraternalAssociations = 'CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS',
  CleaningAndMaintenance = 'CLEANING_AND_MAINTENANCE',
  ClothingRental = 'CLOTHING_RENTAL',
  CollegesUniversities = 'COLLEGES_UNIVERSITIES',
  CommercialEquipment = 'COMMERCIAL_EQUIPMENT',
  CommercialFootwear = 'COMMERCIAL_FOOTWEAR',
  CommercialPhotographyArtAndGraphics = 'COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS',
  CommuterTransportAndFerries = 'COMMUTER_TRANSPORT_AND_FERRIES',
  ComputersPeripheralsAndSoftware = 'COMPUTERS_PERIPHERALS_AND_SOFTWARE',
  ComputerNetworkServices = 'COMPUTER_NETWORK_SERVICES',
  ComputerProgramming = 'COMPUTER_PROGRAMMING',
  ComputerRepair = 'COMPUTER_REPAIR',
  ComputerSoftwareStores = 'COMPUTER_SOFTWARE_STORES',
  ConcreteWorkServices = 'CONCRETE_WORK_SERVICES',
  ConstructionMaterials = 'CONSTRUCTION_MATERIALS',
  ConsultingPublicRelations = 'CONSULTING_PUBLIC_RELATIONS',
  CorrespondenceSchools = 'CORRESPONDENCE_SCHOOLS',
  CosmeticStores = 'COSMETIC_STORES',
  CounselingServices = 'COUNSELING_SERVICES',
  CountryClubs = 'COUNTRY_CLUBS',
  CourierServices = 'COURIER_SERVICES',
  CourtCosts = 'COURT_COSTS',
  CreditReportingAgencies = 'CREDIT_REPORTING_AGENCIES',
  CruiseLines = 'CRUISE_LINES',
  DairyProductsStores = 'DAIRY_PRODUCTS_STORES',
  DanceHallStudiosSchools = 'DANCE_HALL_STUDIOS_SCHOOLS',
  DatingEscortServices = 'DATING_ESCORT_SERVICES',
  DentistsOrthodontists = 'DENTISTS_ORTHODONTISTS',
  DepartmentStores = 'DEPARTMENT_STORES',
  DetectiveAgencies = 'DETECTIVE_AGENCIES',
  DigitalGoodsApplications = 'DIGITAL_GOODS_APPLICATIONS',
  DigitalGoodsGames = 'DIGITAL_GOODS_GAMES',
  DigitalGoodsLargeVolume = 'DIGITAL_GOODS_LARGE_VOLUME',
  DigitalGoodsMedia = 'DIGITAL_GOODS_MEDIA',
  DirectMarketingCatalogMerchant = 'DIRECT_MARKETING_CATALOG_MERCHANT',
  DirectMarketingCombinationCatalogAndRetailMerchant = 'DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT',
  DirectMarketingInboundTelemarketing = 'DIRECT_MARKETING_INBOUND_TELEMARKETING',
  DirectMarketingInsuranceServices = 'DIRECT_MARKETING_INSURANCE_SERVICES',
  DirectMarketingOther = 'DIRECT_MARKETING_OTHER',
  DirectMarketingOutboundTelemarketing = 'DIRECT_MARKETING_OUTBOUND_TELEMARKETING',
  DirectMarketingSubscription = 'DIRECT_MARKETING_SUBSCRIPTION',
  DirectMarketingTravel = 'DIRECT_MARKETING_TRAVEL',
  DiscountStores = 'DISCOUNT_STORES',
  Doctors = 'DOCTORS',
  DoorToDoorSales = 'DOOR_TO_DOOR_SALES',
  DraperyWindowCoveringAndUpholsteryStores = 'DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES',
  DrinkingPlaces = 'DRINKING_PLACES',
  DrugsDrugProprietariesAndDruggistSundries = 'DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES',
  DrugStoresAndPharmacies = 'DRUG_STORES_AND_PHARMACIES',
  DryCleaners = 'DRY_CLEANERS',
  DurableGoods = 'DURABLE_GOODS',
  DutyFreeStores = 'DUTY_FREE_STORES',
  EatingPlacesRestaurants = 'EATING_PLACES_RESTAURANTS',
  EducationalServices = 'EDUCATIONAL_SERVICES',
  ElectricalPartsAndEquipment = 'ELECTRICAL_PARTS_AND_EQUIPMENT',
  ElectricalServices = 'ELECTRICAL_SERVICES',
  ElectricRazorStores = 'ELECTRIC_RAZOR_STORES',
  ElectricVehicleCharging = 'ELECTRIC_VEHICLE_CHARGING',
  ElectronicsRepairShops = 'ELECTRONICS_REPAIR_SHOPS',
  ElectronicsStores = 'ELECTRONICS_STORES',
  ElementarySecondarySchools = 'ELEMENTARY_SECONDARY_SCHOOLS',
  EmergencyServicesGcasVisaUseOnly = 'EMERGENCY_SERVICES_GCAS_VISA_USE_ONLY',
  EmploymentTempAgencies = 'EMPLOYMENT_TEMP_AGENCIES',
  EquipmentRental = 'EQUIPMENT_RENTAL',
  ExterminatingServices = 'EXTERMINATING_SERVICES',
  FamilyClothingStores = 'FAMILY_CLOTHING_STORES',
  FastFoodRestaurants = 'FAST_FOOD_RESTAURANTS',
  FinancialInstitutions = 'FINANCIAL_INSTITUTIONS',
  FinesGovernmentAdministrativeEntities = 'FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES',
  FireplaceFireplaceScreensAndAccessoriesStores = 'FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES',
  FloorCoveringStores = 'FLOOR_COVERING_STORES',
  Florists = 'FLORISTS',
  FloristsSuppliesNurseryStockAndFlowers = 'FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS',
  FreezerAndLockerMeatProvisioners = 'FREEZER_AND_LOCKER_MEAT_PROVISIONERS',
  FuelDealersNonAutomotive = 'FUEL_DEALERS_NON_AUTOMOTIVE',
  FuneralServicesCrematories = 'FUNERAL_SERVICES_CREMATORIES',
  FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances = 'FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES',
  FurnitureRepairRefinishing = 'FURNITURE_REPAIR_REFINISHING',
  FurriersAndFurShops = 'FURRIERS_AND_FUR_SHOPS',
  GeneralServices = 'GENERAL_SERVICES',
  GiftCardNoveltyAndSouvenirShops = 'GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS',
  GlasswareCrystalStores = 'GLASSWARE_CRYSTAL_STORES',
  GlassPaintAndWallpaperStores = 'GLASS_PAINT_AND_WALLPAPER_STORES',
  GolfCoursesPublic = 'GOLF_COURSES_PUBLIC',
  GovernmentLicensedHorseDogRacingUsRegionOnly = 'GOVERNMENT_LICENSED_HORSE_DOG_RACING_US_REGION_ONLY',
  GovernmentLicensedOnlineCasionsOnlineGamblingUsRegionOnly = 'GOVERNMENT_LICENSED_ONLINE_CASIONS_ONLINE_GAMBLING_US_REGION_ONLY',
  GovernmentOwnedLotteriesNonUsRegion = 'GOVERNMENT_OWNED_LOTTERIES_NON_US_REGION',
  GovernmentOwnedLotteriesUsRegionOnly = 'GOVERNMENT_OWNED_LOTTERIES_US_REGION_ONLY',
  GovernmentServices = 'GOVERNMENT_SERVICES',
  GroceryStoresSupermarkets = 'GROCERY_STORES_SUPERMARKETS',
  HardwareEquipmentAndSupplies = 'HARDWARE_EQUIPMENT_AND_SUPPLIES',
  HardwareStores = 'HARDWARE_STORES',
  HealthAndBeautySpas = 'HEALTH_AND_BEAUTY_SPAS',
  HearingAidsSalesAndSupplies = 'HEARING_AIDS_SALES_AND_SUPPLIES',
  HeatingPlumbingAC = 'HEATING_PLUMBING_A_C',
  HobbyToyAndGameShops = 'HOBBY_TOY_AND_GAME_SHOPS',
  HomeSupplyWarehouseStores = 'HOME_SUPPLY_WAREHOUSE_STORES',
  Hospitals = 'HOSPITALS',
  HotelsMotelsAndResorts = 'HOTELS_MOTELS_AND_RESORTS',
  HouseholdApplianceStores = 'HOUSEHOLD_APPLIANCE_STORES',
  IndustrialSupplies = 'INDUSTRIAL_SUPPLIES',
  InformationRetrievalServices = 'INFORMATION_RETRIEVAL_SERVICES',
  InsuranceDefault = 'INSURANCE_DEFAULT',
  InsuranceUnderwritingPremiums = 'INSURANCE_UNDERWRITING_PREMIUMS',
  IntraCompanyPurchases = 'INTRA_COMPANY_PURCHASES',
  JewelryStoresWatchesClocksAndSilverwareStores = 'JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES',
  LandscapingServices = 'LANDSCAPING_SERVICES',
  Laundries = 'LAUNDRIES',
  LaundryCleaningServices = 'LAUNDRY_CLEANING_SERVICES',
  LegalServicesAttorneys = 'LEGAL_SERVICES_ATTORNEYS',
  LuggageAndLeatherGoodsStores = 'LUGGAGE_AND_LEATHER_GOODS_STORES',
  LumberBuildingMaterialsStores = 'LUMBER_BUILDING_MATERIALS_STORES',
  ManualCashDisburse = 'MANUAL_CASH_DISBURSE',
  MarinasServiceAndSupplies = 'MARINAS_SERVICE_AND_SUPPLIES',
  Marketplaces = 'MARKETPLACES',
  MasonryStoneworkAndPlaster = 'MASONRY_STONEWORK_AND_PLASTER',
  MassageParlors = 'MASSAGE_PARLORS',
  MedicalAndDentalLabs = 'MEDICAL_AND_DENTAL_LABS',
  MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies = 'MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES',
  MedicalServices = 'MEDICAL_SERVICES',
  MembershipOrganizations = 'MEMBERSHIP_ORGANIZATIONS',
  MensAndBoysClothingAndAccessoriesStores = 'MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES',
  MensWomensClothingStores = 'MENS_WOMENS_CLOTHING_STORES',
  MetalServiceCenters = 'METAL_SERVICE_CENTERS',
  Miscellaneous = 'MISCELLANEOUS',
  MiscellaneousApparelAndAccessoryShops = 'MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS',
  MiscellaneousAutoDealers = 'MISCELLANEOUS_AUTO_DEALERS',
  MiscellaneousBusinessServices = 'MISCELLANEOUS_BUSINESS_SERVICES',
  MiscellaneousFoodStores = 'MISCELLANEOUS_FOOD_STORES',
  MiscellaneousGeneralMerchandise = 'MISCELLANEOUS_GENERAL_MERCHANDISE',
  MiscellaneousGeneralServices = 'MISCELLANEOUS_GENERAL_SERVICES',
  MiscellaneousHomeFurnishingSpecialtyStores = 'MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES',
  MiscellaneousPublishingAndPrinting = 'MISCELLANEOUS_PUBLISHING_AND_PRINTING',
  MiscellaneousRecreationServices = 'MISCELLANEOUS_RECREATION_SERVICES',
  MiscellaneousRepairShops = 'MISCELLANEOUS_REPAIR_SHOPS',
  MiscellaneousSpecialtyRetail = 'MISCELLANEOUS_SPECIALTY_RETAIL',
  MobileHomeDealers = 'MOBILE_HOME_DEALERS',
  MotionPictureTheaters = 'MOTION_PICTURE_THEATERS',
  MotorcycleShopsAndDealers = 'MOTORCYCLE_SHOPS_AND_DEALERS',
  MotorcycleShopsDealers = 'MOTORCYCLE_SHOPS_DEALERS',
  MotorFreightCarriersAndTrucking = 'MOTOR_FREIGHT_CARRIERS_AND_TRUCKING',
  MotorHomesDealers = 'MOTOR_HOMES_DEALERS',
  MotorVehicleSuppliesAndNewParts = 'MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS',
  MusicStoresMusicalInstrumentsPianosAndSheetMusic = 'MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC',
  NewsDealersAndNewsstands = 'NEWS_DEALERS_AND_NEWSSTANDS',
  NondurableGoods = 'NONDURABLE_GOODS',
  NonFiMoneyOrders = 'NON_FI_MONEY_ORDERS',
  NonFiStoredValueCardPurchaseLoad = 'NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD',
  NurseriesLawnAndGardenSupplyStores = 'NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES',
  NursingPersonalCare = 'NURSING_PERSONAL_CARE',
  OfficeAndCommercialFurniture = 'OFFICE_AND_COMMERCIAL_FURNITURE',
  OpticiansEyeglasses = 'OPTICIANS_EYEGLASSES',
  OptometristsOphthalmologist = 'OPTOMETRISTS_OPHTHALMOLOGIST',
  OrthopedicGoodsProstheticDevices = 'ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES',
  Osteopaths = 'OSTEOPATHS',
  PackageStoresBeerWineAndLiquor = 'PACKAGE_STORES_BEER_WINE_AND_LIQUOR',
  PaintsVarnishesAndSupplies = 'PAINTS_VARNISHES_AND_SUPPLIES',
  ParkingLotsGarages = 'PARKING_LOTS_GARAGES',
  PassengerRailways = 'PASSENGER_RAILWAYS',
  PawnShops = 'PAWN_SHOPS',
  PetroleumAndPetroleumProducts = 'PETROLEUM_AND_PETROLEUM_PRODUCTS',
  PetShopsPetFoodAndSupplies = 'PET_SHOPS_PET_FOOD_AND_SUPPLIES',
  PhotographicPhotocopyMicrofilmEquipmentAndSupplies = 'PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES',
  PhotographicStudios = 'PHOTOGRAPHIC_STUDIOS',
  PhotoDeveloping = 'PHOTO_DEVELOPING',
  PictureVideoProduction = 'PICTURE_VIDEO_PRODUCTION',
  PieceGoodsNotionsAndOtherDryGoods = 'PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS',
  PlumbingHeatingEquipmentAndSupplies = 'PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES',
  PoliticalOrganizations = 'POLITICAL_ORGANIZATIONS',
  PostalServicesGovernmentOnly = 'POSTAL_SERVICES_GOVERNMENT_ONLY',
  PreciousStonesAndMetalsWatchesAndJewelry = 'PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY',
  ProfessionalServices = 'PROFESSIONAL_SERVICES',
  PublicWarehousingAndStorage = 'PUBLIC_WAREHOUSING_AND_STORAGE',
  QuickCopyReproAndBlueprint = 'QUICK_COPY_REPRO_AND_BLUEPRINT',
  Railroads = 'RAILROADS',
  RealEstateAgentsAndManagersRentals = 'REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS',
  RecordStores = 'RECORD_STORES',
  RecreationalVehicleRentals = 'RECREATIONAL_VEHICLE_RENTALS',
  ReligiousGoodsStores = 'RELIGIOUS_GOODS_STORES',
  ReligiousOrganizations = 'RELIGIOUS_ORGANIZATIONS',
  RoofingSidingSheetMetal = 'ROOFING_SIDING_SHEET_METAL',
  SecretarialSupportServices = 'SECRETARIAL_SUPPORT_SERVICES',
  SecurityBrokersDealers = 'SECURITY_BROKERS_DEALERS',
  ServiceStations = 'SERVICE_STATIONS',
  SewingNeedleworkFabricAndPieceGoodsStores = 'SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES',
  ShoeRepairHatCleaning = 'SHOE_REPAIR_HAT_CLEANING',
  ShoeStores = 'SHOE_STORES',
  SmallApplianceRepair = 'SMALL_APPLIANCE_REPAIR',
  SnowmobileDealers = 'SNOWMOBILE_DEALERS',
  SpecialtyCleaning = 'SPECIALTY_CLEANING',
  SpecialTradeServices = 'SPECIAL_TRADE_SERVICES',
  SportingGoodsStores = 'SPORTING_GOODS_STORES',
  SportingRecreationCamps = 'SPORTING_RECREATION_CAMPS',
  SportsAndRidingApparelStores = 'SPORTS_AND_RIDING_APPAREL_STORES',
  SportsClubsFields = 'SPORTS_CLUBS_FIELDS',
  StampAndCoinStores = 'STAMP_AND_COIN_STORES',
  StationaryOfficeSuppliesPrintingAndWritingPaper = 'STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER',
  StationeryStoresOfficeAndSchoolSupplyStores = 'STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES',
  SwimmingPoolsSales = 'SWIMMING_POOLS_SALES',
  TailorsAlterations = 'TAILORS_ALTERATIONS',
  TaxicabsLimousines = 'TAXICABS_LIMOUSINES',
  TaxPaymentsGovernmentAgencies = 'TAX_PAYMENTS_GOVERNMENT_AGENCIES',
  TaxPreparationServices = 'TAX_PREPARATION_SERVICES',
  TelecommunicationEquipmentAndTelephoneSales = 'TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES',
  TelecommunicationServices = 'TELECOMMUNICATION_SERVICES',
  TelegraphServices = 'TELEGRAPH_SERVICES',
  TentAndAwningShops = 'TENT_AND_AWNING_SHOPS',
  TestingLaboratories = 'TESTING_LABORATORIES',
  TheatricalTicketAgencies = 'THEATRICAL_TICKET_AGENCIES',
  Timeshares = 'TIMESHARES',
  TireRetreadingAndRepair = 'TIRE_RETREADING_AND_REPAIR',
  TollsBridgeFees = 'TOLLS_BRIDGE_FEES',
  TouristAttractionsAndExhibits = 'TOURIST_ATTRACTIONS_AND_EXHIBITS',
  TowingServices = 'TOWING_SERVICES',
  TrailerParksCampgrounds = 'TRAILER_PARKS_CAMPGROUNDS',
  TransportationServices = 'TRANSPORTATION_SERVICES',
  TravelAgenciesTourOperators = 'TRAVEL_AGENCIES_TOUR_OPERATORS',
  TruckStopIteration = 'TRUCK_STOP_ITERATION',
  TruckUtilityTrailerRentals = 'TRUCK_UTILITY_TRAILER_RENTALS',
  TypesettingPlateMakingAndRelatedServices = 'TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES',
  TypewriterStores = 'TYPEWRITER_STORES',
  TUiTravelGermany = 'T_UI_TRAVEL_GERMANY',
  UniformsCommercialClothing = 'UNIFORMS_COMMERCIAL_CLOTHING',
  UsedMerchandiseAndSecondhandStores = 'USED_MERCHANDISE_AND_SECONDHAND_STORES',
  Utilities = 'UTILITIES',
  USFederalGovernmentAgenciesOrDepartments = 'U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS',
  VarietyStores = 'VARIETY_STORES',
  VeterinaryServices = 'VETERINARY_SERVICES',
  VideoAmusementGameSupplies = 'VIDEO_AMUSEMENT_GAME_SUPPLIES',
  VideoGameArcades = 'VIDEO_GAME_ARCADES',
  VideoTapeRentalStores = 'VIDEO_TAPE_RENTAL_STORES',
  VocationalTradeSchools = 'VOCATIONAL_TRADE_SCHOOLS',
  WatchJewelryRepair = 'WATCH_JEWELRY_REPAIR',
  WeldingRepair = 'WELDING_REPAIR',
  WholesaleClubs = 'WHOLESALE_CLUBS',
  WigAndToupeeStores = 'WIG_AND_TOUPEE_STORES',
  WiresMoneyOrders = 'WIRES_MONEY_ORDERS',
  WomensAccessoryAndSpecialtyShops = 'WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS',
  WomensReadyToWearStores = 'WOMENS_READY_TO_WEAR_STORES',
  WreckingAndSalvageYards = 'WRECKING_AND_SALVAGE_YARDS'
}

export type StripePostIssuingCardholdersCardIssuingIndividualInput = {
  userTermsAcceptance?: InputMaybe<StripePostIssuingCardholdersUserTermsAcceptanceCardIssuingIndividualInput>;
};

export type StripePostIssuingCardholdersCardholderAddressBillingInput = {
  city: Scalars['String'];
  country: Scalars['String'];
  line1: Scalars['String'];
  line2?: InputMaybe<Scalars['String']>;
  postalCode: Scalars['String'];
  state?: InputMaybe<Scalars['String']>;
};

export enum StripePostIssuingCardholdersCardholderAllowedCategoriesSpendingControls {
  AccountingBookkeepingServices = 'ACCOUNTING_BOOKKEEPING_SERVICES',
  AcRefrigerationRepair = 'AC_REFRIGERATION_REPAIR',
  AdvertisingServices = 'ADVERTISING_SERVICES',
  AgriculturalCooperative = 'AGRICULTURAL_COOPERATIVE',
  AirlinesAirCarriers = 'AIRLINES_AIR_CARRIERS',
  AirportsFlyingFields = 'AIRPORTS_FLYING_FIELDS',
  AmbulanceServices = 'AMBULANCE_SERVICES',
  AmusementParksCarnivals = 'AMUSEMENT_PARKS_CARNIVALS',
  AntiqueReproductions = 'ANTIQUE_REPRODUCTIONS',
  AntiqueShops = 'ANTIQUE_SHOPS',
  Aquariums = 'AQUARIUMS',
  ArchitecturalSurveyingServices = 'ARCHITECTURAL_SURVEYING_SERVICES',
  ArtistsSupplyAndCraftShops = 'ARTISTS_SUPPLY_AND_CRAFT_SHOPS',
  ArtDealersAndGalleries = 'ART_DEALERS_AND_GALLERIES',
  AutomatedCashDisburse = 'AUTOMATED_CASH_DISBURSE',
  AutomatedFuelDispensers = 'AUTOMATED_FUEL_DISPENSERS',
  AutomobileAssociations = 'AUTOMOBILE_ASSOCIATIONS',
  AutomotivePartsAndAccessoriesStores = 'AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES',
  AutomotiveTireStores = 'AUTOMOTIVE_TIRE_STORES',
  AutoAndHomeSupplyStores = 'AUTO_AND_HOME_SUPPLY_STORES',
  AutoBodyRepairShops = 'AUTO_BODY_REPAIR_SHOPS',
  AutoPaintShops = 'AUTO_PAINT_SHOPS',
  AutoServiceShops = 'AUTO_SERVICE_SHOPS',
  BailAndBondPayments = 'BAIL_AND_BOND_PAYMENTS',
  Bakeries = 'BAKERIES',
  BandsOrchestras = 'BANDS_ORCHESTRAS',
  BarberAndBeautyShops = 'BARBER_AND_BEAUTY_SHOPS',
  BettingCasinoGambling = 'BETTING_CASINO_GAMBLING',
  BicycleShops = 'BICYCLE_SHOPS',
  BilliardPoolEstablishments = 'BILLIARD_POOL_ESTABLISHMENTS',
  BoatDealers = 'BOAT_DEALERS',
  BoatRentalsAndLeases = 'BOAT_RENTALS_AND_LEASES',
  BooksPeriodicalsAndNewspapers = 'BOOKS_PERIODICALS_AND_NEWSPAPERS',
  BookStores = 'BOOK_STORES',
  BowlingAlleys = 'BOWLING_ALLEYS',
  BusinessSecretarialSchools = 'BUSINESS_SECRETARIAL_SCHOOLS',
  BusLines = 'BUS_LINES',
  BuyingShoppingServices = 'BUYING_SHOPPING_SERVICES',
  CableSatelliteAndOtherPayTelevisionAndRadio = 'CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO',
  CameraAndPhotographicSupplyStores = 'CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES',
  CandyNutAndConfectioneryStores = 'CANDY_NUT_AND_CONFECTIONERY_STORES',
  CarpentryServices = 'CARPENTRY_SERVICES',
  CarpetUpholsteryCleaning = 'CARPET_UPHOLSTERY_CLEANING',
  CarAndTruckDealersNewUsed = 'CAR_AND_TRUCK_DEALERS_NEW_USED',
  CarAndTruckDealersUsedOnly = 'CAR_AND_TRUCK_DEALERS_USED_ONLY',
  CarRentalAgencies = 'CAR_RENTAL_AGENCIES',
  CarWashes = 'CAR_WASHES',
  Caterers = 'CATERERS',
  CharitableAndSocialServiceOrganizationsFundraising = 'CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING',
  ChemicalsAndAlliedProducts = 'CHEMICALS_AND_ALLIED_PRODUCTS',
  ChildrensAndInfantsWearStores = 'CHILDRENS_AND_INFANTS_WEAR_STORES',
  ChildCareServices = 'CHILD_CARE_SERVICES',
  ChiropodistsPodiatrists = 'CHIROPODISTS_PODIATRISTS',
  Chiropractors = 'CHIROPRACTORS',
  CigarStoresAndStands = 'CIGAR_STORES_AND_STANDS',
  CivicSocialFraternalAssociations = 'CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS',
  CleaningAndMaintenance = 'CLEANING_AND_MAINTENANCE',
  ClothingRental = 'CLOTHING_RENTAL',
  CollegesUniversities = 'COLLEGES_UNIVERSITIES',
  CommercialEquipment = 'COMMERCIAL_EQUIPMENT',
  CommercialFootwear = 'COMMERCIAL_FOOTWEAR',
  CommercialPhotographyArtAndGraphics = 'COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS',
  CommuterTransportAndFerries = 'COMMUTER_TRANSPORT_AND_FERRIES',
  ComputersPeripheralsAndSoftware = 'COMPUTERS_PERIPHERALS_AND_SOFTWARE',
  ComputerNetworkServices = 'COMPUTER_NETWORK_SERVICES',
  ComputerProgramming = 'COMPUTER_PROGRAMMING',
  ComputerRepair = 'COMPUTER_REPAIR',
  ComputerSoftwareStores = 'COMPUTER_SOFTWARE_STORES',
  ConcreteWorkServices = 'CONCRETE_WORK_SERVICES',
  ConstructionMaterials = 'CONSTRUCTION_MATERIALS',
  ConsultingPublicRelations = 'CONSULTING_PUBLIC_RELATIONS',
  CorrespondenceSchools = 'CORRESPONDENCE_SCHOOLS',
  CosmeticStores = 'COSMETIC_STORES',
  CounselingServices = 'COUNSELING_SERVICES',
  CountryClubs = 'COUNTRY_CLUBS',
  CourierServices = 'COURIER_SERVICES',
  CourtCosts = 'COURT_COSTS',
  CreditReportingAgencies = 'CREDIT_REPORTING_AGENCIES',
  CruiseLines = 'CRUISE_LINES',
  DairyProductsStores = 'DAIRY_PRODUCTS_STORES',
  DanceHallStudiosSchools = 'DANCE_HALL_STUDIOS_SCHOOLS',
  DatingEscortServices = 'DATING_ESCORT_SERVICES',
  DentistsOrthodontists = 'DENTISTS_ORTHODONTISTS',
  DepartmentStores = 'DEPARTMENT_STORES',
  DetectiveAgencies = 'DETECTIVE_AGENCIES',
  DigitalGoodsApplications = 'DIGITAL_GOODS_APPLICATIONS',
  DigitalGoodsGames = 'DIGITAL_GOODS_GAMES',
  DigitalGoodsLargeVolume = 'DIGITAL_GOODS_LARGE_VOLUME',
  DigitalGoodsMedia = 'DIGITAL_GOODS_MEDIA',
  DirectMarketingCatalogMerchant = 'DIRECT_MARKETING_CATALOG_MERCHANT',
  DirectMarketingCombinationCatalogAndRetailMerchant = 'DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT',
  DirectMarketingInboundTelemarketing = 'DIRECT_MARKETING_INBOUND_TELEMARKETING',
  DirectMarketingInsuranceServices = 'DIRECT_MARKETING_INSURANCE_SERVICES',
  DirectMarketingOther = 'DIRECT_MARKETING_OTHER',
  DirectMarketingOutboundTelemarketing = 'DIRECT_MARKETING_OUTBOUND_TELEMARKETING',
  DirectMarketingSubscription = 'DIRECT_MARKETING_SUBSCRIPTION',
  DirectMarketingTravel = 'DIRECT_MARKETING_TRAVEL',
  DiscountStores = 'DISCOUNT_STORES',
  Doctors = 'DOCTORS',
  DoorToDoorSales = 'DOOR_TO_DOOR_SALES',
  DraperyWindowCoveringAndUpholsteryStores = 'DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES',
  DrinkingPlaces = 'DRINKING_PLACES',
  DrugsDrugProprietariesAndDruggistSundries = 'DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES',
  DrugStoresAndPharmacies = 'DRUG_STORES_AND_PHARMACIES',
  DryCleaners = 'DRY_CLEANERS',
  DurableGoods = 'DURABLE_GOODS',
  DutyFreeStores = 'DUTY_FREE_STORES',
  EatingPlacesRestaurants = 'EATING_PLACES_RESTAURANTS',
  EducationalServices = 'EDUCATIONAL_SERVICES',
  ElectricalPartsAndEquipment = 'ELECTRICAL_PARTS_AND_EQUIPMENT',
  ElectricalServices = 'ELECTRICAL_SERVICES',
  ElectricRazorStores = 'ELECTRIC_RAZOR_STORES',
  ElectricVehicleCharging = 'ELECTRIC_VEHICLE_CHARGING',
  ElectronicsRepairShops = 'ELECTRONICS_REPAIR_SHOPS',
  ElectronicsStores = 'ELECTRONICS_STORES',
  ElementarySecondarySchools = 'ELEMENTARY_SECONDARY_SCHOOLS',
  EmergencyServicesGcasVisaUseOnly = 'EMERGENCY_SERVICES_GCAS_VISA_USE_ONLY',
  EmploymentTempAgencies = 'EMPLOYMENT_TEMP_AGENCIES',
  EquipmentRental = 'EQUIPMENT_RENTAL',
  ExterminatingServices = 'EXTERMINATING_SERVICES',
  FamilyClothingStores = 'FAMILY_CLOTHING_STORES',
  FastFoodRestaurants = 'FAST_FOOD_RESTAURANTS',
  FinancialInstitutions = 'FINANCIAL_INSTITUTIONS',
  FinesGovernmentAdministrativeEntities = 'FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES',
  FireplaceFireplaceScreensAndAccessoriesStores = 'FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES',
  FloorCoveringStores = 'FLOOR_COVERING_STORES',
  Florists = 'FLORISTS',
  FloristsSuppliesNurseryStockAndFlowers = 'FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS',
  FreezerAndLockerMeatProvisioners = 'FREEZER_AND_LOCKER_MEAT_PROVISIONERS',
  FuelDealersNonAutomotive = 'FUEL_DEALERS_NON_AUTOMOTIVE',
  FuneralServicesCrematories = 'FUNERAL_SERVICES_CREMATORIES',
  FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances = 'FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES',
  FurnitureRepairRefinishing = 'FURNITURE_REPAIR_REFINISHING',
  FurriersAndFurShops = 'FURRIERS_AND_FUR_SHOPS',
  GeneralServices = 'GENERAL_SERVICES',
  GiftCardNoveltyAndSouvenirShops = 'GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS',
  GlasswareCrystalStores = 'GLASSWARE_CRYSTAL_STORES',
  GlassPaintAndWallpaperStores = 'GLASS_PAINT_AND_WALLPAPER_STORES',
  GolfCoursesPublic = 'GOLF_COURSES_PUBLIC',
  GovernmentLicensedHorseDogRacingUsRegionOnly = 'GOVERNMENT_LICENSED_HORSE_DOG_RACING_US_REGION_ONLY',
  GovernmentLicensedOnlineCasionsOnlineGamblingUsRegionOnly = 'GOVERNMENT_LICENSED_ONLINE_CASIONS_ONLINE_GAMBLING_US_REGION_ONLY',
  GovernmentOwnedLotteriesNonUsRegion = 'GOVERNMENT_OWNED_LOTTERIES_NON_US_REGION',
  GovernmentOwnedLotteriesUsRegionOnly = 'GOVERNMENT_OWNED_LOTTERIES_US_REGION_ONLY',
  GovernmentServices = 'GOVERNMENT_SERVICES',
  GroceryStoresSupermarkets = 'GROCERY_STORES_SUPERMARKETS',
  HardwareEquipmentAndSupplies = 'HARDWARE_EQUIPMENT_AND_SUPPLIES',
  HardwareStores = 'HARDWARE_STORES',
  HealthAndBeautySpas = 'HEALTH_AND_BEAUTY_SPAS',
  HearingAidsSalesAndSupplies = 'HEARING_AIDS_SALES_AND_SUPPLIES',
  HeatingPlumbingAC = 'HEATING_PLUMBING_A_C',
  HobbyToyAndGameShops = 'HOBBY_TOY_AND_GAME_SHOPS',
  HomeSupplyWarehouseStores = 'HOME_SUPPLY_WAREHOUSE_STORES',
  Hospitals = 'HOSPITALS',
  HotelsMotelsAndResorts = 'HOTELS_MOTELS_AND_RESORTS',
  HouseholdApplianceStores = 'HOUSEHOLD_APPLIANCE_STORES',
  IndustrialSupplies = 'INDUSTRIAL_SUPPLIES',
  InformationRetrievalServices = 'INFORMATION_RETRIEVAL_SERVICES',
  InsuranceDefault = 'INSURANCE_DEFAULT',
  InsuranceUnderwritingPremiums = 'INSURANCE_UNDERWRITING_PREMIUMS',
  IntraCompanyPurchases = 'INTRA_COMPANY_PURCHASES',
  JewelryStoresWatchesClocksAndSilverwareStores = 'JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES',
  LandscapingServices = 'LANDSCAPING_SERVICES',
  Laundries = 'LAUNDRIES',
  LaundryCleaningServices = 'LAUNDRY_CLEANING_SERVICES',
  LegalServicesAttorneys = 'LEGAL_SERVICES_ATTORNEYS',
  LuggageAndLeatherGoodsStores = 'LUGGAGE_AND_LEATHER_GOODS_STORES',
  LumberBuildingMaterialsStores = 'LUMBER_BUILDING_MATERIALS_STORES',
  ManualCashDisburse = 'MANUAL_CASH_DISBURSE',
  MarinasServiceAndSupplies = 'MARINAS_SERVICE_AND_SUPPLIES',
  Marketplaces = 'MARKETPLACES',
  MasonryStoneworkAndPlaster = 'MASONRY_STONEWORK_AND_PLASTER',
  MassageParlors = 'MASSAGE_PARLORS',
  MedicalAndDentalLabs = 'MEDICAL_AND_DENTAL_LABS',
  MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies = 'MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES',
  MedicalServices = 'MEDICAL_SERVICES',
  MembershipOrganizations = 'MEMBERSHIP_ORGANIZATIONS',
  MensAndBoysClothingAndAccessoriesStores = 'MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES',
  MensWomensClothingStores = 'MENS_WOMENS_CLOTHING_STORES',
  MetalServiceCenters = 'METAL_SERVICE_CENTERS',
  Miscellaneous = 'MISCELLANEOUS',
  MiscellaneousApparelAndAccessoryShops = 'MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS',
  MiscellaneousAutoDealers = 'MISCELLANEOUS_AUTO_DEALERS',
  MiscellaneousBusinessServices = 'MISCELLANEOUS_BUSINESS_SERVICES',
  MiscellaneousFoodStores = 'MISCELLANEOUS_FOOD_STORES',
  MiscellaneousGeneralMerchandise = 'MISCELLANEOUS_GENERAL_MERCHANDISE',
  MiscellaneousGeneralServices = 'MISCELLANEOUS_GENERAL_SERVICES',
  MiscellaneousHomeFurnishingSpecialtyStores = 'MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES',
  MiscellaneousPublishingAndPrinting = 'MISCELLANEOUS_PUBLISHING_AND_PRINTING',
  MiscellaneousRecreationServices = 'MISCELLANEOUS_RECREATION_SERVICES',
  MiscellaneousRepairShops = 'MISCELLANEOUS_REPAIR_SHOPS',
  MiscellaneousSpecialtyRetail = 'MISCELLANEOUS_SPECIALTY_RETAIL',
  MobileHomeDealers = 'MOBILE_HOME_DEALERS',
  MotionPictureTheaters = 'MOTION_PICTURE_THEATERS',
  MotorcycleShopsAndDealers = 'MOTORCYCLE_SHOPS_AND_DEALERS',
  MotorcycleShopsDealers = 'MOTORCYCLE_SHOPS_DEALERS',
  MotorFreightCarriersAndTrucking = 'MOTOR_FREIGHT_CARRIERS_AND_TRUCKING',
  MotorHomesDealers = 'MOTOR_HOMES_DEALERS',
  MotorVehicleSuppliesAndNewParts = 'MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS',
  MusicStoresMusicalInstrumentsPianosAndSheetMusic = 'MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC',
  NewsDealersAndNewsstands = 'NEWS_DEALERS_AND_NEWSSTANDS',
  NondurableGoods = 'NONDURABLE_GOODS',
  NonFiMoneyOrders = 'NON_FI_MONEY_ORDERS',
  NonFiStoredValueCardPurchaseLoad = 'NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD',
  NurseriesLawnAndGardenSupplyStores = 'NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES',
  NursingPersonalCare = 'NURSING_PERSONAL_CARE',
  OfficeAndCommercialFurniture = 'OFFICE_AND_COMMERCIAL_FURNITURE',
  OpticiansEyeglasses = 'OPTICIANS_EYEGLASSES',
  OptometristsOphthalmologist = 'OPTOMETRISTS_OPHTHALMOLOGIST',
  OrthopedicGoodsProstheticDevices = 'ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES',
  Osteopaths = 'OSTEOPATHS',
  PackageStoresBeerWineAndLiquor = 'PACKAGE_STORES_BEER_WINE_AND_LIQUOR',
  PaintsVarnishesAndSupplies = 'PAINTS_VARNISHES_AND_SUPPLIES',
  ParkingLotsGarages = 'PARKING_LOTS_GARAGES',
  PassengerRailways = 'PASSENGER_RAILWAYS',
  PawnShops = 'PAWN_SHOPS',
  PetroleumAndPetroleumProducts = 'PETROLEUM_AND_PETROLEUM_PRODUCTS',
  PetShopsPetFoodAndSupplies = 'PET_SHOPS_PET_FOOD_AND_SUPPLIES',
  PhotographicPhotocopyMicrofilmEquipmentAndSupplies = 'PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES',
  PhotographicStudios = 'PHOTOGRAPHIC_STUDIOS',
  PhotoDeveloping = 'PHOTO_DEVELOPING',
  PictureVideoProduction = 'PICTURE_VIDEO_PRODUCTION',
  PieceGoodsNotionsAndOtherDryGoods = 'PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS',
  PlumbingHeatingEquipmentAndSupplies = 'PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES',
  PoliticalOrganizations = 'POLITICAL_ORGANIZATIONS',
  PostalServicesGovernmentOnly = 'POSTAL_SERVICES_GOVERNMENT_ONLY',
  PreciousStonesAndMetalsWatchesAndJewelry = 'PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY',
  ProfessionalServices = 'PROFESSIONAL_SERVICES',
  PublicWarehousingAndStorage = 'PUBLIC_WAREHOUSING_AND_STORAGE',
  QuickCopyReproAndBlueprint = 'QUICK_COPY_REPRO_AND_BLUEPRINT',
  Railroads = 'RAILROADS',
  RealEstateAgentsAndManagersRentals = 'REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS',
  RecordStores = 'RECORD_STORES',
  RecreationalVehicleRentals = 'RECREATIONAL_VEHICLE_RENTALS',
  ReligiousGoodsStores = 'RELIGIOUS_GOODS_STORES',
  ReligiousOrganizations = 'RELIGIOUS_ORGANIZATIONS',
  RoofingSidingSheetMetal = 'ROOFING_SIDING_SHEET_METAL',
  SecretarialSupportServices = 'SECRETARIAL_SUPPORT_SERVICES',
  SecurityBrokersDealers = 'SECURITY_BROKERS_DEALERS',
  ServiceStations = 'SERVICE_STATIONS',
  SewingNeedleworkFabricAndPieceGoodsStores = 'SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES',
  ShoeRepairHatCleaning = 'SHOE_REPAIR_HAT_CLEANING',
  ShoeStores = 'SHOE_STORES',
  SmallApplianceRepair = 'SMALL_APPLIANCE_REPAIR',
  SnowmobileDealers = 'SNOWMOBILE_DEALERS',
  SpecialtyCleaning = 'SPECIALTY_CLEANING',
  SpecialTradeServices = 'SPECIAL_TRADE_SERVICES',
  SportingGoodsStores = 'SPORTING_GOODS_STORES',
  SportingRecreationCamps = 'SPORTING_RECREATION_CAMPS',
  SportsAndRidingApparelStores = 'SPORTS_AND_RIDING_APPAREL_STORES',
  SportsClubsFields = 'SPORTS_CLUBS_FIELDS',
  StampAndCoinStores = 'STAMP_AND_COIN_STORES',
  StationaryOfficeSuppliesPrintingAndWritingPaper = 'STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER',
  StationeryStoresOfficeAndSchoolSupplyStores = 'STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES',
  SwimmingPoolsSales = 'SWIMMING_POOLS_SALES',
  TailorsAlterations = 'TAILORS_ALTERATIONS',
  TaxicabsLimousines = 'TAXICABS_LIMOUSINES',
  TaxPaymentsGovernmentAgencies = 'TAX_PAYMENTS_GOVERNMENT_AGENCIES',
  TaxPreparationServices = 'TAX_PREPARATION_SERVICES',
  TelecommunicationEquipmentAndTelephoneSales = 'TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES',
  TelecommunicationServices = 'TELECOMMUNICATION_SERVICES',
  TelegraphServices = 'TELEGRAPH_SERVICES',
  TentAndAwningShops = 'TENT_AND_AWNING_SHOPS',
  TestingLaboratories = 'TESTING_LABORATORIES',
  TheatricalTicketAgencies = 'THEATRICAL_TICKET_AGENCIES',
  Timeshares = 'TIMESHARES',
  TireRetreadingAndRepair = 'TIRE_RETREADING_AND_REPAIR',
  TollsBridgeFees = 'TOLLS_BRIDGE_FEES',
  TouristAttractionsAndExhibits = 'TOURIST_ATTRACTIONS_AND_EXHIBITS',
  TowingServices = 'TOWING_SERVICES',
  TrailerParksCampgrounds = 'TRAILER_PARKS_CAMPGROUNDS',
  TransportationServices = 'TRANSPORTATION_SERVICES',
  TravelAgenciesTourOperators = 'TRAVEL_AGENCIES_TOUR_OPERATORS',
  TruckStopIteration = 'TRUCK_STOP_ITERATION',
  TruckUtilityTrailerRentals = 'TRUCK_UTILITY_TRAILER_RENTALS',
  TypesettingPlateMakingAndRelatedServices = 'TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES',
  TypewriterStores = 'TYPEWRITER_STORES',
  TUiTravelGermany = 'T_UI_TRAVEL_GERMANY',
  UniformsCommercialClothing = 'UNIFORMS_COMMERCIAL_CLOTHING',
  UsedMerchandiseAndSecondhandStores = 'USED_MERCHANDISE_AND_SECONDHAND_STORES',
  Utilities = 'UTILITIES',
  USFederalGovernmentAgenciesOrDepartments = 'U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS',
  VarietyStores = 'VARIETY_STORES',
  VeterinaryServices = 'VETERINARY_SERVICES',
  VideoAmusementGameSupplies = 'VIDEO_AMUSEMENT_GAME_SUPPLIES',
  VideoGameArcades = 'VIDEO_GAME_ARCADES',
  VideoTapeRentalStores = 'VIDEO_TAPE_RENTAL_STORES',
  VocationalTradeSchools = 'VOCATIONAL_TRADE_SCHOOLS',
  WatchJewelryRepair = 'WATCH_JEWELRY_REPAIR',
  WeldingRepair = 'WELDING_REPAIR',
  WholesaleClubs = 'WHOLESALE_CLUBS',
  WigAndToupeeStores = 'WIG_AND_TOUPEE_STORES',
  WiresMoneyOrders = 'WIRES_MONEY_ORDERS',
  WomensAccessoryAndSpecialtyShops = 'WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS',
  WomensReadyToWearStores = 'WOMENS_READY_TO_WEAR_STORES',
  WreckingAndSalvageYards = 'WRECKING_AND_SALVAGE_YARDS'
}

export type StripePostIssuingCardholdersCardholderBillingInput = {
  address: StripePostIssuingCardholdersCardholderAddressBillingInput;
};

export enum StripePostIssuingCardholdersCardholderBlockedCategoriesSpendingControls {
  AccountingBookkeepingServices = 'ACCOUNTING_BOOKKEEPING_SERVICES',
  AcRefrigerationRepair = 'AC_REFRIGERATION_REPAIR',
  AdvertisingServices = 'ADVERTISING_SERVICES',
  AgriculturalCooperative = 'AGRICULTURAL_COOPERATIVE',
  AirlinesAirCarriers = 'AIRLINES_AIR_CARRIERS',
  AirportsFlyingFields = 'AIRPORTS_FLYING_FIELDS',
  AmbulanceServices = 'AMBULANCE_SERVICES',
  AmusementParksCarnivals = 'AMUSEMENT_PARKS_CARNIVALS',
  AntiqueReproductions = 'ANTIQUE_REPRODUCTIONS',
  AntiqueShops = 'ANTIQUE_SHOPS',
  Aquariums = 'AQUARIUMS',
  ArchitecturalSurveyingServices = 'ARCHITECTURAL_SURVEYING_SERVICES',
  ArtistsSupplyAndCraftShops = 'ARTISTS_SUPPLY_AND_CRAFT_SHOPS',
  ArtDealersAndGalleries = 'ART_DEALERS_AND_GALLERIES',
  AutomatedCashDisburse = 'AUTOMATED_CASH_DISBURSE',
  AutomatedFuelDispensers = 'AUTOMATED_FUEL_DISPENSERS',
  AutomobileAssociations = 'AUTOMOBILE_ASSOCIATIONS',
  AutomotivePartsAndAccessoriesStores = 'AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES',
  AutomotiveTireStores = 'AUTOMOTIVE_TIRE_STORES',
  AutoAndHomeSupplyStores = 'AUTO_AND_HOME_SUPPLY_STORES',
  AutoBodyRepairShops = 'AUTO_BODY_REPAIR_SHOPS',
  AutoPaintShops = 'AUTO_PAINT_SHOPS',
  AutoServiceShops = 'AUTO_SERVICE_SHOPS',
  BailAndBondPayments = 'BAIL_AND_BOND_PAYMENTS',
  Bakeries = 'BAKERIES',
  BandsOrchestras = 'BANDS_ORCHESTRAS',
  BarberAndBeautyShops = 'BARBER_AND_BEAUTY_SHOPS',
  BettingCasinoGambling = 'BETTING_CASINO_GAMBLING',
  BicycleShops = 'BICYCLE_SHOPS',
  BilliardPoolEstablishments = 'BILLIARD_POOL_ESTABLISHMENTS',
  BoatDealers = 'BOAT_DEALERS',
  BoatRentalsAndLeases = 'BOAT_RENTALS_AND_LEASES',
  BooksPeriodicalsAndNewspapers = 'BOOKS_PERIODICALS_AND_NEWSPAPERS',
  BookStores = 'BOOK_STORES',
  BowlingAlleys = 'BOWLING_ALLEYS',
  BusinessSecretarialSchools = 'BUSINESS_SECRETARIAL_SCHOOLS',
  BusLines = 'BUS_LINES',
  BuyingShoppingServices = 'BUYING_SHOPPING_SERVICES',
  CableSatelliteAndOtherPayTelevisionAndRadio = 'CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO',
  CameraAndPhotographicSupplyStores = 'CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES',
  CandyNutAndConfectioneryStores = 'CANDY_NUT_AND_CONFECTIONERY_STORES',
  CarpentryServices = 'CARPENTRY_SERVICES',
  CarpetUpholsteryCleaning = 'CARPET_UPHOLSTERY_CLEANING',
  CarAndTruckDealersNewUsed = 'CAR_AND_TRUCK_DEALERS_NEW_USED',
  CarAndTruckDealersUsedOnly = 'CAR_AND_TRUCK_DEALERS_USED_ONLY',
  CarRentalAgencies = 'CAR_RENTAL_AGENCIES',
  CarWashes = 'CAR_WASHES',
  Caterers = 'CATERERS',
  CharitableAndSocialServiceOrganizationsFundraising = 'CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING',
  ChemicalsAndAlliedProducts = 'CHEMICALS_AND_ALLIED_PRODUCTS',
  ChildrensAndInfantsWearStores = 'CHILDRENS_AND_INFANTS_WEAR_STORES',
  ChildCareServices = 'CHILD_CARE_SERVICES',
  ChiropodistsPodiatrists = 'CHIROPODISTS_PODIATRISTS',
  Chiropractors = 'CHIROPRACTORS',
  CigarStoresAndStands = 'CIGAR_STORES_AND_STANDS',
  CivicSocialFraternalAssociations = 'CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS',
  CleaningAndMaintenance = 'CLEANING_AND_MAINTENANCE',
  ClothingRental = 'CLOTHING_RENTAL',
  CollegesUniversities = 'COLLEGES_UNIVERSITIES',
  CommercialEquipment = 'COMMERCIAL_EQUIPMENT',
  CommercialFootwear = 'COMMERCIAL_FOOTWEAR',
  CommercialPhotographyArtAndGraphics = 'COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS',
  CommuterTransportAndFerries = 'COMMUTER_TRANSPORT_AND_FERRIES',
  ComputersPeripheralsAndSoftware = 'COMPUTERS_PERIPHERALS_AND_SOFTWARE',
  ComputerNetworkServices = 'COMPUTER_NETWORK_SERVICES',
  ComputerProgramming = 'COMPUTER_PROGRAMMING',
  ComputerRepair = 'COMPUTER_REPAIR',
  ComputerSoftwareStores = 'COMPUTER_SOFTWARE_STORES',
  ConcreteWorkServices = 'CONCRETE_WORK_SERVICES',
  ConstructionMaterials = 'CONSTRUCTION_MATERIALS',
  ConsultingPublicRelations = 'CONSULTING_PUBLIC_RELATIONS',
  CorrespondenceSchools = 'CORRESPONDENCE_SCHOOLS',
  CosmeticStores = 'COSMETIC_STORES',
  CounselingServices = 'COUNSELING_SERVICES',
  CountryClubs = 'COUNTRY_CLUBS',
  CourierServices = 'COURIER_SERVICES',
  CourtCosts = 'COURT_COSTS',
  CreditReportingAgencies = 'CREDIT_REPORTING_AGENCIES',
  CruiseLines = 'CRUISE_LINES',
  DairyProductsStores = 'DAIRY_PRODUCTS_STORES',
  DanceHallStudiosSchools = 'DANCE_HALL_STUDIOS_SCHOOLS',
  DatingEscortServices = 'DATING_ESCORT_SERVICES',
  DentistsOrthodontists = 'DENTISTS_ORTHODONTISTS',
  DepartmentStores = 'DEPARTMENT_STORES',
  DetectiveAgencies = 'DETECTIVE_AGENCIES',
  DigitalGoodsApplications = 'DIGITAL_GOODS_APPLICATIONS',
  DigitalGoodsGames = 'DIGITAL_GOODS_GAMES',
  DigitalGoodsLargeVolume = 'DIGITAL_GOODS_LARGE_VOLUME',
  DigitalGoodsMedia = 'DIGITAL_GOODS_MEDIA',
  DirectMarketingCatalogMerchant = 'DIRECT_MARKETING_CATALOG_MERCHANT',
  DirectMarketingCombinationCatalogAndRetailMerchant = 'DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT',
  DirectMarketingInboundTelemarketing = 'DIRECT_MARKETING_INBOUND_TELEMARKETING',
  DirectMarketingInsuranceServices = 'DIRECT_MARKETING_INSURANCE_SERVICES',
  DirectMarketingOther = 'DIRECT_MARKETING_OTHER',
  DirectMarketingOutboundTelemarketing = 'DIRECT_MARKETING_OUTBOUND_TELEMARKETING',
  DirectMarketingSubscription = 'DIRECT_MARKETING_SUBSCRIPTION',
  DirectMarketingTravel = 'DIRECT_MARKETING_TRAVEL',
  DiscountStores = 'DISCOUNT_STORES',
  Doctors = 'DOCTORS',
  DoorToDoorSales = 'DOOR_TO_DOOR_SALES',
  DraperyWindowCoveringAndUpholsteryStores = 'DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES',
  DrinkingPlaces = 'DRINKING_PLACES',
  DrugsDrugProprietariesAndDruggistSundries = 'DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES',
  DrugStoresAndPharmacies = 'DRUG_STORES_AND_PHARMACIES',
  DryCleaners = 'DRY_CLEANERS',
  DurableGoods = 'DURABLE_GOODS',
  DutyFreeStores = 'DUTY_FREE_STORES',
  EatingPlacesRestaurants = 'EATING_PLACES_RESTAURANTS',
  EducationalServices = 'EDUCATIONAL_SERVICES',
  ElectricalPartsAndEquipment = 'ELECTRICAL_PARTS_AND_EQUIPMENT',
  ElectricalServices = 'ELECTRICAL_SERVICES',
  ElectricRazorStores = 'ELECTRIC_RAZOR_STORES',
  ElectricVehicleCharging = 'ELECTRIC_VEHICLE_CHARGING',
  ElectronicsRepairShops = 'ELECTRONICS_REPAIR_SHOPS',
  ElectronicsStores = 'ELECTRONICS_STORES',
  ElementarySecondarySchools = 'ELEMENTARY_SECONDARY_SCHOOLS',
  EmergencyServicesGcasVisaUseOnly = 'EMERGENCY_SERVICES_GCAS_VISA_USE_ONLY',
  EmploymentTempAgencies = 'EMPLOYMENT_TEMP_AGENCIES',
  EquipmentRental = 'EQUIPMENT_RENTAL',
  ExterminatingServices = 'EXTERMINATING_SERVICES',
  FamilyClothingStores = 'FAMILY_CLOTHING_STORES',
  FastFoodRestaurants = 'FAST_FOOD_RESTAURANTS',
  FinancialInstitutions = 'FINANCIAL_INSTITUTIONS',
  FinesGovernmentAdministrativeEntities = 'FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES',
  FireplaceFireplaceScreensAndAccessoriesStores = 'FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES',
  FloorCoveringStores = 'FLOOR_COVERING_STORES',
  Florists = 'FLORISTS',
  FloristsSuppliesNurseryStockAndFlowers = 'FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS',
  FreezerAndLockerMeatProvisioners = 'FREEZER_AND_LOCKER_MEAT_PROVISIONERS',
  FuelDealersNonAutomotive = 'FUEL_DEALERS_NON_AUTOMOTIVE',
  FuneralServicesCrematories = 'FUNERAL_SERVICES_CREMATORIES',
  FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances = 'FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES',
  FurnitureRepairRefinishing = 'FURNITURE_REPAIR_REFINISHING',
  FurriersAndFurShops = 'FURRIERS_AND_FUR_SHOPS',
  GeneralServices = 'GENERAL_SERVICES',
  GiftCardNoveltyAndSouvenirShops = 'GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS',
  GlasswareCrystalStores = 'GLASSWARE_CRYSTAL_STORES',
  GlassPaintAndWallpaperStores = 'GLASS_PAINT_AND_WALLPAPER_STORES',
  GolfCoursesPublic = 'GOLF_COURSES_PUBLIC',
  GovernmentLicensedHorseDogRacingUsRegionOnly = 'GOVERNMENT_LICENSED_HORSE_DOG_RACING_US_REGION_ONLY',
  GovernmentLicensedOnlineCasionsOnlineGamblingUsRegionOnly = 'GOVERNMENT_LICENSED_ONLINE_CASIONS_ONLINE_GAMBLING_US_REGION_ONLY',
  GovernmentOwnedLotteriesNonUsRegion = 'GOVERNMENT_OWNED_LOTTERIES_NON_US_REGION',
  GovernmentOwnedLotteriesUsRegionOnly = 'GOVERNMENT_OWNED_LOTTERIES_US_REGION_ONLY',
  GovernmentServices = 'GOVERNMENT_SERVICES',
  GroceryStoresSupermarkets = 'GROCERY_STORES_SUPERMARKETS',
  HardwareEquipmentAndSupplies = 'HARDWARE_EQUIPMENT_AND_SUPPLIES',
  HardwareStores = 'HARDWARE_STORES',
  HealthAndBeautySpas = 'HEALTH_AND_BEAUTY_SPAS',
  HearingAidsSalesAndSupplies = 'HEARING_AIDS_SALES_AND_SUPPLIES',
  HeatingPlumbingAC = 'HEATING_PLUMBING_A_C',
  HobbyToyAndGameShops = 'HOBBY_TOY_AND_GAME_SHOPS',
  HomeSupplyWarehouseStores = 'HOME_SUPPLY_WAREHOUSE_STORES',
  Hospitals = 'HOSPITALS',
  HotelsMotelsAndResorts = 'HOTELS_MOTELS_AND_RESORTS',
  HouseholdApplianceStores = 'HOUSEHOLD_APPLIANCE_STORES',
  IndustrialSupplies = 'INDUSTRIAL_SUPPLIES',
  InformationRetrievalServices = 'INFORMATION_RETRIEVAL_SERVICES',
  InsuranceDefault = 'INSURANCE_DEFAULT',
  InsuranceUnderwritingPremiums = 'INSURANCE_UNDERWRITING_PREMIUMS',
  IntraCompanyPurchases = 'INTRA_COMPANY_PURCHASES',
  JewelryStoresWatchesClocksAndSilverwareStores = 'JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES',
  LandscapingServices = 'LANDSCAPING_SERVICES',
  Laundries = 'LAUNDRIES',
  LaundryCleaningServices = 'LAUNDRY_CLEANING_SERVICES',
  LegalServicesAttorneys = 'LEGAL_SERVICES_ATTORNEYS',
  LuggageAndLeatherGoodsStores = 'LUGGAGE_AND_LEATHER_GOODS_STORES',
  LumberBuildingMaterialsStores = 'LUMBER_BUILDING_MATERIALS_STORES',
  ManualCashDisburse = 'MANUAL_CASH_DISBURSE',
  MarinasServiceAndSupplies = 'MARINAS_SERVICE_AND_SUPPLIES',
  Marketplaces = 'MARKETPLACES',
  MasonryStoneworkAndPlaster = 'MASONRY_STONEWORK_AND_PLASTER',
  MassageParlors = 'MASSAGE_PARLORS',
  MedicalAndDentalLabs = 'MEDICAL_AND_DENTAL_LABS',
  MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies = 'MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES',
  MedicalServices = 'MEDICAL_SERVICES',
  MembershipOrganizations = 'MEMBERSHIP_ORGANIZATIONS',
  MensAndBoysClothingAndAccessoriesStores = 'MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES',
  MensWomensClothingStores = 'MENS_WOMENS_CLOTHING_STORES',
  MetalServiceCenters = 'METAL_SERVICE_CENTERS',
  Miscellaneous = 'MISCELLANEOUS',
  MiscellaneousApparelAndAccessoryShops = 'MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS',
  MiscellaneousAutoDealers = 'MISCELLANEOUS_AUTO_DEALERS',
  MiscellaneousBusinessServices = 'MISCELLANEOUS_BUSINESS_SERVICES',
  MiscellaneousFoodStores = 'MISCELLANEOUS_FOOD_STORES',
  MiscellaneousGeneralMerchandise = 'MISCELLANEOUS_GENERAL_MERCHANDISE',
  MiscellaneousGeneralServices = 'MISCELLANEOUS_GENERAL_SERVICES',
  MiscellaneousHomeFurnishingSpecialtyStores = 'MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES',
  MiscellaneousPublishingAndPrinting = 'MISCELLANEOUS_PUBLISHING_AND_PRINTING',
  MiscellaneousRecreationServices = 'MISCELLANEOUS_RECREATION_SERVICES',
  MiscellaneousRepairShops = 'MISCELLANEOUS_REPAIR_SHOPS',
  MiscellaneousSpecialtyRetail = 'MISCELLANEOUS_SPECIALTY_RETAIL',
  MobileHomeDealers = 'MOBILE_HOME_DEALERS',
  MotionPictureTheaters = 'MOTION_PICTURE_THEATERS',
  MotorcycleShopsAndDealers = 'MOTORCYCLE_SHOPS_AND_DEALERS',
  MotorcycleShopsDealers = 'MOTORCYCLE_SHOPS_DEALERS',
  MotorFreightCarriersAndTrucking = 'MOTOR_FREIGHT_CARRIERS_AND_TRUCKING',
  MotorHomesDealers = 'MOTOR_HOMES_DEALERS',
  MotorVehicleSuppliesAndNewParts = 'MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS',
  MusicStoresMusicalInstrumentsPianosAndSheetMusic = 'MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC',
  NewsDealersAndNewsstands = 'NEWS_DEALERS_AND_NEWSSTANDS',
  NondurableGoods = 'NONDURABLE_GOODS',
  NonFiMoneyOrders = 'NON_FI_MONEY_ORDERS',
  NonFiStoredValueCardPurchaseLoad = 'NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD',
  NurseriesLawnAndGardenSupplyStores = 'NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES',
  NursingPersonalCare = 'NURSING_PERSONAL_CARE',
  OfficeAndCommercialFurniture = 'OFFICE_AND_COMMERCIAL_FURNITURE',
  OpticiansEyeglasses = 'OPTICIANS_EYEGLASSES',
  OptometristsOphthalmologist = 'OPTOMETRISTS_OPHTHALMOLOGIST',
  OrthopedicGoodsProstheticDevices = 'ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES',
  Osteopaths = 'OSTEOPATHS',
  PackageStoresBeerWineAndLiquor = 'PACKAGE_STORES_BEER_WINE_AND_LIQUOR',
  PaintsVarnishesAndSupplies = 'PAINTS_VARNISHES_AND_SUPPLIES',
  ParkingLotsGarages = 'PARKING_LOTS_GARAGES',
  PassengerRailways = 'PASSENGER_RAILWAYS',
  PawnShops = 'PAWN_SHOPS',
  PetroleumAndPetroleumProducts = 'PETROLEUM_AND_PETROLEUM_PRODUCTS',
  PetShopsPetFoodAndSupplies = 'PET_SHOPS_PET_FOOD_AND_SUPPLIES',
  PhotographicPhotocopyMicrofilmEquipmentAndSupplies = 'PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES',
  PhotographicStudios = 'PHOTOGRAPHIC_STUDIOS',
  PhotoDeveloping = 'PHOTO_DEVELOPING',
  PictureVideoProduction = 'PICTURE_VIDEO_PRODUCTION',
  PieceGoodsNotionsAndOtherDryGoods = 'PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS',
  PlumbingHeatingEquipmentAndSupplies = 'PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES',
  PoliticalOrganizations = 'POLITICAL_ORGANIZATIONS',
  PostalServicesGovernmentOnly = 'POSTAL_SERVICES_GOVERNMENT_ONLY',
  PreciousStonesAndMetalsWatchesAndJewelry = 'PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY',
  ProfessionalServices = 'PROFESSIONAL_SERVICES',
  PublicWarehousingAndStorage = 'PUBLIC_WAREHOUSING_AND_STORAGE',
  QuickCopyReproAndBlueprint = 'QUICK_COPY_REPRO_AND_BLUEPRINT',
  Railroads = 'RAILROADS',
  RealEstateAgentsAndManagersRentals = 'REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS',
  RecordStores = 'RECORD_STORES',
  RecreationalVehicleRentals = 'RECREATIONAL_VEHICLE_RENTALS',
  ReligiousGoodsStores = 'RELIGIOUS_GOODS_STORES',
  ReligiousOrganizations = 'RELIGIOUS_ORGANIZATIONS',
  RoofingSidingSheetMetal = 'ROOFING_SIDING_SHEET_METAL',
  SecretarialSupportServices = 'SECRETARIAL_SUPPORT_SERVICES',
  SecurityBrokersDealers = 'SECURITY_BROKERS_DEALERS',
  ServiceStations = 'SERVICE_STATIONS',
  SewingNeedleworkFabricAndPieceGoodsStores = 'SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES',
  ShoeRepairHatCleaning = 'SHOE_REPAIR_HAT_CLEANING',
  ShoeStores = 'SHOE_STORES',
  SmallApplianceRepair = 'SMALL_APPLIANCE_REPAIR',
  SnowmobileDealers = 'SNOWMOBILE_DEALERS',
  SpecialtyCleaning = 'SPECIALTY_CLEANING',
  SpecialTradeServices = 'SPECIAL_TRADE_SERVICES',
  SportingGoodsStores = 'SPORTING_GOODS_STORES',
  SportingRecreationCamps = 'SPORTING_RECREATION_CAMPS',
  SportsAndRidingApparelStores = 'SPORTS_AND_RIDING_APPAREL_STORES',
  SportsClubsFields = 'SPORTS_CLUBS_FIELDS',
  StampAndCoinStores = 'STAMP_AND_COIN_STORES',
  StationaryOfficeSuppliesPrintingAndWritingPaper = 'STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER',
  StationeryStoresOfficeAndSchoolSupplyStores = 'STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES',
  SwimmingPoolsSales = 'SWIMMING_POOLS_SALES',
  TailorsAlterations = 'TAILORS_ALTERATIONS',
  TaxicabsLimousines = 'TAXICABS_LIMOUSINES',
  TaxPaymentsGovernmentAgencies = 'TAX_PAYMENTS_GOVERNMENT_AGENCIES',
  TaxPreparationServices = 'TAX_PREPARATION_SERVICES',
  TelecommunicationEquipmentAndTelephoneSales = 'TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES',
  TelecommunicationServices = 'TELECOMMUNICATION_SERVICES',
  TelegraphServices = 'TELEGRAPH_SERVICES',
  TentAndAwningShops = 'TENT_AND_AWNING_SHOPS',
  TestingLaboratories = 'TESTING_LABORATORIES',
  TheatricalTicketAgencies = 'THEATRICAL_TICKET_AGENCIES',
  Timeshares = 'TIMESHARES',
  TireRetreadingAndRepair = 'TIRE_RETREADING_AND_REPAIR',
  TollsBridgeFees = 'TOLLS_BRIDGE_FEES',
  TouristAttractionsAndExhibits = 'TOURIST_ATTRACTIONS_AND_EXHIBITS',
  TowingServices = 'TOWING_SERVICES',
  TrailerParksCampgrounds = 'TRAILER_PARKS_CAMPGROUNDS',
  TransportationServices = 'TRANSPORTATION_SERVICES',
  TravelAgenciesTourOperators = 'TRAVEL_AGENCIES_TOUR_OPERATORS',
  TruckStopIteration = 'TRUCK_STOP_ITERATION',
  TruckUtilityTrailerRentals = 'TRUCK_UTILITY_TRAILER_RENTALS',
  TypesettingPlateMakingAndRelatedServices = 'TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES',
  TypewriterStores = 'TYPEWRITER_STORES',
  TUiTravelGermany = 'T_UI_TRAVEL_GERMANY',
  UniformsCommercialClothing = 'UNIFORMS_COMMERCIAL_CLOTHING',
  UsedMerchandiseAndSecondhandStores = 'USED_MERCHANDISE_AND_SECONDHAND_STORES',
  Utilities = 'UTILITIES',
  USFederalGovernmentAgenciesOrDepartments = 'U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS',
  VarietyStores = 'VARIETY_STORES',
  VeterinaryServices = 'VETERINARY_SERVICES',
  VideoAmusementGameSupplies = 'VIDEO_AMUSEMENT_GAME_SUPPLIES',
  VideoGameArcades = 'VIDEO_GAME_ARCADES',
  VideoTapeRentalStores = 'VIDEO_TAPE_RENTAL_STORES',
  VocationalTradeSchools = 'VOCATIONAL_TRADE_SCHOOLS',
  WatchJewelryRepair = 'WATCH_JEWELRY_REPAIR',
  WeldingRepair = 'WELDING_REPAIR',
  WholesaleClubs = 'WHOLESALE_CLUBS',
  WigAndToupeeStores = 'WIG_AND_TOUPEE_STORES',
  WiresMoneyOrders = 'WIRES_MONEY_ORDERS',
  WomensAccessoryAndSpecialtyShops = 'WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS',
  WomensReadyToWearStores = 'WOMENS_READY_TO_WEAR_STORES',
  WreckingAndSalvageYards = 'WRECKING_AND_SALVAGE_YARDS'
}

export type StripePostIssuingCardholdersCardholderCardIssuingIndividualInput = {
  userTermsAcceptance?: InputMaybe<StripePostIssuingCardholdersCardholderUserTermsAcceptanceCardIssuingIndividualInput>;
};

export enum StripePostIssuingCardholdersCardholderCategoriesSpendingLimitsSpendingControls {
  AccountingBookkeepingServices = 'ACCOUNTING_BOOKKEEPING_SERVICES',
  AcRefrigerationRepair = 'AC_REFRIGERATION_REPAIR',
  AdvertisingServices = 'ADVERTISING_SERVICES',
  AgriculturalCooperative = 'AGRICULTURAL_COOPERATIVE',
  AirlinesAirCarriers = 'AIRLINES_AIR_CARRIERS',
  AirportsFlyingFields = 'AIRPORTS_FLYING_FIELDS',
  AmbulanceServices = 'AMBULANCE_SERVICES',
  AmusementParksCarnivals = 'AMUSEMENT_PARKS_CARNIVALS',
  AntiqueReproductions = 'ANTIQUE_REPRODUCTIONS',
  AntiqueShops = 'ANTIQUE_SHOPS',
  Aquariums = 'AQUARIUMS',
  ArchitecturalSurveyingServices = 'ARCHITECTURAL_SURVEYING_SERVICES',
  ArtistsSupplyAndCraftShops = 'ARTISTS_SUPPLY_AND_CRAFT_SHOPS',
  ArtDealersAndGalleries = 'ART_DEALERS_AND_GALLERIES',
  AutomatedCashDisburse = 'AUTOMATED_CASH_DISBURSE',
  AutomatedFuelDispensers = 'AUTOMATED_FUEL_DISPENSERS',
  AutomobileAssociations = 'AUTOMOBILE_ASSOCIATIONS',
  AutomotivePartsAndAccessoriesStores = 'AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES',
  AutomotiveTireStores = 'AUTOMOTIVE_TIRE_STORES',
  AutoAndHomeSupplyStores = 'AUTO_AND_HOME_SUPPLY_STORES',
  AutoBodyRepairShops = 'AUTO_BODY_REPAIR_SHOPS',
  AutoPaintShops = 'AUTO_PAINT_SHOPS',
  AutoServiceShops = 'AUTO_SERVICE_SHOPS',
  BailAndBondPayments = 'BAIL_AND_BOND_PAYMENTS',
  Bakeries = 'BAKERIES',
  BandsOrchestras = 'BANDS_ORCHESTRAS',
  BarberAndBeautyShops = 'BARBER_AND_BEAUTY_SHOPS',
  BettingCasinoGambling = 'BETTING_CASINO_GAMBLING',
  BicycleShops = 'BICYCLE_SHOPS',
  BilliardPoolEstablishments = 'BILLIARD_POOL_ESTABLISHMENTS',
  BoatDealers = 'BOAT_DEALERS',
  BoatRentalsAndLeases = 'BOAT_RENTALS_AND_LEASES',
  BooksPeriodicalsAndNewspapers = 'BOOKS_PERIODICALS_AND_NEWSPAPERS',
  BookStores = 'BOOK_STORES',
  BowlingAlleys = 'BOWLING_ALLEYS',
  BusinessSecretarialSchools = 'BUSINESS_SECRETARIAL_SCHOOLS',
  BusLines = 'BUS_LINES',
  BuyingShoppingServices = 'BUYING_SHOPPING_SERVICES',
  CableSatelliteAndOtherPayTelevisionAndRadio = 'CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO',
  CameraAndPhotographicSupplyStores = 'CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES',
  CandyNutAndConfectioneryStores = 'CANDY_NUT_AND_CONFECTIONERY_STORES',
  CarpentryServices = 'CARPENTRY_SERVICES',
  CarpetUpholsteryCleaning = 'CARPET_UPHOLSTERY_CLEANING',
  CarAndTruckDealersNewUsed = 'CAR_AND_TRUCK_DEALERS_NEW_USED',
  CarAndTruckDealersUsedOnly = 'CAR_AND_TRUCK_DEALERS_USED_ONLY',
  CarRentalAgencies = 'CAR_RENTAL_AGENCIES',
  CarWashes = 'CAR_WASHES',
  Caterers = 'CATERERS',
  CharitableAndSocialServiceOrganizationsFundraising = 'CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING',
  ChemicalsAndAlliedProducts = 'CHEMICALS_AND_ALLIED_PRODUCTS',
  ChildrensAndInfantsWearStores = 'CHILDRENS_AND_INFANTS_WEAR_STORES',
  ChildCareServices = 'CHILD_CARE_SERVICES',
  ChiropodistsPodiatrists = 'CHIROPODISTS_PODIATRISTS',
  Chiropractors = 'CHIROPRACTORS',
  CigarStoresAndStands = 'CIGAR_STORES_AND_STANDS',
  CivicSocialFraternalAssociations = 'CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS',
  CleaningAndMaintenance = 'CLEANING_AND_MAINTENANCE',
  ClothingRental = 'CLOTHING_RENTAL',
  CollegesUniversities = 'COLLEGES_UNIVERSITIES',
  CommercialEquipment = 'COMMERCIAL_EQUIPMENT',
  CommercialFootwear = 'COMMERCIAL_FOOTWEAR',
  CommercialPhotographyArtAndGraphics = 'COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS',
  CommuterTransportAndFerries = 'COMMUTER_TRANSPORT_AND_FERRIES',
  ComputersPeripheralsAndSoftware = 'COMPUTERS_PERIPHERALS_AND_SOFTWARE',
  ComputerNetworkServices = 'COMPUTER_NETWORK_SERVICES',
  ComputerProgramming = 'COMPUTER_PROGRAMMING',
  ComputerRepair = 'COMPUTER_REPAIR',
  ComputerSoftwareStores = 'COMPUTER_SOFTWARE_STORES',
  ConcreteWorkServices = 'CONCRETE_WORK_SERVICES',
  ConstructionMaterials = 'CONSTRUCTION_MATERIALS',
  ConsultingPublicRelations = 'CONSULTING_PUBLIC_RELATIONS',
  CorrespondenceSchools = 'CORRESPONDENCE_SCHOOLS',
  CosmeticStores = 'COSMETIC_STORES',
  CounselingServices = 'COUNSELING_SERVICES',
  CountryClubs = 'COUNTRY_CLUBS',
  CourierServices = 'COURIER_SERVICES',
  CourtCosts = 'COURT_COSTS',
  CreditReportingAgencies = 'CREDIT_REPORTING_AGENCIES',
  CruiseLines = 'CRUISE_LINES',
  DairyProductsStores = 'DAIRY_PRODUCTS_STORES',
  DanceHallStudiosSchools = 'DANCE_HALL_STUDIOS_SCHOOLS',
  DatingEscortServices = 'DATING_ESCORT_SERVICES',
  DentistsOrthodontists = 'DENTISTS_ORTHODONTISTS',
  DepartmentStores = 'DEPARTMENT_STORES',
  DetectiveAgencies = 'DETECTIVE_AGENCIES',
  DigitalGoodsApplications = 'DIGITAL_GOODS_APPLICATIONS',
  DigitalGoodsGames = 'DIGITAL_GOODS_GAMES',
  DigitalGoodsLargeVolume = 'DIGITAL_GOODS_LARGE_VOLUME',
  DigitalGoodsMedia = 'DIGITAL_GOODS_MEDIA',
  DirectMarketingCatalogMerchant = 'DIRECT_MARKETING_CATALOG_MERCHANT',
  DirectMarketingCombinationCatalogAndRetailMerchant = 'DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT',
  DirectMarketingInboundTelemarketing = 'DIRECT_MARKETING_INBOUND_TELEMARKETING',
  DirectMarketingInsuranceServices = 'DIRECT_MARKETING_INSURANCE_SERVICES',
  DirectMarketingOther = 'DIRECT_MARKETING_OTHER',
  DirectMarketingOutboundTelemarketing = 'DIRECT_MARKETING_OUTBOUND_TELEMARKETING',
  DirectMarketingSubscription = 'DIRECT_MARKETING_SUBSCRIPTION',
  DirectMarketingTravel = 'DIRECT_MARKETING_TRAVEL',
  DiscountStores = 'DISCOUNT_STORES',
  Doctors = 'DOCTORS',
  DoorToDoorSales = 'DOOR_TO_DOOR_SALES',
  DraperyWindowCoveringAndUpholsteryStores = 'DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES',
  DrinkingPlaces = 'DRINKING_PLACES',
  DrugsDrugProprietariesAndDruggistSundries = 'DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES',
  DrugStoresAndPharmacies = 'DRUG_STORES_AND_PHARMACIES',
  DryCleaners = 'DRY_CLEANERS',
  DurableGoods = 'DURABLE_GOODS',
  DutyFreeStores = 'DUTY_FREE_STORES',
  EatingPlacesRestaurants = 'EATING_PLACES_RESTAURANTS',
  EducationalServices = 'EDUCATIONAL_SERVICES',
  ElectricalPartsAndEquipment = 'ELECTRICAL_PARTS_AND_EQUIPMENT',
  ElectricalServices = 'ELECTRICAL_SERVICES',
  ElectricRazorStores = 'ELECTRIC_RAZOR_STORES',
  ElectricVehicleCharging = 'ELECTRIC_VEHICLE_CHARGING',
  ElectronicsRepairShops = 'ELECTRONICS_REPAIR_SHOPS',
  ElectronicsStores = 'ELECTRONICS_STORES',
  ElementarySecondarySchools = 'ELEMENTARY_SECONDARY_SCHOOLS',
  EmergencyServicesGcasVisaUseOnly = 'EMERGENCY_SERVICES_GCAS_VISA_USE_ONLY',
  EmploymentTempAgencies = 'EMPLOYMENT_TEMP_AGENCIES',
  EquipmentRental = 'EQUIPMENT_RENTAL',
  ExterminatingServices = 'EXTERMINATING_SERVICES',
  FamilyClothingStores = 'FAMILY_CLOTHING_STORES',
  FastFoodRestaurants = 'FAST_FOOD_RESTAURANTS',
  FinancialInstitutions = 'FINANCIAL_INSTITUTIONS',
  FinesGovernmentAdministrativeEntities = 'FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES',
  FireplaceFireplaceScreensAndAccessoriesStores = 'FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES',
  FloorCoveringStores = 'FLOOR_COVERING_STORES',
  Florists = 'FLORISTS',
  FloristsSuppliesNurseryStockAndFlowers = 'FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS',
  FreezerAndLockerMeatProvisioners = 'FREEZER_AND_LOCKER_MEAT_PROVISIONERS',
  FuelDealersNonAutomotive = 'FUEL_DEALERS_NON_AUTOMOTIVE',
  FuneralServicesCrematories = 'FUNERAL_SERVICES_CREMATORIES',
  FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances = 'FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES',
  FurnitureRepairRefinishing = 'FURNITURE_REPAIR_REFINISHING',
  FurriersAndFurShops = 'FURRIERS_AND_FUR_SHOPS',
  GeneralServices = 'GENERAL_SERVICES',
  GiftCardNoveltyAndSouvenirShops = 'GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS',
  GlasswareCrystalStores = 'GLASSWARE_CRYSTAL_STORES',
  GlassPaintAndWallpaperStores = 'GLASS_PAINT_AND_WALLPAPER_STORES',
  GolfCoursesPublic = 'GOLF_COURSES_PUBLIC',
  GovernmentLicensedHorseDogRacingUsRegionOnly = 'GOVERNMENT_LICENSED_HORSE_DOG_RACING_US_REGION_ONLY',
  GovernmentLicensedOnlineCasionsOnlineGamblingUsRegionOnly = 'GOVERNMENT_LICENSED_ONLINE_CASIONS_ONLINE_GAMBLING_US_REGION_ONLY',
  GovernmentOwnedLotteriesNonUsRegion = 'GOVERNMENT_OWNED_LOTTERIES_NON_US_REGION',
  GovernmentOwnedLotteriesUsRegionOnly = 'GOVERNMENT_OWNED_LOTTERIES_US_REGION_ONLY',
  GovernmentServices = 'GOVERNMENT_SERVICES',
  GroceryStoresSupermarkets = 'GROCERY_STORES_SUPERMARKETS',
  HardwareEquipmentAndSupplies = 'HARDWARE_EQUIPMENT_AND_SUPPLIES',
  HardwareStores = 'HARDWARE_STORES',
  HealthAndBeautySpas = 'HEALTH_AND_BEAUTY_SPAS',
  HearingAidsSalesAndSupplies = 'HEARING_AIDS_SALES_AND_SUPPLIES',
  HeatingPlumbingAC = 'HEATING_PLUMBING_A_C',
  HobbyToyAndGameShops = 'HOBBY_TOY_AND_GAME_SHOPS',
  HomeSupplyWarehouseStores = 'HOME_SUPPLY_WAREHOUSE_STORES',
  Hospitals = 'HOSPITALS',
  HotelsMotelsAndResorts = 'HOTELS_MOTELS_AND_RESORTS',
  HouseholdApplianceStores = 'HOUSEHOLD_APPLIANCE_STORES',
  IndustrialSupplies = 'INDUSTRIAL_SUPPLIES',
  InformationRetrievalServices = 'INFORMATION_RETRIEVAL_SERVICES',
  InsuranceDefault = 'INSURANCE_DEFAULT',
  InsuranceUnderwritingPremiums = 'INSURANCE_UNDERWRITING_PREMIUMS',
  IntraCompanyPurchases = 'INTRA_COMPANY_PURCHASES',
  JewelryStoresWatchesClocksAndSilverwareStores = 'JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES',
  LandscapingServices = 'LANDSCAPING_SERVICES',
  Laundries = 'LAUNDRIES',
  LaundryCleaningServices = 'LAUNDRY_CLEANING_SERVICES',
  LegalServicesAttorneys = 'LEGAL_SERVICES_ATTORNEYS',
  LuggageAndLeatherGoodsStores = 'LUGGAGE_AND_LEATHER_GOODS_STORES',
  LumberBuildingMaterialsStores = 'LUMBER_BUILDING_MATERIALS_STORES',
  ManualCashDisburse = 'MANUAL_CASH_DISBURSE',
  MarinasServiceAndSupplies = 'MARINAS_SERVICE_AND_SUPPLIES',
  Marketplaces = 'MARKETPLACES',
  MasonryStoneworkAndPlaster = 'MASONRY_STONEWORK_AND_PLASTER',
  MassageParlors = 'MASSAGE_PARLORS',
  MedicalAndDentalLabs = 'MEDICAL_AND_DENTAL_LABS',
  MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies = 'MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES',
  MedicalServices = 'MEDICAL_SERVICES',
  MembershipOrganizations = 'MEMBERSHIP_ORGANIZATIONS',
  MensAndBoysClothingAndAccessoriesStores = 'MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES',
  MensWomensClothingStores = 'MENS_WOMENS_CLOTHING_STORES',
  MetalServiceCenters = 'METAL_SERVICE_CENTERS',
  Miscellaneous = 'MISCELLANEOUS',
  MiscellaneousApparelAndAccessoryShops = 'MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS',
  MiscellaneousAutoDealers = 'MISCELLANEOUS_AUTO_DEALERS',
  MiscellaneousBusinessServices = 'MISCELLANEOUS_BUSINESS_SERVICES',
  MiscellaneousFoodStores = 'MISCELLANEOUS_FOOD_STORES',
  MiscellaneousGeneralMerchandise = 'MISCELLANEOUS_GENERAL_MERCHANDISE',
  MiscellaneousGeneralServices = 'MISCELLANEOUS_GENERAL_SERVICES',
  MiscellaneousHomeFurnishingSpecialtyStores = 'MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES',
  MiscellaneousPublishingAndPrinting = 'MISCELLANEOUS_PUBLISHING_AND_PRINTING',
  MiscellaneousRecreationServices = 'MISCELLANEOUS_RECREATION_SERVICES',
  MiscellaneousRepairShops = 'MISCELLANEOUS_REPAIR_SHOPS',
  MiscellaneousSpecialtyRetail = 'MISCELLANEOUS_SPECIALTY_RETAIL',
  MobileHomeDealers = 'MOBILE_HOME_DEALERS',
  MotionPictureTheaters = 'MOTION_PICTURE_THEATERS',
  MotorcycleShopsAndDealers = 'MOTORCYCLE_SHOPS_AND_DEALERS',
  MotorcycleShopsDealers = 'MOTORCYCLE_SHOPS_DEALERS',
  MotorFreightCarriersAndTrucking = 'MOTOR_FREIGHT_CARRIERS_AND_TRUCKING',
  MotorHomesDealers = 'MOTOR_HOMES_DEALERS',
  MotorVehicleSuppliesAndNewParts = 'MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS',
  MusicStoresMusicalInstrumentsPianosAndSheetMusic = 'MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC',
  NewsDealersAndNewsstands = 'NEWS_DEALERS_AND_NEWSSTANDS',
  NondurableGoods = 'NONDURABLE_GOODS',
  NonFiMoneyOrders = 'NON_FI_MONEY_ORDERS',
  NonFiStoredValueCardPurchaseLoad = 'NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD',
  NurseriesLawnAndGardenSupplyStores = 'NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES',
  NursingPersonalCare = 'NURSING_PERSONAL_CARE',
  OfficeAndCommercialFurniture = 'OFFICE_AND_COMMERCIAL_FURNITURE',
  OpticiansEyeglasses = 'OPTICIANS_EYEGLASSES',
  OptometristsOphthalmologist = 'OPTOMETRISTS_OPHTHALMOLOGIST',
  OrthopedicGoodsProstheticDevices = 'ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES',
  Osteopaths = 'OSTEOPATHS',
  PackageStoresBeerWineAndLiquor = 'PACKAGE_STORES_BEER_WINE_AND_LIQUOR',
  PaintsVarnishesAndSupplies = 'PAINTS_VARNISHES_AND_SUPPLIES',
  ParkingLotsGarages = 'PARKING_LOTS_GARAGES',
  PassengerRailways = 'PASSENGER_RAILWAYS',
  PawnShops = 'PAWN_SHOPS',
  PetroleumAndPetroleumProducts = 'PETROLEUM_AND_PETROLEUM_PRODUCTS',
  PetShopsPetFoodAndSupplies = 'PET_SHOPS_PET_FOOD_AND_SUPPLIES',
  PhotographicPhotocopyMicrofilmEquipmentAndSupplies = 'PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES',
  PhotographicStudios = 'PHOTOGRAPHIC_STUDIOS',
  PhotoDeveloping = 'PHOTO_DEVELOPING',
  PictureVideoProduction = 'PICTURE_VIDEO_PRODUCTION',
  PieceGoodsNotionsAndOtherDryGoods = 'PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS',
  PlumbingHeatingEquipmentAndSupplies = 'PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES',
  PoliticalOrganizations = 'POLITICAL_ORGANIZATIONS',
  PostalServicesGovernmentOnly = 'POSTAL_SERVICES_GOVERNMENT_ONLY',
  PreciousStonesAndMetalsWatchesAndJewelry = 'PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY',
  ProfessionalServices = 'PROFESSIONAL_SERVICES',
  PublicWarehousingAndStorage = 'PUBLIC_WAREHOUSING_AND_STORAGE',
  QuickCopyReproAndBlueprint = 'QUICK_COPY_REPRO_AND_BLUEPRINT',
  Railroads = 'RAILROADS',
  RealEstateAgentsAndManagersRentals = 'REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS',
  RecordStores = 'RECORD_STORES',
  RecreationalVehicleRentals = 'RECREATIONAL_VEHICLE_RENTALS',
  ReligiousGoodsStores = 'RELIGIOUS_GOODS_STORES',
  ReligiousOrganizations = 'RELIGIOUS_ORGANIZATIONS',
  RoofingSidingSheetMetal = 'ROOFING_SIDING_SHEET_METAL',
  SecretarialSupportServices = 'SECRETARIAL_SUPPORT_SERVICES',
  SecurityBrokersDealers = 'SECURITY_BROKERS_DEALERS',
  ServiceStations = 'SERVICE_STATIONS',
  SewingNeedleworkFabricAndPieceGoodsStores = 'SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES',
  ShoeRepairHatCleaning = 'SHOE_REPAIR_HAT_CLEANING',
  ShoeStores = 'SHOE_STORES',
  SmallApplianceRepair = 'SMALL_APPLIANCE_REPAIR',
  SnowmobileDealers = 'SNOWMOBILE_DEALERS',
  SpecialtyCleaning = 'SPECIALTY_CLEANING',
  SpecialTradeServices = 'SPECIAL_TRADE_SERVICES',
  SportingGoodsStores = 'SPORTING_GOODS_STORES',
  SportingRecreationCamps = 'SPORTING_RECREATION_CAMPS',
  SportsAndRidingApparelStores = 'SPORTS_AND_RIDING_APPAREL_STORES',
  SportsClubsFields = 'SPORTS_CLUBS_FIELDS',
  StampAndCoinStores = 'STAMP_AND_COIN_STORES',
  StationaryOfficeSuppliesPrintingAndWritingPaper = 'STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER',
  StationeryStoresOfficeAndSchoolSupplyStores = 'STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES',
  SwimmingPoolsSales = 'SWIMMING_POOLS_SALES',
  TailorsAlterations = 'TAILORS_ALTERATIONS',
  TaxicabsLimousines = 'TAXICABS_LIMOUSINES',
  TaxPaymentsGovernmentAgencies = 'TAX_PAYMENTS_GOVERNMENT_AGENCIES',
  TaxPreparationServices = 'TAX_PREPARATION_SERVICES',
  TelecommunicationEquipmentAndTelephoneSales = 'TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES',
  TelecommunicationServices = 'TELECOMMUNICATION_SERVICES',
  TelegraphServices = 'TELEGRAPH_SERVICES',
  TentAndAwningShops = 'TENT_AND_AWNING_SHOPS',
  TestingLaboratories = 'TESTING_LABORATORIES',
  TheatricalTicketAgencies = 'THEATRICAL_TICKET_AGENCIES',
  Timeshares = 'TIMESHARES',
  TireRetreadingAndRepair = 'TIRE_RETREADING_AND_REPAIR',
  TollsBridgeFees = 'TOLLS_BRIDGE_FEES',
  TouristAttractionsAndExhibits = 'TOURIST_ATTRACTIONS_AND_EXHIBITS',
  TowingServices = 'TOWING_SERVICES',
  TrailerParksCampgrounds = 'TRAILER_PARKS_CAMPGROUNDS',
  TransportationServices = 'TRANSPORTATION_SERVICES',
  TravelAgenciesTourOperators = 'TRAVEL_AGENCIES_TOUR_OPERATORS',
  TruckStopIteration = 'TRUCK_STOP_ITERATION',
  TruckUtilityTrailerRentals = 'TRUCK_UTILITY_TRAILER_RENTALS',
  TypesettingPlateMakingAndRelatedServices = 'TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES',
  TypewriterStores = 'TYPEWRITER_STORES',
  TUiTravelGermany = 'T_UI_TRAVEL_GERMANY',
  UniformsCommercialClothing = 'UNIFORMS_COMMERCIAL_CLOTHING',
  UsedMerchandiseAndSecondhandStores = 'USED_MERCHANDISE_AND_SECONDHAND_STORES',
  Utilities = 'UTILITIES',
  USFederalGovernmentAgenciesOrDepartments = 'U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS',
  VarietyStores = 'VARIETY_STORES',
  VeterinaryServices = 'VETERINARY_SERVICES',
  VideoAmusementGameSupplies = 'VIDEO_AMUSEMENT_GAME_SUPPLIES',
  VideoGameArcades = 'VIDEO_GAME_ARCADES',
  VideoTapeRentalStores = 'VIDEO_TAPE_RENTAL_STORES',
  VocationalTradeSchools = 'VOCATIONAL_TRADE_SCHOOLS',
  WatchJewelryRepair = 'WATCH_JEWELRY_REPAIR',
  WeldingRepair = 'WELDING_REPAIR',
  WholesaleClubs = 'WHOLESALE_CLUBS',
  WigAndToupeeStores = 'WIG_AND_TOUPEE_STORES',
  WiresMoneyOrders = 'WIRES_MONEY_ORDERS',
  WomensAccessoryAndSpecialtyShops = 'WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS',
  WomensReadyToWearStores = 'WOMENS_READY_TO_WEAR_STORES',
  WreckingAndSalvageYards = 'WRECKING_AND_SALVAGE_YARDS'
}

export type StripePostIssuingCardholdersCardholderCompanyInput = {
  taxId?: InputMaybe<Scalars['String']>;
};

export type StripePostIssuingCardholdersCardholderDobIndividualInput = {
  day: Scalars['Int'];
  month: Scalars['Int'];
  year: Scalars['Int'];
};

export type StripePostIssuingCardholdersCardholderDocumentVerificationIndividualInput = {
  back?: InputMaybe<Scalars['String']>;
  front?: InputMaybe<Scalars['String']>;
};

export type StripePostIssuingCardholdersCardholderIndividualInput = {
  cardIssuing?: InputMaybe<StripePostIssuingCardholdersCardholderCardIssuingIndividualInput>;
  dob?: InputMaybe<StripePostIssuingCardholdersCardholderDobIndividualInput>;
  firstName?: InputMaybe<Scalars['String']>;
  lastName?: InputMaybe<Scalars['String']>;
  verification?: InputMaybe<StripePostIssuingCardholdersCardholderVerificationIndividualInput>;
};

export type StripePostIssuingCardholdersCardholderInput = {
  billing?: InputMaybe<StripePostIssuingCardholdersCardholderBillingInput>;
  company?: InputMaybe<StripePostIssuingCardholdersCardholderCompanyInput>;
  email?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  individual?: InputMaybe<StripePostIssuingCardholdersCardholderIndividualInput>;
  metadata?: InputMaybe<Scalars['JSON']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  spendingControls?: InputMaybe<StripePostIssuingCardholdersCardholderSpendingControlsInput>;
  status?: InputMaybe<StripePostIssuingCardholdersCardholderStatus>;
};

export enum StripePostIssuingCardholdersCardholderIntervalSpendingLimitsSpendingControls {
  AllTime = 'ALL_TIME',
  Daily = 'DAILY',
  Monthly = 'MONTHLY',
  PerAuthorization = 'PER_AUTHORIZATION',
  Weekly = 'WEEKLY',
  Yearly = 'YEARLY'
}

export type StripePostIssuingCardholdersCardholderSpendingControlsInput = {
  allowedCategories?: InputMaybe<Array<StripePostIssuingCardholdersCardholderAllowedCategoriesSpendingControls>>;
  blockedCategories?: InputMaybe<Array<StripePostIssuingCardholdersCardholderBlockedCategoriesSpendingControls>>;
  spendingLimits?: InputMaybe<Array<StripePostIssuingCardholdersCardholderSpendingLimitsSpendingControlsInput>>;
  spendingLimitsCurrency?: InputMaybe<Scalars['String']>;
};

export type StripePostIssuingCardholdersCardholderSpendingLimitsSpendingControlsInput = {
  amount: Scalars['Int'];
  categories?: InputMaybe<Array<StripePostIssuingCardholdersCardholderCategoriesSpendingLimitsSpendingControls>>;
  interval: StripePostIssuingCardholdersCardholderIntervalSpendingLimitsSpendingControls;
};

export enum StripePostIssuingCardholdersCardholderStatus {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE'
}

export type StripePostIssuingCardholdersCardholderUserTermsAcceptanceCardIssuingIndividualInput = {
  date?: InputMaybe<Scalars['Int']>;
  ip?: InputMaybe<Scalars['String']>;
  userAgent?: InputMaybe<Scalars['String']>;
};

export type StripePostIssuingCardholdersCardholderVerificationIndividualInput = {
  document?: InputMaybe<StripePostIssuingCardholdersCardholderDocumentVerificationIndividualInput>;
};

export enum StripePostIssuingCardholdersCategoriesSpendingLimitsSpendingControls {
  AccountingBookkeepingServices = 'ACCOUNTING_BOOKKEEPING_SERVICES',
  AcRefrigerationRepair = 'AC_REFRIGERATION_REPAIR',
  AdvertisingServices = 'ADVERTISING_SERVICES',
  AgriculturalCooperative = 'AGRICULTURAL_COOPERATIVE',
  AirlinesAirCarriers = 'AIRLINES_AIR_CARRIERS',
  AirportsFlyingFields = 'AIRPORTS_FLYING_FIELDS',
  AmbulanceServices = 'AMBULANCE_SERVICES',
  AmusementParksCarnivals = 'AMUSEMENT_PARKS_CARNIVALS',
  AntiqueReproductions = 'ANTIQUE_REPRODUCTIONS',
  AntiqueShops = 'ANTIQUE_SHOPS',
  Aquariums = 'AQUARIUMS',
  ArchitecturalSurveyingServices = 'ARCHITECTURAL_SURVEYING_SERVICES',
  ArtistsSupplyAndCraftShops = 'ARTISTS_SUPPLY_AND_CRAFT_SHOPS',
  ArtDealersAndGalleries = 'ART_DEALERS_AND_GALLERIES',
  AutomatedCashDisburse = 'AUTOMATED_CASH_DISBURSE',
  AutomatedFuelDispensers = 'AUTOMATED_FUEL_DISPENSERS',
  AutomobileAssociations = 'AUTOMOBILE_ASSOCIATIONS',
  AutomotivePartsAndAccessoriesStores = 'AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES',
  AutomotiveTireStores = 'AUTOMOTIVE_TIRE_STORES',
  AutoAndHomeSupplyStores = 'AUTO_AND_HOME_SUPPLY_STORES',
  AutoBodyRepairShops = 'AUTO_BODY_REPAIR_SHOPS',
  AutoPaintShops = 'AUTO_PAINT_SHOPS',
  AutoServiceShops = 'AUTO_SERVICE_SHOPS',
  BailAndBondPayments = 'BAIL_AND_BOND_PAYMENTS',
  Bakeries = 'BAKERIES',
  BandsOrchestras = 'BANDS_ORCHESTRAS',
  BarberAndBeautyShops = 'BARBER_AND_BEAUTY_SHOPS',
  BettingCasinoGambling = 'BETTING_CASINO_GAMBLING',
  BicycleShops = 'BICYCLE_SHOPS',
  BilliardPoolEstablishments = 'BILLIARD_POOL_ESTABLISHMENTS',
  BoatDealers = 'BOAT_DEALERS',
  BoatRentalsAndLeases = 'BOAT_RENTALS_AND_LEASES',
  BooksPeriodicalsAndNewspapers = 'BOOKS_PERIODICALS_AND_NEWSPAPERS',
  BookStores = 'BOOK_STORES',
  BowlingAlleys = 'BOWLING_ALLEYS',
  BusinessSecretarialSchools = 'BUSINESS_SECRETARIAL_SCHOOLS',
  BusLines = 'BUS_LINES',
  BuyingShoppingServices = 'BUYING_SHOPPING_SERVICES',
  CableSatelliteAndOtherPayTelevisionAndRadio = 'CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO',
  CameraAndPhotographicSupplyStores = 'CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES',
  CandyNutAndConfectioneryStores = 'CANDY_NUT_AND_CONFECTIONERY_STORES',
  CarpentryServices = 'CARPENTRY_SERVICES',
  CarpetUpholsteryCleaning = 'CARPET_UPHOLSTERY_CLEANING',
  CarAndTruckDealersNewUsed = 'CAR_AND_TRUCK_DEALERS_NEW_USED',
  CarAndTruckDealersUsedOnly = 'CAR_AND_TRUCK_DEALERS_USED_ONLY',
  CarRentalAgencies = 'CAR_RENTAL_AGENCIES',
  CarWashes = 'CAR_WASHES',
  Caterers = 'CATERERS',
  CharitableAndSocialServiceOrganizationsFundraising = 'CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING',
  ChemicalsAndAlliedProducts = 'CHEMICALS_AND_ALLIED_PRODUCTS',
  ChildrensAndInfantsWearStores = 'CHILDRENS_AND_INFANTS_WEAR_STORES',
  ChildCareServices = 'CHILD_CARE_SERVICES',
  ChiropodistsPodiatrists = 'CHIROPODISTS_PODIATRISTS',
  Chiropractors = 'CHIROPRACTORS',
  CigarStoresAndStands = 'CIGAR_STORES_AND_STANDS',
  CivicSocialFraternalAssociations = 'CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS',
  CleaningAndMaintenance = 'CLEANING_AND_MAINTENANCE',
  ClothingRental = 'CLOTHING_RENTAL',
  CollegesUniversities = 'COLLEGES_UNIVERSITIES',
  CommercialEquipment = 'COMMERCIAL_EQUIPMENT',
  CommercialFootwear = 'COMMERCIAL_FOOTWEAR',
  CommercialPhotographyArtAndGraphics = 'COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS',
  CommuterTransportAndFerries = 'COMMUTER_TRANSPORT_AND_FERRIES',
  ComputersPeripheralsAndSoftware = 'COMPUTERS_PERIPHERALS_AND_SOFTWARE',
  ComputerNetworkServices = 'COMPUTER_NETWORK_SERVICES',
  ComputerProgramming = 'COMPUTER_PROGRAMMING',
  ComputerRepair = 'COMPUTER_REPAIR',
  ComputerSoftwareStores = 'COMPUTER_SOFTWARE_STORES',
  ConcreteWorkServices = 'CONCRETE_WORK_SERVICES',
  ConstructionMaterials = 'CONSTRUCTION_MATERIALS',
  ConsultingPublicRelations = 'CONSULTING_PUBLIC_RELATIONS',
  CorrespondenceSchools = 'CORRESPONDENCE_SCHOOLS',
  CosmeticStores = 'COSMETIC_STORES',
  CounselingServices = 'COUNSELING_SERVICES',
  CountryClubs = 'COUNTRY_CLUBS',
  CourierServices = 'COURIER_SERVICES',
  CourtCosts = 'COURT_COSTS',
  CreditReportingAgencies = 'CREDIT_REPORTING_AGENCIES',
  CruiseLines = 'CRUISE_LINES',
  DairyProductsStores = 'DAIRY_PRODUCTS_STORES',
  DanceHallStudiosSchools = 'DANCE_HALL_STUDIOS_SCHOOLS',
  DatingEscortServices = 'DATING_ESCORT_SERVICES',
  DentistsOrthodontists = 'DENTISTS_ORTHODONTISTS',
  DepartmentStores = 'DEPARTMENT_STORES',
  DetectiveAgencies = 'DETECTIVE_AGENCIES',
  DigitalGoodsApplications = 'DIGITAL_GOODS_APPLICATIONS',
  DigitalGoodsGames = 'DIGITAL_GOODS_GAMES',
  DigitalGoodsLargeVolume = 'DIGITAL_GOODS_LARGE_VOLUME',
  DigitalGoodsMedia = 'DIGITAL_GOODS_MEDIA',
  DirectMarketingCatalogMerchant = 'DIRECT_MARKETING_CATALOG_MERCHANT',
  DirectMarketingCombinationCatalogAndRetailMerchant = 'DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT',
  DirectMarketingInboundTelemarketing = 'DIRECT_MARKETING_INBOUND_TELEMARKETING',
  DirectMarketingInsuranceServices = 'DIRECT_MARKETING_INSURANCE_SERVICES',
  DirectMarketingOther = 'DIRECT_MARKETING_OTHER',
  DirectMarketingOutboundTelemarketing = 'DIRECT_MARKETING_OUTBOUND_TELEMARKETING',
  DirectMarketingSubscription = 'DIRECT_MARKETING_SUBSCRIPTION',
  DirectMarketingTravel = 'DIRECT_MARKETING_TRAVEL',
  DiscountStores = 'DISCOUNT_STORES',
  Doctors = 'DOCTORS',
  DoorToDoorSales = 'DOOR_TO_DOOR_SALES',
  DraperyWindowCoveringAndUpholsteryStores = 'DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES',
  DrinkingPlaces = 'DRINKING_PLACES',
  DrugsDrugProprietariesAndDruggistSundries = 'DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES',
  DrugStoresAndPharmacies = 'DRUG_STORES_AND_PHARMACIES',
  DryCleaners = 'DRY_CLEANERS',
  DurableGoods = 'DURABLE_GOODS',
  DutyFreeStores = 'DUTY_FREE_STORES',
  EatingPlacesRestaurants = 'EATING_PLACES_RESTAURANTS',
  EducationalServices = 'EDUCATIONAL_SERVICES',
  ElectricalPartsAndEquipment = 'ELECTRICAL_PARTS_AND_EQUIPMENT',
  ElectricalServices = 'ELECTRICAL_SERVICES',
  ElectricRazorStores = 'ELECTRIC_RAZOR_STORES',
  ElectricVehicleCharging = 'ELECTRIC_VEHICLE_CHARGING',
  ElectronicsRepairShops = 'ELECTRONICS_REPAIR_SHOPS',
  ElectronicsStores = 'ELECTRONICS_STORES',
  ElementarySecondarySchools = 'ELEMENTARY_SECONDARY_SCHOOLS',
  EmergencyServicesGcasVisaUseOnly = 'EMERGENCY_SERVICES_GCAS_VISA_USE_ONLY',
  EmploymentTempAgencies = 'EMPLOYMENT_TEMP_AGENCIES',
  EquipmentRental = 'EQUIPMENT_RENTAL',
  ExterminatingServices = 'EXTERMINATING_SERVICES',
  FamilyClothingStores = 'FAMILY_CLOTHING_STORES',
  FastFoodRestaurants = 'FAST_FOOD_RESTAURANTS',
  FinancialInstitutions = 'FINANCIAL_INSTITUTIONS',
  FinesGovernmentAdministrativeEntities = 'FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES',
  FireplaceFireplaceScreensAndAccessoriesStores = 'FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES',
  FloorCoveringStores = 'FLOOR_COVERING_STORES',
  Florists = 'FLORISTS',
  FloristsSuppliesNurseryStockAndFlowers = 'FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS',
  FreezerAndLockerMeatProvisioners = 'FREEZER_AND_LOCKER_MEAT_PROVISIONERS',
  FuelDealersNonAutomotive = 'FUEL_DEALERS_NON_AUTOMOTIVE',
  FuneralServicesCrematories = 'FUNERAL_SERVICES_CREMATORIES',
  FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances = 'FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES',
  FurnitureRepairRefinishing = 'FURNITURE_REPAIR_REFINISHING',
  FurriersAndFurShops = 'FURRIERS_AND_FUR_SHOPS',
  GeneralServices = 'GENERAL_SERVICES',
  GiftCardNoveltyAndSouvenirShops = 'GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS',
  GlasswareCrystalStores = 'GLASSWARE_CRYSTAL_STORES',
  GlassPaintAndWallpaperStores = 'GLASS_PAINT_AND_WALLPAPER_STORES',
  GolfCoursesPublic = 'GOLF_COURSES_PUBLIC',
  GovernmentLicensedHorseDogRacingUsRegionOnly = 'GOVERNMENT_LICENSED_HORSE_DOG_RACING_US_REGION_ONLY',
  GovernmentLicensedOnlineCasionsOnlineGamblingUsRegionOnly = 'GOVERNMENT_LICENSED_ONLINE_CASIONS_ONLINE_GAMBLING_US_REGION_ONLY',
  GovernmentOwnedLotteriesNonUsRegion = 'GOVERNMENT_OWNED_LOTTERIES_NON_US_REGION',
  GovernmentOwnedLotteriesUsRegionOnly = 'GOVERNMENT_OWNED_LOTTERIES_US_REGION_ONLY',
  GovernmentServices = 'GOVERNMENT_SERVICES',
  GroceryStoresSupermarkets = 'GROCERY_STORES_SUPERMARKETS',
  HardwareEquipmentAndSupplies = 'HARDWARE_EQUIPMENT_AND_SUPPLIES',
  HardwareStores = 'HARDWARE_STORES',
  HealthAndBeautySpas = 'HEALTH_AND_BEAUTY_SPAS',
  HearingAidsSalesAndSupplies = 'HEARING_AIDS_SALES_AND_SUPPLIES',
  HeatingPlumbingAC = 'HEATING_PLUMBING_A_C',
  HobbyToyAndGameShops = 'HOBBY_TOY_AND_GAME_SHOPS',
  HomeSupplyWarehouseStores = 'HOME_SUPPLY_WAREHOUSE_STORES',
  Hospitals = 'HOSPITALS',
  HotelsMotelsAndResorts = 'HOTELS_MOTELS_AND_RESORTS',
  HouseholdApplianceStores = 'HOUSEHOLD_APPLIANCE_STORES',
  IndustrialSupplies = 'INDUSTRIAL_SUPPLIES',
  InformationRetrievalServices = 'INFORMATION_RETRIEVAL_SERVICES',
  InsuranceDefault = 'INSURANCE_DEFAULT',
  InsuranceUnderwritingPremiums = 'INSURANCE_UNDERWRITING_PREMIUMS',
  IntraCompanyPurchases = 'INTRA_COMPANY_PURCHASES',
  JewelryStoresWatchesClocksAndSilverwareStores = 'JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES',
  LandscapingServices = 'LANDSCAPING_SERVICES',
  Laundries = 'LAUNDRIES',
  LaundryCleaningServices = 'LAUNDRY_CLEANING_SERVICES',
  LegalServicesAttorneys = 'LEGAL_SERVICES_ATTORNEYS',
  LuggageAndLeatherGoodsStores = 'LUGGAGE_AND_LEATHER_GOODS_STORES',
  LumberBuildingMaterialsStores = 'LUMBER_BUILDING_MATERIALS_STORES',
  ManualCashDisburse = 'MANUAL_CASH_DISBURSE',
  MarinasServiceAndSupplies = 'MARINAS_SERVICE_AND_SUPPLIES',
  Marketplaces = 'MARKETPLACES',
  MasonryStoneworkAndPlaster = 'MASONRY_STONEWORK_AND_PLASTER',
  MassageParlors = 'MASSAGE_PARLORS',
  MedicalAndDentalLabs = 'MEDICAL_AND_DENTAL_LABS',
  MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies = 'MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES',
  MedicalServices = 'MEDICAL_SERVICES',
  MembershipOrganizations = 'MEMBERSHIP_ORGANIZATIONS',
  MensAndBoysClothingAndAccessoriesStores = 'MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES',
  MensWomensClothingStores = 'MENS_WOMENS_CLOTHING_STORES',
  MetalServiceCenters = 'METAL_SERVICE_CENTERS',
  Miscellaneous = 'MISCELLANEOUS',
  MiscellaneousApparelAndAccessoryShops = 'MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS',
  MiscellaneousAutoDealers = 'MISCELLANEOUS_AUTO_DEALERS',
  MiscellaneousBusinessServices = 'MISCELLANEOUS_BUSINESS_SERVICES',
  MiscellaneousFoodStores = 'MISCELLANEOUS_FOOD_STORES',
  MiscellaneousGeneralMerchandise = 'MISCELLANEOUS_GENERAL_MERCHANDISE',
  MiscellaneousGeneralServices = 'MISCELLANEOUS_GENERAL_SERVICES',
  MiscellaneousHomeFurnishingSpecialtyStores = 'MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES',
  MiscellaneousPublishingAndPrinting = 'MISCELLANEOUS_PUBLISHING_AND_PRINTING',
  MiscellaneousRecreationServices = 'MISCELLANEOUS_RECREATION_SERVICES',
  MiscellaneousRepairShops = 'MISCELLANEOUS_REPAIR_SHOPS',
  MiscellaneousSpecialtyRetail = 'MISCELLANEOUS_SPECIALTY_RETAIL',
  MobileHomeDealers = 'MOBILE_HOME_DEALERS',
  MotionPictureTheaters = 'MOTION_PICTURE_THEATERS',
  MotorcycleShopsAndDealers = 'MOTORCYCLE_SHOPS_AND_DEALERS',
  MotorcycleShopsDealers = 'MOTORCYCLE_SHOPS_DEALERS',
  MotorFreightCarriersAndTrucking = 'MOTOR_FREIGHT_CARRIERS_AND_TRUCKING',
  MotorHomesDealers = 'MOTOR_HOMES_DEALERS',
  MotorVehicleSuppliesAndNewParts = 'MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS',
  MusicStoresMusicalInstrumentsPianosAndSheetMusic = 'MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC',
  NewsDealersAndNewsstands = 'NEWS_DEALERS_AND_NEWSSTANDS',
  NondurableGoods = 'NONDURABLE_GOODS',
  NonFiMoneyOrders = 'NON_FI_MONEY_ORDERS',
  NonFiStoredValueCardPurchaseLoad = 'NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD',
  NurseriesLawnAndGardenSupplyStores = 'NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES',
  NursingPersonalCare = 'NURSING_PERSONAL_CARE',
  OfficeAndCommercialFurniture = 'OFFICE_AND_COMMERCIAL_FURNITURE',
  OpticiansEyeglasses = 'OPTICIANS_EYEGLASSES',
  OptometristsOphthalmologist = 'OPTOMETRISTS_OPHTHALMOLOGIST',
  OrthopedicGoodsProstheticDevices = 'ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES',
  Osteopaths = 'OSTEOPATHS',
  PackageStoresBeerWineAndLiquor = 'PACKAGE_STORES_BEER_WINE_AND_LIQUOR',
  PaintsVarnishesAndSupplies = 'PAINTS_VARNISHES_AND_SUPPLIES',
  ParkingLotsGarages = 'PARKING_LOTS_GARAGES',
  PassengerRailways = 'PASSENGER_RAILWAYS',
  PawnShops = 'PAWN_SHOPS',
  PetroleumAndPetroleumProducts = 'PETROLEUM_AND_PETROLEUM_PRODUCTS',
  PetShopsPetFoodAndSupplies = 'PET_SHOPS_PET_FOOD_AND_SUPPLIES',
  PhotographicPhotocopyMicrofilmEquipmentAndSupplies = 'PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES',
  PhotographicStudios = 'PHOTOGRAPHIC_STUDIOS',
  PhotoDeveloping = 'PHOTO_DEVELOPING',
  PictureVideoProduction = 'PICTURE_VIDEO_PRODUCTION',
  PieceGoodsNotionsAndOtherDryGoods = 'PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS',
  PlumbingHeatingEquipmentAndSupplies = 'PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES',
  PoliticalOrganizations = 'POLITICAL_ORGANIZATIONS',
  PostalServicesGovernmentOnly = 'POSTAL_SERVICES_GOVERNMENT_ONLY',
  PreciousStonesAndMetalsWatchesAndJewelry = 'PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY',
  ProfessionalServices = 'PROFESSIONAL_SERVICES',
  PublicWarehousingAndStorage = 'PUBLIC_WAREHOUSING_AND_STORAGE',
  QuickCopyReproAndBlueprint = 'QUICK_COPY_REPRO_AND_BLUEPRINT',
  Railroads = 'RAILROADS',
  RealEstateAgentsAndManagersRentals = 'REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS',
  RecordStores = 'RECORD_STORES',
  RecreationalVehicleRentals = 'RECREATIONAL_VEHICLE_RENTALS',
  ReligiousGoodsStores = 'RELIGIOUS_GOODS_STORES',
  ReligiousOrganizations = 'RELIGIOUS_ORGANIZATIONS',
  RoofingSidingSheetMetal = 'ROOFING_SIDING_SHEET_METAL',
  SecretarialSupportServices = 'SECRETARIAL_SUPPORT_SERVICES',
  SecurityBrokersDealers = 'SECURITY_BROKERS_DEALERS',
  ServiceStations = 'SERVICE_STATIONS',
  SewingNeedleworkFabricAndPieceGoodsStores = 'SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES',
  ShoeRepairHatCleaning = 'SHOE_REPAIR_HAT_CLEANING',
  ShoeStores = 'SHOE_STORES',
  SmallApplianceRepair = 'SMALL_APPLIANCE_REPAIR',
  SnowmobileDealers = 'SNOWMOBILE_DEALERS',
  SpecialtyCleaning = 'SPECIALTY_CLEANING',
  SpecialTradeServices = 'SPECIAL_TRADE_SERVICES',
  SportingGoodsStores = 'SPORTING_GOODS_STORES',
  SportingRecreationCamps = 'SPORTING_RECREATION_CAMPS',
  SportsAndRidingApparelStores = 'SPORTS_AND_RIDING_APPAREL_STORES',
  SportsClubsFields = 'SPORTS_CLUBS_FIELDS',
  StampAndCoinStores = 'STAMP_AND_COIN_STORES',
  StationaryOfficeSuppliesPrintingAndWritingPaper = 'STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER',
  StationeryStoresOfficeAndSchoolSupplyStores = 'STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES',
  SwimmingPoolsSales = 'SWIMMING_POOLS_SALES',
  TailorsAlterations = 'TAILORS_ALTERATIONS',
  TaxicabsLimousines = 'TAXICABS_LIMOUSINES',
  TaxPaymentsGovernmentAgencies = 'TAX_PAYMENTS_GOVERNMENT_AGENCIES',
  TaxPreparationServices = 'TAX_PREPARATION_SERVICES',
  TelecommunicationEquipmentAndTelephoneSales = 'TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES',
  TelecommunicationServices = 'TELECOMMUNICATION_SERVICES',
  TelegraphServices = 'TELEGRAPH_SERVICES',
  TentAndAwningShops = 'TENT_AND_AWNING_SHOPS',
  TestingLaboratories = 'TESTING_LABORATORIES',
  TheatricalTicketAgencies = 'THEATRICAL_TICKET_AGENCIES',
  Timeshares = 'TIMESHARES',
  TireRetreadingAndRepair = 'TIRE_RETREADING_AND_REPAIR',
  TollsBridgeFees = 'TOLLS_BRIDGE_FEES',
  TouristAttractionsAndExhibits = 'TOURIST_ATTRACTIONS_AND_EXHIBITS',
  TowingServices = 'TOWING_SERVICES',
  TrailerParksCampgrounds = 'TRAILER_PARKS_CAMPGROUNDS',
  TransportationServices = 'TRANSPORTATION_SERVICES',
  TravelAgenciesTourOperators = 'TRAVEL_AGENCIES_TOUR_OPERATORS',
  TruckStopIteration = 'TRUCK_STOP_ITERATION',
  TruckUtilityTrailerRentals = 'TRUCK_UTILITY_TRAILER_RENTALS',
  TypesettingPlateMakingAndRelatedServices = 'TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES',
  TypewriterStores = 'TYPEWRITER_STORES',
  TUiTravelGermany = 'T_UI_TRAVEL_GERMANY',
  UniformsCommercialClothing = 'UNIFORMS_COMMERCIAL_CLOTHING',
  UsedMerchandiseAndSecondhandStores = 'USED_MERCHANDISE_AND_SECONDHAND_STORES',
  Utilities = 'UTILITIES',
  USFederalGovernmentAgenciesOrDepartments = 'U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS',
  VarietyStores = 'VARIETY_STORES',
  VeterinaryServices = 'VETERINARY_SERVICES',
  VideoAmusementGameSupplies = 'VIDEO_AMUSEMENT_GAME_SUPPLIES',
  VideoGameArcades = 'VIDEO_GAME_ARCADES',
  VideoTapeRentalStores = 'VIDEO_TAPE_RENTAL_STORES',
  VocationalTradeSchools = 'VOCATIONAL_TRADE_SCHOOLS',
  WatchJewelryRepair = 'WATCH_JEWELRY_REPAIR',
  WeldingRepair = 'WELDING_REPAIR',
  WholesaleClubs = 'WHOLESALE_CLUBS',
  WigAndToupeeStores = 'WIG_AND_TOUPEE_STORES',
  WiresMoneyOrders = 'WIRES_MONEY_ORDERS',
  WomensAccessoryAndSpecialtyShops = 'WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS',
  WomensReadyToWearStores = 'WOMENS_READY_TO_WEAR_STORES',
  WreckingAndSalvageYards = 'WRECKING_AND_SALVAGE_YARDS'
}

export type StripePostIssuingCardholdersCompanyInput = {
  taxId?: InputMaybe<Scalars['String']>;
};

export type StripePostIssuingCardholdersDobIndividualInput = {
  day: Scalars['Int'];
  month: Scalars['Int'];
  year: Scalars['Int'];
};

export type StripePostIssuingCardholdersDocumentVerificationIndividualInput = {
  back?: InputMaybe<Scalars['String']>;
  front?: InputMaybe<Scalars['String']>;
};

export type StripePostIssuingCardholdersIndividualInput = {
  cardIssuing?: InputMaybe<StripePostIssuingCardholdersCardIssuingIndividualInput>;
  dob?: InputMaybe<StripePostIssuingCardholdersDobIndividualInput>;
  firstName?: InputMaybe<Scalars['String']>;
  lastName?: InputMaybe<Scalars['String']>;
  verification?: InputMaybe<StripePostIssuingCardholdersVerificationIndividualInput>;
};

export type StripePostIssuingCardholdersInput = {
  billing: StripePostIssuingCardholdersBillingInput;
  company?: InputMaybe<StripePostIssuingCardholdersCompanyInput>;
  email?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  individual?: InputMaybe<StripePostIssuingCardholdersIndividualInput>;
  metadata?: InputMaybe<Scalars['JSON']>;
  name: Scalars['String'];
  phoneNumber?: InputMaybe<Scalars['String']>;
  spendingControls?: InputMaybe<StripePostIssuingCardholdersSpendingControlsInput>;
  status?: InputMaybe<StripePostIssuingCardholdersStatus>;
  type?: InputMaybe<StripePostIssuingCardholdersType>;
};

export enum StripePostIssuingCardholdersIntervalSpendingLimitsSpendingControls {
  AllTime = 'ALL_TIME',
  Daily = 'DAILY',
  Monthly = 'MONTHLY',
  PerAuthorization = 'PER_AUTHORIZATION',
  Weekly = 'WEEKLY',
  Yearly = 'YEARLY'
}

export type StripePostIssuingCardholdersSpendingControlsInput = {
  allowedCategories?: InputMaybe<Array<StripePostIssuingCardholdersAllowedCategoriesSpendingControls>>;
  blockedCategories?: InputMaybe<Array<StripePostIssuingCardholdersBlockedCategoriesSpendingControls>>;
  spendingLimits?: InputMaybe<Array<StripePostIssuingCardholdersSpendingLimitsSpendingControlsInput>>;
  spendingLimitsCurrency?: InputMaybe<Scalars['String']>;
};

export type StripePostIssuingCardholdersSpendingLimitsSpendingControlsInput = {
  amount: Scalars['Int'];
  categories?: InputMaybe<Array<StripePostIssuingCardholdersCategoriesSpendingLimitsSpendingControls>>;
  interval: StripePostIssuingCardholdersIntervalSpendingLimitsSpendingControls;
};

export enum StripePostIssuingCardholdersStatus {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE'
}

export enum StripePostIssuingCardholdersType {
  Company = 'COMPANY',
  Individual = 'INDIVIDUAL'
}

export type StripePostIssuingCardholdersUserTermsAcceptanceCardIssuingIndividualInput = {
  date?: InputMaybe<Scalars['Int']>;
  ip?: InputMaybe<Scalars['String']>;
  userAgent?: InputMaybe<Scalars['String']>;
};

export type StripePostIssuingCardholdersVerificationIndividualInput = {
  document?: InputMaybe<StripePostIssuingCardholdersDocumentVerificationIndividualInput>;
};

export type StripePostIssuingCardsAddressShippingInput = {
  city: Scalars['String'];
  country: Scalars['String'];
  line1: Scalars['String'];
  line2?: InputMaybe<Scalars['String']>;
  postalCode: Scalars['String'];
  state?: InputMaybe<Scalars['String']>;
};

export enum StripePostIssuingCardsAllowedCategoriesSpendingControls {
  AccountingBookkeepingServices = 'ACCOUNTING_BOOKKEEPING_SERVICES',
  AcRefrigerationRepair = 'AC_REFRIGERATION_REPAIR',
  AdvertisingServices = 'ADVERTISING_SERVICES',
  AgriculturalCooperative = 'AGRICULTURAL_COOPERATIVE',
  AirlinesAirCarriers = 'AIRLINES_AIR_CARRIERS',
  AirportsFlyingFields = 'AIRPORTS_FLYING_FIELDS',
  AmbulanceServices = 'AMBULANCE_SERVICES',
  AmusementParksCarnivals = 'AMUSEMENT_PARKS_CARNIVALS',
  AntiqueReproductions = 'ANTIQUE_REPRODUCTIONS',
  AntiqueShops = 'ANTIQUE_SHOPS',
  Aquariums = 'AQUARIUMS',
  ArchitecturalSurveyingServices = 'ARCHITECTURAL_SURVEYING_SERVICES',
  ArtistsSupplyAndCraftShops = 'ARTISTS_SUPPLY_AND_CRAFT_SHOPS',
  ArtDealersAndGalleries = 'ART_DEALERS_AND_GALLERIES',
  AutomatedCashDisburse = 'AUTOMATED_CASH_DISBURSE',
  AutomatedFuelDispensers = 'AUTOMATED_FUEL_DISPENSERS',
  AutomobileAssociations = 'AUTOMOBILE_ASSOCIATIONS',
  AutomotivePartsAndAccessoriesStores = 'AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES',
  AutomotiveTireStores = 'AUTOMOTIVE_TIRE_STORES',
  AutoAndHomeSupplyStores = 'AUTO_AND_HOME_SUPPLY_STORES',
  AutoBodyRepairShops = 'AUTO_BODY_REPAIR_SHOPS',
  AutoPaintShops = 'AUTO_PAINT_SHOPS',
  AutoServiceShops = 'AUTO_SERVICE_SHOPS',
  BailAndBondPayments = 'BAIL_AND_BOND_PAYMENTS',
  Bakeries = 'BAKERIES',
  BandsOrchestras = 'BANDS_ORCHESTRAS',
  BarberAndBeautyShops = 'BARBER_AND_BEAUTY_SHOPS',
  BettingCasinoGambling = 'BETTING_CASINO_GAMBLING',
  BicycleShops = 'BICYCLE_SHOPS',
  BilliardPoolEstablishments = 'BILLIARD_POOL_ESTABLISHMENTS',
  BoatDealers = 'BOAT_DEALERS',
  BoatRentalsAndLeases = 'BOAT_RENTALS_AND_LEASES',
  BooksPeriodicalsAndNewspapers = 'BOOKS_PERIODICALS_AND_NEWSPAPERS',
  BookStores = 'BOOK_STORES',
  BowlingAlleys = 'BOWLING_ALLEYS',
  BusinessSecretarialSchools = 'BUSINESS_SECRETARIAL_SCHOOLS',
  BusLines = 'BUS_LINES',
  BuyingShoppingServices = 'BUYING_SHOPPING_SERVICES',
  CableSatelliteAndOtherPayTelevisionAndRadio = 'CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO',
  CameraAndPhotographicSupplyStores = 'CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES',
  CandyNutAndConfectioneryStores = 'CANDY_NUT_AND_CONFECTIONERY_STORES',
  CarpentryServices = 'CARPENTRY_SERVICES',
  CarpetUpholsteryCleaning = 'CARPET_UPHOLSTERY_CLEANING',
  CarAndTruckDealersNewUsed = 'CAR_AND_TRUCK_DEALERS_NEW_USED',
  CarAndTruckDealersUsedOnly = 'CAR_AND_TRUCK_DEALERS_USED_ONLY',
  CarRentalAgencies = 'CAR_RENTAL_AGENCIES',
  CarWashes = 'CAR_WASHES',
  Caterers = 'CATERERS',
  CharitableAndSocialServiceOrganizationsFundraising = 'CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING',
  ChemicalsAndAlliedProducts = 'CHEMICALS_AND_ALLIED_PRODUCTS',
  ChildrensAndInfantsWearStores = 'CHILDRENS_AND_INFANTS_WEAR_STORES',
  ChildCareServices = 'CHILD_CARE_SERVICES',
  ChiropodistsPodiatrists = 'CHIROPODISTS_PODIATRISTS',
  Chiropractors = 'CHIROPRACTORS',
  CigarStoresAndStands = 'CIGAR_STORES_AND_STANDS',
  CivicSocialFraternalAssociations = 'CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS',
  CleaningAndMaintenance = 'CLEANING_AND_MAINTENANCE',
  ClothingRental = 'CLOTHING_RENTAL',
  CollegesUniversities = 'COLLEGES_UNIVERSITIES',
  CommercialEquipment = 'COMMERCIAL_EQUIPMENT',
  CommercialFootwear = 'COMMERCIAL_FOOTWEAR',
  CommercialPhotographyArtAndGraphics = 'COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS',
  CommuterTransportAndFerries = 'COMMUTER_TRANSPORT_AND_FERRIES',
  ComputersPeripheralsAndSoftware = 'COMPUTERS_PERIPHERALS_AND_SOFTWARE',
  ComputerNetworkServices = 'COMPUTER_NETWORK_SERVICES',
  ComputerProgramming = 'COMPUTER_PROGRAMMING',
  ComputerRepair = 'COMPUTER_REPAIR',
  ComputerSoftwareStores = 'COMPUTER_SOFTWARE_STORES',
  ConcreteWorkServices = 'CONCRETE_WORK_SERVICES',
  ConstructionMaterials = 'CONSTRUCTION_MATERIALS',
  ConsultingPublicRelations = 'CONSULTING_PUBLIC_RELATIONS',
  CorrespondenceSchools = 'CORRESPONDENCE_SCHOOLS',
  CosmeticStores = 'COSMETIC_STORES',
  CounselingServices = 'COUNSELING_SERVICES',
  CountryClubs = 'COUNTRY_CLUBS',
  CourierServices = 'COURIER_SERVICES',
  CourtCosts = 'COURT_COSTS',
  CreditReportingAgencies = 'CREDIT_REPORTING_AGENCIES',
  CruiseLines = 'CRUISE_LINES',
  DairyProductsStores = 'DAIRY_PRODUCTS_STORES',
  DanceHallStudiosSchools = 'DANCE_HALL_STUDIOS_SCHOOLS',
  DatingEscortServices = 'DATING_ESCORT_SERVICES',
  DentistsOrthodontists = 'DENTISTS_ORTHODONTISTS',
  DepartmentStores = 'DEPARTMENT_STORES',
  DetectiveAgencies = 'DETECTIVE_AGENCIES',
  DigitalGoodsApplications = 'DIGITAL_GOODS_APPLICATIONS',
  DigitalGoodsGames = 'DIGITAL_GOODS_GAMES',
  DigitalGoodsLargeVolume = 'DIGITAL_GOODS_LARGE_VOLUME',
  DigitalGoodsMedia = 'DIGITAL_GOODS_MEDIA',
  DirectMarketingCatalogMerchant = 'DIRECT_MARKETING_CATALOG_MERCHANT',
  DirectMarketingCombinationCatalogAndRetailMerchant = 'DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT',
  DirectMarketingInboundTelemarketing = 'DIRECT_MARKETING_INBOUND_TELEMARKETING',
  DirectMarketingInsuranceServices = 'DIRECT_MARKETING_INSURANCE_SERVICES',
  DirectMarketingOther = 'DIRECT_MARKETING_OTHER',
  DirectMarketingOutboundTelemarketing = 'DIRECT_MARKETING_OUTBOUND_TELEMARKETING',
  DirectMarketingSubscription = 'DIRECT_MARKETING_SUBSCRIPTION',
  DirectMarketingTravel = 'DIRECT_MARKETING_TRAVEL',
  DiscountStores = 'DISCOUNT_STORES',
  Doctors = 'DOCTORS',
  DoorToDoorSales = 'DOOR_TO_DOOR_SALES',
  DraperyWindowCoveringAndUpholsteryStores = 'DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES',
  DrinkingPlaces = 'DRINKING_PLACES',
  DrugsDrugProprietariesAndDruggistSundries = 'DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES',
  DrugStoresAndPharmacies = 'DRUG_STORES_AND_PHARMACIES',
  DryCleaners = 'DRY_CLEANERS',
  DurableGoods = 'DURABLE_GOODS',
  DutyFreeStores = 'DUTY_FREE_STORES',
  EatingPlacesRestaurants = 'EATING_PLACES_RESTAURANTS',
  EducationalServices = 'EDUCATIONAL_SERVICES',
  ElectricalPartsAndEquipment = 'ELECTRICAL_PARTS_AND_EQUIPMENT',
  ElectricalServices = 'ELECTRICAL_SERVICES',
  ElectricRazorStores = 'ELECTRIC_RAZOR_STORES',
  ElectricVehicleCharging = 'ELECTRIC_VEHICLE_CHARGING',
  ElectronicsRepairShops = 'ELECTRONICS_REPAIR_SHOPS',
  ElectronicsStores = 'ELECTRONICS_STORES',
  ElementarySecondarySchools = 'ELEMENTARY_SECONDARY_SCHOOLS',
  EmergencyServicesGcasVisaUseOnly = 'EMERGENCY_SERVICES_GCAS_VISA_USE_ONLY',
  EmploymentTempAgencies = 'EMPLOYMENT_TEMP_AGENCIES',
  EquipmentRental = 'EQUIPMENT_RENTAL',
  ExterminatingServices = 'EXTERMINATING_SERVICES',
  FamilyClothingStores = 'FAMILY_CLOTHING_STORES',
  FastFoodRestaurants = 'FAST_FOOD_RESTAURANTS',
  FinancialInstitutions = 'FINANCIAL_INSTITUTIONS',
  FinesGovernmentAdministrativeEntities = 'FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES',
  FireplaceFireplaceScreensAndAccessoriesStores = 'FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES',
  FloorCoveringStores = 'FLOOR_COVERING_STORES',
  Florists = 'FLORISTS',
  FloristsSuppliesNurseryStockAndFlowers = 'FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS',
  FreezerAndLockerMeatProvisioners = 'FREEZER_AND_LOCKER_MEAT_PROVISIONERS',
  FuelDealersNonAutomotive = 'FUEL_DEALERS_NON_AUTOMOTIVE',
  FuneralServicesCrematories = 'FUNERAL_SERVICES_CREMATORIES',
  FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances = 'FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES',
  FurnitureRepairRefinishing = 'FURNITURE_REPAIR_REFINISHING',
  FurriersAndFurShops = 'FURRIERS_AND_FUR_SHOPS',
  GeneralServices = 'GENERAL_SERVICES',
  GiftCardNoveltyAndSouvenirShops = 'GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS',
  GlasswareCrystalStores = 'GLASSWARE_CRYSTAL_STORES',
  GlassPaintAndWallpaperStores = 'GLASS_PAINT_AND_WALLPAPER_STORES',
  GolfCoursesPublic = 'GOLF_COURSES_PUBLIC',
  GovernmentLicensedHorseDogRacingUsRegionOnly = 'GOVERNMENT_LICENSED_HORSE_DOG_RACING_US_REGION_ONLY',
  GovernmentLicensedOnlineCasionsOnlineGamblingUsRegionOnly = 'GOVERNMENT_LICENSED_ONLINE_CASIONS_ONLINE_GAMBLING_US_REGION_ONLY',
  GovernmentOwnedLotteriesNonUsRegion = 'GOVERNMENT_OWNED_LOTTERIES_NON_US_REGION',
  GovernmentOwnedLotteriesUsRegionOnly = 'GOVERNMENT_OWNED_LOTTERIES_US_REGION_ONLY',
  GovernmentServices = 'GOVERNMENT_SERVICES',
  GroceryStoresSupermarkets = 'GROCERY_STORES_SUPERMARKETS',
  HardwareEquipmentAndSupplies = 'HARDWARE_EQUIPMENT_AND_SUPPLIES',
  HardwareStores = 'HARDWARE_STORES',
  HealthAndBeautySpas = 'HEALTH_AND_BEAUTY_SPAS',
  HearingAidsSalesAndSupplies = 'HEARING_AIDS_SALES_AND_SUPPLIES',
  HeatingPlumbingAC = 'HEATING_PLUMBING_A_C',
  HobbyToyAndGameShops = 'HOBBY_TOY_AND_GAME_SHOPS',
  HomeSupplyWarehouseStores = 'HOME_SUPPLY_WAREHOUSE_STORES',
  Hospitals = 'HOSPITALS',
  HotelsMotelsAndResorts = 'HOTELS_MOTELS_AND_RESORTS',
  HouseholdApplianceStores = 'HOUSEHOLD_APPLIANCE_STORES',
  IndustrialSupplies = 'INDUSTRIAL_SUPPLIES',
  InformationRetrievalServices = 'INFORMATION_RETRIEVAL_SERVICES',
  InsuranceDefault = 'INSURANCE_DEFAULT',
  InsuranceUnderwritingPremiums = 'INSURANCE_UNDERWRITING_PREMIUMS',
  IntraCompanyPurchases = 'INTRA_COMPANY_PURCHASES',
  JewelryStoresWatchesClocksAndSilverwareStores = 'JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES',
  LandscapingServices = 'LANDSCAPING_SERVICES',
  Laundries = 'LAUNDRIES',
  LaundryCleaningServices = 'LAUNDRY_CLEANING_SERVICES',
  LegalServicesAttorneys = 'LEGAL_SERVICES_ATTORNEYS',
  LuggageAndLeatherGoodsStores = 'LUGGAGE_AND_LEATHER_GOODS_STORES',
  LumberBuildingMaterialsStores = 'LUMBER_BUILDING_MATERIALS_STORES',
  ManualCashDisburse = 'MANUAL_CASH_DISBURSE',
  MarinasServiceAndSupplies = 'MARINAS_SERVICE_AND_SUPPLIES',
  Marketplaces = 'MARKETPLACES',
  MasonryStoneworkAndPlaster = 'MASONRY_STONEWORK_AND_PLASTER',
  MassageParlors = 'MASSAGE_PARLORS',
  MedicalAndDentalLabs = 'MEDICAL_AND_DENTAL_LABS',
  MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies = 'MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES',
  MedicalServices = 'MEDICAL_SERVICES',
  MembershipOrganizations = 'MEMBERSHIP_ORGANIZATIONS',
  MensAndBoysClothingAndAccessoriesStores = 'MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES',
  MensWomensClothingStores = 'MENS_WOMENS_CLOTHING_STORES',
  MetalServiceCenters = 'METAL_SERVICE_CENTERS',
  Miscellaneous = 'MISCELLANEOUS',
  MiscellaneousApparelAndAccessoryShops = 'MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS',
  MiscellaneousAutoDealers = 'MISCELLANEOUS_AUTO_DEALERS',
  MiscellaneousBusinessServices = 'MISCELLANEOUS_BUSINESS_SERVICES',
  MiscellaneousFoodStores = 'MISCELLANEOUS_FOOD_STORES',
  MiscellaneousGeneralMerchandise = 'MISCELLANEOUS_GENERAL_MERCHANDISE',
  MiscellaneousGeneralServices = 'MISCELLANEOUS_GENERAL_SERVICES',
  MiscellaneousHomeFurnishingSpecialtyStores = 'MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES',
  MiscellaneousPublishingAndPrinting = 'MISCELLANEOUS_PUBLISHING_AND_PRINTING',
  MiscellaneousRecreationServices = 'MISCELLANEOUS_RECREATION_SERVICES',
  MiscellaneousRepairShops = 'MISCELLANEOUS_REPAIR_SHOPS',
  MiscellaneousSpecialtyRetail = 'MISCELLANEOUS_SPECIALTY_RETAIL',
  MobileHomeDealers = 'MOBILE_HOME_DEALERS',
  MotionPictureTheaters = 'MOTION_PICTURE_THEATERS',
  MotorcycleShopsAndDealers = 'MOTORCYCLE_SHOPS_AND_DEALERS',
  MotorcycleShopsDealers = 'MOTORCYCLE_SHOPS_DEALERS',
  MotorFreightCarriersAndTrucking = 'MOTOR_FREIGHT_CARRIERS_AND_TRUCKING',
  MotorHomesDealers = 'MOTOR_HOMES_DEALERS',
  MotorVehicleSuppliesAndNewParts = 'MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS',
  MusicStoresMusicalInstrumentsPianosAndSheetMusic = 'MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC',
  NewsDealersAndNewsstands = 'NEWS_DEALERS_AND_NEWSSTANDS',
  NondurableGoods = 'NONDURABLE_GOODS',
  NonFiMoneyOrders = 'NON_FI_MONEY_ORDERS',
  NonFiStoredValueCardPurchaseLoad = 'NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD',
  NurseriesLawnAndGardenSupplyStores = 'NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES',
  NursingPersonalCare = 'NURSING_PERSONAL_CARE',
  OfficeAndCommercialFurniture = 'OFFICE_AND_COMMERCIAL_FURNITURE',
  OpticiansEyeglasses = 'OPTICIANS_EYEGLASSES',
  OptometristsOphthalmologist = 'OPTOMETRISTS_OPHTHALMOLOGIST',
  OrthopedicGoodsProstheticDevices = 'ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES',
  Osteopaths = 'OSTEOPATHS',
  PackageStoresBeerWineAndLiquor = 'PACKAGE_STORES_BEER_WINE_AND_LIQUOR',
  PaintsVarnishesAndSupplies = 'PAINTS_VARNISHES_AND_SUPPLIES',
  ParkingLotsGarages = 'PARKING_LOTS_GARAGES',
  PassengerRailways = 'PASSENGER_RAILWAYS',
  PawnShops = 'PAWN_SHOPS',
  PetroleumAndPetroleumProducts = 'PETROLEUM_AND_PETROLEUM_PRODUCTS',
  PetShopsPetFoodAndSupplies = 'PET_SHOPS_PET_FOOD_AND_SUPPLIES',
  PhotographicPhotocopyMicrofilmEquipmentAndSupplies = 'PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES',
  PhotographicStudios = 'PHOTOGRAPHIC_STUDIOS',
  PhotoDeveloping = 'PHOTO_DEVELOPING',
  PictureVideoProduction = 'PICTURE_VIDEO_PRODUCTION',
  PieceGoodsNotionsAndOtherDryGoods = 'PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS',
  PlumbingHeatingEquipmentAndSupplies = 'PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES',
  PoliticalOrganizations = 'POLITICAL_ORGANIZATIONS',
  PostalServicesGovernmentOnly = 'POSTAL_SERVICES_GOVERNMENT_ONLY',
  PreciousStonesAndMetalsWatchesAndJewelry = 'PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY',
  ProfessionalServices = 'PROFESSIONAL_SERVICES',
  PublicWarehousingAndStorage = 'PUBLIC_WAREHOUSING_AND_STORAGE',
  QuickCopyReproAndBlueprint = 'QUICK_COPY_REPRO_AND_BLUEPRINT',
  Railroads = 'RAILROADS',
  RealEstateAgentsAndManagersRentals = 'REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS',
  RecordStores = 'RECORD_STORES',
  RecreationalVehicleRentals = 'RECREATIONAL_VEHICLE_RENTALS',
  ReligiousGoodsStores = 'RELIGIOUS_GOODS_STORES',
  ReligiousOrganizations = 'RELIGIOUS_ORGANIZATIONS',
  RoofingSidingSheetMetal = 'ROOFING_SIDING_SHEET_METAL',
  SecretarialSupportServices = 'SECRETARIAL_SUPPORT_SERVICES',
  SecurityBrokersDealers = 'SECURITY_BROKERS_DEALERS',
  ServiceStations = 'SERVICE_STATIONS',
  SewingNeedleworkFabricAndPieceGoodsStores = 'SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES',
  ShoeRepairHatCleaning = 'SHOE_REPAIR_HAT_CLEANING',
  ShoeStores = 'SHOE_STORES',
  SmallApplianceRepair = 'SMALL_APPLIANCE_REPAIR',
  SnowmobileDealers = 'SNOWMOBILE_DEALERS',
  SpecialtyCleaning = 'SPECIALTY_CLEANING',
  SpecialTradeServices = 'SPECIAL_TRADE_SERVICES',
  SportingGoodsStores = 'SPORTING_GOODS_STORES',
  SportingRecreationCamps = 'SPORTING_RECREATION_CAMPS',
  SportsAndRidingApparelStores = 'SPORTS_AND_RIDING_APPAREL_STORES',
  SportsClubsFields = 'SPORTS_CLUBS_FIELDS',
  StampAndCoinStores = 'STAMP_AND_COIN_STORES',
  StationaryOfficeSuppliesPrintingAndWritingPaper = 'STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER',
  StationeryStoresOfficeAndSchoolSupplyStores = 'STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES',
  SwimmingPoolsSales = 'SWIMMING_POOLS_SALES',
  TailorsAlterations = 'TAILORS_ALTERATIONS',
  TaxicabsLimousines = 'TAXICABS_LIMOUSINES',
  TaxPaymentsGovernmentAgencies = 'TAX_PAYMENTS_GOVERNMENT_AGENCIES',
  TaxPreparationServices = 'TAX_PREPARATION_SERVICES',
  TelecommunicationEquipmentAndTelephoneSales = 'TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES',
  TelecommunicationServices = 'TELECOMMUNICATION_SERVICES',
  TelegraphServices = 'TELEGRAPH_SERVICES',
  TentAndAwningShops = 'TENT_AND_AWNING_SHOPS',
  TestingLaboratories = 'TESTING_LABORATORIES',
  TheatricalTicketAgencies = 'THEATRICAL_TICKET_AGENCIES',
  Timeshares = 'TIMESHARES',
  TireRetreadingAndRepair = 'TIRE_RETREADING_AND_REPAIR',
  TollsBridgeFees = 'TOLLS_BRIDGE_FEES',
  TouristAttractionsAndExhibits = 'TOURIST_ATTRACTIONS_AND_EXHIBITS',
  TowingServices = 'TOWING_SERVICES',
  TrailerParksCampgrounds = 'TRAILER_PARKS_CAMPGROUNDS',
  TransportationServices = 'TRANSPORTATION_SERVICES',
  TravelAgenciesTourOperators = 'TRAVEL_AGENCIES_TOUR_OPERATORS',
  TruckStopIteration = 'TRUCK_STOP_ITERATION',
  TruckUtilityTrailerRentals = 'TRUCK_UTILITY_TRAILER_RENTALS',
  TypesettingPlateMakingAndRelatedServices = 'TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES',
  TypewriterStores = 'TYPEWRITER_STORES',
  TUiTravelGermany = 'T_UI_TRAVEL_GERMANY',
  UniformsCommercialClothing = 'UNIFORMS_COMMERCIAL_CLOTHING',
  UsedMerchandiseAndSecondhandStores = 'USED_MERCHANDISE_AND_SECONDHAND_STORES',
  Utilities = 'UTILITIES',
  USFederalGovernmentAgenciesOrDepartments = 'U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS',
  VarietyStores = 'VARIETY_STORES',
  VeterinaryServices = 'VETERINARY_SERVICES',
  VideoAmusementGameSupplies = 'VIDEO_AMUSEMENT_GAME_SUPPLIES',
  VideoGameArcades = 'VIDEO_GAME_ARCADES',
  VideoTapeRentalStores = 'VIDEO_TAPE_RENTAL_STORES',
  VocationalTradeSchools = 'VOCATIONAL_TRADE_SCHOOLS',
  WatchJewelryRepair = 'WATCH_JEWELRY_REPAIR',
  WeldingRepair = 'WELDING_REPAIR',
  WholesaleClubs = 'WHOLESALE_CLUBS',
  WigAndToupeeStores = 'WIG_AND_TOUPEE_STORES',
  WiresMoneyOrders = 'WIRES_MONEY_ORDERS',
  WomensAccessoryAndSpecialtyShops = 'WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS',
  WomensReadyToWearStores = 'WOMENS_READY_TO_WEAR_STORES',
  WreckingAndSalvageYards = 'WRECKING_AND_SALVAGE_YARDS'
}

export enum StripePostIssuingCardsBlockedCategoriesSpendingControls {
  AccountingBookkeepingServices = 'ACCOUNTING_BOOKKEEPING_SERVICES',
  AcRefrigerationRepair = 'AC_REFRIGERATION_REPAIR',
  AdvertisingServices = 'ADVERTISING_SERVICES',
  AgriculturalCooperative = 'AGRICULTURAL_COOPERATIVE',
  AirlinesAirCarriers = 'AIRLINES_AIR_CARRIERS',
  AirportsFlyingFields = 'AIRPORTS_FLYING_FIELDS',
  AmbulanceServices = 'AMBULANCE_SERVICES',
  AmusementParksCarnivals = 'AMUSEMENT_PARKS_CARNIVALS',
  AntiqueReproductions = 'ANTIQUE_REPRODUCTIONS',
  AntiqueShops = 'ANTIQUE_SHOPS',
  Aquariums = 'AQUARIUMS',
  ArchitecturalSurveyingServices = 'ARCHITECTURAL_SURVEYING_SERVICES',
  ArtistsSupplyAndCraftShops = 'ARTISTS_SUPPLY_AND_CRAFT_SHOPS',
  ArtDealersAndGalleries = 'ART_DEALERS_AND_GALLERIES',
  AutomatedCashDisburse = 'AUTOMATED_CASH_DISBURSE',
  AutomatedFuelDispensers = 'AUTOMATED_FUEL_DISPENSERS',
  AutomobileAssociations = 'AUTOMOBILE_ASSOCIATIONS',
  AutomotivePartsAndAccessoriesStores = 'AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES',
  AutomotiveTireStores = 'AUTOMOTIVE_TIRE_STORES',
  AutoAndHomeSupplyStores = 'AUTO_AND_HOME_SUPPLY_STORES',
  AutoBodyRepairShops = 'AUTO_BODY_REPAIR_SHOPS',
  AutoPaintShops = 'AUTO_PAINT_SHOPS',
  AutoServiceShops = 'AUTO_SERVICE_SHOPS',
  BailAndBondPayments = 'BAIL_AND_BOND_PAYMENTS',
  Bakeries = 'BAKERIES',
  BandsOrchestras = 'BANDS_ORCHESTRAS',
  BarberAndBeautyShops = 'BARBER_AND_BEAUTY_SHOPS',
  BettingCasinoGambling = 'BETTING_CASINO_GAMBLING',
  BicycleShops = 'BICYCLE_SHOPS',
  BilliardPoolEstablishments = 'BILLIARD_POOL_ESTABLISHMENTS',
  BoatDealers = 'BOAT_DEALERS',
  BoatRentalsAndLeases = 'BOAT_RENTALS_AND_LEASES',
  BooksPeriodicalsAndNewspapers = 'BOOKS_PERIODICALS_AND_NEWSPAPERS',
  BookStores = 'BOOK_STORES',
  BowlingAlleys = 'BOWLING_ALLEYS',
  BusinessSecretarialSchools = 'BUSINESS_SECRETARIAL_SCHOOLS',
  BusLines = 'BUS_LINES',
  BuyingShoppingServices = 'BUYING_SHOPPING_SERVICES',
  CableSatelliteAndOtherPayTelevisionAndRadio = 'CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO',
  CameraAndPhotographicSupplyStores = 'CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES',
  CandyNutAndConfectioneryStores = 'CANDY_NUT_AND_CONFECTIONERY_STORES',
  CarpentryServices = 'CARPENTRY_SERVICES',
  CarpetUpholsteryCleaning = 'CARPET_UPHOLSTERY_CLEANING',
  CarAndTruckDealersNewUsed = 'CAR_AND_TRUCK_DEALERS_NEW_USED',
  CarAndTruckDealersUsedOnly = 'CAR_AND_TRUCK_DEALERS_USED_ONLY',
  CarRentalAgencies = 'CAR_RENTAL_AGENCIES',
  CarWashes = 'CAR_WASHES',
  Caterers = 'CATERERS',
  CharitableAndSocialServiceOrganizationsFundraising = 'CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING',
  ChemicalsAndAlliedProducts = 'CHEMICALS_AND_ALLIED_PRODUCTS',
  ChildrensAndInfantsWearStores = 'CHILDRENS_AND_INFANTS_WEAR_STORES',
  ChildCareServices = 'CHILD_CARE_SERVICES',
  ChiropodistsPodiatrists = 'CHIROPODISTS_PODIATRISTS',
  Chiropractors = 'CHIROPRACTORS',
  CigarStoresAndStands = 'CIGAR_STORES_AND_STANDS',
  CivicSocialFraternalAssociations = 'CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS',
  CleaningAndMaintenance = 'CLEANING_AND_MAINTENANCE',
  ClothingRental = 'CLOTHING_RENTAL',
  CollegesUniversities = 'COLLEGES_UNIVERSITIES',
  CommercialEquipment = 'COMMERCIAL_EQUIPMENT',
  CommercialFootwear = 'COMMERCIAL_FOOTWEAR',
  CommercialPhotographyArtAndGraphics = 'COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS',
  CommuterTransportAndFerries = 'COMMUTER_TRANSPORT_AND_FERRIES',
  ComputersPeripheralsAndSoftware = 'COMPUTERS_PERIPHERALS_AND_SOFTWARE',
  ComputerNetworkServices = 'COMPUTER_NETWORK_SERVICES',
  ComputerProgramming = 'COMPUTER_PROGRAMMING',
  ComputerRepair = 'COMPUTER_REPAIR',
  ComputerSoftwareStores = 'COMPUTER_SOFTWARE_STORES',
  ConcreteWorkServices = 'CONCRETE_WORK_SERVICES',
  ConstructionMaterials = 'CONSTRUCTION_MATERIALS',
  ConsultingPublicRelations = 'CONSULTING_PUBLIC_RELATIONS',
  CorrespondenceSchools = 'CORRESPONDENCE_SCHOOLS',
  CosmeticStores = 'COSMETIC_STORES',
  CounselingServices = 'COUNSELING_SERVICES',
  CountryClubs = 'COUNTRY_CLUBS',
  CourierServices = 'COURIER_SERVICES',
  CourtCosts = 'COURT_COSTS',
  CreditReportingAgencies = 'CREDIT_REPORTING_AGENCIES',
  CruiseLines = 'CRUISE_LINES',
  DairyProductsStores = 'DAIRY_PRODUCTS_STORES',
  DanceHallStudiosSchools = 'DANCE_HALL_STUDIOS_SCHOOLS',
  DatingEscortServices = 'DATING_ESCORT_SERVICES',
  DentistsOrthodontists = 'DENTISTS_ORTHODONTISTS',
  DepartmentStores = 'DEPARTMENT_STORES',
  DetectiveAgencies = 'DETECTIVE_AGENCIES',
  DigitalGoodsApplications = 'DIGITAL_GOODS_APPLICATIONS',
  DigitalGoodsGames = 'DIGITAL_GOODS_GAMES',
  DigitalGoodsLargeVolume = 'DIGITAL_GOODS_LARGE_VOLUME',
  DigitalGoodsMedia = 'DIGITAL_GOODS_MEDIA',
  DirectMarketingCatalogMerchant = 'DIRECT_MARKETING_CATALOG_MERCHANT',
  DirectMarketingCombinationCatalogAndRetailMerchant = 'DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT',
  DirectMarketingInboundTelemarketing = 'DIRECT_MARKETING_INBOUND_TELEMARKETING',
  DirectMarketingInsuranceServices = 'DIRECT_MARKETING_INSURANCE_SERVICES',
  DirectMarketingOther = 'DIRECT_MARKETING_OTHER',
  DirectMarketingOutboundTelemarketing = 'DIRECT_MARKETING_OUTBOUND_TELEMARKETING',
  DirectMarketingSubscription = 'DIRECT_MARKETING_SUBSCRIPTION',
  DirectMarketingTravel = 'DIRECT_MARKETING_TRAVEL',
  DiscountStores = 'DISCOUNT_STORES',
  Doctors = 'DOCTORS',
  DoorToDoorSales = 'DOOR_TO_DOOR_SALES',
  DraperyWindowCoveringAndUpholsteryStores = 'DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES',
  DrinkingPlaces = 'DRINKING_PLACES',
  DrugsDrugProprietariesAndDruggistSundries = 'DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES',
  DrugStoresAndPharmacies = 'DRUG_STORES_AND_PHARMACIES',
  DryCleaners = 'DRY_CLEANERS',
  DurableGoods = 'DURABLE_GOODS',
  DutyFreeStores = 'DUTY_FREE_STORES',
  EatingPlacesRestaurants = 'EATING_PLACES_RESTAURANTS',
  EducationalServices = 'EDUCATIONAL_SERVICES',
  ElectricalPartsAndEquipment = 'ELECTRICAL_PARTS_AND_EQUIPMENT',
  ElectricalServices = 'ELECTRICAL_SERVICES',
  ElectricRazorStores = 'ELECTRIC_RAZOR_STORES',
  ElectricVehicleCharging = 'ELECTRIC_VEHICLE_CHARGING',
  ElectronicsRepairShops = 'ELECTRONICS_REPAIR_SHOPS',
  ElectronicsStores = 'ELECTRONICS_STORES',
  ElementarySecondarySchools = 'ELEMENTARY_SECONDARY_SCHOOLS',
  EmergencyServicesGcasVisaUseOnly = 'EMERGENCY_SERVICES_GCAS_VISA_USE_ONLY',
  EmploymentTempAgencies = 'EMPLOYMENT_TEMP_AGENCIES',
  EquipmentRental = 'EQUIPMENT_RENTAL',
  ExterminatingServices = 'EXTERMINATING_SERVICES',
  FamilyClothingStores = 'FAMILY_CLOTHING_STORES',
  FastFoodRestaurants = 'FAST_FOOD_RESTAURANTS',
  FinancialInstitutions = 'FINANCIAL_INSTITUTIONS',
  FinesGovernmentAdministrativeEntities = 'FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES',
  FireplaceFireplaceScreensAndAccessoriesStores = 'FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES',
  FloorCoveringStores = 'FLOOR_COVERING_STORES',
  Florists = 'FLORISTS',
  FloristsSuppliesNurseryStockAndFlowers = 'FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS',
  FreezerAndLockerMeatProvisioners = 'FREEZER_AND_LOCKER_MEAT_PROVISIONERS',
  FuelDealersNonAutomotive = 'FUEL_DEALERS_NON_AUTOMOTIVE',
  FuneralServicesCrematories = 'FUNERAL_SERVICES_CREMATORIES',
  FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances = 'FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES',
  FurnitureRepairRefinishing = 'FURNITURE_REPAIR_REFINISHING',
  FurriersAndFurShops = 'FURRIERS_AND_FUR_SHOPS',
  GeneralServices = 'GENERAL_SERVICES',
  GiftCardNoveltyAndSouvenirShops = 'GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS',
  GlasswareCrystalStores = 'GLASSWARE_CRYSTAL_STORES',
  GlassPaintAndWallpaperStores = 'GLASS_PAINT_AND_WALLPAPER_STORES',
  GolfCoursesPublic = 'GOLF_COURSES_PUBLIC',
  GovernmentLicensedHorseDogRacingUsRegionOnly = 'GOVERNMENT_LICENSED_HORSE_DOG_RACING_US_REGION_ONLY',
  GovernmentLicensedOnlineCasionsOnlineGamblingUsRegionOnly = 'GOVERNMENT_LICENSED_ONLINE_CASIONS_ONLINE_GAMBLING_US_REGION_ONLY',
  GovernmentOwnedLotteriesNonUsRegion = 'GOVERNMENT_OWNED_LOTTERIES_NON_US_REGION',
  GovernmentOwnedLotteriesUsRegionOnly = 'GOVERNMENT_OWNED_LOTTERIES_US_REGION_ONLY',
  GovernmentServices = 'GOVERNMENT_SERVICES',
  GroceryStoresSupermarkets = 'GROCERY_STORES_SUPERMARKETS',
  HardwareEquipmentAndSupplies = 'HARDWARE_EQUIPMENT_AND_SUPPLIES',
  HardwareStores = 'HARDWARE_STORES',
  HealthAndBeautySpas = 'HEALTH_AND_BEAUTY_SPAS',
  HearingAidsSalesAndSupplies = 'HEARING_AIDS_SALES_AND_SUPPLIES',
  HeatingPlumbingAC = 'HEATING_PLUMBING_A_C',
  HobbyToyAndGameShops = 'HOBBY_TOY_AND_GAME_SHOPS',
  HomeSupplyWarehouseStores = 'HOME_SUPPLY_WAREHOUSE_STORES',
  Hospitals = 'HOSPITALS',
  HotelsMotelsAndResorts = 'HOTELS_MOTELS_AND_RESORTS',
  HouseholdApplianceStores = 'HOUSEHOLD_APPLIANCE_STORES',
  IndustrialSupplies = 'INDUSTRIAL_SUPPLIES',
  InformationRetrievalServices = 'INFORMATION_RETRIEVAL_SERVICES',
  InsuranceDefault = 'INSURANCE_DEFAULT',
  InsuranceUnderwritingPremiums = 'INSURANCE_UNDERWRITING_PREMIUMS',
  IntraCompanyPurchases = 'INTRA_COMPANY_PURCHASES',
  JewelryStoresWatchesClocksAndSilverwareStores = 'JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES',
  LandscapingServices = 'LANDSCAPING_SERVICES',
  Laundries = 'LAUNDRIES',
  LaundryCleaningServices = 'LAUNDRY_CLEANING_SERVICES',
  LegalServicesAttorneys = 'LEGAL_SERVICES_ATTORNEYS',
  LuggageAndLeatherGoodsStores = 'LUGGAGE_AND_LEATHER_GOODS_STORES',
  LumberBuildingMaterialsStores = 'LUMBER_BUILDING_MATERIALS_STORES',
  ManualCashDisburse = 'MANUAL_CASH_DISBURSE',
  MarinasServiceAndSupplies = 'MARINAS_SERVICE_AND_SUPPLIES',
  Marketplaces = 'MARKETPLACES',
  MasonryStoneworkAndPlaster = 'MASONRY_STONEWORK_AND_PLASTER',
  MassageParlors = 'MASSAGE_PARLORS',
  MedicalAndDentalLabs = 'MEDICAL_AND_DENTAL_LABS',
  MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies = 'MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES',
  MedicalServices = 'MEDICAL_SERVICES',
  MembershipOrganizations = 'MEMBERSHIP_ORGANIZATIONS',
  MensAndBoysClothingAndAccessoriesStores = 'MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES',
  MensWomensClothingStores = 'MENS_WOMENS_CLOTHING_STORES',
  MetalServiceCenters = 'METAL_SERVICE_CENTERS',
  Miscellaneous = 'MISCELLANEOUS',
  MiscellaneousApparelAndAccessoryShops = 'MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS',
  MiscellaneousAutoDealers = 'MISCELLANEOUS_AUTO_DEALERS',
  MiscellaneousBusinessServices = 'MISCELLANEOUS_BUSINESS_SERVICES',
  MiscellaneousFoodStores = 'MISCELLANEOUS_FOOD_STORES',
  MiscellaneousGeneralMerchandise = 'MISCELLANEOUS_GENERAL_MERCHANDISE',
  MiscellaneousGeneralServices = 'MISCELLANEOUS_GENERAL_SERVICES',
  MiscellaneousHomeFurnishingSpecialtyStores = 'MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES',
  MiscellaneousPublishingAndPrinting = 'MISCELLANEOUS_PUBLISHING_AND_PRINTING',
  MiscellaneousRecreationServices = 'MISCELLANEOUS_RECREATION_SERVICES',
  MiscellaneousRepairShops = 'MISCELLANEOUS_REPAIR_SHOPS',
  MiscellaneousSpecialtyRetail = 'MISCELLANEOUS_SPECIALTY_RETAIL',
  MobileHomeDealers = 'MOBILE_HOME_DEALERS',
  MotionPictureTheaters = 'MOTION_PICTURE_THEATERS',
  MotorcycleShopsAndDealers = 'MOTORCYCLE_SHOPS_AND_DEALERS',
  MotorcycleShopsDealers = 'MOTORCYCLE_SHOPS_DEALERS',
  MotorFreightCarriersAndTrucking = 'MOTOR_FREIGHT_CARRIERS_AND_TRUCKING',
  MotorHomesDealers = 'MOTOR_HOMES_DEALERS',
  MotorVehicleSuppliesAndNewParts = 'MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS',
  MusicStoresMusicalInstrumentsPianosAndSheetMusic = 'MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC',
  NewsDealersAndNewsstands = 'NEWS_DEALERS_AND_NEWSSTANDS',
  NondurableGoods = 'NONDURABLE_GOODS',
  NonFiMoneyOrders = 'NON_FI_MONEY_ORDERS',
  NonFiStoredValueCardPurchaseLoad = 'NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD',
  NurseriesLawnAndGardenSupplyStores = 'NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES',
  NursingPersonalCare = 'NURSING_PERSONAL_CARE',
  OfficeAndCommercialFurniture = 'OFFICE_AND_COMMERCIAL_FURNITURE',
  OpticiansEyeglasses = 'OPTICIANS_EYEGLASSES',
  OptometristsOphthalmologist = 'OPTOMETRISTS_OPHTHALMOLOGIST',
  OrthopedicGoodsProstheticDevices = 'ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES',
  Osteopaths = 'OSTEOPATHS',
  PackageStoresBeerWineAndLiquor = 'PACKAGE_STORES_BEER_WINE_AND_LIQUOR',
  PaintsVarnishesAndSupplies = 'PAINTS_VARNISHES_AND_SUPPLIES',
  ParkingLotsGarages = 'PARKING_LOTS_GARAGES',
  PassengerRailways = 'PASSENGER_RAILWAYS',
  PawnShops = 'PAWN_SHOPS',
  PetroleumAndPetroleumProducts = 'PETROLEUM_AND_PETROLEUM_PRODUCTS',
  PetShopsPetFoodAndSupplies = 'PET_SHOPS_PET_FOOD_AND_SUPPLIES',
  PhotographicPhotocopyMicrofilmEquipmentAndSupplies = 'PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES',
  PhotographicStudios = 'PHOTOGRAPHIC_STUDIOS',
  PhotoDeveloping = 'PHOTO_DEVELOPING',
  PictureVideoProduction = 'PICTURE_VIDEO_PRODUCTION',
  PieceGoodsNotionsAndOtherDryGoods = 'PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS',
  PlumbingHeatingEquipmentAndSupplies = 'PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES',
  PoliticalOrganizations = 'POLITICAL_ORGANIZATIONS',
  PostalServicesGovernmentOnly = 'POSTAL_SERVICES_GOVERNMENT_ONLY',
  PreciousStonesAndMetalsWatchesAndJewelry = 'PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY',
  ProfessionalServices = 'PROFESSIONAL_SERVICES',
  PublicWarehousingAndStorage = 'PUBLIC_WAREHOUSING_AND_STORAGE',
  QuickCopyReproAndBlueprint = 'QUICK_COPY_REPRO_AND_BLUEPRINT',
  Railroads = 'RAILROADS',
  RealEstateAgentsAndManagersRentals = 'REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS',
  RecordStores = 'RECORD_STORES',
  RecreationalVehicleRentals = 'RECREATIONAL_VEHICLE_RENTALS',
  ReligiousGoodsStores = 'RELIGIOUS_GOODS_STORES',
  ReligiousOrganizations = 'RELIGIOUS_ORGANIZATIONS',
  RoofingSidingSheetMetal = 'ROOFING_SIDING_SHEET_METAL',
  SecretarialSupportServices = 'SECRETARIAL_SUPPORT_SERVICES',
  SecurityBrokersDealers = 'SECURITY_BROKERS_DEALERS',
  ServiceStations = 'SERVICE_STATIONS',
  SewingNeedleworkFabricAndPieceGoodsStores = 'SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES',
  ShoeRepairHatCleaning = 'SHOE_REPAIR_HAT_CLEANING',
  ShoeStores = 'SHOE_STORES',
  SmallApplianceRepair = 'SMALL_APPLIANCE_REPAIR',
  SnowmobileDealers = 'SNOWMOBILE_DEALERS',
  SpecialtyCleaning = 'SPECIALTY_CLEANING',
  SpecialTradeServices = 'SPECIAL_TRADE_SERVICES',
  SportingGoodsStores = 'SPORTING_GOODS_STORES',
  SportingRecreationCamps = 'SPORTING_RECREATION_CAMPS',
  SportsAndRidingApparelStores = 'SPORTS_AND_RIDING_APPAREL_STORES',
  SportsClubsFields = 'SPORTS_CLUBS_FIELDS',
  StampAndCoinStores = 'STAMP_AND_COIN_STORES',
  StationaryOfficeSuppliesPrintingAndWritingPaper = 'STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER',
  StationeryStoresOfficeAndSchoolSupplyStores = 'STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES',
  SwimmingPoolsSales = 'SWIMMING_POOLS_SALES',
  TailorsAlterations = 'TAILORS_ALTERATIONS',
  TaxicabsLimousines = 'TAXICABS_LIMOUSINES',
  TaxPaymentsGovernmentAgencies = 'TAX_PAYMENTS_GOVERNMENT_AGENCIES',
  TaxPreparationServices = 'TAX_PREPARATION_SERVICES',
  TelecommunicationEquipmentAndTelephoneSales = 'TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES',
  TelecommunicationServices = 'TELECOMMUNICATION_SERVICES',
  TelegraphServices = 'TELEGRAPH_SERVICES',
  TentAndAwningShops = 'TENT_AND_AWNING_SHOPS',
  TestingLaboratories = 'TESTING_LABORATORIES',
  TheatricalTicketAgencies = 'THEATRICAL_TICKET_AGENCIES',
  Timeshares = 'TIMESHARES',
  TireRetreadingAndRepair = 'TIRE_RETREADING_AND_REPAIR',
  TollsBridgeFees = 'TOLLS_BRIDGE_FEES',
  TouristAttractionsAndExhibits = 'TOURIST_ATTRACTIONS_AND_EXHIBITS',
  TowingServices = 'TOWING_SERVICES',
  TrailerParksCampgrounds = 'TRAILER_PARKS_CAMPGROUNDS',
  TransportationServices = 'TRANSPORTATION_SERVICES',
  TravelAgenciesTourOperators = 'TRAVEL_AGENCIES_TOUR_OPERATORS',
  TruckStopIteration = 'TRUCK_STOP_ITERATION',
  TruckUtilityTrailerRentals = 'TRUCK_UTILITY_TRAILER_RENTALS',
  TypesettingPlateMakingAndRelatedServices = 'TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES',
  TypewriterStores = 'TYPEWRITER_STORES',
  TUiTravelGermany = 'T_UI_TRAVEL_GERMANY',
  UniformsCommercialClothing = 'UNIFORMS_COMMERCIAL_CLOTHING',
  UsedMerchandiseAndSecondhandStores = 'USED_MERCHANDISE_AND_SECONDHAND_STORES',
  Utilities = 'UTILITIES',
  USFederalGovernmentAgenciesOrDepartments = 'U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS',
  VarietyStores = 'VARIETY_STORES',
  VeterinaryServices = 'VETERINARY_SERVICES',
  VideoAmusementGameSupplies = 'VIDEO_AMUSEMENT_GAME_SUPPLIES',
  VideoGameArcades = 'VIDEO_GAME_ARCADES',
  VideoTapeRentalStores = 'VIDEO_TAPE_RENTAL_STORES',
  VocationalTradeSchools = 'VOCATIONAL_TRADE_SCHOOLS',
  WatchJewelryRepair = 'WATCH_JEWELRY_REPAIR',
  WeldingRepair = 'WELDING_REPAIR',
  WholesaleClubs = 'WHOLESALE_CLUBS',
  WigAndToupeeStores = 'WIG_AND_TOUPEE_STORES',
  WiresMoneyOrders = 'WIRES_MONEY_ORDERS',
  WomensAccessoryAndSpecialtyShops = 'WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS',
  WomensReadyToWearStores = 'WOMENS_READY_TO_WEAR_STORES',
  WreckingAndSalvageYards = 'WRECKING_AND_SALVAGE_YARDS'
}

export enum StripePostIssuingCardsCardAllowedCategoriesSpendingControls {
  AccountingBookkeepingServices = 'ACCOUNTING_BOOKKEEPING_SERVICES',
  AcRefrigerationRepair = 'AC_REFRIGERATION_REPAIR',
  AdvertisingServices = 'ADVERTISING_SERVICES',
  AgriculturalCooperative = 'AGRICULTURAL_COOPERATIVE',
  AirlinesAirCarriers = 'AIRLINES_AIR_CARRIERS',
  AirportsFlyingFields = 'AIRPORTS_FLYING_FIELDS',
  AmbulanceServices = 'AMBULANCE_SERVICES',
  AmusementParksCarnivals = 'AMUSEMENT_PARKS_CARNIVALS',
  AntiqueReproductions = 'ANTIQUE_REPRODUCTIONS',
  AntiqueShops = 'ANTIQUE_SHOPS',
  Aquariums = 'AQUARIUMS',
  ArchitecturalSurveyingServices = 'ARCHITECTURAL_SURVEYING_SERVICES',
  ArtistsSupplyAndCraftShops = 'ARTISTS_SUPPLY_AND_CRAFT_SHOPS',
  ArtDealersAndGalleries = 'ART_DEALERS_AND_GALLERIES',
  AutomatedCashDisburse = 'AUTOMATED_CASH_DISBURSE',
  AutomatedFuelDispensers = 'AUTOMATED_FUEL_DISPENSERS',
  AutomobileAssociations = 'AUTOMOBILE_ASSOCIATIONS',
  AutomotivePartsAndAccessoriesStores = 'AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES',
  AutomotiveTireStores = 'AUTOMOTIVE_TIRE_STORES',
  AutoAndHomeSupplyStores = 'AUTO_AND_HOME_SUPPLY_STORES',
  AutoBodyRepairShops = 'AUTO_BODY_REPAIR_SHOPS',
  AutoPaintShops = 'AUTO_PAINT_SHOPS',
  AutoServiceShops = 'AUTO_SERVICE_SHOPS',
  BailAndBondPayments = 'BAIL_AND_BOND_PAYMENTS',
  Bakeries = 'BAKERIES',
  BandsOrchestras = 'BANDS_ORCHESTRAS',
  BarberAndBeautyShops = 'BARBER_AND_BEAUTY_SHOPS',
  BettingCasinoGambling = 'BETTING_CASINO_GAMBLING',
  BicycleShops = 'BICYCLE_SHOPS',
  BilliardPoolEstablishments = 'BILLIARD_POOL_ESTABLISHMENTS',
  BoatDealers = 'BOAT_DEALERS',
  BoatRentalsAndLeases = 'BOAT_RENTALS_AND_LEASES',
  BooksPeriodicalsAndNewspapers = 'BOOKS_PERIODICALS_AND_NEWSPAPERS',
  BookStores = 'BOOK_STORES',
  BowlingAlleys = 'BOWLING_ALLEYS',
  BusinessSecretarialSchools = 'BUSINESS_SECRETARIAL_SCHOOLS',
  BusLines = 'BUS_LINES',
  BuyingShoppingServices = 'BUYING_SHOPPING_SERVICES',
  CableSatelliteAndOtherPayTelevisionAndRadio = 'CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO',
  CameraAndPhotographicSupplyStores = 'CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES',
  CandyNutAndConfectioneryStores = 'CANDY_NUT_AND_CONFECTIONERY_STORES',
  CarpentryServices = 'CARPENTRY_SERVICES',
  CarpetUpholsteryCleaning = 'CARPET_UPHOLSTERY_CLEANING',
  CarAndTruckDealersNewUsed = 'CAR_AND_TRUCK_DEALERS_NEW_USED',
  CarAndTruckDealersUsedOnly = 'CAR_AND_TRUCK_DEALERS_USED_ONLY',
  CarRentalAgencies = 'CAR_RENTAL_AGENCIES',
  CarWashes = 'CAR_WASHES',
  Caterers = 'CATERERS',
  CharitableAndSocialServiceOrganizationsFundraising = 'CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING',
  ChemicalsAndAlliedProducts = 'CHEMICALS_AND_ALLIED_PRODUCTS',
  ChildrensAndInfantsWearStores = 'CHILDRENS_AND_INFANTS_WEAR_STORES',
  ChildCareServices = 'CHILD_CARE_SERVICES',
  ChiropodistsPodiatrists = 'CHIROPODISTS_PODIATRISTS',
  Chiropractors = 'CHIROPRACTORS',
  CigarStoresAndStands = 'CIGAR_STORES_AND_STANDS',
  CivicSocialFraternalAssociations = 'CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS',
  CleaningAndMaintenance = 'CLEANING_AND_MAINTENANCE',
  ClothingRental = 'CLOTHING_RENTAL',
  CollegesUniversities = 'COLLEGES_UNIVERSITIES',
  CommercialEquipment = 'COMMERCIAL_EQUIPMENT',
  CommercialFootwear = 'COMMERCIAL_FOOTWEAR',
  CommercialPhotographyArtAndGraphics = 'COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS',
  CommuterTransportAndFerries = 'COMMUTER_TRANSPORT_AND_FERRIES',
  ComputersPeripheralsAndSoftware = 'COMPUTERS_PERIPHERALS_AND_SOFTWARE',
  ComputerNetworkServices = 'COMPUTER_NETWORK_SERVICES',
  ComputerProgramming = 'COMPUTER_PROGRAMMING',
  ComputerRepair = 'COMPUTER_REPAIR',
  ComputerSoftwareStores = 'COMPUTER_SOFTWARE_STORES',
  ConcreteWorkServices = 'CONCRETE_WORK_SERVICES',
  ConstructionMaterials = 'CONSTRUCTION_MATERIALS',
  ConsultingPublicRelations = 'CONSULTING_PUBLIC_RELATIONS',
  CorrespondenceSchools = 'CORRESPONDENCE_SCHOOLS',
  CosmeticStores = 'COSMETIC_STORES',
  CounselingServices = 'COUNSELING_SERVICES',
  CountryClubs = 'COUNTRY_CLUBS',
  CourierServices = 'COURIER_SERVICES',
  CourtCosts = 'COURT_COSTS',
  CreditReportingAgencies = 'CREDIT_REPORTING_AGENCIES',
  CruiseLines = 'CRUISE_LINES',
  DairyProductsStores = 'DAIRY_PRODUCTS_STORES',
  DanceHallStudiosSchools = 'DANCE_HALL_STUDIOS_SCHOOLS',
  DatingEscortServices = 'DATING_ESCORT_SERVICES',
  DentistsOrthodontists = 'DENTISTS_ORTHODONTISTS',
  DepartmentStores = 'DEPARTMENT_STORES',
  DetectiveAgencies = 'DETECTIVE_AGENCIES',
  DigitalGoodsApplications = 'DIGITAL_GOODS_APPLICATIONS',
  DigitalGoodsGames = 'DIGITAL_GOODS_GAMES',
  DigitalGoodsLargeVolume = 'DIGITAL_GOODS_LARGE_VOLUME',
  DigitalGoodsMedia = 'DIGITAL_GOODS_MEDIA',
  DirectMarketingCatalogMerchant = 'DIRECT_MARKETING_CATALOG_MERCHANT',
  DirectMarketingCombinationCatalogAndRetailMerchant = 'DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT',
  DirectMarketingInboundTelemarketing = 'DIRECT_MARKETING_INBOUND_TELEMARKETING',
  DirectMarketingInsuranceServices = 'DIRECT_MARKETING_INSURANCE_SERVICES',
  DirectMarketingOther = 'DIRECT_MARKETING_OTHER',
  DirectMarketingOutboundTelemarketing = 'DIRECT_MARKETING_OUTBOUND_TELEMARKETING',
  DirectMarketingSubscription = 'DIRECT_MARKETING_SUBSCRIPTION',
  DirectMarketingTravel = 'DIRECT_MARKETING_TRAVEL',
  DiscountStores = 'DISCOUNT_STORES',
  Doctors = 'DOCTORS',
  DoorToDoorSales = 'DOOR_TO_DOOR_SALES',
  DraperyWindowCoveringAndUpholsteryStores = 'DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES',
  DrinkingPlaces = 'DRINKING_PLACES',
  DrugsDrugProprietariesAndDruggistSundries = 'DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES',
  DrugStoresAndPharmacies = 'DRUG_STORES_AND_PHARMACIES',
  DryCleaners = 'DRY_CLEANERS',
  DurableGoods = 'DURABLE_GOODS',
  DutyFreeStores = 'DUTY_FREE_STORES',
  EatingPlacesRestaurants = 'EATING_PLACES_RESTAURANTS',
  EducationalServices = 'EDUCATIONAL_SERVICES',
  ElectricalPartsAndEquipment = 'ELECTRICAL_PARTS_AND_EQUIPMENT',
  ElectricalServices = 'ELECTRICAL_SERVICES',
  ElectricRazorStores = 'ELECTRIC_RAZOR_STORES',
  ElectricVehicleCharging = 'ELECTRIC_VEHICLE_CHARGING',
  ElectronicsRepairShops = 'ELECTRONICS_REPAIR_SHOPS',
  ElectronicsStores = 'ELECTRONICS_STORES',
  ElementarySecondarySchools = 'ELEMENTARY_SECONDARY_SCHOOLS',
  EmergencyServicesGcasVisaUseOnly = 'EMERGENCY_SERVICES_GCAS_VISA_USE_ONLY',
  EmploymentTempAgencies = 'EMPLOYMENT_TEMP_AGENCIES',
  EquipmentRental = 'EQUIPMENT_RENTAL',
  ExterminatingServices = 'EXTERMINATING_SERVICES',
  FamilyClothingStores = 'FAMILY_CLOTHING_STORES',
  FastFoodRestaurants = 'FAST_FOOD_RESTAURANTS',
  FinancialInstitutions = 'FINANCIAL_INSTITUTIONS',
  FinesGovernmentAdministrativeEntities = 'FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES',
  FireplaceFireplaceScreensAndAccessoriesStores = 'FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES',
  FloorCoveringStores = 'FLOOR_COVERING_STORES',
  Florists = 'FLORISTS',
  FloristsSuppliesNurseryStockAndFlowers = 'FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS',
  FreezerAndLockerMeatProvisioners = 'FREEZER_AND_LOCKER_MEAT_PROVISIONERS',
  FuelDealersNonAutomotive = 'FUEL_DEALERS_NON_AUTOMOTIVE',
  FuneralServicesCrematories = 'FUNERAL_SERVICES_CREMATORIES',
  FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances = 'FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES',
  FurnitureRepairRefinishing = 'FURNITURE_REPAIR_REFINISHING',
  FurriersAndFurShops = 'FURRIERS_AND_FUR_SHOPS',
  GeneralServices = 'GENERAL_SERVICES',
  GiftCardNoveltyAndSouvenirShops = 'GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS',
  GlasswareCrystalStores = 'GLASSWARE_CRYSTAL_STORES',
  GlassPaintAndWallpaperStores = 'GLASS_PAINT_AND_WALLPAPER_STORES',
  GolfCoursesPublic = 'GOLF_COURSES_PUBLIC',
  GovernmentLicensedHorseDogRacingUsRegionOnly = 'GOVERNMENT_LICENSED_HORSE_DOG_RACING_US_REGION_ONLY',
  GovernmentLicensedOnlineCasionsOnlineGamblingUsRegionOnly = 'GOVERNMENT_LICENSED_ONLINE_CASIONS_ONLINE_GAMBLING_US_REGION_ONLY',
  GovernmentOwnedLotteriesNonUsRegion = 'GOVERNMENT_OWNED_LOTTERIES_NON_US_REGION',
  GovernmentOwnedLotteriesUsRegionOnly = 'GOVERNMENT_OWNED_LOTTERIES_US_REGION_ONLY',
  GovernmentServices = 'GOVERNMENT_SERVICES',
  GroceryStoresSupermarkets = 'GROCERY_STORES_SUPERMARKETS',
  HardwareEquipmentAndSupplies = 'HARDWARE_EQUIPMENT_AND_SUPPLIES',
  HardwareStores = 'HARDWARE_STORES',
  HealthAndBeautySpas = 'HEALTH_AND_BEAUTY_SPAS',
  HearingAidsSalesAndSupplies = 'HEARING_AIDS_SALES_AND_SUPPLIES',
  HeatingPlumbingAC = 'HEATING_PLUMBING_A_C',
  HobbyToyAndGameShops = 'HOBBY_TOY_AND_GAME_SHOPS',
  HomeSupplyWarehouseStores = 'HOME_SUPPLY_WAREHOUSE_STORES',
  Hospitals = 'HOSPITALS',
  HotelsMotelsAndResorts = 'HOTELS_MOTELS_AND_RESORTS',
  HouseholdApplianceStores = 'HOUSEHOLD_APPLIANCE_STORES',
  IndustrialSupplies = 'INDUSTRIAL_SUPPLIES',
  InformationRetrievalServices = 'INFORMATION_RETRIEVAL_SERVICES',
  InsuranceDefault = 'INSURANCE_DEFAULT',
  InsuranceUnderwritingPremiums = 'INSURANCE_UNDERWRITING_PREMIUMS',
  IntraCompanyPurchases = 'INTRA_COMPANY_PURCHASES',
  JewelryStoresWatchesClocksAndSilverwareStores = 'JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES',
  LandscapingServices = 'LANDSCAPING_SERVICES',
  Laundries = 'LAUNDRIES',
  LaundryCleaningServices = 'LAUNDRY_CLEANING_SERVICES',
  LegalServicesAttorneys = 'LEGAL_SERVICES_ATTORNEYS',
  LuggageAndLeatherGoodsStores = 'LUGGAGE_AND_LEATHER_GOODS_STORES',
  LumberBuildingMaterialsStores = 'LUMBER_BUILDING_MATERIALS_STORES',
  ManualCashDisburse = 'MANUAL_CASH_DISBURSE',
  MarinasServiceAndSupplies = 'MARINAS_SERVICE_AND_SUPPLIES',
  Marketplaces = 'MARKETPLACES',
  MasonryStoneworkAndPlaster = 'MASONRY_STONEWORK_AND_PLASTER',
  MassageParlors = 'MASSAGE_PARLORS',
  MedicalAndDentalLabs = 'MEDICAL_AND_DENTAL_LABS',
  MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies = 'MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES',
  MedicalServices = 'MEDICAL_SERVICES',
  MembershipOrganizations = 'MEMBERSHIP_ORGANIZATIONS',
  MensAndBoysClothingAndAccessoriesStores = 'MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES',
  MensWomensClothingStores = 'MENS_WOMENS_CLOTHING_STORES',
  MetalServiceCenters = 'METAL_SERVICE_CENTERS',
  Miscellaneous = 'MISCELLANEOUS',
  MiscellaneousApparelAndAccessoryShops = 'MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS',
  MiscellaneousAutoDealers = 'MISCELLANEOUS_AUTO_DEALERS',
  MiscellaneousBusinessServices = 'MISCELLANEOUS_BUSINESS_SERVICES',
  MiscellaneousFoodStores = 'MISCELLANEOUS_FOOD_STORES',
  MiscellaneousGeneralMerchandise = 'MISCELLANEOUS_GENERAL_MERCHANDISE',
  MiscellaneousGeneralServices = 'MISCELLANEOUS_GENERAL_SERVICES',
  MiscellaneousHomeFurnishingSpecialtyStores = 'MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES',
  MiscellaneousPublishingAndPrinting = 'MISCELLANEOUS_PUBLISHING_AND_PRINTING',
  MiscellaneousRecreationServices = 'MISCELLANEOUS_RECREATION_SERVICES',
  MiscellaneousRepairShops = 'MISCELLANEOUS_REPAIR_SHOPS',
  MiscellaneousSpecialtyRetail = 'MISCELLANEOUS_SPECIALTY_RETAIL',
  MobileHomeDealers = 'MOBILE_HOME_DEALERS',
  MotionPictureTheaters = 'MOTION_PICTURE_THEATERS',
  MotorcycleShopsAndDealers = 'MOTORCYCLE_SHOPS_AND_DEALERS',
  MotorcycleShopsDealers = 'MOTORCYCLE_SHOPS_DEALERS',
  MotorFreightCarriersAndTrucking = 'MOTOR_FREIGHT_CARRIERS_AND_TRUCKING',
  MotorHomesDealers = 'MOTOR_HOMES_DEALERS',
  MotorVehicleSuppliesAndNewParts = 'MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS',
  MusicStoresMusicalInstrumentsPianosAndSheetMusic = 'MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC',
  NewsDealersAndNewsstands = 'NEWS_DEALERS_AND_NEWSSTANDS',
  NondurableGoods = 'NONDURABLE_GOODS',
  NonFiMoneyOrders = 'NON_FI_MONEY_ORDERS',
  NonFiStoredValueCardPurchaseLoad = 'NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD',
  NurseriesLawnAndGardenSupplyStores = 'NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES',
  NursingPersonalCare = 'NURSING_PERSONAL_CARE',
  OfficeAndCommercialFurniture = 'OFFICE_AND_COMMERCIAL_FURNITURE',
  OpticiansEyeglasses = 'OPTICIANS_EYEGLASSES',
  OptometristsOphthalmologist = 'OPTOMETRISTS_OPHTHALMOLOGIST',
  OrthopedicGoodsProstheticDevices = 'ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES',
  Osteopaths = 'OSTEOPATHS',
  PackageStoresBeerWineAndLiquor = 'PACKAGE_STORES_BEER_WINE_AND_LIQUOR',
  PaintsVarnishesAndSupplies = 'PAINTS_VARNISHES_AND_SUPPLIES',
  ParkingLotsGarages = 'PARKING_LOTS_GARAGES',
  PassengerRailways = 'PASSENGER_RAILWAYS',
  PawnShops = 'PAWN_SHOPS',
  PetroleumAndPetroleumProducts = 'PETROLEUM_AND_PETROLEUM_PRODUCTS',
  PetShopsPetFoodAndSupplies = 'PET_SHOPS_PET_FOOD_AND_SUPPLIES',
  PhotographicPhotocopyMicrofilmEquipmentAndSupplies = 'PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES',
  PhotographicStudios = 'PHOTOGRAPHIC_STUDIOS',
  PhotoDeveloping = 'PHOTO_DEVELOPING',
  PictureVideoProduction = 'PICTURE_VIDEO_PRODUCTION',
  PieceGoodsNotionsAndOtherDryGoods = 'PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS',
  PlumbingHeatingEquipmentAndSupplies = 'PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES',
  PoliticalOrganizations = 'POLITICAL_ORGANIZATIONS',
  PostalServicesGovernmentOnly = 'POSTAL_SERVICES_GOVERNMENT_ONLY',
  PreciousStonesAndMetalsWatchesAndJewelry = 'PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY',
  ProfessionalServices = 'PROFESSIONAL_SERVICES',
  PublicWarehousingAndStorage = 'PUBLIC_WAREHOUSING_AND_STORAGE',
  QuickCopyReproAndBlueprint = 'QUICK_COPY_REPRO_AND_BLUEPRINT',
  Railroads = 'RAILROADS',
  RealEstateAgentsAndManagersRentals = 'REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS',
  RecordStores = 'RECORD_STORES',
  RecreationalVehicleRentals = 'RECREATIONAL_VEHICLE_RENTALS',
  ReligiousGoodsStores = 'RELIGIOUS_GOODS_STORES',
  ReligiousOrganizations = 'RELIGIOUS_ORGANIZATIONS',
  RoofingSidingSheetMetal = 'ROOFING_SIDING_SHEET_METAL',
  SecretarialSupportServices = 'SECRETARIAL_SUPPORT_SERVICES',
  SecurityBrokersDealers = 'SECURITY_BROKERS_DEALERS',
  ServiceStations = 'SERVICE_STATIONS',
  SewingNeedleworkFabricAndPieceGoodsStores = 'SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES',
  ShoeRepairHatCleaning = 'SHOE_REPAIR_HAT_CLEANING',
  ShoeStores = 'SHOE_STORES',
  SmallApplianceRepair = 'SMALL_APPLIANCE_REPAIR',
  SnowmobileDealers = 'SNOWMOBILE_DEALERS',
  SpecialtyCleaning = 'SPECIALTY_CLEANING',
  SpecialTradeServices = 'SPECIAL_TRADE_SERVICES',
  SportingGoodsStores = 'SPORTING_GOODS_STORES',
  SportingRecreationCamps = 'SPORTING_RECREATION_CAMPS',
  SportsAndRidingApparelStores = 'SPORTS_AND_RIDING_APPAREL_STORES',
  SportsClubsFields = 'SPORTS_CLUBS_FIELDS',
  StampAndCoinStores = 'STAMP_AND_COIN_STORES',
  StationaryOfficeSuppliesPrintingAndWritingPaper = 'STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER',
  StationeryStoresOfficeAndSchoolSupplyStores = 'STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES',
  SwimmingPoolsSales = 'SWIMMING_POOLS_SALES',
  TailorsAlterations = 'TAILORS_ALTERATIONS',
  TaxicabsLimousines = 'TAXICABS_LIMOUSINES',
  TaxPaymentsGovernmentAgencies = 'TAX_PAYMENTS_GOVERNMENT_AGENCIES',
  TaxPreparationServices = 'TAX_PREPARATION_SERVICES',
  TelecommunicationEquipmentAndTelephoneSales = 'TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES',
  TelecommunicationServices = 'TELECOMMUNICATION_SERVICES',
  TelegraphServices = 'TELEGRAPH_SERVICES',
  TentAndAwningShops = 'TENT_AND_AWNING_SHOPS',
  TestingLaboratories = 'TESTING_LABORATORIES',
  TheatricalTicketAgencies = 'THEATRICAL_TICKET_AGENCIES',
  Timeshares = 'TIMESHARES',
  TireRetreadingAndRepair = 'TIRE_RETREADING_AND_REPAIR',
  TollsBridgeFees = 'TOLLS_BRIDGE_FEES',
  TouristAttractionsAndExhibits = 'TOURIST_ATTRACTIONS_AND_EXHIBITS',
  TowingServices = 'TOWING_SERVICES',
  TrailerParksCampgrounds = 'TRAILER_PARKS_CAMPGROUNDS',
  TransportationServices = 'TRANSPORTATION_SERVICES',
  TravelAgenciesTourOperators = 'TRAVEL_AGENCIES_TOUR_OPERATORS',
  TruckStopIteration = 'TRUCK_STOP_ITERATION',
  TruckUtilityTrailerRentals = 'TRUCK_UTILITY_TRAILER_RENTALS',
  TypesettingPlateMakingAndRelatedServices = 'TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES',
  TypewriterStores = 'TYPEWRITER_STORES',
  TUiTravelGermany = 'T_UI_TRAVEL_GERMANY',
  UniformsCommercialClothing = 'UNIFORMS_COMMERCIAL_CLOTHING',
  UsedMerchandiseAndSecondhandStores = 'USED_MERCHANDISE_AND_SECONDHAND_STORES',
  Utilities = 'UTILITIES',
  USFederalGovernmentAgenciesOrDepartments = 'U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS',
  VarietyStores = 'VARIETY_STORES',
  VeterinaryServices = 'VETERINARY_SERVICES',
  VideoAmusementGameSupplies = 'VIDEO_AMUSEMENT_GAME_SUPPLIES',
  VideoGameArcades = 'VIDEO_GAME_ARCADES',
  VideoTapeRentalStores = 'VIDEO_TAPE_RENTAL_STORES',
  VocationalTradeSchools = 'VOCATIONAL_TRADE_SCHOOLS',
  WatchJewelryRepair = 'WATCH_JEWELRY_REPAIR',
  WeldingRepair = 'WELDING_REPAIR',
  WholesaleClubs = 'WHOLESALE_CLUBS',
  WigAndToupeeStores = 'WIG_AND_TOUPEE_STORES',
  WiresMoneyOrders = 'WIRES_MONEY_ORDERS',
  WomensAccessoryAndSpecialtyShops = 'WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS',
  WomensReadyToWearStores = 'WOMENS_READY_TO_WEAR_STORES',
  WreckingAndSalvageYards = 'WRECKING_AND_SALVAGE_YARDS'
}

export enum StripePostIssuingCardsCardBlockedCategoriesSpendingControls {
  AccountingBookkeepingServices = 'ACCOUNTING_BOOKKEEPING_SERVICES',
  AcRefrigerationRepair = 'AC_REFRIGERATION_REPAIR',
  AdvertisingServices = 'ADVERTISING_SERVICES',
  AgriculturalCooperative = 'AGRICULTURAL_COOPERATIVE',
  AirlinesAirCarriers = 'AIRLINES_AIR_CARRIERS',
  AirportsFlyingFields = 'AIRPORTS_FLYING_FIELDS',
  AmbulanceServices = 'AMBULANCE_SERVICES',
  AmusementParksCarnivals = 'AMUSEMENT_PARKS_CARNIVALS',
  AntiqueReproductions = 'ANTIQUE_REPRODUCTIONS',
  AntiqueShops = 'ANTIQUE_SHOPS',
  Aquariums = 'AQUARIUMS',
  ArchitecturalSurveyingServices = 'ARCHITECTURAL_SURVEYING_SERVICES',
  ArtistsSupplyAndCraftShops = 'ARTISTS_SUPPLY_AND_CRAFT_SHOPS',
  ArtDealersAndGalleries = 'ART_DEALERS_AND_GALLERIES',
  AutomatedCashDisburse = 'AUTOMATED_CASH_DISBURSE',
  AutomatedFuelDispensers = 'AUTOMATED_FUEL_DISPENSERS',
  AutomobileAssociations = 'AUTOMOBILE_ASSOCIATIONS',
  AutomotivePartsAndAccessoriesStores = 'AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES',
  AutomotiveTireStores = 'AUTOMOTIVE_TIRE_STORES',
  AutoAndHomeSupplyStores = 'AUTO_AND_HOME_SUPPLY_STORES',
  AutoBodyRepairShops = 'AUTO_BODY_REPAIR_SHOPS',
  AutoPaintShops = 'AUTO_PAINT_SHOPS',
  AutoServiceShops = 'AUTO_SERVICE_SHOPS',
  BailAndBondPayments = 'BAIL_AND_BOND_PAYMENTS',
  Bakeries = 'BAKERIES',
  BandsOrchestras = 'BANDS_ORCHESTRAS',
  BarberAndBeautyShops = 'BARBER_AND_BEAUTY_SHOPS',
  BettingCasinoGambling = 'BETTING_CASINO_GAMBLING',
  BicycleShops = 'BICYCLE_SHOPS',
  BilliardPoolEstablishments = 'BILLIARD_POOL_ESTABLISHMENTS',
  BoatDealers = 'BOAT_DEALERS',
  BoatRentalsAndLeases = 'BOAT_RENTALS_AND_LEASES',
  BooksPeriodicalsAndNewspapers = 'BOOKS_PERIODICALS_AND_NEWSPAPERS',
  BookStores = 'BOOK_STORES',
  BowlingAlleys = 'BOWLING_ALLEYS',
  BusinessSecretarialSchools = 'BUSINESS_SECRETARIAL_SCHOOLS',
  BusLines = 'BUS_LINES',
  BuyingShoppingServices = 'BUYING_SHOPPING_SERVICES',
  CableSatelliteAndOtherPayTelevisionAndRadio = 'CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO',
  CameraAndPhotographicSupplyStores = 'CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES',
  CandyNutAndConfectioneryStores = 'CANDY_NUT_AND_CONFECTIONERY_STORES',
  CarpentryServices = 'CARPENTRY_SERVICES',
  CarpetUpholsteryCleaning = 'CARPET_UPHOLSTERY_CLEANING',
  CarAndTruckDealersNewUsed = 'CAR_AND_TRUCK_DEALERS_NEW_USED',
  CarAndTruckDealersUsedOnly = 'CAR_AND_TRUCK_DEALERS_USED_ONLY',
  CarRentalAgencies = 'CAR_RENTAL_AGENCIES',
  CarWashes = 'CAR_WASHES',
  Caterers = 'CATERERS',
  CharitableAndSocialServiceOrganizationsFundraising = 'CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING',
  ChemicalsAndAlliedProducts = 'CHEMICALS_AND_ALLIED_PRODUCTS',
  ChildrensAndInfantsWearStores = 'CHILDRENS_AND_INFANTS_WEAR_STORES',
  ChildCareServices = 'CHILD_CARE_SERVICES',
  ChiropodistsPodiatrists = 'CHIROPODISTS_PODIATRISTS',
  Chiropractors = 'CHIROPRACTORS',
  CigarStoresAndStands = 'CIGAR_STORES_AND_STANDS',
  CivicSocialFraternalAssociations = 'CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS',
  CleaningAndMaintenance = 'CLEANING_AND_MAINTENANCE',
  ClothingRental = 'CLOTHING_RENTAL',
  CollegesUniversities = 'COLLEGES_UNIVERSITIES',
  CommercialEquipment = 'COMMERCIAL_EQUIPMENT',
  CommercialFootwear = 'COMMERCIAL_FOOTWEAR',
  CommercialPhotographyArtAndGraphics = 'COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS',
  CommuterTransportAndFerries = 'COMMUTER_TRANSPORT_AND_FERRIES',
  ComputersPeripheralsAndSoftware = 'COMPUTERS_PERIPHERALS_AND_SOFTWARE',
  ComputerNetworkServices = 'COMPUTER_NETWORK_SERVICES',
  ComputerProgramming = 'COMPUTER_PROGRAMMING',
  ComputerRepair = 'COMPUTER_REPAIR',
  ComputerSoftwareStores = 'COMPUTER_SOFTWARE_STORES',
  ConcreteWorkServices = 'CONCRETE_WORK_SERVICES',
  ConstructionMaterials = 'CONSTRUCTION_MATERIALS',
  ConsultingPublicRelations = 'CONSULTING_PUBLIC_RELATIONS',
  CorrespondenceSchools = 'CORRESPONDENCE_SCHOOLS',
  CosmeticStores = 'COSMETIC_STORES',
  CounselingServices = 'COUNSELING_SERVICES',
  CountryClubs = 'COUNTRY_CLUBS',
  CourierServices = 'COURIER_SERVICES',
  CourtCosts = 'COURT_COSTS',
  CreditReportingAgencies = 'CREDIT_REPORTING_AGENCIES',
  CruiseLines = 'CRUISE_LINES',
  DairyProductsStores = 'DAIRY_PRODUCTS_STORES',
  DanceHallStudiosSchools = 'DANCE_HALL_STUDIOS_SCHOOLS',
  DatingEscortServices = 'DATING_ESCORT_SERVICES',
  DentistsOrthodontists = 'DENTISTS_ORTHODONTISTS',
  DepartmentStores = 'DEPARTMENT_STORES',
  DetectiveAgencies = 'DETECTIVE_AGENCIES',
  DigitalGoodsApplications = 'DIGITAL_GOODS_APPLICATIONS',
  DigitalGoodsGames = 'DIGITAL_GOODS_GAMES',
  DigitalGoodsLargeVolume = 'DIGITAL_GOODS_LARGE_VOLUME',
  DigitalGoodsMedia = 'DIGITAL_GOODS_MEDIA',
  DirectMarketingCatalogMerchant = 'DIRECT_MARKETING_CATALOG_MERCHANT',
  DirectMarketingCombinationCatalogAndRetailMerchant = 'DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT',
  DirectMarketingInboundTelemarketing = 'DIRECT_MARKETING_INBOUND_TELEMARKETING',
  DirectMarketingInsuranceServices = 'DIRECT_MARKETING_INSURANCE_SERVICES',
  DirectMarketingOther = 'DIRECT_MARKETING_OTHER',
  DirectMarketingOutboundTelemarketing = 'DIRECT_MARKETING_OUTBOUND_TELEMARKETING',
  DirectMarketingSubscription = 'DIRECT_MARKETING_SUBSCRIPTION',
  DirectMarketingTravel = 'DIRECT_MARKETING_TRAVEL',
  DiscountStores = 'DISCOUNT_STORES',
  Doctors = 'DOCTORS',
  DoorToDoorSales = 'DOOR_TO_DOOR_SALES',
  DraperyWindowCoveringAndUpholsteryStores = 'DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES',
  DrinkingPlaces = 'DRINKING_PLACES',
  DrugsDrugProprietariesAndDruggistSundries = 'DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES',
  DrugStoresAndPharmacies = 'DRUG_STORES_AND_PHARMACIES',
  DryCleaners = 'DRY_CLEANERS',
  DurableGoods = 'DURABLE_GOODS',
  DutyFreeStores = 'DUTY_FREE_STORES',
  EatingPlacesRestaurants = 'EATING_PLACES_RESTAURANTS',
  EducationalServices = 'EDUCATIONAL_SERVICES',
  ElectricalPartsAndEquipment = 'ELECTRICAL_PARTS_AND_EQUIPMENT',
  ElectricalServices = 'ELECTRICAL_SERVICES',
  ElectricRazorStores = 'ELECTRIC_RAZOR_STORES',
  ElectricVehicleCharging = 'ELECTRIC_VEHICLE_CHARGING',
  ElectronicsRepairShops = 'ELECTRONICS_REPAIR_SHOPS',
  ElectronicsStores = 'ELECTRONICS_STORES',
  ElementarySecondarySchools = 'ELEMENTARY_SECONDARY_SCHOOLS',
  EmergencyServicesGcasVisaUseOnly = 'EMERGENCY_SERVICES_GCAS_VISA_USE_ONLY',
  EmploymentTempAgencies = 'EMPLOYMENT_TEMP_AGENCIES',
  EquipmentRental = 'EQUIPMENT_RENTAL',
  ExterminatingServices = 'EXTERMINATING_SERVICES',
  FamilyClothingStores = 'FAMILY_CLOTHING_STORES',
  FastFoodRestaurants = 'FAST_FOOD_RESTAURANTS',
  FinancialInstitutions = 'FINANCIAL_INSTITUTIONS',
  FinesGovernmentAdministrativeEntities = 'FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES',
  FireplaceFireplaceScreensAndAccessoriesStores = 'FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES',
  FloorCoveringStores = 'FLOOR_COVERING_STORES',
  Florists = 'FLORISTS',
  FloristsSuppliesNurseryStockAndFlowers = 'FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS',
  FreezerAndLockerMeatProvisioners = 'FREEZER_AND_LOCKER_MEAT_PROVISIONERS',
  FuelDealersNonAutomotive = 'FUEL_DEALERS_NON_AUTOMOTIVE',
  FuneralServicesCrematories = 'FUNERAL_SERVICES_CREMATORIES',
  FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances = 'FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES',
  FurnitureRepairRefinishing = 'FURNITURE_REPAIR_REFINISHING',
  FurriersAndFurShops = 'FURRIERS_AND_FUR_SHOPS',
  GeneralServices = 'GENERAL_SERVICES',
  GiftCardNoveltyAndSouvenirShops = 'GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS',
  GlasswareCrystalStores = 'GLASSWARE_CRYSTAL_STORES',
  GlassPaintAndWallpaperStores = 'GLASS_PAINT_AND_WALLPAPER_STORES',
  GolfCoursesPublic = 'GOLF_COURSES_PUBLIC',
  GovernmentLicensedHorseDogRacingUsRegionOnly = 'GOVERNMENT_LICENSED_HORSE_DOG_RACING_US_REGION_ONLY',
  GovernmentLicensedOnlineCasionsOnlineGamblingUsRegionOnly = 'GOVERNMENT_LICENSED_ONLINE_CASIONS_ONLINE_GAMBLING_US_REGION_ONLY',
  GovernmentOwnedLotteriesNonUsRegion = 'GOVERNMENT_OWNED_LOTTERIES_NON_US_REGION',
  GovernmentOwnedLotteriesUsRegionOnly = 'GOVERNMENT_OWNED_LOTTERIES_US_REGION_ONLY',
  GovernmentServices = 'GOVERNMENT_SERVICES',
  GroceryStoresSupermarkets = 'GROCERY_STORES_SUPERMARKETS',
  HardwareEquipmentAndSupplies = 'HARDWARE_EQUIPMENT_AND_SUPPLIES',
  HardwareStores = 'HARDWARE_STORES',
  HealthAndBeautySpas = 'HEALTH_AND_BEAUTY_SPAS',
  HearingAidsSalesAndSupplies = 'HEARING_AIDS_SALES_AND_SUPPLIES',
  HeatingPlumbingAC = 'HEATING_PLUMBING_A_C',
  HobbyToyAndGameShops = 'HOBBY_TOY_AND_GAME_SHOPS',
  HomeSupplyWarehouseStores = 'HOME_SUPPLY_WAREHOUSE_STORES',
  Hospitals = 'HOSPITALS',
  HotelsMotelsAndResorts = 'HOTELS_MOTELS_AND_RESORTS',
  HouseholdApplianceStores = 'HOUSEHOLD_APPLIANCE_STORES',
  IndustrialSupplies = 'INDUSTRIAL_SUPPLIES',
  InformationRetrievalServices = 'INFORMATION_RETRIEVAL_SERVICES',
  InsuranceDefault = 'INSURANCE_DEFAULT',
  InsuranceUnderwritingPremiums = 'INSURANCE_UNDERWRITING_PREMIUMS',
  IntraCompanyPurchases = 'INTRA_COMPANY_PURCHASES',
  JewelryStoresWatchesClocksAndSilverwareStores = 'JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES',
  LandscapingServices = 'LANDSCAPING_SERVICES',
  Laundries = 'LAUNDRIES',
  LaundryCleaningServices = 'LAUNDRY_CLEANING_SERVICES',
  LegalServicesAttorneys = 'LEGAL_SERVICES_ATTORNEYS',
  LuggageAndLeatherGoodsStores = 'LUGGAGE_AND_LEATHER_GOODS_STORES',
  LumberBuildingMaterialsStores = 'LUMBER_BUILDING_MATERIALS_STORES',
  ManualCashDisburse = 'MANUAL_CASH_DISBURSE',
  MarinasServiceAndSupplies = 'MARINAS_SERVICE_AND_SUPPLIES',
  Marketplaces = 'MARKETPLACES',
  MasonryStoneworkAndPlaster = 'MASONRY_STONEWORK_AND_PLASTER',
  MassageParlors = 'MASSAGE_PARLORS',
  MedicalAndDentalLabs = 'MEDICAL_AND_DENTAL_LABS',
  MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies = 'MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES',
  MedicalServices = 'MEDICAL_SERVICES',
  MembershipOrganizations = 'MEMBERSHIP_ORGANIZATIONS',
  MensAndBoysClothingAndAccessoriesStores = 'MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES',
  MensWomensClothingStores = 'MENS_WOMENS_CLOTHING_STORES',
  MetalServiceCenters = 'METAL_SERVICE_CENTERS',
  Miscellaneous = 'MISCELLANEOUS',
  MiscellaneousApparelAndAccessoryShops = 'MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS',
  MiscellaneousAutoDealers = 'MISCELLANEOUS_AUTO_DEALERS',
  MiscellaneousBusinessServices = 'MISCELLANEOUS_BUSINESS_SERVICES',
  MiscellaneousFoodStores = 'MISCELLANEOUS_FOOD_STORES',
  MiscellaneousGeneralMerchandise = 'MISCELLANEOUS_GENERAL_MERCHANDISE',
  MiscellaneousGeneralServices = 'MISCELLANEOUS_GENERAL_SERVICES',
  MiscellaneousHomeFurnishingSpecialtyStores = 'MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES',
  MiscellaneousPublishingAndPrinting = 'MISCELLANEOUS_PUBLISHING_AND_PRINTING',
  MiscellaneousRecreationServices = 'MISCELLANEOUS_RECREATION_SERVICES',
  MiscellaneousRepairShops = 'MISCELLANEOUS_REPAIR_SHOPS',
  MiscellaneousSpecialtyRetail = 'MISCELLANEOUS_SPECIALTY_RETAIL',
  MobileHomeDealers = 'MOBILE_HOME_DEALERS',
  MotionPictureTheaters = 'MOTION_PICTURE_THEATERS',
  MotorcycleShopsAndDealers = 'MOTORCYCLE_SHOPS_AND_DEALERS',
  MotorcycleShopsDealers = 'MOTORCYCLE_SHOPS_DEALERS',
  MotorFreightCarriersAndTrucking = 'MOTOR_FREIGHT_CARRIERS_AND_TRUCKING',
  MotorHomesDealers = 'MOTOR_HOMES_DEALERS',
  MotorVehicleSuppliesAndNewParts = 'MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS',
  MusicStoresMusicalInstrumentsPianosAndSheetMusic = 'MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC',
  NewsDealersAndNewsstands = 'NEWS_DEALERS_AND_NEWSSTANDS',
  NondurableGoods = 'NONDURABLE_GOODS',
  NonFiMoneyOrders = 'NON_FI_MONEY_ORDERS',
  NonFiStoredValueCardPurchaseLoad = 'NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD',
  NurseriesLawnAndGardenSupplyStores = 'NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES',
  NursingPersonalCare = 'NURSING_PERSONAL_CARE',
  OfficeAndCommercialFurniture = 'OFFICE_AND_COMMERCIAL_FURNITURE',
  OpticiansEyeglasses = 'OPTICIANS_EYEGLASSES',
  OptometristsOphthalmologist = 'OPTOMETRISTS_OPHTHALMOLOGIST',
  OrthopedicGoodsProstheticDevices = 'ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES',
  Osteopaths = 'OSTEOPATHS',
  PackageStoresBeerWineAndLiquor = 'PACKAGE_STORES_BEER_WINE_AND_LIQUOR',
  PaintsVarnishesAndSupplies = 'PAINTS_VARNISHES_AND_SUPPLIES',
  ParkingLotsGarages = 'PARKING_LOTS_GARAGES',
  PassengerRailways = 'PASSENGER_RAILWAYS',
  PawnShops = 'PAWN_SHOPS',
  PetroleumAndPetroleumProducts = 'PETROLEUM_AND_PETROLEUM_PRODUCTS',
  PetShopsPetFoodAndSupplies = 'PET_SHOPS_PET_FOOD_AND_SUPPLIES',
  PhotographicPhotocopyMicrofilmEquipmentAndSupplies = 'PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES',
  PhotographicStudios = 'PHOTOGRAPHIC_STUDIOS',
  PhotoDeveloping = 'PHOTO_DEVELOPING',
  PictureVideoProduction = 'PICTURE_VIDEO_PRODUCTION',
  PieceGoodsNotionsAndOtherDryGoods = 'PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS',
  PlumbingHeatingEquipmentAndSupplies = 'PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES',
  PoliticalOrganizations = 'POLITICAL_ORGANIZATIONS',
  PostalServicesGovernmentOnly = 'POSTAL_SERVICES_GOVERNMENT_ONLY',
  PreciousStonesAndMetalsWatchesAndJewelry = 'PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY',
  ProfessionalServices = 'PROFESSIONAL_SERVICES',
  PublicWarehousingAndStorage = 'PUBLIC_WAREHOUSING_AND_STORAGE',
  QuickCopyReproAndBlueprint = 'QUICK_COPY_REPRO_AND_BLUEPRINT',
  Railroads = 'RAILROADS',
  RealEstateAgentsAndManagersRentals = 'REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS',
  RecordStores = 'RECORD_STORES',
  RecreationalVehicleRentals = 'RECREATIONAL_VEHICLE_RENTALS',
  ReligiousGoodsStores = 'RELIGIOUS_GOODS_STORES',
  ReligiousOrganizations = 'RELIGIOUS_ORGANIZATIONS',
  RoofingSidingSheetMetal = 'ROOFING_SIDING_SHEET_METAL',
  SecretarialSupportServices = 'SECRETARIAL_SUPPORT_SERVICES',
  SecurityBrokersDealers = 'SECURITY_BROKERS_DEALERS',
  ServiceStations = 'SERVICE_STATIONS',
  SewingNeedleworkFabricAndPieceGoodsStores = 'SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES',
  ShoeRepairHatCleaning = 'SHOE_REPAIR_HAT_CLEANING',
  ShoeStores = 'SHOE_STORES',
  SmallApplianceRepair = 'SMALL_APPLIANCE_REPAIR',
  SnowmobileDealers = 'SNOWMOBILE_DEALERS',
  SpecialtyCleaning = 'SPECIALTY_CLEANING',
  SpecialTradeServices = 'SPECIAL_TRADE_SERVICES',
  SportingGoodsStores = 'SPORTING_GOODS_STORES',
  SportingRecreationCamps = 'SPORTING_RECREATION_CAMPS',
  SportsAndRidingApparelStores = 'SPORTS_AND_RIDING_APPAREL_STORES',
  SportsClubsFields = 'SPORTS_CLUBS_FIELDS',
  StampAndCoinStores = 'STAMP_AND_COIN_STORES',
  StationaryOfficeSuppliesPrintingAndWritingPaper = 'STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER',
  StationeryStoresOfficeAndSchoolSupplyStores = 'STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES',
  SwimmingPoolsSales = 'SWIMMING_POOLS_SALES',
  TailorsAlterations = 'TAILORS_ALTERATIONS',
  TaxicabsLimousines = 'TAXICABS_LIMOUSINES',
  TaxPaymentsGovernmentAgencies = 'TAX_PAYMENTS_GOVERNMENT_AGENCIES',
  TaxPreparationServices = 'TAX_PREPARATION_SERVICES',
  TelecommunicationEquipmentAndTelephoneSales = 'TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES',
  TelecommunicationServices = 'TELECOMMUNICATION_SERVICES',
  TelegraphServices = 'TELEGRAPH_SERVICES',
  TentAndAwningShops = 'TENT_AND_AWNING_SHOPS',
  TestingLaboratories = 'TESTING_LABORATORIES',
  TheatricalTicketAgencies = 'THEATRICAL_TICKET_AGENCIES',
  Timeshares = 'TIMESHARES',
  TireRetreadingAndRepair = 'TIRE_RETREADING_AND_REPAIR',
  TollsBridgeFees = 'TOLLS_BRIDGE_FEES',
  TouristAttractionsAndExhibits = 'TOURIST_ATTRACTIONS_AND_EXHIBITS',
  TowingServices = 'TOWING_SERVICES',
  TrailerParksCampgrounds = 'TRAILER_PARKS_CAMPGROUNDS',
  TransportationServices = 'TRANSPORTATION_SERVICES',
  TravelAgenciesTourOperators = 'TRAVEL_AGENCIES_TOUR_OPERATORS',
  TruckStopIteration = 'TRUCK_STOP_ITERATION',
  TruckUtilityTrailerRentals = 'TRUCK_UTILITY_TRAILER_RENTALS',
  TypesettingPlateMakingAndRelatedServices = 'TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES',
  TypewriterStores = 'TYPEWRITER_STORES',
  TUiTravelGermany = 'T_UI_TRAVEL_GERMANY',
  UniformsCommercialClothing = 'UNIFORMS_COMMERCIAL_CLOTHING',
  UsedMerchandiseAndSecondhandStores = 'USED_MERCHANDISE_AND_SECONDHAND_STORES',
  Utilities = 'UTILITIES',
  USFederalGovernmentAgenciesOrDepartments = 'U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS',
  VarietyStores = 'VARIETY_STORES',
  VeterinaryServices = 'VETERINARY_SERVICES',
  VideoAmusementGameSupplies = 'VIDEO_AMUSEMENT_GAME_SUPPLIES',
  VideoGameArcades = 'VIDEO_GAME_ARCADES',
  VideoTapeRentalStores = 'VIDEO_TAPE_RENTAL_STORES',
  VocationalTradeSchools = 'VOCATIONAL_TRADE_SCHOOLS',
  WatchJewelryRepair = 'WATCH_JEWELRY_REPAIR',
  WeldingRepair = 'WELDING_REPAIR',
  WholesaleClubs = 'WHOLESALE_CLUBS',
  WigAndToupeeStores = 'WIG_AND_TOUPEE_STORES',
  WiresMoneyOrders = 'WIRES_MONEY_ORDERS',
  WomensAccessoryAndSpecialtyShops = 'WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS',
  WomensReadyToWearStores = 'WOMENS_READY_TO_WEAR_STORES',
  WreckingAndSalvageYards = 'WRECKING_AND_SALVAGE_YARDS'
}

export enum StripePostIssuingCardsCardCancellationReason {
  Lost = 'LOST',
  Stolen = 'STOLEN'
}

export enum StripePostIssuingCardsCardCategoriesSpendingLimitsSpendingControls {
  AccountingBookkeepingServices = 'ACCOUNTING_BOOKKEEPING_SERVICES',
  AcRefrigerationRepair = 'AC_REFRIGERATION_REPAIR',
  AdvertisingServices = 'ADVERTISING_SERVICES',
  AgriculturalCooperative = 'AGRICULTURAL_COOPERATIVE',
  AirlinesAirCarriers = 'AIRLINES_AIR_CARRIERS',
  AirportsFlyingFields = 'AIRPORTS_FLYING_FIELDS',
  AmbulanceServices = 'AMBULANCE_SERVICES',
  AmusementParksCarnivals = 'AMUSEMENT_PARKS_CARNIVALS',
  AntiqueReproductions = 'ANTIQUE_REPRODUCTIONS',
  AntiqueShops = 'ANTIQUE_SHOPS',
  Aquariums = 'AQUARIUMS',
  ArchitecturalSurveyingServices = 'ARCHITECTURAL_SURVEYING_SERVICES',
  ArtistsSupplyAndCraftShops = 'ARTISTS_SUPPLY_AND_CRAFT_SHOPS',
  ArtDealersAndGalleries = 'ART_DEALERS_AND_GALLERIES',
  AutomatedCashDisburse = 'AUTOMATED_CASH_DISBURSE',
  AutomatedFuelDispensers = 'AUTOMATED_FUEL_DISPENSERS',
  AutomobileAssociations = 'AUTOMOBILE_ASSOCIATIONS',
  AutomotivePartsAndAccessoriesStores = 'AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES',
  AutomotiveTireStores = 'AUTOMOTIVE_TIRE_STORES',
  AutoAndHomeSupplyStores = 'AUTO_AND_HOME_SUPPLY_STORES',
  AutoBodyRepairShops = 'AUTO_BODY_REPAIR_SHOPS',
  AutoPaintShops = 'AUTO_PAINT_SHOPS',
  AutoServiceShops = 'AUTO_SERVICE_SHOPS',
  BailAndBondPayments = 'BAIL_AND_BOND_PAYMENTS',
  Bakeries = 'BAKERIES',
  BandsOrchestras = 'BANDS_ORCHESTRAS',
  BarberAndBeautyShops = 'BARBER_AND_BEAUTY_SHOPS',
  BettingCasinoGambling = 'BETTING_CASINO_GAMBLING',
  BicycleShops = 'BICYCLE_SHOPS',
  BilliardPoolEstablishments = 'BILLIARD_POOL_ESTABLISHMENTS',
  BoatDealers = 'BOAT_DEALERS',
  BoatRentalsAndLeases = 'BOAT_RENTALS_AND_LEASES',
  BooksPeriodicalsAndNewspapers = 'BOOKS_PERIODICALS_AND_NEWSPAPERS',
  BookStores = 'BOOK_STORES',
  BowlingAlleys = 'BOWLING_ALLEYS',
  BusinessSecretarialSchools = 'BUSINESS_SECRETARIAL_SCHOOLS',
  BusLines = 'BUS_LINES',
  BuyingShoppingServices = 'BUYING_SHOPPING_SERVICES',
  CableSatelliteAndOtherPayTelevisionAndRadio = 'CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO',
  CameraAndPhotographicSupplyStores = 'CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES',
  CandyNutAndConfectioneryStores = 'CANDY_NUT_AND_CONFECTIONERY_STORES',
  CarpentryServices = 'CARPENTRY_SERVICES',
  CarpetUpholsteryCleaning = 'CARPET_UPHOLSTERY_CLEANING',
  CarAndTruckDealersNewUsed = 'CAR_AND_TRUCK_DEALERS_NEW_USED',
  CarAndTruckDealersUsedOnly = 'CAR_AND_TRUCK_DEALERS_USED_ONLY',
  CarRentalAgencies = 'CAR_RENTAL_AGENCIES',
  CarWashes = 'CAR_WASHES',
  Caterers = 'CATERERS',
  CharitableAndSocialServiceOrganizationsFundraising = 'CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING',
  ChemicalsAndAlliedProducts = 'CHEMICALS_AND_ALLIED_PRODUCTS',
  ChildrensAndInfantsWearStores = 'CHILDRENS_AND_INFANTS_WEAR_STORES',
  ChildCareServices = 'CHILD_CARE_SERVICES',
  ChiropodistsPodiatrists = 'CHIROPODISTS_PODIATRISTS',
  Chiropractors = 'CHIROPRACTORS',
  CigarStoresAndStands = 'CIGAR_STORES_AND_STANDS',
  CivicSocialFraternalAssociations = 'CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS',
  CleaningAndMaintenance = 'CLEANING_AND_MAINTENANCE',
  ClothingRental = 'CLOTHING_RENTAL',
  CollegesUniversities = 'COLLEGES_UNIVERSITIES',
  CommercialEquipment = 'COMMERCIAL_EQUIPMENT',
  CommercialFootwear = 'COMMERCIAL_FOOTWEAR',
  CommercialPhotographyArtAndGraphics = 'COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS',
  CommuterTransportAndFerries = 'COMMUTER_TRANSPORT_AND_FERRIES',
  ComputersPeripheralsAndSoftware = 'COMPUTERS_PERIPHERALS_AND_SOFTWARE',
  ComputerNetworkServices = 'COMPUTER_NETWORK_SERVICES',
  ComputerProgramming = 'COMPUTER_PROGRAMMING',
  ComputerRepair = 'COMPUTER_REPAIR',
  ComputerSoftwareStores = 'COMPUTER_SOFTWARE_STORES',
  ConcreteWorkServices = 'CONCRETE_WORK_SERVICES',
  ConstructionMaterials = 'CONSTRUCTION_MATERIALS',
  ConsultingPublicRelations = 'CONSULTING_PUBLIC_RELATIONS',
  CorrespondenceSchools = 'CORRESPONDENCE_SCHOOLS',
  CosmeticStores = 'COSMETIC_STORES',
  CounselingServices = 'COUNSELING_SERVICES',
  CountryClubs = 'COUNTRY_CLUBS',
  CourierServices = 'COURIER_SERVICES',
  CourtCosts = 'COURT_COSTS',
  CreditReportingAgencies = 'CREDIT_REPORTING_AGENCIES',
  CruiseLines = 'CRUISE_LINES',
  DairyProductsStores = 'DAIRY_PRODUCTS_STORES',
  DanceHallStudiosSchools = 'DANCE_HALL_STUDIOS_SCHOOLS',
  DatingEscortServices = 'DATING_ESCORT_SERVICES',
  DentistsOrthodontists = 'DENTISTS_ORTHODONTISTS',
  DepartmentStores = 'DEPARTMENT_STORES',
  DetectiveAgencies = 'DETECTIVE_AGENCIES',
  DigitalGoodsApplications = 'DIGITAL_GOODS_APPLICATIONS',
  DigitalGoodsGames = 'DIGITAL_GOODS_GAMES',
  DigitalGoodsLargeVolume = 'DIGITAL_GOODS_LARGE_VOLUME',
  DigitalGoodsMedia = 'DIGITAL_GOODS_MEDIA',
  DirectMarketingCatalogMerchant = 'DIRECT_MARKETING_CATALOG_MERCHANT',
  DirectMarketingCombinationCatalogAndRetailMerchant = 'DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT',
  DirectMarketingInboundTelemarketing = 'DIRECT_MARKETING_INBOUND_TELEMARKETING',
  DirectMarketingInsuranceServices = 'DIRECT_MARKETING_INSURANCE_SERVICES',
  DirectMarketingOther = 'DIRECT_MARKETING_OTHER',
  DirectMarketingOutboundTelemarketing = 'DIRECT_MARKETING_OUTBOUND_TELEMARKETING',
  DirectMarketingSubscription = 'DIRECT_MARKETING_SUBSCRIPTION',
  DirectMarketingTravel = 'DIRECT_MARKETING_TRAVEL',
  DiscountStores = 'DISCOUNT_STORES',
  Doctors = 'DOCTORS',
  DoorToDoorSales = 'DOOR_TO_DOOR_SALES',
  DraperyWindowCoveringAndUpholsteryStores = 'DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES',
  DrinkingPlaces = 'DRINKING_PLACES',
  DrugsDrugProprietariesAndDruggistSundries = 'DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES',
  DrugStoresAndPharmacies = 'DRUG_STORES_AND_PHARMACIES',
  DryCleaners = 'DRY_CLEANERS',
  DurableGoods = 'DURABLE_GOODS',
  DutyFreeStores = 'DUTY_FREE_STORES',
  EatingPlacesRestaurants = 'EATING_PLACES_RESTAURANTS',
  EducationalServices = 'EDUCATIONAL_SERVICES',
  ElectricalPartsAndEquipment = 'ELECTRICAL_PARTS_AND_EQUIPMENT',
  ElectricalServices = 'ELECTRICAL_SERVICES',
  ElectricRazorStores = 'ELECTRIC_RAZOR_STORES',
  ElectricVehicleCharging = 'ELECTRIC_VEHICLE_CHARGING',
  ElectronicsRepairShops = 'ELECTRONICS_REPAIR_SHOPS',
  ElectronicsStores = 'ELECTRONICS_STORES',
  ElementarySecondarySchools = 'ELEMENTARY_SECONDARY_SCHOOLS',
  EmergencyServicesGcasVisaUseOnly = 'EMERGENCY_SERVICES_GCAS_VISA_USE_ONLY',
  EmploymentTempAgencies = 'EMPLOYMENT_TEMP_AGENCIES',
  EquipmentRental = 'EQUIPMENT_RENTAL',
  ExterminatingServices = 'EXTERMINATING_SERVICES',
  FamilyClothingStores = 'FAMILY_CLOTHING_STORES',
  FastFoodRestaurants = 'FAST_FOOD_RESTAURANTS',
  FinancialInstitutions = 'FINANCIAL_INSTITUTIONS',
  FinesGovernmentAdministrativeEntities = 'FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES',
  FireplaceFireplaceScreensAndAccessoriesStores = 'FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES',
  FloorCoveringStores = 'FLOOR_COVERING_STORES',
  Florists = 'FLORISTS',
  FloristsSuppliesNurseryStockAndFlowers = 'FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS',
  FreezerAndLockerMeatProvisioners = 'FREEZER_AND_LOCKER_MEAT_PROVISIONERS',
  FuelDealersNonAutomotive = 'FUEL_DEALERS_NON_AUTOMOTIVE',
  FuneralServicesCrematories = 'FUNERAL_SERVICES_CREMATORIES',
  FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances = 'FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES',
  FurnitureRepairRefinishing = 'FURNITURE_REPAIR_REFINISHING',
  FurriersAndFurShops = 'FURRIERS_AND_FUR_SHOPS',
  GeneralServices = 'GENERAL_SERVICES',
  GiftCardNoveltyAndSouvenirShops = 'GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS',
  GlasswareCrystalStores = 'GLASSWARE_CRYSTAL_STORES',
  GlassPaintAndWallpaperStores = 'GLASS_PAINT_AND_WALLPAPER_STORES',
  GolfCoursesPublic = 'GOLF_COURSES_PUBLIC',
  GovernmentLicensedHorseDogRacingUsRegionOnly = 'GOVERNMENT_LICENSED_HORSE_DOG_RACING_US_REGION_ONLY',
  GovernmentLicensedOnlineCasionsOnlineGamblingUsRegionOnly = 'GOVERNMENT_LICENSED_ONLINE_CASIONS_ONLINE_GAMBLING_US_REGION_ONLY',
  GovernmentOwnedLotteriesNonUsRegion = 'GOVERNMENT_OWNED_LOTTERIES_NON_US_REGION',
  GovernmentOwnedLotteriesUsRegionOnly = 'GOVERNMENT_OWNED_LOTTERIES_US_REGION_ONLY',
  GovernmentServices = 'GOVERNMENT_SERVICES',
  GroceryStoresSupermarkets = 'GROCERY_STORES_SUPERMARKETS',
  HardwareEquipmentAndSupplies = 'HARDWARE_EQUIPMENT_AND_SUPPLIES',
  HardwareStores = 'HARDWARE_STORES',
  HealthAndBeautySpas = 'HEALTH_AND_BEAUTY_SPAS',
  HearingAidsSalesAndSupplies = 'HEARING_AIDS_SALES_AND_SUPPLIES',
  HeatingPlumbingAC = 'HEATING_PLUMBING_A_C',
  HobbyToyAndGameShops = 'HOBBY_TOY_AND_GAME_SHOPS',
  HomeSupplyWarehouseStores = 'HOME_SUPPLY_WAREHOUSE_STORES',
  Hospitals = 'HOSPITALS',
  HotelsMotelsAndResorts = 'HOTELS_MOTELS_AND_RESORTS',
  HouseholdApplianceStores = 'HOUSEHOLD_APPLIANCE_STORES',
  IndustrialSupplies = 'INDUSTRIAL_SUPPLIES',
  InformationRetrievalServices = 'INFORMATION_RETRIEVAL_SERVICES',
  InsuranceDefault = 'INSURANCE_DEFAULT',
  InsuranceUnderwritingPremiums = 'INSURANCE_UNDERWRITING_PREMIUMS',
  IntraCompanyPurchases = 'INTRA_COMPANY_PURCHASES',
  JewelryStoresWatchesClocksAndSilverwareStores = 'JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES',
  LandscapingServices = 'LANDSCAPING_SERVICES',
  Laundries = 'LAUNDRIES',
  LaundryCleaningServices = 'LAUNDRY_CLEANING_SERVICES',
  LegalServicesAttorneys = 'LEGAL_SERVICES_ATTORNEYS',
  LuggageAndLeatherGoodsStores = 'LUGGAGE_AND_LEATHER_GOODS_STORES',
  LumberBuildingMaterialsStores = 'LUMBER_BUILDING_MATERIALS_STORES',
  ManualCashDisburse = 'MANUAL_CASH_DISBURSE',
  MarinasServiceAndSupplies = 'MARINAS_SERVICE_AND_SUPPLIES',
  Marketplaces = 'MARKETPLACES',
  MasonryStoneworkAndPlaster = 'MASONRY_STONEWORK_AND_PLASTER',
  MassageParlors = 'MASSAGE_PARLORS',
  MedicalAndDentalLabs = 'MEDICAL_AND_DENTAL_LABS',
  MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies = 'MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES',
  MedicalServices = 'MEDICAL_SERVICES',
  MembershipOrganizations = 'MEMBERSHIP_ORGANIZATIONS',
  MensAndBoysClothingAndAccessoriesStores = 'MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES',
  MensWomensClothingStores = 'MENS_WOMENS_CLOTHING_STORES',
  MetalServiceCenters = 'METAL_SERVICE_CENTERS',
  Miscellaneous = 'MISCELLANEOUS',
  MiscellaneousApparelAndAccessoryShops = 'MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS',
  MiscellaneousAutoDealers = 'MISCELLANEOUS_AUTO_DEALERS',
  MiscellaneousBusinessServices = 'MISCELLANEOUS_BUSINESS_SERVICES',
  MiscellaneousFoodStores = 'MISCELLANEOUS_FOOD_STORES',
  MiscellaneousGeneralMerchandise = 'MISCELLANEOUS_GENERAL_MERCHANDISE',
  MiscellaneousGeneralServices = 'MISCELLANEOUS_GENERAL_SERVICES',
  MiscellaneousHomeFurnishingSpecialtyStores = 'MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES',
  MiscellaneousPublishingAndPrinting = 'MISCELLANEOUS_PUBLISHING_AND_PRINTING',
  MiscellaneousRecreationServices = 'MISCELLANEOUS_RECREATION_SERVICES',
  MiscellaneousRepairShops = 'MISCELLANEOUS_REPAIR_SHOPS',
  MiscellaneousSpecialtyRetail = 'MISCELLANEOUS_SPECIALTY_RETAIL',
  MobileHomeDealers = 'MOBILE_HOME_DEALERS',
  MotionPictureTheaters = 'MOTION_PICTURE_THEATERS',
  MotorcycleShopsAndDealers = 'MOTORCYCLE_SHOPS_AND_DEALERS',
  MotorcycleShopsDealers = 'MOTORCYCLE_SHOPS_DEALERS',
  MotorFreightCarriersAndTrucking = 'MOTOR_FREIGHT_CARRIERS_AND_TRUCKING',
  MotorHomesDealers = 'MOTOR_HOMES_DEALERS',
  MotorVehicleSuppliesAndNewParts = 'MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS',
  MusicStoresMusicalInstrumentsPianosAndSheetMusic = 'MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC',
  NewsDealersAndNewsstands = 'NEWS_DEALERS_AND_NEWSSTANDS',
  NondurableGoods = 'NONDURABLE_GOODS',
  NonFiMoneyOrders = 'NON_FI_MONEY_ORDERS',
  NonFiStoredValueCardPurchaseLoad = 'NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD',
  NurseriesLawnAndGardenSupplyStores = 'NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES',
  NursingPersonalCare = 'NURSING_PERSONAL_CARE',
  OfficeAndCommercialFurniture = 'OFFICE_AND_COMMERCIAL_FURNITURE',
  OpticiansEyeglasses = 'OPTICIANS_EYEGLASSES',
  OptometristsOphthalmologist = 'OPTOMETRISTS_OPHTHALMOLOGIST',
  OrthopedicGoodsProstheticDevices = 'ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES',
  Osteopaths = 'OSTEOPATHS',
  PackageStoresBeerWineAndLiquor = 'PACKAGE_STORES_BEER_WINE_AND_LIQUOR',
  PaintsVarnishesAndSupplies = 'PAINTS_VARNISHES_AND_SUPPLIES',
  ParkingLotsGarages = 'PARKING_LOTS_GARAGES',
  PassengerRailways = 'PASSENGER_RAILWAYS',
  PawnShops = 'PAWN_SHOPS',
  PetroleumAndPetroleumProducts = 'PETROLEUM_AND_PETROLEUM_PRODUCTS',
  PetShopsPetFoodAndSupplies = 'PET_SHOPS_PET_FOOD_AND_SUPPLIES',
  PhotographicPhotocopyMicrofilmEquipmentAndSupplies = 'PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES',
  PhotographicStudios = 'PHOTOGRAPHIC_STUDIOS',
  PhotoDeveloping = 'PHOTO_DEVELOPING',
  PictureVideoProduction = 'PICTURE_VIDEO_PRODUCTION',
  PieceGoodsNotionsAndOtherDryGoods = 'PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS',
  PlumbingHeatingEquipmentAndSupplies = 'PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES',
  PoliticalOrganizations = 'POLITICAL_ORGANIZATIONS',
  PostalServicesGovernmentOnly = 'POSTAL_SERVICES_GOVERNMENT_ONLY',
  PreciousStonesAndMetalsWatchesAndJewelry = 'PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY',
  ProfessionalServices = 'PROFESSIONAL_SERVICES',
  PublicWarehousingAndStorage = 'PUBLIC_WAREHOUSING_AND_STORAGE',
  QuickCopyReproAndBlueprint = 'QUICK_COPY_REPRO_AND_BLUEPRINT',
  Railroads = 'RAILROADS',
  RealEstateAgentsAndManagersRentals = 'REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS',
  RecordStores = 'RECORD_STORES',
  RecreationalVehicleRentals = 'RECREATIONAL_VEHICLE_RENTALS',
  ReligiousGoodsStores = 'RELIGIOUS_GOODS_STORES',
  ReligiousOrganizations = 'RELIGIOUS_ORGANIZATIONS',
  RoofingSidingSheetMetal = 'ROOFING_SIDING_SHEET_METAL',
  SecretarialSupportServices = 'SECRETARIAL_SUPPORT_SERVICES',
  SecurityBrokersDealers = 'SECURITY_BROKERS_DEALERS',
  ServiceStations = 'SERVICE_STATIONS',
  SewingNeedleworkFabricAndPieceGoodsStores = 'SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES',
  ShoeRepairHatCleaning = 'SHOE_REPAIR_HAT_CLEANING',
  ShoeStores = 'SHOE_STORES',
  SmallApplianceRepair = 'SMALL_APPLIANCE_REPAIR',
  SnowmobileDealers = 'SNOWMOBILE_DEALERS',
  SpecialtyCleaning = 'SPECIALTY_CLEANING',
  SpecialTradeServices = 'SPECIAL_TRADE_SERVICES',
  SportingGoodsStores = 'SPORTING_GOODS_STORES',
  SportingRecreationCamps = 'SPORTING_RECREATION_CAMPS',
  SportsAndRidingApparelStores = 'SPORTS_AND_RIDING_APPAREL_STORES',
  SportsClubsFields = 'SPORTS_CLUBS_FIELDS',
  StampAndCoinStores = 'STAMP_AND_COIN_STORES',
  StationaryOfficeSuppliesPrintingAndWritingPaper = 'STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER',
  StationeryStoresOfficeAndSchoolSupplyStores = 'STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES',
  SwimmingPoolsSales = 'SWIMMING_POOLS_SALES',
  TailorsAlterations = 'TAILORS_ALTERATIONS',
  TaxicabsLimousines = 'TAXICABS_LIMOUSINES',
  TaxPaymentsGovernmentAgencies = 'TAX_PAYMENTS_GOVERNMENT_AGENCIES',
  TaxPreparationServices = 'TAX_PREPARATION_SERVICES',
  TelecommunicationEquipmentAndTelephoneSales = 'TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES',
  TelecommunicationServices = 'TELECOMMUNICATION_SERVICES',
  TelegraphServices = 'TELEGRAPH_SERVICES',
  TentAndAwningShops = 'TENT_AND_AWNING_SHOPS',
  TestingLaboratories = 'TESTING_LABORATORIES',
  TheatricalTicketAgencies = 'THEATRICAL_TICKET_AGENCIES',
  Timeshares = 'TIMESHARES',
  TireRetreadingAndRepair = 'TIRE_RETREADING_AND_REPAIR',
  TollsBridgeFees = 'TOLLS_BRIDGE_FEES',
  TouristAttractionsAndExhibits = 'TOURIST_ATTRACTIONS_AND_EXHIBITS',
  TowingServices = 'TOWING_SERVICES',
  TrailerParksCampgrounds = 'TRAILER_PARKS_CAMPGROUNDS',
  TransportationServices = 'TRANSPORTATION_SERVICES',
  TravelAgenciesTourOperators = 'TRAVEL_AGENCIES_TOUR_OPERATORS',
  TruckStopIteration = 'TRUCK_STOP_ITERATION',
  TruckUtilityTrailerRentals = 'TRUCK_UTILITY_TRAILER_RENTALS',
  TypesettingPlateMakingAndRelatedServices = 'TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES',
  TypewriterStores = 'TYPEWRITER_STORES',
  TUiTravelGermany = 'T_UI_TRAVEL_GERMANY',
  UniformsCommercialClothing = 'UNIFORMS_COMMERCIAL_CLOTHING',
  UsedMerchandiseAndSecondhandStores = 'USED_MERCHANDISE_AND_SECONDHAND_STORES',
  Utilities = 'UTILITIES',
  USFederalGovernmentAgenciesOrDepartments = 'U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS',
  VarietyStores = 'VARIETY_STORES',
  VeterinaryServices = 'VETERINARY_SERVICES',
  VideoAmusementGameSupplies = 'VIDEO_AMUSEMENT_GAME_SUPPLIES',
  VideoGameArcades = 'VIDEO_GAME_ARCADES',
  VideoTapeRentalStores = 'VIDEO_TAPE_RENTAL_STORES',
  VocationalTradeSchools = 'VOCATIONAL_TRADE_SCHOOLS',
  WatchJewelryRepair = 'WATCH_JEWELRY_REPAIR',
  WeldingRepair = 'WELDING_REPAIR',
  WholesaleClubs = 'WHOLESALE_CLUBS',
  WigAndToupeeStores = 'WIG_AND_TOUPEE_STORES',
  WiresMoneyOrders = 'WIRES_MONEY_ORDERS',
  WomensAccessoryAndSpecialtyShops = 'WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS',
  WomensReadyToWearStores = 'WOMENS_READY_TO_WEAR_STORES',
  WreckingAndSalvageYards = 'WRECKING_AND_SALVAGE_YARDS'
}

export type StripePostIssuingCardsCardInput = {
  cancellationReason?: InputMaybe<StripePostIssuingCardsCardCancellationReason>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  pin?: InputMaybe<StripePostIssuingCardsCardPinInput>;
  spendingControls?: InputMaybe<StripePostIssuingCardsCardSpendingControlsInput>;
  status?: InputMaybe<StripePostIssuingCardsCardStatus>;
};

export enum StripePostIssuingCardsCardIntervalSpendingLimitsSpendingControls {
  AllTime = 'ALL_TIME',
  Daily = 'DAILY',
  Monthly = 'MONTHLY',
  PerAuthorization = 'PER_AUTHORIZATION',
  Weekly = 'WEEKLY',
  Yearly = 'YEARLY'
}

export type StripePostIssuingCardsCardPinInput = {
  encryptedNumber?: InputMaybe<Scalars['String']>;
};

export type StripePostIssuingCardsCardSpendingControlsInput = {
  allowedCategories?: InputMaybe<Array<StripePostIssuingCardsCardAllowedCategoriesSpendingControls>>;
  blockedCategories?: InputMaybe<Array<StripePostIssuingCardsCardBlockedCategoriesSpendingControls>>;
  spendingLimits?: InputMaybe<Array<StripePostIssuingCardsCardSpendingLimitsSpendingControlsInput>>;
};

export type StripePostIssuingCardsCardSpendingLimitsSpendingControlsInput = {
  amount: Scalars['Int'];
  categories?: InputMaybe<Array<StripePostIssuingCardsCardCategoriesSpendingLimitsSpendingControls>>;
  interval: StripePostIssuingCardsCardIntervalSpendingLimitsSpendingControls;
};

export enum StripePostIssuingCardsCardStatus {
  Active = 'ACTIVE',
  Canceled = 'CANCELED',
  Inactive = 'INACTIVE'
}

export enum StripePostIssuingCardsCategoriesSpendingLimitsSpendingControls {
  AccountingBookkeepingServices = 'ACCOUNTING_BOOKKEEPING_SERVICES',
  AcRefrigerationRepair = 'AC_REFRIGERATION_REPAIR',
  AdvertisingServices = 'ADVERTISING_SERVICES',
  AgriculturalCooperative = 'AGRICULTURAL_COOPERATIVE',
  AirlinesAirCarriers = 'AIRLINES_AIR_CARRIERS',
  AirportsFlyingFields = 'AIRPORTS_FLYING_FIELDS',
  AmbulanceServices = 'AMBULANCE_SERVICES',
  AmusementParksCarnivals = 'AMUSEMENT_PARKS_CARNIVALS',
  AntiqueReproductions = 'ANTIQUE_REPRODUCTIONS',
  AntiqueShops = 'ANTIQUE_SHOPS',
  Aquariums = 'AQUARIUMS',
  ArchitecturalSurveyingServices = 'ARCHITECTURAL_SURVEYING_SERVICES',
  ArtistsSupplyAndCraftShops = 'ARTISTS_SUPPLY_AND_CRAFT_SHOPS',
  ArtDealersAndGalleries = 'ART_DEALERS_AND_GALLERIES',
  AutomatedCashDisburse = 'AUTOMATED_CASH_DISBURSE',
  AutomatedFuelDispensers = 'AUTOMATED_FUEL_DISPENSERS',
  AutomobileAssociations = 'AUTOMOBILE_ASSOCIATIONS',
  AutomotivePartsAndAccessoriesStores = 'AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES',
  AutomotiveTireStores = 'AUTOMOTIVE_TIRE_STORES',
  AutoAndHomeSupplyStores = 'AUTO_AND_HOME_SUPPLY_STORES',
  AutoBodyRepairShops = 'AUTO_BODY_REPAIR_SHOPS',
  AutoPaintShops = 'AUTO_PAINT_SHOPS',
  AutoServiceShops = 'AUTO_SERVICE_SHOPS',
  BailAndBondPayments = 'BAIL_AND_BOND_PAYMENTS',
  Bakeries = 'BAKERIES',
  BandsOrchestras = 'BANDS_ORCHESTRAS',
  BarberAndBeautyShops = 'BARBER_AND_BEAUTY_SHOPS',
  BettingCasinoGambling = 'BETTING_CASINO_GAMBLING',
  BicycleShops = 'BICYCLE_SHOPS',
  BilliardPoolEstablishments = 'BILLIARD_POOL_ESTABLISHMENTS',
  BoatDealers = 'BOAT_DEALERS',
  BoatRentalsAndLeases = 'BOAT_RENTALS_AND_LEASES',
  BooksPeriodicalsAndNewspapers = 'BOOKS_PERIODICALS_AND_NEWSPAPERS',
  BookStores = 'BOOK_STORES',
  BowlingAlleys = 'BOWLING_ALLEYS',
  BusinessSecretarialSchools = 'BUSINESS_SECRETARIAL_SCHOOLS',
  BusLines = 'BUS_LINES',
  BuyingShoppingServices = 'BUYING_SHOPPING_SERVICES',
  CableSatelliteAndOtherPayTelevisionAndRadio = 'CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO',
  CameraAndPhotographicSupplyStores = 'CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES',
  CandyNutAndConfectioneryStores = 'CANDY_NUT_AND_CONFECTIONERY_STORES',
  CarpentryServices = 'CARPENTRY_SERVICES',
  CarpetUpholsteryCleaning = 'CARPET_UPHOLSTERY_CLEANING',
  CarAndTruckDealersNewUsed = 'CAR_AND_TRUCK_DEALERS_NEW_USED',
  CarAndTruckDealersUsedOnly = 'CAR_AND_TRUCK_DEALERS_USED_ONLY',
  CarRentalAgencies = 'CAR_RENTAL_AGENCIES',
  CarWashes = 'CAR_WASHES',
  Caterers = 'CATERERS',
  CharitableAndSocialServiceOrganizationsFundraising = 'CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING',
  ChemicalsAndAlliedProducts = 'CHEMICALS_AND_ALLIED_PRODUCTS',
  ChildrensAndInfantsWearStores = 'CHILDRENS_AND_INFANTS_WEAR_STORES',
  ChildCareServices = 'CHILD_CARE_SERVICES',
  ChiropodistsPodiatrists = 'CHIROPODISTS_PODIATRISTS',
  Chiropractors = 'CHIROPRACTORS',
  CigarStoresAndStands = 'CIGAR_STORES_AND_STANDS',
  CivicSocialFraternalAssociations = 'CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS',
  CleaningAndMaintenance = 'CLEANING_AND_MAINTENANCE',
  ClothingRental = 'CLOTHING_RENTAL',
  CollegesUniversities = 'COLLEGES_UNIVERSITIES',
  CommercialEquipment = 'COMMERCIAL_EQUIPMENT',
  CommercialFootwear = 'COMMERCIAL_FOOTWEAR',
  CommercialPhotographyArtAndGraphics = 'COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS',
  CommuterTransportAndFerries = 'COMMUTER_TRANSPORT_AND_FERRIES',
  ComputersPeripheralsAndSoftware = 'COMPUTERS_PERIPHERALS_AND_SOFTWARE',
  ComputerNetworkServices = 'COMPUTER_NETWORK_SERVICES',
  ComputerProgramming = 'COMPUTER_PROGRAMMING',
  ComputerRepair = 'COMPUTER_REPAIR',
  ComputerSoftwareStores = 'COMPUTER_SOFTWARE_STORES',
  ConcreteWorkServices = 'CONCRETE_WORK_SERVICES',
  ConstructionMaterials = 'CONSTRUCTION_MATERIALS',
  ConsultingPublicRelations = 'CONSULTING_PUBLIC_RELATIONS',
  CorrespondenceSchools = 'CORRESPONDENCE_SCHOOLS',
  CosmeticStores = 'COSMETIC_STORES',
  CounselingServices = 'COUNSELING_SERVICES',
  CountryClubs = 'COUNTRY_CLUBS',
  CourierServices = 'COURIER_SERVICES',
  CourtCosts = 'COURT_COSTS',
  CreditReportingAgencies = 'CREDIT_REPORTING_AGENCIES',
  CruiseLines = 'CRUISE_LINES',
  DairyProductsStores = 'DAIRY_PRODUCTS_STORES',
  DanceHallStudiosSchools = 'DANCE_HALL_STUDIOS_SCHOOLS',
  DatingEscortServices = 'DATING_ESCORT_SERVICES',
  DentistsOrthodontists = 'DENTISTS_ORTHODONTISTS',
  DepartmentStores = 'DEPARTMENT_STORES',
  DetectiveAgencies = 'DETECTIVE_AGENCIES',
  DigitalGoodsApplications = 'DIGITAL_GOODS_APPLICATIONS',
  DigitalGoodsGames = 'DIGITAL_GOODS_GAMES',
  DigitalGoodsLargeVolume = 'DIGITAL_GOODS_LARGE_VOLUME',
  DigitalGoodsMedia = 'DIGITAL_GOODS_MEDIA',
  DirectMarketingCatalogMerchant = 'DIRECT_MARKETING_CATALOG_MERCHANT',
  DirectMarketingCombinationCatalogAndRetailMerchant = 'DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT',
  DirectMarketingInboundTelemarketing = 'DIRECT_MARKETING_INBOUND_TELEMARKETING',
  DirectMarketingInsuranceServices = 'DIRECT_MARKETING_INSURANCE_SERVICES',
  DirectMarketingOther = 'DIRECT_MARKETING_OTHER',
  DirectMarketingOutboundTelemarketing = 'DIRECT_MARKETING_OUTBOUND_TELEMARKETING',
  DirectMarketingSubscription = 'DIRECT_MARKETING_SUBSCRIPTION',
  DirectMarketingTravel = 'DIRECT_MARKETING_TRAVEL',
  DiscountStores = 'DISCOUNT_STORES',
  Doctors = 'DOCTORS',
  DoorToDoorSales = 'DOOR_TO_DOOR_SALES',
  DraperyWindowCoveringAndUpholsteryStores = 'DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES',
  DrinkingPlaces = 'DRINKING_PLACES',
  DrugsDrugProprietariesAndDruggistSundries = 'DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES',
  DrugStoresAndPharmacies = 'DRUG_STORES_AND_PHARMACIES',
  DryCleaners = 'DRY_CLEANERS',
  DurableGoods = 'DURABLE_GOODS',
  DutyFreeStores = 'DUTY_FREE_STORES',
  EatingPlacesRestaurants = 'EATING_PLACES_RESTAURANTS',
  EducationalServices = 'EDUCATIONAL_SERVICES',
  ElectricalPartsAndEquipment = 'ELECTRICAL_PARTS_AND_EQUIPMENT',
  ElectricalServices = 'ELECTRICAL_SERVICES',
  ElectricRazorStores = 'ELECTRIC_RAZOR_STORES',
  ElectricVehicleCharging = 'ELECTRIC_VEHICLE_CHARGING',
  ElectronicsRepairShops = 'ELECTRONICS_REPAIR_SHOPS',
  ElectronicsStores = 'ELECTRONICS_STORES',
  ElementarySecondarySchools = 'ELEMENTARY_SECONDARY_SCHOOLS',
  EmergencyServicesGcasVisaUseOnly = 'EMERGENCY_SERVICES_GCAS_VISA_USE_ONLY',
  EmploymentTempAgencies = 'EMPLOYMENT_TEMP_AGENCIES',
  EquipmentRental = 'EQUIPMENT_RENTAL',
  ExterminatingServices = 'EXTERMINATING_SERVICES',
  FamilyClothingStores = 'FAMILY_CLOTHING_STORES',
  FastFoodRestaurants = 'FAST_FOOD_RESTAURANTS',
  FinancialInstitutions = 'FINANCIAL_INSTITUTIONS',
  FinesGovernmentAdministrativeEntities = 'FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES',
  FireplaceFireplaceScreensAndAccessoriesStores = 'FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES',
  FloorCoveringStores = 'FLOOR_COVERING_STORES',
  Florists = 'FLORISTS',
  FloristsSuppliesNurseryStockAndFlowers = 'FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS',
  FreezerAndLockerMeatProvisioners = 'FREEZER_AND_LOCKER_MEAT_PROVISIONERS',
  FuelDealersNonAutomotive = 'FUEL_DEALERS_NON_AUTOMOTIVE',
  FuneralServicesCrematories = 'FUNERAL_SERVICES_CREMATORIES',
  FurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances = 'FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES',
  FurnitureRepairRefinishing = 'FURNITURE_REPAIR_REFINISHING',
  FurriersAndFurShops = 'FURRIERS_AND_FUR_SHOPS',
  GeneralServices = 'GENERAL_SERVICES',
  GiftCardNoveltyAndSouvenirShops = 'GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS',
  GlasswareCrystalStores = 'GLASSWARE_CRYSTAL_STORES',
  GlassPaintAndWallpaperStores = 'GLASS_PAINT_AND_WALLPAPER_STORES',
  GolfCoursesPublic = 'GOLF_COURSES_PUBLIC',
  GovernmentLicensedHorseDogRacingUsRegionOnly = 'GOVERNMENT_LICENSED_HORSE_DOG_RACING_US_REGION_ONLY',
  GovernmentLicensedOnlineCasionsOnlineGamblingUsRegionOnly = 'GOVERNMENT_LICENSED_ONLINE_CASIONS_ONLINE_GAMBLING_US_REGION_ONLY',
  GovernmentOwnedLotteriesNonUsRegion = 'GOVERNMENT_OWNED_LOTTERIES_NON_US_REGION',
  GovernmentOwnedLotteriesUsRegionOnly = 'GOVERNMENT_OWNED_LOTTERIES_US_REGION_ONLY',
  GovernmentServices = 'GOVERNMENT_SERVICES',
  GroceryStoresSupermarkets = 'GROCERY_STORES_SUPERMARKETS',
  HardwareEquipmentAndSupplies = 'HARDWARE_EQUIPMENT_AND_SUPPLIES',
  HardwareStores = 'HARDWARE_STORES',
  HealthAndBeautySpas = 'HEALTH_AND_BEAUTY_SPAS',
  HearingAidsSalesAndSupplies = 'HEARING_AIDS_SALES_AND_SUPPLIES',
  HeatingPlumbingAC = 'HEATING_PLUMBING_A_C',
  HobbyToyAndGameShops = 'HOBBY_TOY_AND_GAME_SHOPS',
  HomeSupplyWarehouseStores = 'HOME_SUPPLY_WAREHOUSE_STORES',
  Hospitals = 'HOSPITALS',
  HotelsMotelsAndResorts = 'HOTELS_MOTELS_AND_RESORTS',
  HouseholdApplianceStores = 'HOUSEHOLD_APPLIANCE_STORES',
  IndustrialSupplies = 'INDUSTRIAL_SUPPLIES',
  InformationRetrievalServices = 'INFORMATION_RETRIEVAL_SERVICES',
  InsuranceDefault = 'INSURANCE_DEFAULT',
  InsuranceUnderwritingPremiums = 'INSURANCE_UNDERWRITING_PREMIUMS',
  IntraCompanyPurchases = 'INTRA_COMPANY_PURCHASES',
  JewelryStoresWatchesClocksAndSilverwareStores = 'JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES',
  LandscapingServices = 'LANDSCAPING_SERVICES',
  Laundries = 'LAUNDRIES',
  LaundryCleaningServices = 'LAUNDRY_CLEANING_SERVICES',
  LegalServicesAttorneys = 'LEGAL_SERVICES_ATTORNEYS',
  LuggageAndLeatherGoodsStores = 'LUGGAGE_AND_LEATHER_GOODS_STORES',
  LumberBuildingMaterialsStores = 'LUMBER_BUILDING_MATERIALS_STORES',
  ManualCashDisburse = 'MANUAL_CASH_DISBURSE',
  MarinasServiceAndSupplies = 'MARINAS_SERVICE_AND_SUPPLIES',
  Marketplaces = 'MARKETPLACES',
  MasonryStoneworkAndPlaster = 'MASONRY_STONEWORK_AND_PLASTER',
  MassageParlors = 'MASSAGE_PARLORS',
  MedicalAndDentalLabs = 'MEDICAL_AND_DENTAL_LABS',
  MedicalDentalOphthalmicAndHospitalEquipmentAndSupplies = 'MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES',
  MedicalServices = 'MEDICAL_SERVICES',
  MembershipOrganizations = 'MEMBERSHIP_ORGANIZATIONS',
  MensAndBoysClothingAndAccessoriesStores = 'MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES',
  MensWomensClothingStores = 'MENS_WOMENS_CLOTHING_STORES',
  MetalServiceCenters = 'METAL_SERVICE_CENTERS',
  Miscellaneous = 'MISCELLANEOUS',
  MiscellaneousApparelAndAccessoryShops = 'MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS',
  MiscellaneousAutoDealers = 'MISCELLANEOUS_AUTO_DEALERS',
  MiscellaneousBusinessServices = 'MISCELLANEOUS_BUSINESS_SERVICES',
  MiscellaneousFoodStores = 'MISCELLANEOUS_FOOD_STORES',
  MiscellaneousGeneralMerchandise = 'MISCELLANEOUS_GENERAL_MERCHANDISE',
  MiscellaneousGeneralServices = 'MISCELLANEOUS_GENERAL_SERVICES',
  MiscellaneousHomeFurnishingSpecialtyStores = 'MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES',
  MiscellaneousPublishingAndPrinting = 'MISCELLANEOUS_PUBLISHING_AND_PRINTING',
  MiscellaneousRecreationServices = 'MISCELLANEOUS_RECREATION_SERVICES',
  MiscellaneousRepairShops = 'MISCELLANEOUS_REPAIR_SHOPS',
  MiscellaneousSpecialtyRetail = 'MISCELLANEOUS_SPECIALTY_RETAIL',
  MobileHomeDealers = 'MOBILE_HOME_DEALERS',
  MotionPictureTheaters = 'MOTION_PICTURE_THEATERS',
  MotorcycleShopsAndDealers = 'MOTORCYCLE_SHOPS_AND_DEALERS',
  MotorcycleShopsDealers = 'MOTORCYCLE_SHOPS_DEALERS',
  MotorFreightCarriersAndTrucking = 'MOTOR_FREIGHT_CARRIERS_AND_TRUCKING',
  MotorHomesDealers = 'MOTOR_HOMES_DEALERS',
  MotorVehicleSuppliesAndNewParts = 'MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS',
  MusicStoresMusicalInstrumentsPianosAndSheetMusic = 'MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC',
  NewsDealersAndNewsstands = 'NEWS_DEALERS_AND_NEWSSTANDS',
  NondurableGoods = 'NONDURABLE_GOODS',
  NonFiMoneyOrders = 'NON_FI_MONEY_ORDERS',
  NonFiStoredValueCardPurchaseLoad = 'NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD',
  NurseriesLawnAndGardenSupplyStores = 'NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES',
  NursingPersonalCare = 'NURSING_PERSONAL_CARE',
  OfficeAndCommercialFurniture = 'OFFICE_AND_COMMERCIAL_FURNITURE',
  OpticiansEyeglasses = 'OPTICIANS_EYEGLASSES',
  OptometristsOphthalmologist = 'OPTOMETRISTS_OPHTHALMOLOGIST',
  OrthopedicGoodsProstheticDevices = 'ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES',
  Osteopaths = 'OSTEOPATHS',
  PackageStoresBeerWineAndLiquor = 'PACKAGE_STORES_BEER_WINE_AND_LIQUOR',
  PaintsVarnishesAndSupplies = 'PAINTS_VARNISHES_AND_SUPPLIES',
  ParkingLotsGarages = 'PARKING_LOTS_GARAGES',
  PassengerRailways = 'PASSENGER_RAILWAYS',
  PawnShops = 'PAWN_SHOPS',
  PetroleumAndPetroleumProducts = 'PETROLEUM_AND_PETROLEUM_PRODUCTS',
  PetShopsPetFoodAndSupplies = 'PET_SHOPS_PET_FOOD_AND_SUPPLIES',
  PhotographicPhotocopyMicrofilmEquipmentAndSupplies = 'PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES',
  PhotographicStudios = 'PHOTOGRAPHIC_STUDIOS',
  PhotoDeveloping = 'PHOTO_DEVELOPING',
  PictureVideoProduction = 'PICTURE_VIDEO_PRODUCTION',
  PieceGoodsNotionsAndOtherDryGoods = 'PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS',
  PlumbingHeatingEquipmentAndSupplies = 'PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES',
  PoliticalOrganizations = 'POLITICAL_ORGANIZATIONS',
  PostalServicesGovernmentOnly = 'POSTAL_SERVICES_GOVERNMENT_ONLY',
  PreciousStonesAndMetalsWatchesAndJewelry = 'PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY',
  ProfessionalServices = 'PROFESSIONAL_SERVICES',
  PublicWarehousingAndStorage = 'PUBLIC_WAREHOUSING_AND_STORAGE',
  QuickCopyReproAndBlueprint = 'QUICK_COPY_REPRO_AND_BLUEPRINT',
  Railroads = 'RAILROADS',
  RealEstateAgentsAndManagersRentals = 'REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS',
  RecordStores = 'RECORD_STORES',
  RecreationalVehicleRentals = 'RECREATIONAL_VEHICLE_RENTALS',
  ReligiousGoodsStores = 'RELIGIOUS_GOODS_STORES',
  ReligiousOrganizations = 'RELIGIOUS_ORGANIZATIONS',
  RoofingSidingSheetMetal = 'ROOFING_SIDING_SHEET_METAL',
  SecretarialSupportServices = 'SECRETARIAL_SUPPORT_SERVICES',
  SecurityBrokersDealers = 'SECURITY_BROKERS_DEALERS',
  ServiceStations = 'SERVICE_STATIONS',
  SewingNeedleworkFabricAndPieceGoodsStores = 'SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES',
  ShoeRepairHatCleaning = 'SHOE_REPAIR_HAT_CLEANING',
  ShoeStores = 'SHOE_STORES',
  SmallApplianceRepair = 'SMALL_APPLIANCE_REPAIR',
  SnowmobileDealers = 'SNOWMOBILE_DEALERS',
  SpecialtyCleaning = 'SPECIALTY_CLEANING',
  SpecialTradeServices = 'SPECIAL_TRADE_SERVICES',
  SportingGoodsStores = 'SPORTING_GOODS_STORES',
  SportingRecreationCamps = 'SPORTING_RECREATION_CAMPS',
  SportsAndRidingApparelStores = 'SPORTS_AND_RIDING_APPAREL_STORES',
  SportsClubsFields = 'SPORTS_CLUBS_FIELDS',
  StampAndCoinStores = 'STAMP_AND_COIN_STORES',
  StationaryOfficeSuppliesPrintingAndWritingPaper = 'STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER',
  StationeryStoresOfficeAndSchoolSupplyStores = 'STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES',
  SwimmingPoolsSales = 'SWIMMING_POOLS_SALES',
  TailorsAlterations = 'TAILORS_ALTERATIONS',
  TaxicabsLimousines = 'TAXICABS_LIMOUSINES',
  TaxPaymentsGovernmentAgencies = 'TAX_PAYMENTS_GOVERNMENT_AGENCIES',
  TaxPreparationServices = 'TAX_PREPARATION_SERVICES',
  TelecommunicationEquipmentAndTelephoneSales = 'TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES',
  TelecommunicationServices = 'TELECOMMUNICATION_SERVICES',
  TelegraphServices = 'TELEGRAPH_SERVICES',
  TentAndAwningShops = 'TENT_AND_AWNING_SHOPS',
  TestingLaboratories = 'TESTING_LABORATORIES',
  TheatricalTicketAgencies = 'THEATRICAL_TICKET_AGENCIES',
  Timeshares = 'TIMESHARES',
  TireRetreadingAndRepair = 'TIRE_RETREADING_AND_REPAIR',
  TollsBridgeFees = 'TOLLS_BRIDGE_FEES',
  TouristAttractionsAndExhibits = 'TOURIST_ATTRACTIONS_AND_EXHIBITS',
  TowingServices = 'TOWING_SERVICES',
  TrailerParksCampgrounds = 'TRAILER_PARKS_CAMPGROUNDS',
  TransportationServices = 'TRANSPORTATION_SERVICES',
  TravelAgenciesTourOperators = 'TRAVEL_AGENCIES_TOUR_OPERATORS',
  TruckStopIteration = 'TRUCK_STOP_ITERATION',
  TruckUtilityTrailerRentals = 'TRUCK_UTILITY_TRAILER_RENTALS',
  TypesettingPlateMakingAndRelatedServices = 'TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES',
  TypewriterStores = 'TYPEWRITER_STORES',
  TUiTravelGermany = 'T_UI_TRAVEL_GERMANY',
  UniformsCommercialClothing = 'UNIFORMS_COMMERCIAL_CLOTHING',
  UsedMerchandiseAndSecondhandStores = 'USED_MERCHANDISE_AND_SECONDHAND_STORES',
  Utilities = 'UTILITIES',
  USFederalGovernmentAgenciesOrDepartments = 'U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS',
  VarietyStores = 'VARIETY_STORES',
  VeterinaryServices = 'VETERINARY_SERVICES',
  VideoAmusementGameSupplies = 'VIDEO_AMUSEMENT_GAME_SUPPLIES',
  VideoGameArcades = 'VIDEO_GAME_ARCADES',
  VideoTapeRentalStores = 'VIDEO_TAPE_RENTAL_STORES',
  VocationalTradeSchools = 'VOCATIONAL_TRADE_SCHOOLS',
  WatchJewelryRepair = 'WATCH_JEWELRY_REPAIR',
  WeldingRepair = 'WELDING_REPAIR',
  WholesaleClubs = 'WHOLESALE_CLUBS',
  WigAndToupeeStores = 'WIG_AND_TOUPEE_STORES',
  WiresMoneyOrders = 'WIRES_MONEY_ORDERS',
  WomensAccessoryAndSpecialtyShops = 'WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS',
  WomensReadyToWearStores = 'WOMENS_READY_TO_WEAR_STORES',
  WreckingAndSalvageYards = 'WRECKING_AND_SALVAGE_YARDS'
}

export type StripePostIssuingCardsCustomsShippingInput = {
  eoriNumber?: InputMaybe<Scalars['String']>;
};

export type StripePostIssuingCardsInput = {
  cardholder?: InputMaybe<Scalars['String']>;
  currency: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
  financialAccount?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  replacementFor?: InputMaybe<Scalars['String']>;
  replacementReason?: InputMaybe<StripePostIssuingCardsReplacementReason>;
  shipping?: InputMaybe<StripePostIssuingCardsShippingInput>;
  spendingControls?: InputMaybe<StripePostIssuingCardsSpendingControlsInput>;
  status?: InputMaybe<StripePostIssuingCardsStatus>;
  type: StripePostIssuingCardsType;
};

export enum StripePostIssuingCardsIntervalSpendingLimitsSpendingControls {
  AllTime = 'ALL_TIME',
  Daily = 'DAILY',
  Monthly = 'MONTHLY',
  PerAuthorization = 'PER_AUTHORIZATION',
  Weekly = 'WEEKLY',
  Yearly = 'YEARLY'
}

export enum StripePostIssuingCardsReplacementReason {
  Damaged = 'DAMAGED',
  Expired = 'EXPIRED',
  Lost = 'LOST',
  Stolen = 'STOLEN'
}

export enum StripePostIssuingCardsServiceShipping {
  Express = 'EXPRESS',
  Priority = 'PRIORITY',
  Standard = 'STANDARD'
}

export type StripePostIssuingCardsShippingInput = {
  address: StripePostIssuingCardsAddressShippingInput;
  customs?: InputMaybe<StripePostIssuingCardsCustomsShippingInput>;
  name: Scalars['String'];
  phoneNumber?: InputMaybe<Scalars['String']>;
  requireSignature?: InputMaybe<Scalars['Boolean']>;
  service?: InputMaybe<StripePostIssuingCardsServiceShipping>;
  type?: InputMaybe<StripePostIssuingCardsTypeShipping>;
};

export type StripePostIssuingCardsSpendingControlsInput = {
  allowedCategories?: InputMaybe<Array<StripePostIssuingCardsAllowedCategoriesSpendingControls>>;
  blockedCategories?: InputMaybe<Array<StripePostIssuingCardsBlockedCategoriesSpendingControls>>;
  spendingLimits?: InputMaybe<Array<StripePostIssuingCardsSpendingLimitsSpendingControlsInput>>;
};

export type StripePostIssuingCardsSpendingLimitsSpendingControlsInput = {
  amount: Scalars['Int'];
  categories?: InputMaybe<Array<StripePostIssuingCardsCategoriesSpendingLimitsSpendingControls>>;
  interval: StripePostIssuingCardsIntervalSpendingLimitsSpendingControls;
};

export enum StripePostIssuingCardsStatus {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE'
}

export enum StripePostIssuingCardsType {
  Physical = 'PHYSICAL',
  Virtual = 'VIRTUAL'
}

export enum StripePostIssuingCardsTypeShipping {
  Bulk = 'BULK',
  Individual = 'INDIVIDUAL'
}

export type StripePostIssuingDisputesCanceledEvidenceInput = {
  additionalDocumentation?: InputMaybe<Scalars['JSON']>;
  canceledAt?: InputMaybe<Scalars['JSON']>;
  cancellationPolicyProvided?: InputMaybe<Scalars['JSON']>;
  cancellationReason?: InputMaybe<Scalars['String']>;
  expectedAt?: InputMaybe<Scalars['JSON']>;
  explanation?: InputMaybe<Scalars['String']>;
  productDescription?: InputMaybe<Scalars['String']>;
  productType?: InputMaybe<Scalars['String']>;
  returnStatus?: InputMaybe<Scalars['String']>;
  returnedAt?: InputMaybe<Scalars['JSON']>;
};

export type StripePostIssuingDisputesDisputeCanceledEvidenceInput = {
  additionalDocumentation?: InputMaybe<Scalars['JSON']>;
  canceledAt?: InputMaybe<Scalars['JSON']>;
  cancellationPolicyProvided?: InputMaybe<Scalars['JSON']>;
  cancellationReason?: InputMaybe<Scalars['String']>;
  expectedAt?: InputMaybe<Scalars['JSON']>;
  explanation?: InputMaybe<Scalars['String']>;
  productDescription?: InputMaybe<Scalars['String']>;
  productType?: InputMaybe<Scalars['String']>;
  returnStatus?: InputMaybe<Scalars['String']>;
  returnedAt?: InputMaybe<Scalars['JSON']>;
};

export type StripePostIssuingDisputesDisputeDuplicateEvidenceInput = {
  additionalDocumentation?: InputMaybe<Scalars['JSON']>;
  cardStatement?: InputMaybe<Scalars['JSON']>;
  cashReceipt?: InputMaybe<Scalars['JSON']>;
  checkImage?: InputMaybe<Scalars['JSON']>;
  explanation?: InputMaybe<Scalars['String']>;
  originalTransaction?: InputMaybe<Scalars['String']>;
};

export type StripePostIssuingDisputesDisputeEvidenceInput = {
  canceled?: InputMaybe<StripeStringOrPostIssuingDisputesDisputeCanceledEvidenceUnionInput>;
  duplicate?: InputMaybe<StripeStringOrPostIssuingDisputesDisputeDuplicateEvidenceUnionInput>;
  fraudulent?: InputMaybe<StripeStringOrPostIssuingDisputesDisputeFraudulentEvidenceUnionInput>;
  merchandiseNotAsDescribed?: InputMaybe<StripeStringOrPostIssuingDisputesDisputeMerchandiseNotAsDescribedEvidenceUnionInput>;
  notReceived?: InputMaybe<StripeStringOrPostIssuingDisputesDisputeNotReceivedEvidenceUnionInput>;
  other?: InputMaybe<StripeStringOrPostIssuingDisputesDisputeOtherEvidenceUnionInput>;
  reason?: InputMaybe<StripePostIssuingDisputesDisputeReasonEvidence>;
  serviceNotAsDescribed?: InputMaybe<StripeStringOrPostIssuingDisputesDisputeServiceNotAsDescribedEvidenceUnionInput>;
};

export type StripePostIssuingDisputesDisputeFraudulentEvidenceInput = {
  additionalDocumentation?: InputMaybe<Scalars['JSON']>;
  explanation?: InputMaybe<Scalars['String']>;
};

export type StripePostIssuingDisputesDisputeInput = {
  amount?: InputMaybe<Scalars['Int']>;
  evidence?: InputMaybe<StripePostIssuingDisputesDisputeEvidenceInput>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
};

export type StripePostIssuingDisputesDisputeMerchandiseNotAsDescribedEvidenceInput = {
  additionalDocumentation?: InputMaybe<Scalars['JSON']>;
  explanation?: InputMaybe<Scalars['String']>;
  receivedAt?: InputMaybe<Scalars['JSON']>;
  returnDescription?: InputMaybe<Scalars['String']>;
  returnStatus?: InputMaybe<Scalars['String']>;
  returnedAt?: InputMaybe<Scalars['JSON']>;
};

export type StripePostIssuingDisputesDisputeNotReceivedEvidenceInput = {
  additionalDocumentation?: InputMaybe<Scalars['JSON']>;
  expectedAt?: InputMaybe<Scalars['JSON']>;
  explanation?: InputMaybe<Scalars['String']>;
  productDescription?: InputMaybe<Scalars['String']>;
  productType?: InputMaybe<Scalars['String']>;
};

export type StripePostIssuingDisputesDisputeOtherEvidenceInput = {
  additionalDocumentation?: InputMaybe<Scalars['JSON']>;
  explanation?: InputMaybe<Scalars['String']>;
  productDescription?: InputMaybe<Scalars['String']>;
  productType?: InputMaybe<Scalars['String']>;
};

export enum StripePostIssuingDisputesDisputeReasonEvidence {
  Canceled = 'CANCELED',
  Duplicate = 'DUPLICATE',
  Fraudulent = 'FRAUDULENT',
  MerchandiseNotAsDescribed = 'MERCHANDISE_NOT_AS_DESCRIBED',
  NotReceived = 'NOT_RECEIVED',
  Other = 'OTHER',
  ServiceNotAsDescribed = 'SERVICE_NOT_AS_DESCRIBED'
}

export type StripePostIssuingDisputesDisputeServiceNotAsDescribedEvidenceInput = {
  additionalDocumentation?: InputMaybe<Scalars['JSON']>;
  canceledAt?: InputMaybe<Scalars['JSON']>;
  cancellationReason?: InputMaybe<Scalars['String']>;
  explanation?: InputMaybe<Scalars['String']>;
  receivedAt?: InputMaybe<Scalars['JSON']>;
};

export type StripePostIssuingDisputesDisputeSubmitInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
};

export type StripePostIssuingDisputesDuplicateEvidenceInput = {
  additionalDocumentation?: InputMaybe<Scalars['JSON']>;
  cardStatement?: InputMaybe<Scalars['JSON']>;
  cashReceipt?: InputMaybe<Scalars['JSON']>;
  checkImage?: InputMaybe<Scalars['JSON']>;
  explanation?: InputMaybe<Scalars['String']>;
  originalTransaction?: InputMaybe<Scalars['String']>;
};

export type StripePostIssuingDisputesEvidenceInput = {
  canceled?: InputMaybe<StripeStringOrPostIssuingDisputesCanceledEvidenceUnionInput>;
  duplicate?: InputMaybe<StripeStringOrPostIssuingDisputesDuplicateEvidenceUnionInput>;
  fraudulent?: InputMaybe<StripeStringOrPostIssuingDisputesFraudulentEvidenceUnionInput>;
  merchandiseNotAsDescribed?: InputMaybe<StripeStringOrPostIssuingDisputesMerchandiseNotAsDescribedEvidenceUnionInput>;
  notReceived?: InputMaybe<StripeStringOrPostIssuingDisputesNotReceivedEvidenceUnionInput>;
  other?: InputMaybe<StripeStringOrPostIssuingDisputesOtherEvidenceUnionInput>;
  reason?: InputMaybe<StripePostIssuingDisputesReasonEvidence>;
  serviceNotAsDescribed?: InputMaybe<StripeStringOrPostIssuingDisputesServiceNotAsDescribedEvidenceUnionInput>;
};

export type StripePostIssuingDisputesFraudulentEvidenceInput = {
  additionalDocumentation?: InputMaybe<Scalars['JSON']>;
  explanation?: InputMaybe<Scalars['String']>;
};

export type StripePostIssuingDisputesInput = {
  amount?: InputMaybe<Scalars['Int']>;
  evidence?: InputMaybe<StripePostIssuingDisputesEvidenceInput>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  transaction?: InputMaybe<Scalars['String']>;
  treasury?: InputMaybe<StripePostIssuingDisputesTreasuryInput>;
};

export type StripePostIssuingDisputesMerchandiseNotAsDescribedEvidenceInput = {
  additionalDocumentation?: InputMaybe<Scalars['JSON']>;
  explanation?: InputMaybe<Scalars['String']>;
  receivedAt?: InputMaybe<Scalars['JSON']>;
  returnDescription?: InputMaybe<Scalars['String']>;
  returnStatus?: InputMaybe<Scalars['String']>;
  returnedAt?: InputMaybe<Scalars['JSON']>;
};

export type StripePostIssuingDisputesNotReceivedEvidenceInput = {
  additionalDocumentation?: InputMaybe<Scalars['JSON']>;
  expectedAt?: InputMaybe<Scalars['JSON']>;
  explanation?: InputMaybe<Scalars['String']>;
  productDescription?: InputMaybe<Scalars['String']>;
  productType?: InputMaybe<Scalars['String']>;
};

export type StripePostIssuingDisputesOtherEvidenceInput = {
  additionalDocumentation?: InputMaybe<Scalars['JSON']>;
  explanation?: InputMaybe<Scalars['String']>;
  productDescription?: InputMaybe<Scalars['String']>;
  productType?: InputMaybe<Scalars['String']>;
};

export enum StripePostIssuingDisputesReasonEvidence {
  Canceled = 'CANCELED',
  Duplicate = 'DUPLICATE',
  Fraudulent = 'FRAUDULENT',
  MerchandiseNotAsDescribed = 'MERCHANDISE_NOT_AS_DESCRIBED',
  NotReceived = 'NOT_RECEIVED',
  Other = 'OTHER',
  ServiceNotAsDescribed = 'SERVICE_NOT_AS_DESCRIBED'
}

export type StripePostIssuingDisputesServiceNotAsDescribedEvidenceInput = {
  additionalDocumentation?: InputMaybe<Scalars['JSON']>;
  canceledAt?: InputMaybe<Scalars['JSON']>;
  cancellationReason?: InputMaybe<Scalars['String']>;
  explanation?: InputMaybe<Scalars['String']>;
  receivedAt?: InputMaybe<Scalars['JSON']>;
};

export type StripePostIssuingDisputesTreasuryInput = {
  receivedDebit: Scalars['String'];
};

export type StripePostIssuingSettlementsSettlementInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
};

export type StripePostIssuingTransactionsTransactionInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
};

export type StripePostLinkAccountSessionsAccountHolderInput = {
  account?: InputMaybe<Scalars['String']>;
  customer?: InputMaybe<Scalars['String']>;
  type: StripePostLinkAccountSessionsTypeAccountHolder;
};

export type StripePostLinkAccountSessionsFiltersInput = {
  countries: Array<Scalars['String']>;
};

export type StripePostLinkAccountSessionsInput = {
  accountHolder: StripePostLinkAccountSessionsAccountHolderInput;
  expand?: InputMaybe<Array<Scalars['String']>>;
  filters?: InputMaybe<StripePostLinkAccountSessionsFiltersInput>;
  permissions: Array<StripePostLinkAccountSessionsPermissions>;
  returnUrl?: InputMaybe<Scalars['String']>;
};

export enum StripePostLinkAccountSessionsPermissions {
  Balances = 'BALANCES',
  Ownership = 'OWNERSHIP',
  PaymentMethod = 'PAYMENT_METHOD',
  Transactions = 'TRANSACTIONS'
}

export enum StripePostLinkAccountSessionsTypeAccountHolder {
  Account = 'ACCOUNT',
  Customer = 'CUSTOMER'
}

export type StripePostLinkedAccountsAccountDisconnectInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export enum StripePostLinkedAccountsAccountRefreshFeatures {
  Balance = 'BALANCE',
  Ownership = 'OWNERSHIP'
}

export type StripePostLinkedAccountsAccountRefreshInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  features: Array<StripePostLinkedAccountsAccountRefreshFeatures>;
};

export enum StripePostPaymentIntentsAccountHolderTypeUsBankAccountPaymentMethodData {
  Company = 'COMPANY',
  Individual = 'INDIVIDUAL'
}

export enum StripePostPaymentIntentsAccountTypeUsBankAccountPaymentMethodData {
  Checking = 'CHECKING',
  Savings = 'SAVINGS'
}

export type StripePostPaymentIntentsAcssDebitPaymentMethodDataInput = {
  accountNumber: Scalars['String'];
  institutionNumber: Scalars['String'];
  transitNumber: Scalars['String'];
};

export type StripePostPaymentIntentsAcssDebitPaymentMethodOptionsInput = {
  mandateOptions?: InputMaybe<StripePostPaymentIntentsMandateOptionsAcssDebitPaymentMethodOptionsInput>;
  setupFutureUsage?: InputMaybe<Scalars['String']>;
  verificationMethod?: InputMaybe<StripePostPaymentIntentsVerificationMethodAcssDebitPaymentMethodOptions>;
};

export type StripePostPaymentIntentsAddressBillingDetailsPaymentMethodDataInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsAddressShippingInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsAffirmPaymentMethodOptionsInput = {
  captureMethod?: InputMaybe<Scalars['String']>;
  preferredLocale?: InputMaybe<Scalars['String']>;
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsSetupFutureUsageAffirmPaymentMethodOptions>;
};

export type StripePostPaymentIntentsAfterpayClearpayPaymentMethodOptionsInput = {
  captureMethod?: InputMaybe<Scalars['String']>;
  reference?: InputMaybe<Scalars['String']>;
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsSetupFutureUsageAfterpayClearpayPaymentMethodOptions>;
};

export type StripePostPaymentIntentsAlipayPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<Scalars['String']>;
};

export enum StripePostPaymentIntentsAmountTypeMandateOptionsCardPaymentMethodOptions {
  Fixed = 'FIXED',
  Maximum = 'MAXIMUM'
}

export type StripePostPaymentIntentsAuBecsDebitPaymentMethodDataInput = {
  accountNumber: Scalars['String'];
  bsbNumber: Scalars['String'];
};

export type StripePostPaymentIntentsAuBecsDebitPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsAutomaticPaymentMethodsInput = {
  enabled: Scalars['Boolean'];
};

export type StripePostPaymentIntentsBacsDebitPaymentMethodDataInput = {
  accountNumber?: InputMaybe<Scalars['String']>;
  sortCode?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsBacsDebitPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsBancontactPaymentMethodOptionsInput = {
  preferredLanguage?: InputMaybe<StripePostPaymentIntentsPreferredLanguageBancontactPaymentMethodOptions>;
  setupFutureUsage?: InputMaybe<Scalars['String']>;
};

export enum StripePostPaymentIntentsBankEpsPaymentMethodData {
  ArzteUndApothekerBank = 'ARZTE_UND_APOTHEKER_BANK',
  AustrianAnadiBankAg = 'AUSTRIAN_ANADI_BANK_AG',
  BankhausCarlSpangler = 'BANKHAUS_CARL_SPANGLER',
  BankhausSchelhammerUndSchatteraAg = 'BANKHAUS_SCHELHAMMER_UND_SCHATTERA_AG',
  BankAustria = 'BANK_AUSTRIA',
  BawagPskAg = 'BAWAG_PSK_AG',
  BksBankAg = 'BKS_BANK_AG',
  BrullKallmusBankAg = 'BRULL_KALLMUS_BANK_AG',
  BtvVierLanderBank = 'BTV_VIER_LANDER_BANK',
  CapitalBankGraweGruppeAg = 'CAPITAL_BANK_GRAWE_GRUPPE_AG',
  DeutscheBankAg = 'DEUTSCHE_BANK_AG',
  Dolomitenbank = 'DOLOMITENBANK',
  EasybankAg = 'EASYBANK_AG',
  ErsteBankUndSparkassen = 'ERSTE_BANK_UND_SPARKASSEN',
  HypoAlpeadriabankInternationalAg = 'HYPO_ALPEADRIABANK_INTERNATIONAL_AG',
  HypoBankBurgenlandAktiengesellschaft = 'HYPO_BANK_BURGENLAND_AKTIENGESELLSCHAFT',
  HypoNoeLbFurNiederosterreichUWien = 'HYPO_NOE_LB_FUR_NIEDEROSTERREICH_U_WIEN',
  HypoOberosterreichSalzburgSteiermark = 'HYPO_OBEROSTERREICH_SALZBURG_STEIERMARK',
  HypoTirolBankAg = 'HYPO_TIROL_BANK_AG',
  HypoVorarlbergBankAg = 'HYPO_VORARLBERG_BANK_AG',
  MarchfelderBank = 'MARCHFELDER_BANK',
  OberbankAg = 'OBERBANK_AG',
  RaiffeisenBankengruppeOsterreich = 'RAIFFEISEN_BANKENGRUPPE_OSTERREICH',
  SchoellerbankAg = 'SCHOELLERBANK_AG',
  SpardaBankWien = 'SPARDA_BANK_WIEN',
  VolksbankGruppe = 'VOLKSBANK_GRUPPE',
  VolkskreditbankAg = 'VOLKSKREDITBANK_AG',
  VrBankBraunau = 'VR_BANK_BRAUNAU'
}

export enum StripePostPaymentIntentsBankFpxPaymentMethodData {
  AffinBank = 'AFFIN_BANK',
  Agrobank = 'AGROBANK',
  AllianceBank = 'ALLIANCE_BANK',
  Ambank = 'AMBANK',
  BankIslam = 'BANK_ISLAM',
  BankMuamalat = 'BANK_MUAMALAT',
  BankOfChina = 'BANK_OF_CHINA',
  BankRakyat = 'BANK_RAKYAT',
  Bsn = 'BSN',
  Cimb = 'CIMB',
  DeutscheBank = 'DEUTSCHE_BANK',
  HongLeongBank = 'HONG_LEONG_BANK',
  Hsbc = 'HSBC',
  Kfh = 'KFH',
  Maybank_2E = 'MAYBANK_2E',
  Maybank_2U = 'MAYBANK_2U',
  Ocbc = 'OCBC',
  PbEnterprise = 'PB_ENTERPRISE',
  PublicBank = 'PUBLIC_BANK',
  Rhb = 'RHB',
  StandardChartered = 'STANDARD_CHARTERED',
  Uob = 'UOB'
}

export enum StripePostPaymentIntentsBankIdealPaymentMethodData {
  AbnAmro = 'ABN_AMRO',
  AsnBank = 'ASN_BANK',
  Bunq = 'BUNQ',
  Handelsbanken = 'HANDELSBANKEN',
  Ing = 'ING',
  Knab = 'KNAB',
  Moneyou = 'MONEYOU',
  Rabobank = 'RABOBANK',
  Regiobank = 'REGIOBANK',
  Revolut = 'REVOLUT',
  SnsBank = 'SNS_BANK',
  TriodosBank = 'TRIODOS_BANK',
  VanLanschot = 'VAN_LANSCHOT',
  Yoursafe = 'YOURSAFE'
}

export enum StripePostPaymentIntentsBankP24PaymentMethodData {
  AliorBank = 'ALIOR_BANK',
  BankiSpbdzielcze = 'BANKI_SPBDZIELCZE',
  BankMillennium = 'BANK_MILLENNIUM',
  BankNowyBfgSa = 'BANK_NOWY_BFG_SA',
  BankPekaoSa = 'BANK_PEKAO_SA',
  Blik = 'BLIK',
  BnpParibas = 'BNP_PARIBAS',
  Boz = 'BOZ',
  CitiHandlowy = 'CITI_HANDLOWY',
  CreditAgricole = 'CREDIT_AGRICOLE',
  Envelobank = 'ENVELOBANK',
  EtransferPocztowy_24 = 'ETRANSFER_POCZTOWY_24',
  GetinBank = 'GETIN_BANK',
  Ideabank = 'IDEABANK',
  Ing = 'ING',
  Inteligo = 'INTELIGO',
  MbankMtransfer = 'MBANK_MTRANSFER',
  NestPrzelew = 'NEST_PRZELEW',
  NoblePay = 'NOBLE_PAY',
  PbacZIpko = 'PBAC_Z_IPKO',
  PlusBank = 'PLUS_BANK',
  SantanderPrzelew_24 = 'SANTANDER_PRZELEW_24',
  TmobileUsbugiBankowe = 'TMOBILE_USBUGI_BANKOWE',
  ToyotaBank = 'TOYOTA_BANK',
  VolkswagenBank = 'VOLKSWAGEN_BANK'
}

export type StripePostPaymentIntentsBankTransferCustomerBalancePaymentMethodOptionsInput = {
  euBankTransfer?: InputMaybe<StripePostPaymentIntentsEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsInput>;
  requestedAddressTypes?: InputMaybe<Array<StripePostPaymentIntentsRequestedAddressTypesBankTransferCustomerBalancePaymentMethodOptions>>;
  type: StripePostPaymentIntentsTypeBankTransferCustomerBalancePaymentMethodOptions;
};

export type StripePostPaymentIntentsBillingDetailsPaymentMethodDataInput = {
  address?: InputMaybe<StripeStringOrPostPaymentIntentsAddressBillingDetailsPaymentMethodDataUnionInput>;
  email?: InputMaybe<Scalars['JSON']>;
  name?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsBlikPaymentMethodOptionsInput = {
  code?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsBoletoPaymentMethodDataInput = {
  taxId: Scalars['String'];
};

export type StripePostPaymentIntentsBoletoPaymentMethodOptionsInput = {
  expiresAfterDays?: InputMaybe<Scalars['Int']>;
  setupFutureUsage?: InputMaybe<Scalars['String']>;
};

export enum StripePostPaymentIntentsCaptureMethod {
  Automatic = 'AUTOMATIC',
  AutomaticAsync = 'AUTOMATIC_ASYNC',
  Manual = 'MANUAL'
}

export type StripePostPaymentIntentsCardPaymentMethodOptionsInput = {
  captureMethod?: InputMaybe<Scalars['String']>;
  cvcToken?: InputMaybe<Scalars['String']>;
  installments?: InputMaybe<StripePostPaymentIntentsInstallmentsCardPaymentMethodOptionsInput>;
  mandateOptions?: InputMaybe<StripePostPaymentIntentsMandateOptionsCardPaymentMethodOptionsInput>;
  network?: InputMaybe<StripePostPaymentIntentsNetworkCardPaymentMethodOptions>;
  requestThreeDSecure?: InputMaybe<StripePostPaymentIntentsRequestThreeDSecureCardPaymentMethodOptions>;
  setupFutureUsage?: InputMaybe<Scalars['String']>;
  statementDescriptorSuffixKana?: InputMaybe<Scalars['JSON']>;
  statementDescriptorSuffixKanji?: InputMaybe<Scalars['JSON']>;
};

export type StripePostPaymentIntentsCardPresentPaymentMethodOptionsInput = {
  requestExtendedAuthorization?: InputMaybe<Scalars['Boolean']>;
  requestIncrementalAuthorizationSupport?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostPaymentIntentsCashappPaymentMethodOptionsInput = {
  captureMethod?: InputMaybe<Scalars['String']>;
  setupFutureUsage?: InputMaybe<Scalars['String']>;
};

export enum StripePostPaymentIntentsClientWechatPayPaymentMethodOptions {
  Android = 'ANDROID',
  Ios = 'IOS',
  Web = 'WEB'
}

export enum StripePostPaymentIntentsConfirmationMethod {
  Automatic = 'AUTOMATIC',
  Manual = 'MANUAL'
}

export enum StripePostPaymentIntentsCountrySofortPaymentMethodData {
  At = 'AT',
  Be = 'BE',
  De = 'DE',
  Es = 'ES',
  It = 'IT',
  Nl = 'NL'
}

export type StripePostPaymentIntentsCustomerAcceptanceMandateDataInput = {
  acceptedAt?: InputMaybe<Scalars['Int']>;
  offline?: InputMaybe<Scalars['JSON']>;
  online?: InputMaybe<StripePostPaymentIntentsOnlineCustomerAcceptanceMandateDataInput>;
  type: StripePostPaymentIntentsTypeCustomerAcceptanceMandateData;
};

export type StripePostPaymentIntentsCustomerBalancePaymentMethodOptionsInput = {
  bankTransfer?: InputMaybe<StripePostPaymentIntentsBankTransferCustomerBalancePaymentMethodOptionsInput>;
  fundingType?: InputMaybe<StripePostPaymentIntentsFundingTypeCustomerBalancePaymentMethodOptions>;
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsSetupFutureUsageCustomerBalancePaymentMethodOptions>;
};

export type StripePostPaymentIntentsDobKlarnaPaymentMethodDataInput = {
  day: Scalars['Int'];
  month: Scalars['Int'];
  year: Scalars['Int'];
};

export type StripePostPaymentIntentsEpsPaymentMethodDataInput = {
  bank?: InputMaybe<StripePostPaymentIntentsBankEpsPaymentMethodData>;
};

export type StripePostPaymentIntentsEpsPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsSetupFutureUsageEpsPaymentMethodOptions>;
};

export type StripePostPaymentIntentsEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsInput = {
  country: Scalars['String'];
};

export type StripePostPaymentIntentsFinancialConnectionsUsBankAccountPaymentMethodOptionsInput = {
  permissions?: InputMaybe<Array<StripePostPaymentIntentsPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions>>;
  returnUrl?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsFpxPaymentMethodDataInput = {
  bank: StripePostPaymentIntentsBankFpxPaymentMethodData;
};

export type StripePostPaymentIntentsFpxPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsSetupFutureUsageFpxPaymentMethodOptions>;
};

export enum StripePostPaymentIntentsFundingTypeCustomerBalancePaymentMethodOptions {
  BankTransfer = 'BANK_TRANSFER'
}

export type StripePostPaymentIntentsGiropayPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsSetupFutureUsageGiropayPaymentMethodOptions>;
};

export type StripePostPaymentIntentsGrabpayPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsSetupFutureUsageGrabpayPaymentMethodOptions>;
};

export type StripePostPaymentIntentsIdealPaymentMethodDataInput = {
  bank?: InputMaybe<StripePostPaymentIntentsBankIdealPaymentMethodData>;
};

export type StripePostPaymentIntentsIdealPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsInput = {
  amount: Scalars['Int'];
  applicationFeeAmount?: InputMaybe<Scalars['Int']>;
  automaticPaymentMethods?: InputMaybe<StripePostPaymentIntentsAutomaticPaymentMethodsInput>;
  captureMethod?: InputMaybe<StripePostPaymentIntentsCaptureMethod>;
  confirm?: InputMaybe<Scalars['Boolean']>;
  confirmationMethod?: InputMaybe<StripePostPaymentIntentsConfirmationMethod>;
  currency: Scalars['String'];
  customer?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  errorOnRequiresAction?: InputMaybe<Scalars['Boolean']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  mandate?: InputMaybe<Scalars['String']>;
  mandateData?: InputMaybe<StripePostPaymentIntentsMandateDataInput>;
  metadata?: InputMaybe<Scalars['JSON']>;
  offSession?: InputMaybe<Scalars['JSON']>;
  onBehalfOf?: InputMaybe<Scalars['String']>;
  paymentMethod?: InputMaybe<Scalars['String']>;
  paymentMethodData?: InputMaybe<StripePostPaymentIntentsPaymentMethodDataInput>;
  paymentMethodOptions?: InputMaybe<StripePostPaymentIntentsPaymentMethodOptionsInput>;
  paymentMethodTypes?: InputMaybe<Array<Scalars['String']>>;
  radarOptions?: InputMaybe<StripePostPaymentIntentsRadarOptionsInput>;
  receiptEmail?: InputMaybe<Scalars['String']>;
  returnUrl?: InputMaybe<Scalars['String']>;
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsSetupFutureUsage>;
  shipping?: InputMaybe<StripePostPaymentIntentsShippingInput>;
  statementDescriptor?: InputMaybe<Scalars['String']>;
  statementDescriptorSuffix?: InputMaybe<Scalars['String']>;
  transferData?: InputMaybe<StripePostPaymentIntentsTransferDataInput>;
  transferGroup?: InputMaybe<Scalars['String']>;
  useStripeSdk?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostPaymentIntentsInstallmentsCardPaymentMethodOptionsInput = {
  enabled?: InputMaybe<Scalars['Boolean']>;
  plan?: InputMaybe<StripeStringOrPostPaymentIntentsPlanInstallmentsCardPaymentMethodOptionsUnionInput>;
};

export enum StripePostPaymentIntentsIntentAccountHolderTypeUsBankAccountPaymentMethodData {
  Company = 'COMPANY',
  Individual = 'INDIVIDUAL'
}

export enum StripePostPaymentIntentsIntentAccountTypeUsBankAccountPaymentMethodData {
  Checking = 'CHECKING',
  Savings = 'SAVINGS'
}

export type StripePostPaymentIntentsIntentAcssDebitPaymentMethodDataInput = {
  accountNumber: Scalars['String'];
  institutionNumber: Scalars['String'];
  transitNumber: Scalars['String'];
};

export type StripePostPaymentIntentsIntentAcssDebitPaymentMethodOptionsInput = {
  mandateOptions?: InputMaybe<StripePostPaymentIntentsIntentMandateOptionsAcssDebitPaymentMethodOptionsInput>;
  setupFutureUsage?: InputMaybe<Scalars['String']>;
  verificationMethod?: InputMaybe<StripePostPaymentIntentsIntentVerificationMethodAcssDebitPaymentMethodOptions>;
};

export type StripePostPaymentIntentsIntentAddressBillingDetailsPaymentMethodDataInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsIntentAddressShippingInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsIntentAffirmPaymentMethodOptionsInput = {
  captureMethod?: InputMaybe<Scalars['String']>;
  preferredLocale?: InputMaybe<Scalars['String']>;
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsIntentSetupFutureUsageAffirmPaymentMethodOptions>;
};

export type StripePostPaymentIntentsIntentAfterpayClearpayPaymentMethodOptionsInput = {
  captureMethod?: InputMaybe<Scalars['String']>;
  reference?: InputMaybe<Scalars['String']>;
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsIntentSetupFutureUsageAfterpayClearpayPaymentMethodOptions>;
};

export type StripePostPaymentIntentsIntentAlipayPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<Scalars['String']>;
};

export enum StripePostPaymentIntentsIntentAmountTypeMandateOptionsCardPaymentMethodOptions {
  Fixed = 'FIXED',
  Maximum = 'MAXIMUM'
}

export type StripePostPaymentIntentsIntentApplyCustomerBalanceInput = {
  amount?: InputMaybe<Scalars['Int']>;
  currency?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostPaymentIntentsIntentAuBecsDebitPaymentMethodDataInput = {
  accountNumber: Scalars['String'];
  bsbNumber: Scalars['String'];
};

export type StripePostPaymentIntentsIntentAuBecsDebitPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsIntentBacsDebitPaymentMethodDataInput = {
  accountNumber?: InputMaybe<Scalars['String']>;
  sortCode?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsIntentBacsDebitPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsIntentBancontactPaymentMethodOptionsInput = {
  preferredLanguage?: InputMaybe<StripePostPaymentIntentsIntentPreferredLanguageBancontactPaymentMethodOptions>;
  setupFutureUsage?: InputMaybe<Scalars['String']>;
};

export enum StripePostPaymentIntentsIntentBankEpsPaymentMethodData {
  ArzteUndApothekerBank = 'ARZTE_UND_APOTHEKER_BANK',
  AustrianAnadiBankAg = 'AUSTRIAN_ANADI_BANK_AG',
  BankhausCarlSpangler = 'BANKHAUS_CARL_SPANGLER',
  BankhausSchelhammerUndSchatteraAg = 'BANKHAUS_SCHELHAMMER_UND_SCHATTERA_AG',
  BankAustria = 'BANK_AUSTRIA',
  BawagPskAg = 'BAWAG_PSK_AG',
  BksBankAg = 'BKS_BANK_AG',
  BrullKallmusBankAg = 'BRULL_KALLMUS_BANK_AG',
  BtvVierLanderBank = 'BTV_VIER_LANDER_BANK',
  CapitalBankGraweGruppeAg = 'CAPITAL_BANK_GRAWE_GRUPPE_AG',
  DeutscheBankAg = 'DEUTSCHE_BANK_AG',
  Dolomitenbank = 'DOLOMITENBANK',
  EasybankAg = 'EASYBANK_AG',
  ErsteBankUndSparkassen = 'ERSTE_BANK_UND_SPARKASSEN',
  HypoAlpeadriabankInternationalAg = 'HYPO_ALPEADRIABANK_INTERNATIONAL_AG',
  HypoBankBurgenlandAktiengesellschaft = 'HYPO_BANK_BURGENLAND_AKTIENGESELLSCHAFT',
  HypoNoeLbFurNiederosterreichUWien = 'HYPO_NOE_LB_FUR_NIEDEROSTERREICH_U_WIEN',
  HypoOberosterreichSalzburgSteiermark = 'HYPO_OBEROSTERREICH_SALZBURG_STEIERMARK',
  HypoTirolBankAg = 'HYPO_TIROL_BANK_AG',
  HypoVorarlbergBankAg = 'HYPO_VORARLBERG_BANK_AG',
  MarchfelderBank = 'MARCHFELDER_BANK',
  OberbankAg = 'OBERBANK_AG',
  RaiffeisenBankengruppeOsterreich = 'RAIFFEISEN_BANKENGRUPPE_OSTERREICH',
  SchoellerbankAg = 'SCHOELLERBANK_AG',
  SpardaBankWien = 'SPARDA_BANK_WIEN',
  VolksbankGruppe = 'VOLKSBANK_GRUPPE',
  VolkskreditbankAg = 'VOLKSKREDITBANK_AG',
  VrBankBraunau = 'VR_BANK_BRAUNAU'
}

export enum StripePostPaymentIntentsIntentBankFpxPaymentMethodData {
  AffinBank = 'AFFIN_BANK',
  Agrobank = 'AGROBANK',
  AllianceBank = 'ALLIANCE_BANK',
  Ambank = 'AMBANK',
  BankIslam = 'BANK_ISLAM',
  BankMuamalat = 'BANK_MUAMALAT',
  BankOfChina = 'BANK_OF_CHINA',
  BankRakyat = 'BANK_RAKYAT',
  Bsn = 'BSN',
  Cimb = 'CIMB',
  DeutscheBank = 'DEUTSCHE_BANK',
  HongLeongBank = 'HONG_LEONG_BANK',
  Hsbc = 'HSBC',
  Kfh = 'KFH',
  Maybank_2E = 'MAYBANK_2E',
  Maybank_2U = 'MAYBANK_2U',
  Ocbc = 'OCBC',
  PbEnterprise = 'PB_ENTERPRISE',
  PublicBank = 'PUBLIC_BANK',
  Rhb = 'RHB',
  StandardChartered = 'STANDARD_CHARTERED',
  Uob = 'UOB'
}

export enum StripePostPaymentIntentsIntentBankIdealPaymentMethodData {
  AbnAmro = 'ABN_AMRO',
  AsnBank = 'ASN_BANK',
  Bunq = 'BUNQ',
  Handelsbanken = 'HANDELSBANKEN',
  Ing = 'ING',
  Knab = 'KNAB',
  Moneyou = 'MONEYOU',
  Rabobank = 'RABOBANK',
  Regiobank = 'REGIOBANK',
  Revolut = 'REVOLUT',
  SnsBank = 'SNS_BANK',
  TriodosBank = 'TRIODOS_BANK',
  VanLanschot = 'VAN_LANSCHOT',
  Yoursafe = 'YOURSAFE'
}

export enum StripePostPaymentIntentsIntentBankP24PaymentMethodData {
  AliorBank = 'ALIOR_BANK',
  BankiSpbdzielcze = 'BANKI_SPBDZIELCZE',
  BankMillennium = 'BANK_MILLENNIUM',
  BankNowyBfgSa = 'BANK_NOWY_BFG_SA',
  BankPekaoSa = 'BANK_PEKAO_SA',
  Blik = 'BLIK',
  BnpParibas = 'BNP_PARIBAS',
  Boz = 'BOZ',
  CitiHandlowy = 'CITI_HANDLOWY',
  CreditAgricole = 'CREDIT_AGRICOLE',
  Envelobank = 'ENVELOBANK',
  EtransferPocztowy_24 = 'ETRANSFER_POCZTOWY_24',
  GetinBank = 'GETIN_BANK',
  Ideabank = 'IDEABANK',
  Ing = 'ING',
  Inteligo = 'INTELIGO',
  MbankMtransfer = 'MBANK_MTRANSFER',
  NestPrzelew = 'NEST_PRZELEW',
  NoblePay = 'NOBLE_PAY',
  PbacZIpko = 'PBAC_Z_IPKO',
  PlusBank = 'PLUS_BANK',
  SantanderPrzelew_24 = 'SANTANDER_PRZELEW_24',
  TmobileUsbugiBankowe = 'TMOBILE_USBUGI_BANKOWE',
  ToyotaBank = 'TOYOTA_BANK',
  VolkswagenBank = 'VOLKSWAGEN_BANK'
}

export type StripePostPaymentIntentsIntentBankTransferCustomerBalancePaymentMethodOptionsInput = {
  euBankTransfer?: InputMaybe<StripePostPaymentIntentsIntentEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsInput>;
  requestedAddressTypes?: InputMaybe<Array<StripePostPaymentIntentsIntentRequestedAddressTypesBankTransferCustomerBalancePaymentMethodOptions>>;
  type: StripePostPaymentIntentsIntentTypeBankTransferCustomerBalancePaymentMethodOptions;
};

export type StripePostPaymentIntentsIntentBillingDetailsPaymentMethodDataInput = {
  address?: InputMaybe<StripeStringOrPostPaymentIntentsIntentAddressBillingDetailsPaymentMethodDataUnionInput>;
  email?: InputMaybe<Scalars['JSON']>;
  name?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsIntentBlikPaymentMethodOptionsInput = {
  code?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsIntentBoletoPaymentMethodDataInput = {
  taxId: Scalars['String'];
};

export type StripePostPaymentIntentsIntentBoletoPaymentMethodOptionsInput = {
  expiresAfterDays?: InputMaybe<Scalars['Int']>;
  setupFutureUsage?: InputMaybe<Scalars['String']>;
};

export enum StripePostPaymentIntentsIntentCancelCancellationReason {
  Abandoned = 'ABANDONED',
  Duplicate = 'DUPLICATE',
  Fraudulent = 'FRAUDULENT',
  RequestedByCustomer = 'REQUESTED_BY_CUSTOMER'
}

export type StripePostPaymentIntentsIntentCancelInput = {
  cancellationReason?: InputMaybe<StripePostPaymentIntentsIntentCancelCancellationReason>;
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostPaymentIntentsIntentCaptureInput = {
  amountToCapture?: InputMaybe<Scalars['Int']>;
  applicationFeeAmount?: InputMaybe<Scalars['Int']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  statementDescriptor?: InputMaybe<Scalars['String']>;
  statementDescriptorSuffix?: InputMaybe<Scalars['String']>;
  transferData?: InputMaybe<StripePostPaymentIntentsIntentCaptureTransferDataInput>;
};

export enum StripePostPaymentIntentsIntentCaptureMethod {
  Automatic = 'AUTOMATIC',
  AutomaticAsync = 'AUTOMATIC_ASYNC',
  Manual = 'MANUAL'
}

export type StripePostPaymentIntentsIntentCaptureTransferDataInput = {
  amount?: InputMaybe<Scalars['Int']>;
};

export type StripePostPaymentIntentsIntentCardPaymentMethodOptionsInput = {
  captureMethod?: InputMaybe<Scalars['String']>;
  cvcToken?: InputMaybe<Scalars['String']>;
  installments?: InputMaybe<StripePostPaymentIntentsIntentInstallmentsCardPaymentMethodOptionsInput>;
  mandateOptions?: InputMaybe<StripePostPaymentIntentsIntentMandateOptionsCardPaymentMethodOptionsInput>;
  network?: InputMaybe<StripePostPaymentIntentsIntentNetworkCardPaymentMethodOptions>;
  requestThreeDSecure?: InputMaybe<StripePostPaymentIntentsIntentRequestThreeDSecureCardPaymentMethodOptions>;
  setupFutureUsage?: InputMaybe<Scalars['String']>;
  statementDescriptorSuffixKana?: InputMaybe<Scalars['JSON']>;
  statementDescriptorSuffixKanji?: InputMaybe<Scalars['JSON']>;
};

export type StripePostPaymentIntentsIntentCardPresentPaymentMethodOptionsInput = {
  requestExtendedAuthorization?: InputMaybe<Scalars['Boolean']>;
  requestIncrementalAuthorizationSupport?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostPaymentIntentsIntentCashappPaymentMethodOptionsInput = {
  captureMethod?: InputMaybe<Scalars['String']>;
  setupFutureUsage?: InputMaybe<Scalars['String']>;
};

export enum StripePostPaymentIntentsIntentClientWechatPayPaymentMethodOptions {
  Android = 'ANDROID',
  Ios = 'IOS',
  Web = 'WEB'
}

export enum StripePostPaymentIntentsIntentConfirmAccountHolderTypeUsBankAccountPaymentMethodData {
  Company = 'COMPANY',
  Individual = 'INDIVIDUAL'
}

export enum StripePostPaymentIntentsIntentConfirmAccountTypeUsBankAccountPaymentMethodData {
  Checking = 'CHECKING',
  Savings = 'SAVINGS'
}

export type StripePostPaymentIntentsIntentConfirmAcssDebitPaymentMethodDataInput = {
  accountNumber: Scalars['String'];
  institutionNumber: Scalars['String'];
  transitNumber: Scalars['String'];
};

export type StripePostPaymentIntentsIntentConfirmAcssDebitPaymentMethodOptionsInput = {
  mandateOptions?: InputMaybe<StripePostPaymentIntentsIntentConfirmMandateOptionsAcssDebitPaymentMethodOptionsInput>;
  setupFutureUsage?: InputMaybe<Scalars['String']>;
  verificationMethod?: InputMaybe<StripePostPaymentIntentsIntentConfirmVerificationMethodAcssDebitPaymentMethodOptions>;
};

export type StripePostPaymentIntentsIntentConfirmAddressBillingDetailsPaymentMethodDataInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsIntentConfirmAddressShippingInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsIntentConfirmAffirmPaymentMethodOptionsInput = {
  captureMethod?: InputMaybe<Scalars['String']>;
  preferredLocale?: InputMaybe<Scalars['String']>;
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsIntentConfirmSetupFutureUsageAffirmPaymentMethodOptions>;
};

export type StripePostPaymentIntentsIntentConfirmAfterpayClearpayPaymentMethodOptionsInput = {
  captureMethod?: InputMaybe<Scalars['String']>;
  reference?: InputMaybe<Scalars['String']>;
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsIntentConfirmSetupFutureUsageAfterpayClearpayPaymentMethodOptions>;
};

export type StripePostPaymentIntentsIntentConfirmAlipayPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<Scalars['String']>;
};

export enum StripePostPaymentIntentsIntentConfirmAmountTypeMandateOptionsCardPaymentMethodOptions {
  Fixed = 'FIXED',
  Maximum = 'MAXIMUM'
}

export type StripePostPaymentIntentsIntentConfirmAuBecsDebitPaymentMethodDataInput = {
  accountNumber: Scalars['String'];
  bsbNumber: Scalars['String'];
};

export type StripePostPaymentIntentsIntentConfirmAuBecsDebitPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsIntentConfirmBacsDebitPaymentMethodDataInput = {
  accountNumber?: InputMaybe<Scalars['String']>;
  sortCode?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsIntentConfirmBacsDebitPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsIntentConfirmBancontactPaymentMethodOptionsInput = {
  preferredLanguage?: InputMaybe<StripePostPaymentIntentsIntentConfirmPreferredLanguageBancontactPaymentMethodOptions>;
  setupFutureUsage?: InputMaybe<Scalars['String']>;
};

export enum StripePostPaymentIntentsIntentConfirmBankEpsPaymentMethodData {
  ArzteUndApothekerBank = 'ARZTE_UND_APOTHEKER_BANK',
  AustrianAnadiBankAg = 'AUSTRIAN_ANADI_BANK_AG',
  BankhausCarlSpangler = 'BANKHAUS_CARL_SPANGLER',
  BankhausSchelhammerUndSchatteraAg = 'BANKHAUS_SCHELHAMMER_UND_SCHATTERA_AG',
  BankAustria = 'BANK_AUSTRIA',
  BawagPskAg = 'BAWAG_PSK_AG',
  BksBankAg = 'BKS_BANK_AG',
  BrullKallmusBankAg = 'BRULL_KALLMUS_BANK_AG',
  BtvVierLanderBank = 'BTV_VIER_LANDER_BANK',
  CapitalBankGraweGruppeAg = 'CAPITAL_BANK_GRAWE_GRUPPE_AG',
  DeutscheBankAg = 'DEUTSCHE_BANK_AG',
  Dolomitenbank = 'DOLOMITENBANK',
  EasybankAg = 'EASYBANK_AG',
  ErsteBankUndSparkassen = 'ERSTE_BANK_UND_SPARKASSEN',
  HypoAlpeadriabankInternationalAg = 'HYPO_ALPEADRIABANK_INTERNATIONAL_AG',
  HypoBankBurgenlandAktiengesellschaft = 'HYPO_BANK_BURGENLAND_AKTIENGESELLSCHAFT',
  HypoNoeLbFurNiederosterreichUWien = 'HYPO_NOE_LB_FUR_NIEDEROSTERREICH_U_WIEN',
  HypoOberosterreichSalzburgSteiermark = 'HYPO_OBEROSTERREICH_SALZBURG_STEIERMARK',
  HypoTirolBankAg = 'HYPO_TIROL_BANK_AG',
  HypoVorarlbergBankAg = 'HYPO_VORARLBERG_BANK_AG',
  MarchfelderBank = 'MARCHFELDER_BANK',
  OberbankAg = 'OBERBANK_AG',
  RaiffeisenBankengruppeOsterreich = 'RAIFFEISEN_BANKENGRUPPE_OSTERREICH',
  SchoellerbankAg = 'SCHOELLERBANK_AG',
  SpardaBankWien = 'SPARDA_BANK_WIEN',
  VolksbankGruppe = 'VOLKSBANK_GRUPPE',
  VolkskreditbankAg = 'VOLKSKREDITBANK_AG',
  VrBankBraunau = 'VR_BANK_BRAUNAU'
}

export enum StripePostPaymentIntentsIntentConfirmBankFpxPaymentMethodData {
  AffinBank = 'AFFIN_BANK',
  Agrobank = 'AGROBANK',
  AllianceBank = 'ALLIANCE_BANK',
  Ambank = 'AMBANK',
  BankIslam = 'BANK_ISLAM',
  BankMuamalat = 'BANK_MUAMALAT',
  BankOfChina = 'BANK_OF_CHINA',
  BankRakyat = 'BANK_RAKYAT',
  Bsn = 'BSN',
  Cimb = 'CIMB',
  DeutscheBank = 'DEUTSCHE_BANK',
  HongLeongBank = 'HONG_LEONG_BANK',
  Hsbc = 'HSBC',
  Kfh = 'KFH',
  Maybank_2E = 'MAYBANK_2E',
  Maybank_2U = 'MAYBANK_2U',
  Ocbc = 'OCBC',
  PbEnterprise = 'PB_ENTERPRISE',
  PublicBank = 'PUBLIC_BANK',
  Rhb = 'RHB',
  StandardChartered = 'STANDARD_CHARTERED',
  Uob = 'UOB'
}

export enum StripePostPaymentIntentsIntentConfirmBankIdealPaymentMethodData {
  AbnAmro = 'ABN_AMRO',
  AsnBank = 'ASN_BANK',
  Bunq = 'BUNQ',
  Handelsbanken = 'HANDELSBANKEN',
  Ing = 'ING',
  Knab = 'KNAB',
  Moneyou = 'MONEYOU',
  Rabobank = 'RABOBANK',
  Regiobank = 'REGIOBANK',
  Revolut = 'REVOLUT',
  SnsBank = 'SNS_BANK',
  TriodosBank = 'TRIODOS_BANK',
  VanLanschot = 'VAN_LANSCHOT',
  Yoursafe = 'YOURSAFE'
}

export enum StripePostPaymentIntentsIntentConfirmBankP24PaymentMethodData {
  AliorBank = 'ALIOR_BANK',
  BankiSpbdzielcze = 'BANKI_SPBDZIELCZE',
  BankMillennium = 'BANK_MILLENNIUM',
  BankNowyBfgSa = 'BANK_NOWY_BFG_SA',
  BankPekaoSa = 'BANK_PEKAO_SA',
  Blik = 'BLIK',
  BnpParibas = 'BNP_PARIBAS',
  Boz = 'BOZ',
  CitiHandlowy = 'CITI_HANDLOWY',
  CreditAgricole = 'CREDIT_AGRICOLE',
  Envelobank = 'ENVELOBANK',
  EtransferPocztowy_24 = 'ETRANSFER_POCZTOWY_24',
  GetinBank = 'GETIN_BANK',
  Ideabank = 'IDEABANK',
  Ing = 'ING',
  Inteligo = 'INTELIGO',
  MbankMtransfer = 'MBANK_MTRANSFER',
  NestPrzelew = 'NEST_PRZELEW',
  NoblePay = 'NOBLE_PAY',
  PbacZIpko = 'PBAC_Z_IPKO',
  PlusBank = 'PLUS_BANK',
  SantanderPrzelew_24 = 'SANTANDER_PRZELEW_24',
  TmobileUsbugiBankowe = 'TMOBILE_USBUGI_BANKOWE',
  ToyotaBank = 'TOYOTA_BANK',
  VolkswagenBank = 'VOLKSWAGEN_BANK'
}

export type StripePostPaymentIntentsIntentConfirmBankTransferCustomerBalancePaymentMethodOptionsInput = {
  euBankTransfer?: InputMaybe<StripePostPaymentIntentsIntentConfirmEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsInput>;
  requestedAddressTypes?: InputMaybe<Array<StripePostPaymentIntentsIntentConfirmRequestedAddressTypesBankTransferCustomerBalancePaymentMethodOptions>>;
  type: StripePostPaymentIntentsIntentConfirmTypeBankTransferCustomerBalancePaymentMethodOptions;
};

export type StripePostPaymentIntentsIntentConfirmBillingDetailsPaymentMethodDataInput = {
  address?: InputMaybe<StripeStringOrPostPaymentIntentsIntentConfirmAddressBillingDetailsPaymentMethodDataUnionInput>;
  email?: InputMaybe<Scalars['JSON']>;
  name?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsIntentConfirmBlikPaymentMethodOptionsInput = {
  code?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsIntentConfirmBoletoPaymentMethodDataInput = {
  taxId: Scalars['String'];
};

export type StripePostPaymentIntentsIntentConfirmBoletoPaymentMethodOptionsInput = {
  expiresAfterDays?: InputMaybe<Scalars['Int']>;
  setupFutureUsage?: InputMaybe<Scalars['String']>;
};

export enum StripePostPaymentIntentsIntentConfirmCaptureMethod {
  Automatic = 'AUTOMATIC',
  AutomaticAsync = 'AUTOMATIC_ASYNC',
  Manual = 'MANUAL'
}

export type StripePostPaymentIntentsIntentConfirmCardPaymentMethodOptionsInput = {
  captureMethod?: InputMaybe<Scalars['String']>;
  cvcToken?: InputMaybe<Scalars['String']>;
  installments?: InputMaybe<StripePostPaymentIntentsIntentConfirmInstallmentsCardPaymentMethodOptionsInput>;
  mandateOptions?: InputMaybe<StripePostPaymentIntentsIntentConfirmMandateOptionsCardPaymentMethodOptionsInput>;
  network?: InputMaybe<StripePostPaymentIntentsIntentConfirmNetworkCardPaymentMethodOptions>;
  requestThreeDSecure?: InputMaybe<StripePostPaymentIntentsIntentConfirmRequestThreeDSecureCardPaymentMethodOptions>;
  setupFutureUsage?: InputMaybe<Scalars['String']>;
  statementDescriptorSuffixKana?: InputMaybe<Scalars['JSON']>;
  statementDescriptorSuffixKanji?: InputMaybe<Scalars['JSON']>;
};

export type StripePostPaymentIntentsIntentConfirmCardPresentPaymentMethodOptionsInput = {
  requestExtendedAuthorization?: InputMaybe<Scalars['Boolean']>;
  requestIncrementalAuthorizationSupport?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostPaymentIntentsIntentConfirmCashappPaymentMethodOptionsInput = {
  captureMethod?: InputMaybe<Scalars['String']>;
  setupFutureUsage?: InputMaybe<Scalars['String']>;
};

export enum StripePostPaymentIntentsIntentConfirmClientWechatPayPaymentMethodOptions {
  Android = 'ANDROID',
  Ios = 'IOS',
  Web = 'WEB'
}

export enum StripePostPaymentIntentsIntentConfirmCountrySofortPaymentMethodData {
  At = 'AT',
  Be = 'BE',
  De = 'DE',
  Es = 'ES',
  It = 'IT',
  Nl = 'NL'
}

export type StripePostPaymentIntentsIntentConfirmCustomerAcceptanceMandateDataInput = {
  online: StripePostPaymentIntentsIntentConfirmOnlineCustomerAcceptanceMandateDataInput;
  type: StripePostPaymentIntentsIntentConfirmTypeCustomerAcceptanceMandateData;
};

export type StripePostPaymentIntentsIntentConfirmCustomerBalancePaymentMethodOptionsInput = {
  bankTransfer?: InputMaybe<StripePostPaymentIntentsIntentConfirmBankTransferCustomerBalancePaymentMethodOptionsInput>;
  fundingType?: InputMaybe<StripePostPaymentIntentsIntentConfirmFundingTypeCustomerBalancePaymentMethodOptions>;
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsIntentConfirmSetupFutureUsageCustomerBalancePaymentMethodOptions>;
};

export type StripePostPaymentIntentsIntentConfirmDobKlarnaPaymentMethodDataInput = {
  day: Scalars['Int'];
  month: Scalars['Int'];
  year: Scalars['Int'];
};

export type StripePostPaymentIntentsIntentConfirmEpsPaymentMethodDataInput = {
  bank?: InputMaybe<StripePostPaymentIntentsIntentConfirmBankEpsPaymentMethodData>;
};

export type StripePostPaymentIntentsIntentConfirmEpsPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsIntentConfirmSetupFutureUsageEpsPaymentMethodOptions>;
};

export type StripePostPaymentIntentsIntentConfirmEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsInput = {
  country: Scalars['String'];
};

export type StripePostPaymentIntentsIntentConfirmFinancialConnectionsUsBankAccountPaymentMethodOptionsInput = {
  permissions?: InputMaybe<Array<StripePostPaymentIntentsIntentConfirmPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions>>;
  returnUrl?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsIntentConfirmFpxPaymentMethodDataInput = {
  bank: StripePostPaymentIntentsIntentConfirmBankFpxPaymentMethodData;
};

export type StripePostPaymentIntentsIntentConfirmFpxPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsIntentConfirmSetupFutureUsageFpxPaymentMethodOptions>;
};

export enum StripePostPaymentIntentsIntentConfirmFundingTypeCustomerBalancePaymentMethodOptions {
  BankTransfer = 'BANK_TRANSFER'
}

export type StripePostPaymentIntentsIntentConfirmGiropayPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsIntentConfirmSetupFutureUsageGiropayPaymentMethodOptions>;
};

export type StripePostPaymentIntentsIntentConfirmGrabpayPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsIntentConfirmSetupFutureUsageGrabpayPaymentMethodOptions>;
};

export type StripePostPaymentIntentsIntentConfirmIdealPaymentMethodDataInput = {
  bank?: InputMaybe<StripePostPaymentIntentsIntentConfirmBankIdealPaymentMethodData>;
};

export type StripePostPaymentIntentsIntentConfirmIdealPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsIntentConfirmInput = {
  captureMethod?: InputMaybe<StripePostPaymentIntentsIntentConfirmCaptureMethod>;
  clientSecret?: InputMaybe<Scalars['String']>;
  errorOnRequiresAction?: InputMaybe<Scalars['Boolean']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  mandate?: InputMaybe<Scalars['String']>;
  mandateData?: InputMaybe<StripePostPaymentIntentsIntentConfirmMandateDataOrPostPaymentIntentsIntentConfirmMandateDataUnionInput>;
  offSession?: InputMaybe<Scalars['JSON']>;
  paymentMethod?: InputMaybe<Scalars['String']>;
  paymentMethodData?: InputMaybe<StripePostPaymentIntentsIntentConfirmPaymentMethodDataInput>;
  paymentMethodOptions?: InputMaybe<StripePostPaymentIntentsIntentConfirmPaymentMethodOptionsInput>;
  paymentMethodTypes?: InputMaybe<Array<Scalars['String']>>;
  radarOptions?: InputMaybe<StripePostPaymentIntentsIntentConfirmRadarOptionsInput>;
  receiptEmail?: InputMaybe<Scalars['JSON']>;
  returnUrl?: InputMaybe<Scalars['String']>;
  setupFutureUsage?: InputMaybe<Scalars['String']>;
  shipping?: InputMaybe<StripeStringOrPostPaymentIntentsIntentConfirmShippingUnionInput>;
  useStripeSdk?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostPaymentIntentsIntentConfirmInstallmentsCardPaymentMethodOptionsInput = {
  enabled?: InputMaybe<Scalars['Boolean']>;
  plan?: InputMaybe<StripeStringOrPostPaymentIntentsIntentConfirmPlanInstallmentsCardPaymentMethodOptionsUnionInput>;
};

export enum StripePostPaymentIntentsIntentConfirmIntervalMandateOptionsCardPaymentMethodOptions {
  Day = 'DAY',
  Month = 'MONTH',
  Sporadic = 'SPORADIC',
  Week = 'WEEK',
  Year = 'YEAR'
}

export enum StripePostPaymentIntentsIntentConfirmIntervalPlanInstallmentsCardPaymentMethodOptions {
  Month = 'MONTH'
}

export type StripePostPaymentIntentsIntentConfirmKlarnaPaymentMethodDataInput = {
  dob?: InputMaybe<StripePostPaymentIntentsIntentConfirmDobKlarnaPaymentMethodDataInput>;
};

export type StripePostPaymentIntentsIntentConfirmKlarnaPaymentMethodOptionsInput = {
  captureMethod?: InputMaybe<Scalars['String']>;
  preferredLocale?: InputMaybe<StripePostPaymentIntentsIntentConfirmPreferredLocaleKlarnaPaymentMethodOptions>;
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsIntentConfirmSetupFutureUsageKlarnaPaymentMethodOptions>;
};

export type StripePostPaymentIntentsIntentConfirmKonbiniPaymentMethodOptionsInput = {
  confirmationNumber?: InputMaybe<Scalars['String']>;
  expiresAfterDays?: InputMaybe<Scalars['JSON']>;
  expiresAt?: InputMaybe<Scalars['JSON']>;
  productDescription?: InputMaybe<Scalars['String']>;
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsIntentConfirmSetupFutureUsageKonbiniPaymentMethodOptions>;
};

export type StripePostPaymentIntentsIntentConfirmLinkPaymentMethodOptionsInput = {
  captureMethod?: InputMaybe<Scalars['String']>;
  persistentToken?: InputMaybe<Scalars['String']>;
  setupFutureUsage?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsIntentConfirmMandateDataInput = {
  customerAcceptance: StripePostPaymentIntentsIntentConfirmCustomerAcceptanceMandateDataInput;
};

export type StripePostPaymentIntentsIntentConfirmMandateDataOrPostPaymentIntentsIntentConfirmMandateDataUnionInput = {
  stripePostPaymentIntentsIntentConfirmMandateDataInput?: InputMaybe<StripePostPaymentIntentsIntentConfirmMandateDataInput>;
};

export type StripePostPaymentIntentsIntentConfirmMandateOptionsAcssDebitPaymentMethodOptionsInput = {
  customMandateUrl?: InputMaybe<Scalars['JSON']>;
  intervalDescription?: InputMaybe<Scalars['String']>;
  paymentSchedule?: InputMaybe<StripePostPaymentIntentsIntentConfirmPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions>;
  transactionType?: InputMaybe<StripePostPaymentIntentsIntentConfirmTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions>;
};

export type StripePostPaymentIntentsIntentConfirmMandateOptionsCardPaymentMethodOptionsInput = {
  amount: Scalars['Int'];
  amountType: StripePostPaymentIntentsIntentConfirmAmountTypeMandateOptionsCardPaymentMethodOptions;
  description?: InputMaybe<Scalars['String']>;
  endDate?: InputMaybe<Scalars['Int']>;
  interval: StripePostPaymentIntentsIntentConfirmIntervalMandateOptionsCardPaymentMethodOptions;
  intervalCount?: InputMaybe<Scalars['Int']>;
  reference: Scalars['String'];
  startDate: Scalars['Int'];
  supportedTypes?: InputMaybe<Array<StripePostPaymentIntentsIntentConfirmSupportedTypesMandateOptionsCardPaymentMethodOptions>>;
};

export enum StripePostPaymentIntentsIntentConfirmNetworkCardPaymentMethodOptions {
  Amex = 'AMEX',
  CartesBancaires = 'CARTES_BANCAIRES',
  Diners = 'DINERS',
  Discover = 'DISCOVER',
  EftposAu = 'EFTPOS_AU',
  Interac = 'INTERAC',
  Jcb = 'JCB',
  Mastercard = 'MASTERCARD',
  Unionpay = 'UNIONPAY',
  Unknown = 'UNKNOWN',
  Visa = 'VISA'
}

export type StripePostPaymentIntentsIntentConfirmNetworksUsBankAccountPaymentMethodOptionsInput = {
  requested?: InputMaybe<Array<StripePostPaymentIntentsIntentConfirmRequestedNetworksUsBankAccountPaymentMethodOptions>>;
};

export type StripePostPaymentIntentsIntentConfirmOnlineCustomerAcceptanceMandateDataInput = {
  ipAddress?: InputMaybe<Scalars['String']>;
  userAgent?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsIntentConfirmOxxoPaymentMethodOptionsInput = {
  expiresAfterDays?: InputMaybe<Scalars['Int']>;
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsIntentConfirmSetupFutureUsageOxxoPaymentMethodOptions>;
};

export type StripePostPaymentIntentsIntentConfirmP24PaymentMethodDataInput = {
  bank?: InputMaybe<StripePostPaymentIntentsIntentConfirmBankP24PaymentMethodData>;
};

export type StripePostPaymentIntentsIntentConfirmP24PaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsIntentConfirmSetupFutureUsageP24PaymentMethodOptions>;
  tosShownAndAccepted?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostPaymentIntentsIntentConfirmPaymentMethodDataInput = {
  acssDebit?: InputMaybe<StripePostPaymentIntentsIntentConfirmAcssDebitPaymentMethodDataInput>;
  affirm?: InputMaybe<Scalars['JSON']>;
  afterpayClearpay?: InputMaybe<Scalars['JSON']>;
  alipay?: InputMaybe<Scalars['JSON']>;
  auBecsDebit?: InputMaybe<StripePostPaymentIntentsIntentConfirmAuBecsDebitPaymentMethodDataInput>;
  bacsDebit?: InputMaybe<StripePostPaymentIntentsIntentConfirmBacsDebitPaymentMethodDataInput>;
  bancontact?: InputMaybe<Scalars['JSON']>;
  billingDetails?: InputMaybe<StripePostPaymentIntentsIntentConfirmBillingDetailsPaymentMethodDataInput>;
  blik?: InputMaybe<Scalars['JSON']>;
  boleto?: InputMaybe<StripePostPaymentIntentsIntentConfirmBoletoPaymentMethodDataInput>;
  cashapp?: InputMaybe<Scalars['JSON']>;
  customerBalance?: InputMaybe<Scalars['JSON']>;
  eps?: InputMaybe<StripePostPaymentIntentsIntentConfirmEpsPaymentMethodDataInput>;
  fpx?: InputMaybe<StripePostPaymentIntentsIntentConfirmFpxPaymentMethodDataInput>;
  giropay?: InputMaybe<Scalars['JSON']>;
  grabpay?: InputMaybe<Scalars['JSON']>;
  ideal?: InputMaybe<StripePostPaymentIntentsIntentConfirmIdealPaymentMethodDataInput>;
  interacPresent?: InputMaybe<Scalars['JSON']>;
  klarna?: InputMaybe<StripePostPaymentIntentsIntentConfirmKlarnaPaymentMethodDataInput>;
  konbini?: InputMaybe<Scalars['JSON']>;
  link?: InputMaybe<Scalars['JSON']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  oxxo?: InputMaybe<Scalars['JSON']>;
  p24?: InputMaybe<StripePostPaymentIntentsIntentConfirmP24PaymentMethodDataInput>;
  paynow?: InputMaybe<Scalars['JSON']>;
  paypal?: InputMaybe<Scalars['JSON']>;
  pix?: InputMaybe<Scalars['JSON']>;
  promptpay?: InputMaybe<Scalars['JSON']>;
  radarOptions?: InputMaybe<StripePostPaymentIntentsIntentConfirmRadarOptionsPaymentMethodDataInput>;
  sepaDebit?: InputMaybe<StripePostPaymentIntentsIntentConfirmSepaDebitPaymentMethodDataInput>;
  sofort?: InputMaybe<StripePostPaymentIntentsIntentConfirmSofortPaymentMethodDataInput>;
  type: StripePostPaymentIntentsIntentConfirmTypePaymentMethodData;
  usBankAccount?: InputMaybe<StripePostPaymentIntentsIntentConfirmUsBankAccountPaymentMethodDataInput>;
  wechatPay?: InputMaybe<Scalars['JSON']>;
};

export type StripePostPaymentIntentsIntentConfirmPaymentMethodOptionsInput = {
  acssDebit?: InputMaybe<StripeStringOrPostPaymentIntentsIntentConfirmAcssDebitPaymentMethodOptionsUnionInput>;
  affirm?: InputMaybe<StripeStringOrPostPaymentIntentsIntentConfirmAffirmPaymentMethodOptionsUnionInput>;
  afterpayClearpay?: InputMaybe<StripeStringOrPostPaymentIntentsIntentConfirmAfterpayClearpayPaymentMethodOptionsUnionInput>;
  alipay?: InputMaybe<StripeStringOrPostPaymentIntentsIntentConfirmAlipayPaymentMethodOptionsUnionInput>;
  auBecsDebit?: InputMaybe<StripeStringOrPostPaymentIntentsIntentConfirmAuBecsDebitPaymentMethodOptionsUnionInput>;
  bacsDebit?: InputMaybe<StripeStringOrPostPaymentIntentsIntentConfirmBacsDebitPaymentMethodOptionsUnionInput>;
  bancontact?: InputMaybe<StripeStringOrPostPaymentIntentsIntentConfirmBancontactPaymentMethodOptionsUnionInput>;
  blik?: InputMaybe<StripeStringOrPostPaymentIntentsIntentConfirmBlikPaymentMethodOptionsUnionInput>;
  boleto?: InputMaybe<StripeStringOrPostPaymentIntentsIntentConfirmBoletoPaymentMethodOptionsUnionInput>;
  card?: InputMaybe<StripeStringOrPostPaymentIntentsIntentConfirmCardPaymentMethodOptionsUnionInput>;
  cardPresent?: InputMaybe<StripeStringOrPostPaymentIntentsIntentConfirmCardPresentPaymentMethodOptionsUnionInput>;
  cashapp?: InputMaybe<StripeStringOrPostPaymentIntentsIntentConfirmCashappPaymentMethodOptionsUnionInput>;
  customerBalance?: InputMaybe<StripeStringOrPostPaymentIntentsIntentConfirmCustomerBalancePaymentMethodOptionsUnionInput>;
  eps?: InputMaybe<StripeStringOrPostPaymentIntentsIntentConfirmEpsPaymentMethodOptionsUnionInput>;
  fpx?: InputMaybe<StripeStringOrPostPaymentIntentsIntentConfirmFpxPaymentMethodOptionsUnionInput>;
  giropay?: InputMaybe<StripeStringOrPostPaymentIntentsIntentConfirmGiropayPaymentMethodOptionsUnionInput>;
  grabpay?: InputMaybe<StripeStringOrPostPaymentIntentsIntentConfirmGrabpayPaymentMethodOptionsUnionInput>;
  ideal?: InputMaybe<StripeStringOrPostPaymentIntentsIntentConfirmIdealPaymentMethodOptionsUnionInput>;
  interacPresent?: InputMaybe<Scalars['JSON']>;
  klarna?: InputMaybe<StripeStringOrPostPaymentIntentsIntentConfirmKlarnaPaymentMethodOptionsUnionInput>;
  konbini?: InputMaybe<StripeStringOrPostPaymentIntentsIntentConfirmKonbiniPaymentMethodOptionsUnionInput>;
  link?: InputMaybe<StripeStringOrPostPaymentIntentsIntentConfirmLinkPaymentMethodOptionsUnionInput>;
  oxxo?: InputMaybe<StripeStringOrPostPaymentIntentsIntentConfirmOxxoPaymentMethodOptionsUnionInput>;
  p24?: InputMaybe<StripeStringOrPostPaymentIntentsIntentConfirmP24PaymentMethodOptionsUnionInput>;
  paynow?: InputMaybe<StripeStringOrPostPaymentIntentsIntentConfirmPaynowPaymentMethodOptionsUnionInput>;
  paypal?: InputMaybe<StripeStringOrPostPaymentIntentsIntentConfirmPaypalPaymentMethodOptionsUnionInput>;
  pix?: InputMaybe<StripeStringOrPostPaymentIntentsIntentConfirmPixPaymentMethodOptionsUnionInput>;
  promptpay?: InputMaybe<StripeStringOrPostPaymentIntentsIntentConfirmPromptpayPaymentMethodOptionsUnionInput>;
  sepaDebit?: InputMaybe<StripeStringOrPostPaymentIntentsIntentConfirmSepaDebitPaymentMethodOptionsUnionInput>;
  sofort?: InputMaybe<StripeStringOrPostPaymentIntentsIntentConfirmSofortPaymentMethodOptionsUnionInput>;
  usBankAccount?: InputMaybe<StripeStringOrPostPaymentIntentsIntentConfirmUsBankAccountPaymentMethodOptionsUnionInput>;
  wechatPay?: InputMaybe<StripeStringOrPostPaymentIntentsIntentConfirmWechatPayPaymentMethodOptionsUnionInput>;
};

export enum StripePostPaymentIntentsIntentConfirmPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions {
  Combined = 'COMBINED',
  Interval = 'INTERVAL',
  Sporadic = 'SPORADIC'
}

export type StripePostPaymentIntentsIntentConfirmPaynowPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsIntentConfirmSetupFutureUsagePaynowPaymentMethodOptions>;
};

export type StripePostPaymentIntentsIntentConfirmPaypalPaymentMethodOptionsInput = {
  captureMethod?: InputMaybe<Scalars['String']>;
  preferredLocale?: InputMaybe<StripePostPaymentIntentsIntentConfirmPreferredLocalePaypalPaymentMethodOptions>;
  reference?: InputMaybe<Scalars['String']>;
  riskCorrelationId?: InputMaybe<Scalars['String']>;
  setupFutureUsage?: InputMaybe<Scalars['String']>;
};

export enum StripePostPaymentIntentsIntentConfirmPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions {
  Balances = 'BALANCES',
  Ownership = 'OWNERSHIP',
  PaymentMethod = 'PAYMENT_METHOD',
  Transactions = 'TRANSACTIONS'
}

export type StripePostPaymentIntentsIntentConfirmPixPaymentMethodOptionsInput = {
  expiresAfterSeconds?: InputMaybe<Scalars['Int']>;
  expiresAt?: InputMaybe<Scalars['Int']>;
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsIntentConfirmSetupFutureUsagePixPaymentMethodOptions>;
};

export type StripePostPaymentIntentsIntentConfirmPlanInstallmentsCardPaymentMethodOptionsInput = {
  count: Scalars['Int'];
  interval: StripePostPaymentIntentsIntentConfirmIntervalPlanInstallmentsCardPaymentMethodOptions;
  type: StripePostPaymentIntentsIntentConfirmTypePlanInstallmentsCardPaymentMethodOptions;
};

export enum StripePostPaymentIntentsIntentConfirmPreferredLanguageBancontactPaymentMethodOptions {
  De = 'DE',
  En = 'EN',
  Fr = 'FR',
  Nl = 'NL'
}

export enum StripePostPaymentIntentsIntentConfirmPreferredLocaleKlarnaPaymentMethodOptions {
  CsCz = 'CS_CZ',
  DaDk = 'DA_DK',
  DeAt = 'DE_AT',
  DeCh = 'DE_CH',
  DeDe = 'DE_DE',
  ElGr = 'EL_GR',
  EnAt = 'EN_AT',
  EnAu = 'EN_AU',
  EnBe = 'EN_BE',
  EnCa = 'EN_CA',
  EnCh = 'EN_CH',
  EnCz = 'EN_CZ',
  EnDe = 'EN_DE',
  EnDk = 'EN_DK',
  EnEs = 'EN_ES',
  EnFi = 'EN_FI',
  EnFr = 'EN_FR',
  EnGb = 'EN_GB',
  EnGr = 'EN_GR',
  EnIe = 'EN_IE',
  EnIt = 'EN_IT',
  EnNl = 'EN_NL',
  EnNo = 'EN_NO',
  EnNz = 'EN_NZ',
  EnPl = 'EN_PL',
  EnPt = 'EN_PT',
  EnSe = 'EN_SE',
  EnUs = 'EN_US',
  EsEs = 'ES_ES',
  EsUs = 'ES_US',
  FiFi = 'FI_FI',
  FrBe = 'FR_BE',
  FrCa = 'FR_CA',
  FrCh = 'FR_CH',
  FrFr = 'FR_FR',
  ItCh = 'IT_CH',
  ItIt = 'IT_IT',
  NbNo = 'NB_NO',
  NlBe = 'NL_BE',
  NlNl = 'NL_NL',
  PlPl = 'PL_PL',
  PtPt = 'PT_PT',
  SvFi = 'SV_FI',
  SvSe = 'SV_SE'
}

export enum StripePostPaymentIntentsIntentConfirmPreferredLocalePaypalPaymentMethodOptions {
  CsCz = 'CS_CZ',
  DaDk = 'DA_DK',
  DeAt = 'DE_AT',
  DeDe = 'DE_DE',
  DeLu = 'DE_LU',
  ElGr = 'EL_GR',
  EnGb = 'EN_GB',
  EnUs = 'EN_US',
  EsEs = 'ES_ES',
  FiFi = 'FI_FI',
  FrBe = 'FR_BE',
  FrFr = 'FR_FR',
  FrLu = 'FR_LU',
  HuHu = 'HU_HU',
  ItIt = 'IT_IT',
  NlBe = 'NL_BE',
  NlNl = 'NL_NL',
  PlPl = 'PL_PL',
  PtPt = 'PT_PT',
  SkSk = 'SK_SK',
  SvSe = 'SV_SE'
}

export type StripePostPaymentIntentsIntentConfirmPromptpayPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsIntentConfirmSetupFutureUsagePromptpayPaymentMethodOptions>;
};

export type StripePostPaymentIntentsIntentConfirmRadarOptionsInput = {
  session?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsIntentConfirmRadarOptionsPaymentMethodDataInput = {
  session?: InputMaybe<Scalars['String']>;
};

export enum StripePostPaymentIntentsIntentConfirmRequestThreeDSecureCardPaymentMethodOptions {
  Any = 'ANY',
  Automatic = 'AUTOMATIC'
}

export enum StripePostPaymentIntentsIntentConfirmRequestedAddressTypesBankTransferCustomerBalancePaymentMethodOptions {
  Iban = 'IBAN',
  Sepa = 'SEPA',
  SortCode = 'SORT_CODE',
  Spei = 'SPEI',
  Zengin = 'ZENGIN'
}

export enum StripePostPaymentIntentsIntentConfirmRequestedNetworksUsBankAccountPaymentMethodOptions {
  Ach = 'ACH',
  UsDomesticWire = 'US_DOMESTIC_WIRE'
}

export type StripePostPaymentIntentsIntentConfirmSepaDebitPaymentMethodDataInput = {
  iban: Scalars['String'];
};

export type StripePostPaymentIntentsIntentConfirmSepaDebitPaymentMethodOptionsInput = {
  mandateOptions?: InputMaybe<Scalars['JSON']>;
  setupFutureUsage?: InputMaybe<Scalars['String']>;
};

export enum StripePostPaymentIntentsIntentConfirmSetupFutureUsageAffirmPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsIntentConfirmSetupFutureUsageAfterpayClearpayPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsIntentConfirmSetupFutureUsageCustomerBalancePaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsIntentConfirmSetupFutureUsageEpsPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsIntentConfirmSetupFutureUsageFpxPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsIntentConfirmSetupFutureUsageGiropayPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsIntentConfirmSetupFutureUsageGrabpayPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsIntentConfirmSetupFutureUsageKlarnaPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsIntentConfirmSetupFutureUsageKonbiniPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsIntentConfirmSetupFutureUsageOxxoPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsIntentConfirmSetupFutureUsageP24PaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsIntentConfirmSetupFutureUsagePaynowPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsIntentConfirmSetupFutureUsagePixPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsIntentConfirmSetupFutureUsagePromptpayPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsIntentConfirmSetupFutureUsageWechatPayPaymentMethodOptions {
  None = 'NONE'
}

export type StripePostPaymentIntentsIntentConfirmShippingInput = {
  address: StripePostPaymentIntentsIntentConfirmAddressShippingInput;
  carrier?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  phone?: InputMaybe<Scalars['String']>;
  trackingNumber?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsIntentConfirmSofortPaymentMethodDataInput = {
  country: StripePostPaymentIntentsIntentConfirmCountrySofortPaymentMethodData;
};

export type StripePostPaymentIntentsIntentConfirmSofortPaymentMethodOptionsInput = {
  preferredLanguage?: InputMaybe<Scalars['String']>;
  setupFutureUsage?: InputMaybe<Scalars['String']>;
};

export enum StripePostPaymentIntentsIntentConfirmSupportedTypesMandateOptionsCardPaymentMethodOptions {
  India = 'INDIA'
}

export enum StripePostPaymentIntentsIntentConfirmTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions {
  Business = 'BUSINESS',
  Personal = 'PERSONAL'
}

export enum StripePostPaymentIntentsIntentConfirmTypeBankTransferCustomerBalancePaymentMethodOptions {
  EuBankTransfer = 'EU_BANK_TRANSFER',
  GbBankTransfer = 'GB_BANK_TRANSFER',
  JpBankTransfer = 'JP_BANK_TRANSFER',
  MxBankTransfer = 'MX_BANK_TRANSFER'
}

export enum StripePostPaymentIntentsIntentConfirmTypeCustomerAcceptanceMandateData {
  Online = 'ONLINE'
}

export enum StripePostPaymentIntentsIntentConfirmTypePaymentMethodData {
  AcssDebit = 'ACSS_DEBIT',
  Affirm = 'AFFIRM',
  AfterpayClearpay = 'AFTERPAY_CLEARPAY',
  Alipay = 'ALIPAY',
  AuBecsDebit = 'AU_BECS_DEBIT',
  BacsDebit = 'BACS_DEBIT',
  Bancontact = 'BANCONTACT',
  Blik = 'BLIK',
  Boleto = 'BOLETO',
  Cashapp = 'CASHAPP',
  CustomerBalance = 'CUSTOMER_BALANCE',
  Eps = 'EPS',
  Fpx = 'FPX',
  Giropay = 'GIROPAY',
  Grabpay = 'GRABPAY',
  Ideal = 'IDEAL',
  Klarna = 'KLARNA',
  Konbini = 'KONBINI',
  Link = 'LINK',
  Oxxo = 'OXXO',
  Paynow = 'PAYNOW',
  Paypal = 'PAYPAL',
  Pix = 'PIX',
  Promptpay = 'PROMPTPAY',
  P_24 = 'P_24',
  SepaDebit = 'SEPA_DEBIT',
  Sofort = 'SOFORT',
  UsBankAccount = 'US_BANK_ACCOUNT',
  WechatPay = 'WECHAT_PAY'
}

export enum StripePostPaymentIntentsIntentConfirmTypePlanInstallmentsCardPaymentMethodOptions {
  FixedCount = 'FIXED_COUNT'
}

export type StripePostPaymentIntentsIntentConfirmUsBankAccountPaymentMethodDataInput = {
  accountHolderType?: InputMaybe<StripePostPaymentIntentsIntentConfirmAccountHolderTypeUsBankAccountPaymentMethodData>;
  accountNumber?: InputMaybe<Scalars['String']>;
  accountType?: InputMaybe<StripePostPaymentIntentsIntentConfirmAccountTypeUsBankAccountPaymentMethodData>;
  financialConnectionsAccount?: InputMaybe<Scalars['String']>;
  routingNumber?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsIntentConfirmUsBankAccountPaymentMethodOptionsInput = {
  financialConnections?: InputMaybe<StripePostPaymentIntentsIntentConfirmFinancialConnectionsUsBankAccountPaymentMethodOptionsInput>;
  networks?: InputMaybe<StripePostPaymentIntentsIntentConfirmNetworksUsBankAccountPaymentMethodOptionsInput>;
  setupFutureUsage?: InputMaybe<Scalars['String']>;
  verificationMethod?: InputMaybe<StripePostPaymentIntentsIntentConfirmVerificationMethodUsBankAccountPaymentMethodOptions>;
};

export enum StripePostPaymentIntentsIntentConfirmVerificationMethodAcssDebitPaymentMethodOptions {
  Automatic = 'AUTOMATIC',
  Instant = 'INSTANT',
  Microdeposits = 'MICRODEPOSITS'
}

export enum StripePostPaymentIntentsIntentConfirmVerificationMethodUsBankAccountPaymentMethodOptions {
  Automatic = 'AUTOMATIC',
  Instant = 'INSTANT',
  Microdeposits = 'MICRODEPOSITS'
}

export type StripePostPaymentIntentsIntentConfirmWechatPayPaymentMethodOptionsInput = {
  appId?: InputMaybe<Scalars['String']>;
  client: StripePostPaymentIntentsIntentConfirmClientWechatPayPaymentMethodOptions;
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsIntentConfirmSetupFutureUsageWechatPayPaymentMethodOptions>;
};

export enum StripePostPaymentIntentsIntentCountrySofortPaymentMethodData {
  At = 'AT',
  Be = 'BE',
  De = 'DE',
  Es = 'ES',
  It = 'IT',
  Nl = 'NL'
}

export type StripePostPaymentIntentsIntentCustomerBalancePaymentMethodOptionsInput = {
  bankTransfer?: InputMaybe<StripePostPaymentIntentsIntentBankTransferCustomerBalancePaymentMethodOptionsInput>;
  fundingType?: InputMaybe<StripePostPaymentIntentsIntentFundingTypeCustomerBalancePaymentMethodOptions>;
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsIntentSetupFutureUsageCustomerBalancePaymentMethodOptions>;
};

export type StripePostPaymentIntentsIntentDobKlarnaPaymentMethodDataInput = {
  day: Scalars['Int'];
  month: Scalars['Int'];
  year: Scalars['Int'];
};

export type StripePostPaymentIntentsIntentEpsPaymentMethodDataInput = {
  bank?: InputMaybe<StripePostPaymentIntentsIntentBankEpsPaymentMethodData>;
};

export type StripePostPaymentIntentsIntentEpsPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsIntentSetupFutureUsageEpsPaymentMethodOptions>;
};

export type StripePostPaymentIntentsIntentEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsInput = {
  country: Scalars['String'];
};

export type StripePostPaymentIntentsIntentFinancialConnectionsUsBankAccountPaymentMethodOptionsInput = {
  permissions?: InputMaybe<Array<StripePostPaymentIntentsIntentPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions>>;
  returnUrl?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsIntentFpxPaymentMethodDataInput = {
  bank: StripePostPaymentIntentsIntentBankFpxPaymentMethodData;
};

export type StripePostPaymentIntentsIntentFpxPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsIntentSetupFutureUsageFpxPaymentMethodOptions>;
};

export enum StripePostPaymentIntentsIntentFundingTypeCustomerBalancePaymentMethodOptions {
  BankTransfer = 'BANK_TRANSFER'
}

export type StripePostPaymentIntentsIntentGiropayPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsIntentSetupFutureUsageGiropayPaymentMethodOptions>;
};

export type StripePostPaymentIntentsIntentGrabpayPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsIntentSetupFutureUsageGrabpayPaymentMethodOptions>;
};

export type StripePostPaymentIntentsIntentIdealPaymentMethodDataInput = {
  bank?: InputMaybe<StripePostPaymentIntentsIntentBankIdealPaymentMethodData>;
};

export type StripePostPaymentIntentsIntentIdealPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsIntentIncrementAuthorizationInput = {
  amount: Scalars['Int'];
  applicationFeeAmount?: InputMaybe<Scalars['Int']>;
  description?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  statementDescriptor?: InputMaybe<Scalars['String']>;
  transferData?: InputMaybe<StripePostPaymentIntentsIntentIncrementAuthorizationTransferDataInput>;
};

export type StripePostPaymentIntentsIntentIncrementAuthorizationTransferDataInput = {
  amount?: InputMaybe<Scalars['Int']>;
};

export type StripePostPaymentIntentsIntentInput = {
  amount?: InputMaybe<Scalars['Int']>;
  applicationFeeAmount?: InputMaybe<Scalars['JSON']>;
  captureMethod?: InputMaybe<StripePostPaymentIntentsIntentCaptureMethod>;
  currency?: InputMaybe<Scalars['String']>;
  customer?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  paymentMethod?: InputMaybe<Scalars['String']>;
  paymentMethodData?: InputMaybe<StripePostPaymentIntentsIntentPaymentMethodDataInput>;
  paymentMethodOptions?: InputMaybe<StripePostPaymentIntentsIntentPaymentMethodOptionsInput>;
  paymentMethodTypes?: InputMaybe<Array<Scalars['String']>>;
  receiptEmail?: InputMaybe<Scalars['JSON']>;
  setupFutureUsage?: InputMaybe<Scalars['String']>;
  shipping?: InputMaybe<StripeStringOrPostPaymentIntentsIntentShippingUnionInput>;
  statementDescriptor?: InputMaybe<Scalars['String']>;
  statementDescriptorSuffix?: InputMaybe<Scalars['String']>;
  transferData?: InputMaybe<StripePostPaymentIntentsIntentTransferDataInput>;
  transferGroup?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsIntentInstallmentsCardPaymentMethodOptionsInput = {
  enabled?: InputMaybe<Scalars['Boolean']>;
  plan?: InputMaybe<StripeStringOrPostPaymentIntentsIntentPlanInstallmentsCardPaymentMethodOptionsUnionInput>;
};

export enum StripePostPaymentIntentsIntentIntervalMandateOptionsCardPaymentMethodOptions {
  Day = 'DAY',
  Month = 'MONTH',
  Sporadic = 'SPORADIC',
  Week = 'WEEK',
  Year = 'YEAR'
}

export enum StripePostPaymentIntentsIntentIntervalPlanInstallmentsCardPaymentMethodOptions {
  Month = 'MONTH'
}

export type StripePostPaymentIntentsIntentKlarnaPaymentMethodDataInput = {
  dob?: InputMaybe<StripePostPaymentIntentsIntentDobKlarnaPaymentMethodDataInput>;
};

export type StripePostPaymentIntentsIntentKlarnaPaymentMethodOptionsInput = {
  captureMethod?: InputMaybe<Scalars['String']>;
  preferredLocale?: InputMaybe<StripePostPaymentIntentsIntentPreferredLocaleKlarnaPaymentMethodOptions>;
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsIntentSetupFutureUsageKlarnaPaymentMethodOptions>;
};

export type StripePostPaymentIntentsIntentKonbiniPaymentMethodOptionsInput = {
  confirmationNumber?: InputMaybe<Scalars['String']>;
  expiresAfterDays?: InputMaybe<Scalars['JSON']>;
  expiresAt?: InputMaybe<Scalars['JSON']>;
  productDescription?: InputMaybe<Scalars['String']>;
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsIntentSetupFutureUsageKonbiniPaymentMethodOptions>;
};

export type StripePostPaymentIntentsIntentLinkPaymentMethodOptionsInput = {
  captureMethod?: InputMaybe<Scalars['String']>;
  persistentToken?: InputMaybe<Scalars['String']>;
  setupFutureUsage?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsIntentMandateOptionsAcssDebitPaymentMethodOptionsInput = {
  customMandateUrl?: InputMaybe<Scalars['JSON']>;
  intervalDescription?: InputMaybe<Scalars['String']>;
  paymentSchedule?: InputMaybe<StripePostPaymentIntentsIntentPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions>;
  transactionType?: InputMaybe<StripePostPaymentIntentsIntentTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions>;
};

export type StripePostPaymentIntentsIntentMandateOptionsCardPaymentMethodOptionsInput = {
  amount: Scalars['Int'];
  amountType: StripePostPaymentIntentsIntentAmountTypeMandateOptionsCardPaymentMethodOptions;
  description?: InputMaybe<Scalars['String']>;
  endDate?: InputMaybe<Scalars['Int']>;
  interval: StripePostPaymentIntentsIntentIntervalMandateOptionsCardPaymentMethodOptions;
  intervalCount?: InputMaybe<Scalars['Int']>;
  reference: Scalars['String'];
  startDate: Scalars['Int'];
  supportedTypes?: InputMaybe<Array<StripePostPaymentIntentsIntentSupportedTypesMandateOptionsCardPaymentMethodOptions>>;
};

export enum StripePostPaymentIntentsIntentNetworkCardPaymentMethodOptions {
  Amex = 'AMEX',
  CartesBancaires = 'CARTES_BANCAIRES',
  Diners = 'DINERS',
  Discover = 'DISCOVER',
  EftposAu = 'EFTPOS_AU',
  Interac = 'INTERAC',
  Jcb = 'JCB',
  Mastercard = 'MASTERCARD',
  Unionpay = 'UNIONPAY',
  Unknown = 'UNKNOWN',
  Visa = 'VISA'
}

export type StripePostPaymentIntentsIntentNetworksUsBankAccountPaymentMethodOptionsInput = {
  requested?: InputMaybe<Array<StripePostPaymentIntentsIntentRequestedNetworksUsBankAccountPaymentMethodOptions>>;
};

export type StripePostPaymentIntentsIntentOxxoPaymentMethodOptionsInput = {
  expiresAfterDays?: InputMaybe<Scalars['Int']>;
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsIntentSetupFutureUsageOxxoPaymentMethodOptions>;
};

export type StripePostPaymentIntentsIntentP24PaymentMethodDataInput = {
  bank?: InputMaybe<StripePostPaymentIntentsIntentBankP24PaymentMethodData>;
};

export type StripePostPaymentIntentsIntentP24PaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsIntentSetupFutureUsageP24PaymentMethodOptions>;
  tosShownAndAccepted?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostPaymentIntentsIntentPaymentMethodDataInput = {
  acssDebit?: InputMaybe<StripePostPaymentIntentsIntentAcssDebitPaymentMethodDataInput>;
  affirm?: InputMaybe<Scalars['JSON']>;
  afterpayClearpay?: InputMaybe<Scalars['JSON']>;
  alipay?: InputMaybe<Scalars['JSON']>;
  auBecsDebit?: InputMaybe<StripePostPaymentIntentsIntentAuBecsDebitPaymentMethodDataInput>;
  bacsDebit?: InputMaybe<StripePostPaymentIntentsIntentBacsDebitPaymentMethodDataInput>;
  bancontact?: InputMaybe<Scalars['JSON']>;
  billingDetails?: InputMaybe<StripePostPaymentIntentsIntentBillingDetailsPaymentMethodDataInput>;
  blik?: InputMaybe<Scalars['JSON']>;
  boleto?: InputMaybe<StripePostPaymentIntentsIntentBoletoPaymentMethodDataInput>;
  cashapp?: InputMaybe<Scalars['JSON']>;
  customerBalance?: InputMaybe<Scalars['JSON']>;
  eps?: InputMaybe<StripePostPaymentIntentsIntentEpsPaymentMethodDataInput>;
  fpx?: InputMaybe<StripePostPaymentIntentsIntentFpxPaymentMethodDataInput>;
  giropay?: InputMaybe<Scalars['JSON']>;
  grabpay?: InputMaybe<Scalars['JSON']>;
  ideal?: InputMaybe<StripePostPaymentIntentsIntentIdealPaymentMethodDataInput>;
  interacPresent?: InputMaybe<Scalars['JSON']>;
  klarna?: InputMaybe<StripePostPaymentIntentsIntentKlarnaPaymentMethodDataInput>;
  konbini?: InputMaybe<Scalars['JSON']>;
  link?: InputMaybe<Scalars['JSON']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  oxxo?: InputMaybe<Scalars['JSON']>;
  p24?: InputMaybe<StripePostPaymentIntentsIntentP24PaymentMethodDataInput>;
  paynow?: InputMaybe<Scalars['JSON']>;
  paypal?: InputMaybe<Scalars['JSON']>;
  pix?: InputMaybe<Scalars['JSON']>;
  promptpay?: InputMaybe<Scalars['JSON']>;
  radarOptions?: InputMaybe<StripePostPaymentIntentsIntentRadarOptionsPaymentMethodDataInput>;
  sepaDebit?: InputMaybe<StripePostPaymentIntentsIntentSepaDebitPaymentMethodDataInput>;
  sofort?: InputMaybe<StripePostPaymentIntentsIntentSofortPaymentMethodDataInput>;
  type: StripePostPaymentIntentsIntentTypePaymentMethodData;
  usBankAccount?: InputMaybe<StripePostPaymentIntentsIntentUsBankAccountPaymentMethodDataInput>;
  wechatPay?: InputMaybe<Scalars['JSON']>;
};

export type StripePostPaymentIntentsIntentPaymentMethodOptionsInput = {
  acssDebit?: InputMaybe<StripeStringOrPostPaymentIntentsIntentAcssDebitPaymentMethodOptionsUnionInput>;
  affirm?: InputMaybe<StripeStringOrPostPaymentIntentsIntentAffirmPaymentMethodOptionsUnionInput>;
  afterpayClearpay?: InputMaybe<StripeStringOrPostPaymentIntentsIntentAfterpayClearpayPaymentMethodOptionsUnionInput>;
  alipay?: InputMaybe<StripeStringOrPostPaymentIntentsIntentAlipayPaymentMethodOptionsUnionInput>;
  auBecsDebit?: InputMaybe<StripeStringOrPostPaymentIntentsIntentAuBecsDebitPaymentMethodOptionsUnionInput>;
  bacsDebit?: InputMaybe<StripeStringOrPostPaymentIntentsIntentBacsDebitPaymentMethodOptionsUnionInput>;
  bancontact?: InputMaybe<StripeStringOrPostPaymentIntentsIntentBancontactPaymentMethodOptionsUnionInput>;
  blik?: InputMaybe<StripeStringOrPostPaymentIntentsIntentBlikPaymentMethodOptionsUnionInput>;
  boleto?: InputMaybe<StripeStringOrPostPaymentIntentsIntentBoletoPaymentMethodOptionsUnionInput>;
  card?: InputMaybe<StripeStringOrPostPaymentIntentsIntentCardPaymentMethodOptionsUnionInput>;
  cardPresent?: InputMaybe<StripeStringOrPostPaymentIntentsIntentCardPresentPaymentMethodOptionsUnionInput>;
  cashapp?: InputMaybe<StripeStringOrPostPaymentIntentsIntentCashappPaymentMethodOptionsUnionInput>;
  customerBalance?: InputMaybe<StripeStringOrPostPaymentIntentsIntentCustomerBalancePaymentMethodOptionsUnionInput>;
  eps?: InputMaybe<StripeStringOrPostPaymentIntentsIntentEpsPaymentMethodOptionsUnionInput>;
  fpx?: InputMaybe<StripeStringOrPostPaymentIntentsIntentFpxPaymentMethodOptionsUnionInput>;
  giropay?: InputMaybe<StripeStringOrPostPaymentIntentsIntentGiropayPaymentMethodOptionsUnionInput>;
  grabpay?: InputMaybe<StripeStringOrPostPaymentIntentsIntentGrabpayPaymentMethodOptionsUnionInput>;
  ideal?: InputMaybe<StripeStringOrPostPaymentIntentsIntentIdealPaymentMethodOptionsUnionInput>;
  interacPresent?: InputMaybe<Scalars['JSON']>;
  klarna?: InputMaybe<StripeStringOrPostPaymentIntentsIntentKlarnaPaymentMethodOptionsUnionInput>;
  konbini?: InputMaybe<StripeStringOrPostPaymentIntentsIntentKonbiniPaymentMethodOptionsUnionInput>;
  link?: InputMaybe<StripeStringOrPostPaymentIntentsIntentLinkPaymentMethodOptionsUnionInput>;
  oxxo?: InputMaybe<StripeStringOrPostPaymentIntentsIntentOxxoPaymentMethodOptionsUnionInput>;
  p24?: InputMaybe<StripeStringOrPostPaymentIntentsIntentP24PaymentMethodOptionsUnionInput>;
  paynow?: InputMaybe<StripeStringOrPostPaymentIntentsIntentPaynowPaymentMethodOptionsUnionInput>;
  paypal?: InputMaybe<StripeStringOrPostPaymentIntentsIntentPaypalPaymentMethodOptionsUnionInput>;
  pix?: InputMaybe<StripeStringOrPostPaymentIntentsIntentPixPaymentMethodOptionsUnionInput>;
  promptpay?: InputMaybe<StripeStringOrPostPaymentIntentsIntentPromptpayPaymentMethodOptionsUnionInput>;
  sepaDebit?: InputMaybe<StripeStringOrPostPaymentIntentsIntentSepaDebitPaymentMethodOptionsUnionInput>;
  sofort?: InputMaybe<StripeStringOrPostPaymentIntentsIntentSofortPaymentMethodOptionsUnionInput>;
  usBankAccount?: InputMaybe<StripeStringOrPostPaymentIntentsIntentUsBankAccountPaymentMethodOptionsUnionInput>;
  wechatPay?: InputMaybe<StripeStringOrPostPaymentIntentsIntentWechatPayPaymentMethodOptionsUnionInput>;
};

export enum StripePostPaymentIntentsIntentPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions {
  Combined = 'COMBINED',
  Interval = 'INTERVAL',
  Sporadic = 'SPORADIC'
}

export type StripePostPaymentIntentsIntentPaynowPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsIntentSetupFutureUsagePaynowPaymentMethodOptions>;
};

export type StripePostPaymentIntentsIntentPaypalPaymentMethodOptionsInput = {
  captureMethod?: InputMaybe<Scalars['String']>;
  preferredLocale?: InputMaybe<StripePostPaymentIntentsIntentPreferredLocalePaypalPaymentMethodOptions>;
  reference?: InputMaybe<Scalars['String']>;
  riskCorrelationId?: InputMaybe<Scalars['String']>;
  setupFutureUsage?: InputMaybe<Scalars['String']>;
};

export enum StripePostPaymentIntentsIntentPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions {
  Balances = 'BALANCES',
  Ownership = 'OWNERSHIP',
  PaymentMethod = 'PAYMENT_METHOD',
  Transactions = 'TRANSACTIONS'
}

export type StripePostPaymentIntentsIntentPixPaymentMethodOptionsInput = {
  expiresAfterSeconds?: InputMaybe<Scalars['Int']>;
  expiresAt?: InputMaybe<Scalars['Int']>;
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsIntentSetupFutureUsagePixPaymentMethodOptions>;
};

export type StripePostPaymentIntentsIntentPlanInstallmentsCardPaymentMethodOptionsInput = {
  count: Scalars['Int'];
  interval: StripePostPaymentIntentsIntentIntervalPlanInstallmentsCardPaymentMethodOptions;
  type: StripePostPaymentIntentsIntentTypePlanInstallmentsCardPaymentMethodOptions;
};

export enum StripePostPaymentIntentsIntentPreferredLanguageBancontactPaymentMethodOptions {
  De = 'DE',
  En = 'EN',
  Fr = 'FR',
  Nl = 'NL'
}

export enum StripePostPaymentIntentsIntentPreferredLocaleKlarnaPaymentMethodOptions {
  CsCz = 'CS_CZ',
  DaDk = 'DA_DK',
  DeAt = 'DE_AT',
  DeCh = 'DE_CH',
  DeDe = 'DE_DE',
  ElGr = 'EL_GR',
  EnAt = 'EN_AT',
  EnAu = 'EN_AU',
  EnBe = 'EN_BE',
  EnCa = 'EN_CA',
  EnCh = 'EN_CH',
  EnCz = 'EN_CZ',
  EnDe = 'EN_DE',
  EnDk = 'EN_DK',
  EnEs = 'EN_ES',
  EnFi = 'EN_FI',
  EnFr = 'EN_FR',
  EnGb = 'EN_GB',
  EnGr = 'EN_GR',
  EnIe = 'EN_IE',
  EnIt = 'EN_IT',
  EnNl = 'EN_NL',
  EnNo = 'EN_NO',
  EnNz = 'EN_NZ',
  EnPl = 'EN_PL',
  EnPt = 'EN_PT',
  EnSe = 'EN_SE',
  EnUs = 'EN_US',
  EsEs = 'ES_ES',
  EsUs = 'ES_US',
  FiFi = 'FI_FI',
  FrBe = 'FR_BE',
  FrCa = 'FR_CA',
  FrCh = 'FR_CH',
  FrFr = 'FR_FR',
  ItCh = 'IT_CH',
  ItIt = 'IT_IT',
  NbNo = 'NB_NO',
  NlBe = 'NL_BE',
  NlNl = 'NL_NL',
  PlPl = 'PL_PL',
  PtPt = 'PT_PT',
  SvFi = 'SV_FI',
  SvSe = 'SV_SE'
}

export enum StripePostPaymentIntentsIntentPreferredLocalePaypalPaymentMethodOptions {
  CsCz = 'CS_CZ',
  DaDk = 'DA_DK',
  DeAt = 'DE_AT',
  DeDe = 'DE_DE',
  DeLu = 'DE_LU',
  ElGr = 'EL_GR',
  EnGb = 'EN_GB',
  EnUs = 'EN_US',
  EsEs = 'ES_ES',
  FiFi = 'FI_FI',
  FrBe = 'FR_BE',
  FrFr = 'FR_FR',
  FrLu = 'FR_LU',
  HuHu = 'HU_HU',
  ItIt = 'IT_IT',
  NlBe = 'NL_BE',
  NlNl = 'NL_NL',
  PlPl = 'PL_PL',
  PtPt = 'PT_PT',
  SkSk = 'SK_SK',
  SvSe = 'SV_SE'
}

export type StripePostPaymentIntentsIntentPromptpayPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsIntentSetupFutureUsagePromptpayPaymentMethodOptions>;
};

export type StripePostPaymentIntentsIntentRadarOptionsPaymentMethodDataInput = {
  session?: InputMaybe<Scalars['String']>;
};

export enum StripePostPaymentIntentsIntentRequestThreeDSecureCardPaymentMethodOptions {
  Any = 'ANY',
  Automatic = 'AUTOMATIC'
}

export enum StripePostPaymentIntentsIntentRequestedAddressTypesBankTransferCustomerBalancePaymentMethodOptions {
  Iban = 'IBAN',
  Sepa = 'SEPA',
  SortCode = 'SORT_CODE',
  Spei = 'SPEI',
  Zengin = 'ZENGIN'
}

export enum StripePostPaymentIntentsIntentRequestedNetworksUsBankAccountPaymentMethodOptions {
  Ach = 'ACH',
  UsDomesticWire = 'US_DOMESTIC_WIRE'
}

export type StripePostPaymentIntentsIntentSepaDebitPaymentMethodDataInput = {
  iban: Scalars['String'];
};

export type StripePostPaymentIntentsIntentSepaDebitPaymentMethodOptionsInput = {
  mandateOptions?: InputMaybe<Scalars['JSON']>;
  setupFutureUsage?: InputMaybe<Scalars['String']>;
};

export enum StripePostPaymentIntentsIntentSetupFutureUsageAffirmPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsIntentSetupFutureUsageAfterpayClearpayPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsIntentSetupFutureUsageCustomerBalancePaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsIntentSetupFutureUsageEpsPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsIntentSetupFutureUsageFpxPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsIntentSetupFutureUsageGiropayPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsIntentSetupFutureUsageGrabpayPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsIntentSetupFutureUsageKlarnaPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsIntentSetupFutureUsageKonbiniPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsIntentSetupFutureUsageOxxoPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsIntentSetupFutureUsageP24PaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsIntentSetupFutureUsagePaynowPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsIntentSetupFutureUsagePixPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsIntentSetupFutureUsagePromptpayPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsIntentSetupFutureUsageWechatPayPaymentMethodOptions {
  None = 'NONE'
}

export type StripePostPaymentIntentsIntentShippingInput = {
  address: StripePostPaymentIntentsIntentAddressShippingInput;
  carrier?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  phone?: InputMaybe<Scalars['String']>;
  trackingNumber?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsIntentSofortPaymentMethodDataInput = {
  country: StripePostPaymentIntentsIntentCountrySofortPaymentMethodData;
};

export type StripePostPaymentIntentsIntentSofortPaymentMethodOptionsInput = {
  preferredLanguage?: InputMaybe<Scalars['String']>;
  setupFutureUsage?: InputMaybe<Scalars['String']>;
};

export enum StripePostPaymentIntentsIntentSupportedTypesMandateOptionsCardPaymentMethodOptions {
  India = 'INDIA'
}

export enum StripePostPaymentIntentsIntentTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions {
  Business = 'BUSINESS',
  Personal = 'PERSONAL'
}

export type StripePostPaymentIntentsIntentTransferDataInput = {
  amount?: InputMaybe<Scalars['Int']>;
};

export enum StripePostPaymentIntentsIntentTypeBankTransferCustomerBalancePaymentMethodOptions {
  EuBankTransfer = 'EU_BANK_TRANSFER',
  GbBankTransfer = 'GB_BANK_TRANSFER',
  JpBankTransfer = 'JP_BANK_TRANSFER',
  MxBankTransfer = 'MX_BANK_TRANSFER'
}

export enum StripePostPaymentIntentsIntentTypePaymentMethodData {
  AcssDebit = 'ACSS_DEBIT',
  Affirm = 'AFFIRM',
  AfterpayClearpay = 'AFTERPAY_CLEARPAY',
  Alipay = 'ALIPAY',
  AuBecsDebit = 'AU_BECS_DEBIT',
  BacsDebit = 'BACS_DEBIT',
  Bancontact = 'BANCONTACT',
  Blik = 'BLIK',
  Boleto = 'BOLETO',
  Cashapp = 'CASHAPP',
  CustomerBalance = 'CUSTOMER_BALANCE',
  Eps = 'EPS',
  Fpx = 'FPX',
  Giropay = 'GIROPAY',
  Grabpay = 'GRABPAY',
  Ideal = 'IDEAL',
  Klarna = 'KLARNA',
  Konbini = 'KONBINI',
  Link = 'LINK',
  Oxxo = 'OXXO',
  Paynow = 'PAYNOW',
  Paypal = 'PAYPAL',
  Pix = 'PIX',
  Promptpay = 'PROMPTPAY',
  P_24 = 'P_24',
  SepaDebit = 'SEPA_DEBIT',
  Sofort = 'SOFORT',
  UsBankAccount = 'US_BANK_ACCOUNT',
  WechatPay = 'WECHAT_PAY'
}

export enum StripePostPaymentIntentsIntentTypePlanInstallmentsCardPaymentMethodOptions {
  FixedCount = 'FIXED_COUNT'
}

export type StripePostPaymentIntentsIntentUsBankAccountPaymentMethodDataInput = {
  accountHolderType?: InputMaybe<StripePostPaymentIntentsIntentAccountHolderTypeUsBankAccountPaymentMethodData>;
  accountNumber?: InputMaybe<Scalars['String']>;
  accountType?: InputMaybe<StripePostPaymentIntentsIntentAccountTypeUsBankAccountPaymentMethodData>;
  financialConnectionsAccount?: InputMaybe<Scalars['String']>;
  routingNumber?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsIntentUsBankAccountPaymentMethodOptionsInput = {
  financialConnections?: InputMaybe<StripePostPaymentIntentsIntentFinancialConnectionsUsBankAccountPaymentMethodOptionsInput>;
  networks?: InputMaybe<StripePostPaymentIntentsIntentNetworksUsBankAccountPaymentMethodOptionsInput>;
  setupFutureUsage?: InputMaybe<Scalars['String']>;
  verificationMethod?: InputMaybe<StripePostPaymentIntentsIntentVerificationMethodUsBankAccountPaymentMethodOptions>;
};

export enum StripePostPaymentIntentsIntentVerificationMethodAcssDebitPaymentMethodOptions {
  Automatic = 'AUTOMATIC',
  Instant = 'INSTANT',
  Microdeposits = 'MICRODEPOSITS'
}

export enum StripePostPaymentIntentsIntentVerificationMethodUsBankAccountPaymentMethodOptions {
  Automatic = 'AUTOMATIC',
  Instant = 'INSTANT',
  Microdeposits = 'MICRODEPOSITS'
}

export type StripePostPaymentIntentsIntentVerifyMicrodepositsInput = {
  amounts?: InputMaybe<Array<Scalars['Int']>>;
  clientSecret?: InputMaybe<Scalars['String']>;
  descriptorCode?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostPaymentIntentsIntentWechatPayPaymentMethodOptionsInput = {
  appId?: InputMaybe<Scalars['String']>;
  client: StripePostPaymentIntentsIntentClientWechatPayPaymentMethodOptions;
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsIntentSetupFutureUsageWechatPayPaymentMethodOptions>;
};

export enum StripePostPaymentIntentsIntervalMandateOptionsCardPaymentMethodOptions {
  Day = 'DAY',
  Month = 'MONTH',
  Sporadic = 'SPORADIC',
  Week = 'WEEK',
  Year = 'YEAR'
}

export enum StripePostPaymentIntentsIntervalPlanInstallmentsCardPaymentMethodOptions {
  Month = 'MONTH'
}

export type StripePostPaymentIntentsKlarnaPaymentMethodDataInput = {
  dob?: InputMaybe<StripePostPaymentIntentsDobKlarnaPaymentMethodDataInput>;
};

export type StripePostPaymentIntentsKlarnaPaymentMethodOptionsInput = {
  captureMethod?: InputMaybe<Scalars['String']>;
  preferredLocale?: InputMaybe<StripePostPaymentIntentsPreferredLocaleKlarnaPaymentMethodOptions>;
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsSetupFutureUsageKlarnaPaymentMethodOptions>;
};

export type StripePostPaymentIntentsKonbiniPaymentMethodOptionsInput = {
  confirmationNumber?: InputMaybe<Scalars['String']>;
  expiresAfterDays?: InputMaybe<Scalars['JSON']>;
  expiresAt?: InputMaybe<Scalars['JSON']>;
  productDescription?: InputMaybe<Scalars['String']>;
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsSetupFutureUsageKonbiniPaymentMethodOptions>;
};

export type StripePostPaymentIntentsLinkPaymentMethodOptionsInput = {
  captureMethod?: InputMaybe<Scalars['String']>;
  persistentToken?: InputMaybe<Scalars['String']>;
  setupFutureUsage?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsMandateDataInput = {
  customerAcceptance: StripePostPaymentIntentsCustomerAcceptanceMandateDataInput;
};

export type StripePostPaymentIntentsMandateOptionsAcssDebitPaymentMethodOptionsInput = {
  customMandateUrl?: InputMaybe<Scalars['JSON']>;
  intervalDescription?: InputMaybe<Scalars['String']>;
  paymentSchedule?: InputMaybe<StripePostPaymentIntentsPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions>;
  transactionType?: InputMaybe<StripePostPaymentIntentsTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions>;
};

export type StripePostPaymentIntentsMandateOptionsCardPaymentMethodOptionsInput = {
  amount: Scalars['Int'];
  amountType: StripePostPaymentIntentsAmountTypeMandateOptionsCardPaymentMethodOptions;
  description?: InputMaybe<Scalars['String']>;
  endDate?: InputMaybe<Scalars['Int']>;
  interval: StripePostPaymentIntentsIntervalMandateOptionsCardPaymentMethodOptions;
  intervalCount?: InputMaybe<Scalars['Int']>;
  reference: Scalars['String'];
  startDate: Scalars['Int'];
  supportedTypes?: InputMaybe<Array<StripePostPaymentIntentsSupportedTypesMandateOptionsCardPaymentMethodOptions>>;
};

export enum StripePostPaymentIntentsNetworkCardPaymentMethodOptions {
  Amex = 'AMEX',
  CartesBancaires = 'CARTES_BANCAIRES',
  Diners = 'DINERS',
  Discover = 'DISCOVER',
  EftposAu = 'EFTPOS_AU',
  Interac = 'INTERAC',
  Jcb = 'JCB',
  Mastercard = 'MASTERCARD',
  Unionpay = 'UNIONPAY',
  Unknown = 'UNKNOWN',
  Visa = 'VISA'
}

export type StripePostPaymentIntentsNetworksUsBankAccountPaymentMethodOptionsInput = {
  requested?: InputMaybe<Array<StripePostPaymentIntentsRequestedNetworksUsBankAccountPaymentMethodOptions>>;
};

export type StripePostPaymentIntentsOnlineCustomerAcceptanceMandateDataInput = {
  ipAddress: Scalars['String'];
  userAgent: Scalars['String'];
};

export type StripePostPaymentIntentsOxxoPaymentMethodOptionsInput = {
  expiresAfterDays?: InputMaybe<Scalars['Int']>;
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsSetupFutureUsageOxxoPaymentMethodOptions>;
};

export type StripePostPaymentIntentsP24PaymentMethodDataInput = {
  bank?: InputMaybe<StripePostPaymentIntentsBankP24PaymentMethodData>;
};

export type StripePostPaymentIntentsP24PaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsSetupFutureUsageP24PaymentMethodOptions>;
  tosShownAndAccepted?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostPaymentIntentsPaymentMethodDataInput = {
  acssDebit?: InputMaybe<StripePostPaymentIntentsAcssDebitPaymentMethodDataInput>;
  affirm?: InputMaybe<Scalars['JSON']>;
  afterpayClearpay?: InputMaybe<Scalars['JSON']>;
  alipay?: InputMaybe<Scalars['JSON']>;
  auBecsDebit?: InputMaybe<StripePostPaymentIntentsAuBecsDebitPaymentMethodDataInput>;
  bacsDebit?: InputMaybe<StripePostPaymentIntentsBacsDebitPaymentMethodDataInput>;
  bancontact?: InputMaybe<Scalars['JSON']>;
  billingDetails?: InputMaybe<StripePostPaymentIntentsBillingDetailsPaymentMethodDataInput>;
  blik?: InputMaybe<Scalars['JSON']>;
  boleto?: InputMaybe<StripePostPaymentIntentsBoletoPaymentMethodDataInput>;
  cashapp?: InputMaybe<Scalars['JSON']>;
  customerBalance?: InputMaybe<Scalars['JSON']>;
  eps?: InputMaybe<StripePostPaymentIntentsEpsPaymentMethodDataInput>;
  fpx?: InputMaybe<StripePostPaymentIntentsFpxPaymentMethodDataInput>;
  giropay?: InputMaybe<Scalars['JSON']>;
  grabpay?: InputMaybe<Scalars['JSON']>;
  ideal?: InputMaybe<StripePostPaymentIntentsIdealPaymentMethodDataInput>;
  interacPresent?: InputMaybe<Scalars['JSON']>;
  klarna?: InputMaybe<StripePostPaymentIntentsKlarnaPaymentMethodDataInput>;
  konbini?: InputMaybe<Scalars['JSON']>;
  link?: InputMaybe<Scalars['JSON']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  oxxo?: InputMaybe<Scalars['JSON']>;
  p24?: InputMaybe<StripePostPaymentIntentsP24PaymentMethodDataInput>;
  paynow?: InputMaybe<Scalars['JSON']>;
  paypal?: InputMaybe<Scalars['JSON']>;
  pix?: InputMaybe<Scalars['JSON']>;
  promptpay?: InputMaybe<Scalars['JSON']>;
  radarOptions?: InputMaybe<StripePostPaymentIntentsRadarOptionsPaymentMethodDataInput>;
  sepaDebit?: InputMaybe<StripePostPaymentIntentsSepaDebitPaymentMethodDataInput>;
  sofort?: InputMaybe<StripePostPaymentIntentsSofortPaymentMethodDataInput>;
  type: StripePostPaymentIntentsTypePaymentMethodData;
  usBankAccount?: InputMaybe<StripePostPaymentIntentsUsBankAccountPaymentMethodDataInput>;
  wechatPay?: InputMaybe<Scalars['JSON']>;
};

export type StripePostPaymentIntentsPaymentMethodOptionsInput = {
  acssDebit?: InputMaybe<StripeStringOrPostPaymentIntentsAcssDebitPaymentMethodOptionsUnionInput>;
  affirm?: InputMaybe<StripeStringOrPostPaymentIntentsAffirmPaymentMethodOptionsUnionInput>;
  afterpayClearpay?: InputMaybe<StripeStringOrPostPaymentIntentsAfterpayClearpayPaymentMethodOptionsUnionInput>;
  alipay?: InputMaybe<StripeStringOrPostPaymentIntentsAlipayPaymentMethodOptionsUnionInput>;
  auBecsDebit?: InputMaybe<StripeStringOrPostPaymentIntentsAuBecsDebitPaymentMethodOptionsUnionInput>;
  bacsDebit?: InputMaybe<StripeStringOrPostPaymentIntentsBacsDebitPaymentMethodOptionsUnionInput>;
  bancontact?: InputMaybe<StripeStringOrPostPaymentIntentsBancontactPaymentMethodOptionsUnionInput>;
  blik?: InputMaybe<StripeStringOrPostPaymentIntentsBlikPaymentMethodOptionsUnionInput>;
  boleto?: InputMaybe<StripeStringOrPostPaymentIntentsBoletoPaymentMethodOptionsUnionInput>;
  card?: InputMaybe<StripeStringOrPostPaymentIntentsCardPaymentMethodOptionsUnionInput>;
  cardPresent?: InputMaybe<StripeStringOrPostPaymentIntentsCardPresentPaymentMethodOptionsUnionInput>;
  cashapp?: InputMaybe<StripeStringOrPostPaymentIntentsCashappPaymentMethodOptionsUnionInput>;
  customerBalance?: InputMaybe<StripeStringOrPostPaymentIntentsCustomerBalancePaymentMethodOptionsUnionInput>;
  eps?: InputMaybe<StripeStringOrPostPaymentIntentsEpsPaymentMethodOptionsUnionInput>;
  fpx?: InputMaybe<StripeStringOrPostPaymentIntentsFpxPaymentMethodOptionsUnionInput>;
  giropay?: InputMaybe<StripeStringOrPostPaymentIntentsGiropayPaymentMethodOptionsUnionInput>;
  grabpay?: InputMaybe<StripeStringOrPostPaymentIntentsGrabpayPaymentMethodOptionsUnionInput>;
  ideal?: InputMaybe<StripeStringOrPostPaymentIntentsIdealPaymentMethodOptionsUnionInput>;
  interacPresent?: InputMaybe<Scalars['JSON']>;
  klarna?: InputMaybe<StripeStringOrPostPaymentIntentsKlarnaPaymentMethodOptionsUnionInput>;
  konbini?: InputMaybe<StripeStringOrPostPaymentIntentsKonbiniPaymentMethodOptionsUnionInput>;
  link?: InputMaybe<StripeStringOrPostPaymentIntentsLinkPaymentMethodOptionsUnionInput>;
  oxxo?: InputMaybe<StripeStringOrPostPaymentIntentsOxxoPaymentMethodOptionsUnionInput>;
  p24?: InputMaybe<StripeStringOrPostPaymentIntentsP24PaymentMethodOptionsUnionInput>;
  paynow?: InputMaybe<StripeStringOrPostPaymentIntentsPaynowPaymentMethodOptionsUnionInput>;
  paypal?: InputMaybe<StripeStringOrPostPaymentIntentsPaypalPaymentMethodOptionsUnionInput>;
  pix?: InputMaybe<StripeStringOrPostPaymentIntentsPixPaymentMethodOptionsUnionInput>;
  promptpay?: InputMaybe<StripeStringOrPostPaymentIntentsPromptpayPaymentMethodOptionsUnionInput>;
  sepaDebit?: InputMaybe<StripeStringOrPostPaymentIntentsSepaDebitPaymentMethodOptionsUnionInput>;
  sofort?: InputMaybe<StripeStringOrPostPaymentIntentsSofortPaymentMethodOptionsUnionInput>;
  usBankAccount?: InputMaybe<StripeStringOrPostPaymentIntentsUsBankAccountPaymentMethodOptionsUnionInput>;
  wechatPay?: InputMaybe<StripeStringOrPostPaymentIntentsWechatPayPaymentMethodOptionsUnionInput>;
};

export enum StripePostPaymentIntentsPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions {
  Combined = 'COMBINED',
  Interval = 'INTERVAL',
  Sporadic = 'SPORADIC'
}

export type StripePostPaymentIntentsPaynowPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsSetupFutureUsagePaynowPaymentMethodOptions>;
};

export type StripePostPaymentIntentsPaypalPaymentMethodOptionsInput = {
  captureMethod?: InputMaybe<Scalars['String']>;
  preferredLocale?: InputMaybe<StripePostPaymentIntentsPreferredLocalePaypalPaymentMethodOptions>;
  reference?: InputMaybe<Scalars['String']>;
  riskCorrelationId?: InputMaybe<Scalars['String']>;
  setupFutureUsage?: InputMaybe<Scalars['String']>;
};

export enum StripePostPaymentIntentsPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions {
  Balances = 'BALANCES',
  Ownership = 'OWNERSHIP',
  PaymentMethod = 'PAYMENT_METHOD',
  Transactions = 'TRANSACTIONS'
}

export type StripePostPaymentIntentsPixPaymentMethodOptionsInput = {
  expiresAfterSeconds?: InputMaybe<Scalars['Int']>;
  expiresAt?: InputMaybe<Scalars['Int']>;
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsSetupFutureUsagePixPaymentMethodOptions>;
};

export type StripePostPaymentIntentsPlanInstallmentsCardPaymentMethodOptionsInput = {
  count: Scalars['Int'];
  interval: StripePostPaymentIntentsIntervalPlanInstallmentsCardPaymentMethodOptions;
  type: StripePostPaymentIntentsTypePlanInstallmentsCardPaymentMethodOptions;
};

export enum StripePostPaymentIntentsPreferredLanguageBancontactPaymentMethodOptions {
  De = 'DE',
  En = 'EN',
  Fr = 'FR',
  Nl = 'NL'
}

export enum StripePostPaymentIntentsPreferredLocaleKlarnaPaymentMethodOptions {
  CsCz = 'CS_CZ',
  DaDk = 'DA_DK',
  DeAt = 'DE_AT',
  DeCh = 'DE_CH',
  DeDe = 'DE_DE',
  ElGr = 'EL_GR',
  EnAt = 'EN_AT',
  EnAu = 'EN_AU',
  EnBe = 'EN_BE',
  EnCa = 'EN_CA',
  EnCh = 'EN_CH',
  EnCz = 'EN_CZ',
  EnDe = 'EN_DE',
  EnDk = 'EN_DK',
  EnEs = 'EN_ES',
  EnFi = 'EN_FI',
  EnFr = 'EN_FR',
  EnGb = 'EN_GB',
  EnGr = 'EN_GR',
  EnIe = 'EN_IE',
  EnIt = 'EN_IT',
  EnNl = 'EN_NL',
  EnNo = 'EN_NO',
  EnNz = 'EN_NZ',
  EnPl = 'EN_PL',
  EnPt = 'EN_PT',
  EnSe = 'EN_SE',
  EnUs = 'EN_US',
  EsEs = 'ES_ES',
  EsUs = 'ES_US',
  FiFi = 'FI_FI',
  FrBe = 'FR_BE',
  FrCa = 'FR_CA',
  FrCh = 'FR_CH',
  FrFr = 'FR_FR',
  ItCh = 'IT_CH',
  ItIt = 'IT_IT',
  NbNo = 'NB_NO',
  NlBe = 'NL_BE',
  NlNl = 'NL_NL',
  PlPl = 'PL_PL',
  PtPt = 'PT_PT',
  SvFi = 'SV_FI',
  SvSe = 'SV_SE'
}

export enum StripePostPaymentIntentsPreferredLocalePaypalPaymentMethodOptions {
  CsCz = 'CS_CZ',
  DaDk = 'DA_DK',
  DeAt = 'DE_AT',
  DeDe = 'DE_DE',
  DeLu = 'DE_LU',
  ElGr = 'EL_GR',
  EnGb = 'EN_GB',
  EnUs = 'EN_US',
  EsEs = 'ES_ES',
  FiFi = 'FI_FI',
  FrBe = 'FR_BE',
  FrFr = 'FR_FR',
  FrLu = 'FR_LU',
  HuHu = 'HU_HU',
  ItIt = 'IT_IT',
  NlBe = 'NL_BE',
  NlNl = 'NL_NL',
  PlPl = 'PL_PL',
  PtPt = 'PT_PT',
  SkSk = 'SK_SK',
  SvSe = 'SV_SE'
}

export type StripePostPaymentIntentsPromptpayPaymentMethodOptionsInput = {
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsSetupFutureUsagePromptpayPaymentMethodOptions>;
};

export type StripePostPaymentIntentsRadarOptionsInput = {
  session?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsRadarOptionsPaymentMethodDataInput = {
  session?: InputMaybe<Scalars['String']>;
};

export enum StripePostPaymentIntentsRequestThreeDSecureCardPaymentMethodOptions {
  Any = 'ANY',
  Automatic = 'AUTOMATIC'
}

export enum StripePostPaymentIntentsRequestedAddressTypesBankTransferCustomerBalancePaymentMethodOptions {
  Iban = 'IBAN',
  Sepa = 'SEPA',
  SortCode = 'SORT_CODE',
  Spei = 'SPEI',
  Zengin = 'ZENGIN'
}

export enum StripePostPaymentIntentsRequestedNetworksUsBankAccountPaymentMethodOptions {
  Ach = 'ACH',
  UsDomesticWire = 'US_DOMESTIC_WIRE'
}

export type StripePostPaymentIntentsSepaDebitPaymentMethodDataInput = {
  iban: Scalars['String'];
};

export type StripePostPaymentIntentsSepaDebitPaymentMethodOptionsInput = {
  mandateOptions?: InputMaybe<Scalars['JSON']>;
  setupFutureUsage?: InputMaybe<Scalars['String']>;
};

export enum StripePostPaymentIntentsSetupFutureUsage {
  OffSession = 'OFF_SESSION',
  OnSession = 'ON_SESSION'
}

export enum StripePostPaymentIntentsSetupFutureUsageAffirmPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsSetupFutureUsageAfterpayClearpayPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsSetupFutureUsageCustomerBalancePaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsSetupFutureUsageEpsPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsSetupFutureUsageFpxPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsSetupFutureUsageGiropayPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsSetupFutureUsageGrabpayPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsSetupFutureUsageKlarnaPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsSetupFutureUsageKonbiniPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsSetupFutureUsageOxxoPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsSetupFutureUsageP24PaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsSetupFutureUsagePaynowPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsSetupFutureUsagePixPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsSetupFutureUsagePromptpayPaymentMethodOptions {
  None = 'NONE'
}

export enum StripePostPaymentIntentsSetupFutureUsageWechatPayPaymentMethodOptions {
  None = 'NONE'
}

export type StripePostPaymentIntentsShippingInput = {
  address: StripePostPaymentIntentsAddressShippingInput;
  carrier?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  phone?: InputMaybe<Scalars['String']>;
  trackingNumber?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsSofortPaymentMethodDataInput = {
  country: StripePostPaymentIntentsCountrySofortPaymentMethodData;
};

export type StripePostPaymentIntentsSofortPaymentMethodOptionsInput = {
  preferredLanguage?: InputMaybe<Scalars['String']>;
  setupFutureUsage?: InputMaybe<Scalars['String']>;
};

export enum StripePostPaymentIntentsSupportedTypesMandateOptionsCardPaymentMethodOptions {
  India = 'INDIA'
}

export enum StripePostPaymentIntentsTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions {
  Business = 'BUSINESS',
  Personal = 'PERSONAL'
}

export type StripePostPaymentIntentsTransferDataInput = {
  amount?: InputMaybe<Scalars['Int']>;
  destination: Scalars['String'];
};

export enum StripePostPaymentIntentsTypeBankTransferCustomerBalancePaymentMethodOptions {
  EuBankTransfer = 'EU_BANK_TRANSFER',
  GbBankTransfer = 'GB_BANK_TRANSFER',
  JpBankTransfer = 'JP_BANK_TRANSFER',
  MxBankTransfer = 'MX_BANK_TRANSFER'
}

export enum StripePostPaymentIntentsTypeCustomerAcceptanceMandateData {
  Offline = 'OFFLINE',
  Online = 'ONLINE'
}

export enum StripePostPaymentIntentsTypePaymentMethodData {
  AcssDebit = 'ACSS_DEBIT',
  Affirm = 'AFFIRM',
  AfterpayClearpay = 'AFTERPAY_CLEARPAY',
  Alipay = 'ALIPAY',
  AuBecsDebit = 'AU_BECS_DEBIT',
  BacsDebit = 'BACS_DEBIT',
  Bancontact = 'BANCONTACT',
  Blik = 'BLIK',
  Boleto = 'BOLETO',
  Cashapp = 'CASHAPP',
  CustomerBalance = 'CUSTOMER_BALANCE',
  Eps = 'EPS',
  Fpx = 'FPX',
  Giropay = 'GIROPAY',
  Grabpay = 'GRABPAY',
  Ideal = 'IDEAL',
  Klarna = 'KLARNA',
  Konbini = 'KONBINI',
  Link = 'LINK',
  Oxxo = 'OXXO',
  Paynow = 'PAYNOW',
  Paypal = 'PAYPAL',
  Pix = 'PIX',
  Promptpay = 'PROMPTPAY',
  P_24 = 'P_24',
  SepaDebit = 'SEPA_DEBIT',
  Sofort = 'SOFORT',
  UsBankAccount = 'US_BANK_ACCOUNT',
  WechatPay = 'WECHAT_PAY'
}

export enum StripePostPaymentIntentsTypePlanInstallmentsCardPaymentMethodOptions {
  FixedCount = 'FIXED_COUNT'
}

export type StripePostPaymentIntentsUsBankAccountPaymentMethodDataInput = {
  accountHolderType?: InputMaybe<StripePostPaymentIntentsAccountHolderTypeUsBankAccountPaymentMethodData>;
  accountNumber?: InputMaybe<Scalars['String']>;
  accountType?: InputMaybe<StripePostPaymentIntentsAccountTypeUsBankAccountPaymentMethodData>;
  financialConnectionsAccount?: InputMaybe<Scalars['String']>;
  routingNumber?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentIntentsUsBankAccountPaymentMethodOptionsInput = {
  financialConnections?: InputMaybe<StripePostPaymentIntentsFinancialConnectionsUsBankAccountPaymentMethodOptionsInput>;
  networks?: InputMaybe<StripePostPaymentIntentsNetworksUsBankAccountPaymentMethodOptionsInput>;
  setupFutureUsage?: InputMaybe<Scalars['String']>;
  verificationMethod?: InputMaybe<StripePostPaymentIntentsVerificationMethodUsBankAccountPaymentMethodOptions>;
};

export enum StripePostPaymentIntentsVerificationMethodAcssDebitPaymentMethodOptions {
  Automatic = 'AUTOMATIC',
  Instant = 'INSTANT',
  Microdeposits = 'MICRODEPOSITS'
}

export enum StripePostPaymentIntentsVerificationMethodUsBankAccountPaymentMethodOptions {
  Automatic = 'AUTOMATIC',
  Instant = 'INSTANT',
  Microdeposits = 'MICRODEPOSITS'
}

export type StripePostPaymentIntentsWechatPayPaymentMethodOptionsInput = {
  appId?: InputMaybe<Scalars['String']>;
  client: StripePostPaymentIntentsClientWechatPayPaymentMethodOptions;
  setupFutureUsage?: InputMaybe<StripePostPaymentIntentsSetupFutureUsageWechatPayPaymentMethodOptions>;
};

export type StripePostPaymentLinksAdjustableQuantityLineItemsInput = {
  enabled: Scalars['Boolean'];
  maximum?: InputMaybe<Scalars['Int']>;
  minimum?: InputMaybe<Scalars['Int']>;
};

export type StripePostPaymentLinksAfterCompletionInput = {
  hostedConfirmation?: InputMaybe<StripePostPaymentLinksHostedConfirmationAfterCompletionInput>;
  redirect?: InputMaybe<StripePostPaymentLinksRedirectAfterCompletionInput>;
  type: StripePostPaymentLinksTypeAfterCompletion;
};

export enum StripePostPaymentLinksAllowedCountriesShippingAddressCollection {
  Ac = 'AC',
  Ad = 'AD',
  Ae = 'AE',
  Af = 'AF',
  Ag = 'AG',
  Ai = 'AI',
  Al = 'AL',
  Am = 'AM',
  Ao = 'AO',
  Aq = 'AQ',
  Ar = 'AR',
  At = 'AT',
  Au = 'AU',
  Aw = 'AW',
  Ax = 'AX',
  Az = 'AZ',
  Ba = 'BA',
  Bb = 'BB',
  Bd = 'BD',
  Be = 'BE',
  Bf = 'BF',
  Bg = 'BG',
  Bh = 'BH',
  Bi = 'BI',
  Bj = 'BJ',
  Bl = 'BL',
  Bm = 'BM',
  Bn = 'BN',
  Bo = 'BO',
  Bq = 'BQ',
  Br = 'BR',
  Bs = 'BS',
  Bt = 'BT',
  Bv = 'BV',
  Bw = 'BW',
  By = 'BY',
  Bz = 'BZ',
  Ca = 'CA',
  Cd = 'CD',
  Cf = 'CF',
  Cg = 'CG',
  Ch = 'CH',
  Ci = 'CI',
  Ck = 'CK',
  Cl = 'CL',
  Cm = 'CM',
  Cn = 'CN',
  Co = 'CO',
  Cr = 'CR',
  Cv = 'CV',
  Cw = 'CW',
  Cy = 'CY',
  Cz = 'CZ',
  De = 'DE',
  Dj = 'DJ',
  Dk = 'DK',
  Dm = 'DM',
  Do = 'DO',
  Dz = 'DZ',
  Ec = 'EC',
  Ee = 'EE',
  Eg = 'EG',
  Eh = 'EH',
  Er = 'ER',
  Es = 'ES',
  Et = 'ET',
  Fi = 'FI',
  Fj = 'FJ',
  Fk = 'FK',
  Fo = 'FO',
  Fr = 'FR',
  Ga = 'GA',
  Gb = 'GB',
  Gd = 'GD',
  Ge = 'GE',
  Gf = 'GF',
  Gg = 'GG',
  Gh = 'GH',
  Gi = 'GI',
  Gl = 'GL',
  Gm = 'GM',
  Gn = 'GN',
  Gp = 'GP',
  Gq = 'GQ',
  Gr = 'GR',
  Gs = 'GS',
  Gt = 'GT',
  Gu = 'GU',
  Gw = 'GW',
  Gy = 'GY',
  Hk = 'HK',
  Hn = 'HN',
  Hr = 'HR',
  Ht = 'HT',
  Hu = 'HU',
  Id = 'ID',
  Ie = 'IE',
  Il = 'IL',
  Im = 'IM',
  In = 'IN',
  Io = 'IO',
  Iq = 'IQ',
  Is = 'IS',
  It = 'IT',
  Je = 'JE',
  Jm = 'JM',
  Jo = 'JO',
  Jp = 'JP',
  Ke = 'KE',
  Kg = 'KG',
  Kh = 'KH',
  Ki = 'KI',
  Km = 'KM',
  Kn = 'KN',
  Kr = 'KR',
  Kw = 'KW',
  Ky = 'KY',
  Kz = 'KZ',
  La = 'LA',
  Lb = 'LB',
  Lc = 'LC',
  Li = 'LI',
  Lk = 'LK',
  Lr = 'LR',
  Ls = 'LS',
  Lt = 'LT',
  Lu = 'LU',
  Lv = 'LV',
  Ly = 'LY',
  Ma = 'MA',
  Mc = 'MC',
  Md = 'MD',
  Me = 'ME',
  Mf = 'MF',
  Mg = 'MG',
  Mk = 'MK',
  Ml = 'ML',
  Mm = 'MM',
  Mn = 'MN',
  Mo = 'MO',
  Mq = 'MQ',
  Mr = 'MR',
  Ms = 'MS',
  Mt = 'MT',
  Mu = 'MU',
  Mv = 'MV',
  Mw = 'MW',
  Mx = 'MX',
  My = 'MY',
  Mz = 'MZ',
  Na = 'NA',
  Nc = 'NC',
  Ne = 'NE',
  Ng = 'NG',
  Ni = 'NI',
  Nl = 'NL',
  No = 'NO',
  Np = 'NP',
  Nr = 'NR',
  Nu = 'NU',
  Nz = 'NZ',
  Om = 'OM',
  Pa = 'PA',
  Pe = 'PE',
  Pf = 'PF',
  Pg = 'PG',
  Ph = 'PH',
  Pk = 'PK',
  Pl = 'PL',
  Pm = 'PM',
  Pn = 'PN',
  Pr = 'PR',
  Ps = 'PS',
  Pt = 'PT',
  Py = 'PY',
  Qa = 'QA',
  Re = 'RE',
  Ro = 'RO',
  Rs = 'RS',
  Ru = 'RU',
  Rw = 'RW',
  Sa = 'SA',
  Sb = 'SB',
  Sc = 'SC',
  Se = 'SE',
  Sg = 'SG',
  Sh = 'SH',
  Si = 'SI',
  Sj = 'SJ',
  Sk = 'SK',
  Sl = 'SL',
  Sm = 'SM',
  Sn = 'SN',
  So = 'SO',
  Sr = 'SR',
  Ss = 'SS',
  St = 'ST',
  Sv = 'SV',
  Sx = 'SX',
  Sz = 'SZ',
  Ta = 'TA',
  Tc = 'TC',
  Td = 'TD',
  Tf = 'TF',
  Tg = 'TG',
  Th = 'TH',
  Tj = 'TJ',
  Tk = 'TK',
  Tl = 'TL',
  Tm = 'TM',
  Tn = 'TN',
  To = 'TO',
  Tr = 'TR',
  Tt = 'TT',
  Tv = 'TV',
  Tw = 'TW',
  Tz = 'TZ',
  Ua = 'UA',
  Ug = 'UG',
  Us = 'US',
  Uy = 'UY',
  Uz = 'UZ',
  Va = 'VA',
  Vc = 'VC',
  Ve = 'VE',
  Vg = 'VG',
  Vn = 'VN',
  Vu = 'VU',
  Wf = 'WF',
  Ws = 'WS',
  Xk = 'XK',
  Ye = 'YE',
  Yt = 'YT',
  Za = 'ZA',
  Zm = 'ZM',
  Zw = 'ZW',
  Zz = 'ZZ'
}

export type StripePostPaymentLinksAutomaticTaxInput = {
  enabled: Scalars['Boolean'];
};

export enum StripePostPaymentLinksBillingAddressCollection {
  Auto = 'AUTO',
  Required = 'REQUIRED'
}

export enum StripePostPaymentLinksCaptureMethodPaymentIntentData {
  Automatic = 'AUTOMATIC',
  AutomaticAsync = 'AUTOMATIC_ASYNC',
  Manual = 'MANUAL'
}

export type StripePostPaymentLinksConsentCollectionInput = {
  promotions?: InputMaybe<StripePostPaymentLinksPromotionsConsentCollection>;
  termsOfService?: InputMaybe<StripePostPaymentLinksTermsOfServiceConsentCollection>;
};

export type StripePostPaymentLinksCustomFieldsInput = {
  dropdown?: InputMaybe<StripePostPaymentLinksDropdownCustomFieldsInput>;
  key: Scalars['String'];
  label: StripePostPaymentLinksLabelCustomFieldsInput;
  optional?: InputMaybe<Scalars['Boolean']>;
  type: StripePostPaymentLinksTypeCustomFields;
};

export type StripePostPaymentLinksCustomFieldsInvoiceDataInvoiceCreationInput = {
  name: Scalars['String'];
  value: Scalars['String'];
};

export type StripePostPaymentLinksCustomTextInput = {
  shippingAddress?: InputMaybe<StripeStringOrPostPaymentLinksShippingAddressCustomTextUnionInput>;
  submit?: InputMaybe<StripeStringOrPostPaymentLinksSubmitCustomTextUnionInput>;
};

export enum StripePostPaymentLinksCustomerCreation {
  Always = 'ALWAYS',
  IfRequired = 'IF_REQUIRED'
}

export type StripePostPaymentLinksDropdownCustomFieldsInput = {
  options: Array<StripePostPaymentLinksOptionsDropdownCustomFieldsInput>;
};

export type StripePostPaymentLinksHostedConfirmationAfterCompletionInput = {
  customMessage?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentLinksInput = {
  afterCompletion?: InputMaybe<StripePostPaymentLinksAfterCompletionInput>;
  allowPromotionCodes?: InputMaybe<Scalars['Boolean']>;
  applicationFeeAmount?: InputMaybe<Scalars['Int']>;
  applicationFeePercent?: InputMaybe<Scalars['Float']>;
  automaticTax?: InputMaybe<StripePostPaymentLinksAutomaticTaxInput>;
  billingAddressCollection?: InputMaybe<StripePostPaymentLinksBillingAddressCollection>;
  consentCollection?: InputMaybe<StripePostPaymentLinksConsentCollectionInput>;
  currency?: InputMaybe<Scalars['String']>;
  customFields?: InputMaybe<Array<StripePostPaymentLinksCustomFieldsInput>>;
  customText?: InputMaybe<StripePostPaymentLinksCustomTextInput>;
  customerCreation?: InputMaybe<StripePostPaymentLinksCustomerCreation>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  invoiceCreation?: InputMaybe<StripePostPaymentLinksInvoiceCreationInput>;
  lineItems: Array<StripePostPaymentLinksLineItemsInput>;
  metadata?: InputMaybe<Scalars['JSON']>;
  onBehalfOf?: InputMaybe<Scalars['String']>;
  paymentIntentData?: InputMaybe<StripePostPaymentLinksPaymentIntentDataInput>;
  paymentMethodCollection?: InputMaybe<StripePostPaymentLinksPaymentMethodCollection>;
  paymentMethodTypes?: InputMaybe<Array<StripePostPaymentLinksPaymentMethodTypes>>;
  phoneNumberCollection?: InputMaybe<StripePostPaymentLinksPhoneNumberCollectionInput>;
  shippingAddressCollection?: InputMaybe<StripePostPaymentLinksShippingAddressCollectionInput>;
  shippingOptions?: InputMaybe<Array<StripePostPaymentLinksShippingOptionsInput>>;
  submitType?: InputMaybe<StripePostPaymentLinksSubmitType>;
  subscriptionData?: InputMaybe<StripePostPaymentLinksSubscriptionDataInput>;
  taxIdCollection?: InputMaybe<StripePostPaymentLinksTaxIdCollectionInput>;
  transferData?: InputMaybe<StripePostPaymentLinksTransferDataInput>;
};

export type StripePostPaymentLinksInvoiceCreationInput = {
  enabled: Scalars['Boolean'];
  invoiceData?: InputMaybe<StripePostPaymentLinksInvoiceDataInvoiceCreationInput>;
};

export type StripePostPaymentLinksInvoiceDataInvoiceCreationInput = {
  accountTaxIds?: InputMaybe<Scalars['JSON']>;
  customFields?: InputMaybe<StripeStringOrPostPaymentLinksCustomFieldsInvoiceDataInvoiceCreationUnionInput>;
  description?: InputMaybe<Scalars['String']>;
  footer?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  renderingOptions?: InputMaybe<StripeStringOrPostPaymentLinksRenderingOptionsInvoiceDataInvoiceCreationUnionInput>;
};

export type StripePostPaymentLinksLabelCustomFieldsInput = {
  custom: Scalars['String'];
  type: StripePostPaymentLinksTypeLabelCustomFields;
};

export type StripePostPaymentLinksLineItemsInput = {
  adjustableQuantity?: InputMaybe<StripePostPaymentLinksAdjustableQuantityLineItemsInput>;
  price: Scalars['String'];
  quantity: Scalars['Int'];
};

export type StripePostPaymentLinksOptionsDropdownCustomFieldsInput = {
  label: Scalars['String'];
  value: Scalars['String'];
};

export type StripePostPaymentLinksPaymentIntentDataInput = {
  captureMethod?: InputMaybe<StripePostPaymentLinksCaptureMethodPaymentIntentData>;
  setupFutureUsage?: InputMaybe<StripePostPaymentLinksSetupFutureUsagePaymentIntentData>;
};

export type StripePostPaymentLinksPaymentLinkAdjustableQuantityLineItemsInput = {
  enabled: Scalars['Boolean'];
  maximum?: InputMaybe<Scalars['Int']>;
  minimum?: InputMaybe<Scalars['Int']>;
};

export type StripePostPaymentLinksPaymentLinkAfterCompletionInput = {
  hostedConfirmation?: InputMaybe<StripePostPaymentLinksPaymentLinkHostedConfirmationAfterCompletionInput>;
  redirect?: InputMaybe<StripePostPaymentLinksPaymentLinkRedirectAfterCompletionInput>;
  type: StripePostPaymentLinksPaymentLinkTypeAfterCompletion;
};

export enum StripePostPaymentLinksPaymentLinkAllowedCountriesShippingAddressCollection {
  Ac = 'AC',
  Ad = 'AD',
  Ae = 'AE',
  Af = 'AF',
  Ag = 'AG',
  Ai = 'AI',
  Al = 'AL',
  Am = 'AM',
  Ao = 'AO',
  Aq = 'AQ',
  Ar = 'AR',
  At = 'AT',
  Au = 'AU',
  Aw = 'AW',
  Ax = 'AX',
  Az = 'AZ',
  Ba = 'BA',
  Bb = 'BB',
  Bd = 'BD',
  Be = 'BE',
  Bf = 'BF',
  Bg = 'BG',
  Bh = 'BH',
  Bi = 'BI',
  Bj = 'BJ',
  Bl = 'BL',
  Bm = 'BM',
  Bn = 'BN',
  Bo = 'BO',
  Bq = 'BQ',
  Br = 'BR',
  Bs = 'BS',
  Bt = 'BT',
  Bv = 'BV',
  Bw = 'BW',
  By = 'BY',
  Bz = 'BZ',
  Ca = 'CA',
  Cd = 'CD',
  Cf = 'CF',
  Cg = 'CG',
  Ch = 'CH',
  Ci = 'CI',
  Ck = 'CK',
  Cl = 'CL',
  Cm = 'CM',
  Cn = 'CN',
  Co = 'CO',
  Cr = 'CR',
  Cv = 'CV',
  Cw = 'CW',
  Cy = 'CY',
  Cz = 'CZ',
  De = 'DE',
  Dj = 'DJ',
  Dk = 'DK',
  Dm = 'DM',
  Do = 'DO',
  Dz = 'DZ',
  Ec = 'EC',
  Ee = 'EE',
  Eg = 'EG',
  Eh = 'EH',
  Er = 'ER',
  Es = 'ES',
  Et = 'ET',
  Fi = 'FI',
  Fj = 'FJ',
  Fk = 'FK',
  Fo = 'FO',
  Fr = 'FR',
  Ga = 'GA',
  Gb = 'GB',
  Gd = 'GD',
  Ge = 'GE',
  Gf = 'GF',
  Gg = 'GG',
  Gh = 'GH',
  Gi = 'GI',
  Gl = 'GL',
  Gm = 'GM',
  Gn = 'GN',
  Gp = 'GP',
  Gq = 'GQ',
  Gr = 'GR',
  Gs = 'GS',
  Gt = 'GT',
  Gu = 'GU',
  Gw = 'GW',
  Gy = 'GY',
  Hk = 'HK',
  Hn = 'HN',
  Hr = 'HR',
  Ht = 'HT',
  Hu = 'HU',
  Id = 'ID',
  Ie = 'IE',
  Il = 'IL',
  Im = 'IM',
  In = 'IN',
  Io = 'IO',
  Iq = 'IQ',
  Is = 'IS',
  It = 'IT',
  Je = 'JE',
  Jm = 'JM',
  Jo = 'JO',
  Jp = 'JP',
  Ke = 'KE',
  Kg = 'KG',
  Kh = 'KH',
  Ki = 'KI',
  Km = 'KM',
  Kn = 'KN',
  Kr = 'KR',
  Kw = 'KW',
  Ky = 'KY',
  Kz = 'KZ',
  La = 'LA',
  Lb = 'LB',
  Lc = 'LC',
  Li = 'LI',
  Lk = 'LK',
  Lr = 'LR',
  Ls = 'LS',
  Lt = 'LT',
  Lu = 'LU',
  Lv = 'LV',
  Ly = 'LY',
  Ma = 'MA',
  Mc = 'MC',
  Md = 'MD',
  Me = 'ME',
  Mf = 'MF',
  Mg = 'MG',
  Mk = 'MK',
  Ml = 'ML',
  Mm = 'MM',
  Mn = 'MN',
  Mo = 'MO',
  Mq = 'MQ',
  Mr = 'MR',
  Ms = 'MS',
  Mt = 'MT',
  Mu = 'MU',
  Mv = 'MV',
  Mw = 'MW',
  Mx = 'MX',
  My = 'MY',
  Mz = 'MZ',
  Na = 'NA',
  Nc = 'NC',
  Ne = 'NE',
  Ng = 'NG',
  Ni = 'NI',
  Nl = 'NL',
  No = 'NO',
  Np = 'NP',
  Nr = 'NR',
  Nu = 'NU',
  Nz = 'NZ',
  Om = 'OM',
  Pa = 'PA',
  Pe = 'PE',
  Pf = 'PF',
  Pg = 'PG',
  Ph = 'PH',
  Pk = 'PK',
  Pl = 'PL',
  Pm = 'PM',
  Pn = 'PN',
  Pr = 'PR',
  Ps = 'PS',
  Pt = 'PT',
  Py = 'PY',
  Qa = 'QA',
  Re = 'RE',
  Ro = 'RO',
  Rs = 'RS',
  Ru = 'RU',
  Rw = 'RW',
  Sa = 'SA',
  Sb = 'SB',
  Sc = 'SC',
  Se = 'SE',
  Sg = 'SG',
  Sh = 'SH',
  Si = 'SI',
  Sj = 'SJ',
  Sk = 'SK',
  Sl = 'SL',
  Sm = 'SM',
  Sn = 'SN',
  So = 'SO',
  Sr = 'SR',
  Ss = 'SS',
  St = 'ST',
  Sv = 'SV',
  Sx = 'SX',
  Sz = 'SZ',
  Ta = 'TA',
  Tc = 'TC',
  Td = 'TD',
  Tf = 'TF',
  Tg = 'TG',
  Th = 'TH',
  Tj = 'TJ',
  Tk = 'TK',
  Tl = 'TL',
  Tm = 'TM',
  Tn = 'TN',
  To = 'TO',
  Tr = 'TR',
  Tt = 'TT',
  Tv = 'TV',
  Tw = 'TW',
  Tz = 'TZ',
  Ua = 'UA',
  Ug = 'UG',
  Us = 'US',
  Uy = 'UY',
  Uz = 'UZ',
  Va = 'VA',
  Vc = 'VC',
  Ve = 'VE',
  Vg = 'VG',
  Vn = 'VN',
  Vu = 'VU',
  Wf = 'WF',
  Ws = 'WS',
  Xk = 'XK',
  Ye = 'YE',
  Yt = 'YT',
  Za = 'ZA',
  Zm = 'ZM',
  Zw = 'ZW',
  Zz = 'ZZ'
}

export type StripePostPaymentLinksPaymentLinkAutomaticTaxInput = {
  enabled: Scalars['Boolean'];
};

export enum StripePostPaymentLinksPaymentLinkBillingAddressCollection {
  Auto = 'AUTO',
  Required = 'REQUIRED'
}

export type StripePostPaymentLinksPaymentLinkCustomFieldsInput = {
  dropdown?: InputMaybe<StripePostPaymentLinksPaymentLinkDropdownCustomFieldsInput>;
  key: Scalars['String'];
  label: StripePostPaymentLinksPaymentLinkLabelCustomFieldsInput;
  optional?: InputMaybe<Scalars['Boolean']>;
  type: StripePostPaymentLinksPaymentLinkTypeCustomFields;
};

export type StripePostPaymentLinksPaymentLinkCustomFieldsInvoiceDataInvoiceCreationInput = {
  name: Scalars['String'];
  value: Scalars['String'];
};

export type StripePostPaymentLinksPaymentLinkCustomTextInput = {
  shippingAddress?: InputMaybe<StripeStringOrPostPaymentLinksPaymentLinkShippingAddressCustomTextUnionInput>;
  submit?: InputMaybe<StripeStringOrPostPaymentLinksPaymentLinkSubmitCustomTextUnionInput>;
};

export enum StripePostPaymentLinksPaymentLinkCustomerCreation {
  Always = 'ALWAYS',
  IfRequired = 'IF_REQUIRED'
}

export type StripePostPaymentLinksPaymentLinkDropdownCustomFieldsInput = {
  options: Array<StripePostPaymentLinksPaymentLinkOptionsDropdownCustomFieldsInput>;
};

export type StripePostPaymentLinksPaymentLinkHostedConfirmationAfterCompletionInput = {
  customMessage?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentLinksPaymentLinkInput = {
  active?: InputMaybe<Scalars['Boolean']>;
  afterCompletion?: InputMaybe<StripePostPaymentLinksPaymentLinkAfterCompletionInput>;
  allowPromotionCodes?: InputMaybe<Scalars['Boolean']>;
  automaticTax?: InputMaybe<StripePostPaymentLinksPaymentLinkAutomaticTaxInput>;
  billingAddressCollection?: InputMaybe<StripePostPaymentLinksPaymentLinkBillingAddressCollection>;
  customFields?: InputMaybe<StripeStringOrPostPaymentLinksPaymentLinkCustomFieldsUnionInput>;
  customText?: InputMaybe<StripePostPaymentLinksPaymentLinkCustomTextInput>;
  customerCreation?: InputMaybe<StripePostPaymentLinksPaymentLinkCustomerCreation>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  invoiceCreation?: InputMaybe<StripePostPaymentLinksPaymentLinkInvoiceCreationInput>;
  lineItems?: InputMaybe<Array<StripePostPaymentLinksPaymentLinkLineItemsInput>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  paymentMethodCollection?: InputMaybe<StripePostPaymentLinksPaymentLinkPaymentMethodCollection>;
  paymentMethodTypes?: InputMaybe<Scalars['JSON']>;
  shippingAddressCollection?: InputMaybe<StripeStringOrPostPaymentLinksPaymentLinkShippingAddressCollectionUnionInput>;
};

export type StripePostPaymentLinksPaymentLinkInvoiceCreationInput = {
  enabled: Scalars['Boolean'];
  invoiceData?: InputMaybe<StripePostPaymentLinksPaymentLinkInvoiceDataInvoiceCreationInput>;
};

export type StripePostPaymentLinksPaymentLinkInvoiceDataInvoiceCreationInput = {
  accountTaxIds?: InputMaybe<Scalars['JSON']>;
  customFields?: InputMaybe<StripeStringOrPostPaymentLinksPaymentLinkCustomFieldsInvoiceDataInvoiceCreationUnionInput>;
  description?: InputMaybe<Scalars['String']>;
  footer?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  renderingOptions?: InputMaybe<StripeStringOrPostPaymentLinksPaymentLinkRenderingOptionsInvoiceDataInvoiceCreationUnionInput>;
};

export type StripePostPaymentLinksPaymentLinkLabelCustomFieldsInput = {
  custom: Scalars['String'];
  type: StripePostPaymentLinksPaymentLinkTypeLabelCustomFields;
};

export type StripePostPaymentLinksPaymentLinkLineItemsInput = {
  adjustableQuantity?: InputMaybe<StripePostPaymentLinksPaymentLinkAdjustableQuantityLineItemsInput>;
  id: Scalars['String'];
  quantity?: InputMaybe<Scalars['Int']>;
};

export type StripePostPaymentLinksPaymentLinkOptionsDropdownCustomFieldsInput = {
  label: Scalars['String'];
  value: Scalars['String'];
};

export enum StripePostPaymentLinksPaymentLinkPaymentMethodCollection {
  Always = 'ALWAYS',
  IfRequired = 'IF_REQUIRED'
}

export type StripePostPaymentLinksPaymentLinkRedirectAfterCompletionInput = {
  url: Scalars['String'];
};

export type StripePostPaymentLinksPaymentLinkRenderingOptionsInvoiceDataInvoiceCreationInput = {
  amountTaxDisplay?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentLinksPaymentLinkShippingAddressCollectionInput = {
  allowedCountries: Array<StripePostPaymentLinksPaymentLinkAllowedCountriesShippingAddressCollection>;
};

export type StripePostPaymentLinksPaymentLinkShippingAddressCustomTextInput = {
  message: Scalars['String'];
};

export type StripePostPaymentLinksPaymentLinkSubmitCustomTextInput = {
  message: Scalars['String'];
};

export enum StripePostPaymentLinksPaymentLinkTypeAfterCompletion {
  HostedConfirmation = 'HOSTED_CONFIRMATION',
  Redirect = 'REDIRECT'
}

export enum StripePostPaymentLinksPaymentLinkTypeCustomFields {
  Dropdown = 'DROPDOWN',
  Numeric = 'NUMERIC',
  Text = 'TEXT'
}

export enum StripePostPaymentLinksPaymentLinkTypeLabelCustomFields {
  Custom = 'CUSTOM'
}

export enum StripePostPaymentLinksPaymentMethodCollection {
  Always = 'ALWAYS',
  IfRequired = 'IF_REQUIRED'
}

export enum StripePostPaymentLinksPaymentMethodTypes {
  Affirm = 'AFFIRM',
  AfterpayClearpay = 'AFTERPAY_CLEARPAY',
  Alipay = 'ALIPAY',
  AuBecsDebit = 'AU_BECS_DEBIT',
  BacsDebit = 'BACS_DEBIT',
  Bancontact = 'BANCONTACT',
  Blik = 'BLIK',
  Boleto = 'BOLETO',
  Card = 'CARD',
  Cashapp = 'CASHAPP',
  Eps = 'EPS',
  Fpx = 'FPX',
  Giropay = 'GIROPAY',
  Grabpay = 'GRABPAY',
  Ideal = 'IDEAL',
  Klarna = 'KLARNA',
  Konbini = 'KONBINI',
  Link = 'LINK',
  Oxxo = 'OXXO',
  Paynow = 'PAYNOW',
  Paypal = 'PAYPAL',
  Pix = 'PIX',
  Promptpay = 'PROMPTPAY',
  P_24 = 'P_24',
  SepaDebit = 'SEPA_DEBIT',
  Sofort = 'SOFORT',
  UsBankAccount = 'US_BANK_ACCOUNT',
  WechatPay = 'WECHAT_PAY'
}

export type StripePostPaymentLinksPhoneNumberCollectionInput = {
  enabled: Scalars['Boolean'];
};

export enum StripePostPaymentLinksPromotionsConsentCollection {
  Auto = 'AUTO',
  None = 'NONE'
}

export type StripePostPaymentLinksRedirectAfterCompletionInput = {
  url: Scalars['String'];
};

export type StripePostPaymentLinksRenderingOptionsInvoiceDataInvoiceCreationInput = {
  amountTaxDisplay?: InputMaybe<Scalars['String']>;
};

export enum StripePostPaymentLinksSetupFutureUsagePaymentIntentData {
  OffSession = 'OFF_SESSION',
  OnSession = 'ON_SESSION'
}

export type StripePostPaymentLinksShippingAddressCollectionInput = {
  allowedCountries: Array<StripePostPaymentLinksAllowedCountriesShippingAddressCollection>;
};

export type StripePostPaymentLinksShippingAddressCustomTextInput = {
  message: Scalars['String'];
};

export type StripePostPaymentLinksShippingOptionsInput = {
  shippingRate?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentLinksSubmitCustomTextInput = {
  message: Scalars['String'];
};

export enum StripePostPaymentLinksSubmitType {
  Auto = 'AUTO',
  Book = 'BOOK',
  Donate = 'DONATE',
  Pay = 'PAY'
}

export type StripePostPaymentLinksSubscriptionDataInput = {
  description?: InputMaybe<Scalars['String']>;
  trialPeriodDays?: InputMaybe<Scalars['Int']>;
};

export type StripePostPaymentLinksTaxIdCollectionInput = {
  enabled: Scalars['Boolean'];
};

export enum StripePostPaymentLinksTermsOfServiceConsentCollection {
  None = 'NONE',
  Required = 'REQUIRED'
}

export type StripePostPaymentLinksTransferDataInput = {
  amount?: InputMaybe<Scalars['Int']>;
  destination: Scalars['String'];
};

export enum StripePostPaymentLinksTypeAfterCompletion {
  HostedConfirmation = 'HOSTED_CONFIRMATION',
  Redirect = 'REDIRECT'
}

export enum StripePostPaymentLinksTypeCustomFields {
  Dropdown = 'DROPDOWN',
  Numeric = 'NUMERIC',
  Text = 'TEXT'
}

export enum StripePostPaymentLinksTypeLabelCustomFields {
  Custom = 'CUSTOM'
}

export enum StripePostPaymentMethodsAccountHolderTypeUsBankAccount {
  Company = 'COMPANY',
  Individual = 'INDIVIDUAL'
}

export enum StripePostPaymentMethodsAccountTypeUsBankAccount {
  Checking = 'CHECKING',
  Savings = 'SAVINGS'
}

export type StripePostPaymentMethodsAcssDebitInput = {
  accountNumber: Scalars['String'];
  institutionNumber: Scalars['String'];
  transitNumber: Scalars['String'];
};

export type StripePostPaymentMethodsAddressBillingDetailsInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentMethodsAuBecsDebitInput = {
  accountNumber: Scalars['String'];
  bsbNumber: Scalars['String'];
};

export type StripePostPaymentMethodsBacsDebitInput = {
  accountNumber?: InputMaybe<Scalars['String']>;
  sortCode?: InputMaybe<Scalars['String']>;
};

export enum StripePostPaymentMethodsBankEps {
  ArzteUndApothekerBank = 'ARZTE_UND_APOTHEKER_BANK',
  AustrianAnadiBankAg = 'AUSTRIAN_ANADI_BANK_AG',
  BankhausCarlSpangler = 'BANKHAUS_CARL_SPANGLER',
  BankhausSchelhammerUndSchatteraAg = 'BANKHAUS_SCHELHAMMER_UND_SCHATTERA_AG',
  BankAustria = 'BANK_AUSTRIA',
  BawagPskAg = 'BAWAG_PSK_AG',
  BksBankAg = 'BKS_BANK_AG',
  BrullKallmusBankAg = 'BRULL_KALLMUS_BANK_AG',
  BtvVierLanderBank = 'BTV_VIER_LANDER_BANK',
  CapitalBankGraweGruppeAg = 'CAPITAL_BANK_GRAWE_GRUPPE_AG',
  DeutscheBankAg = 'DEUTSCHE_BANK_AG',
  Dolomitenbank = 'DOLOMITENBANK',
  EasybankAg = 'EASYBANK_AG',
  ErsteBankUndSparkassen = 'ERSTE_BANK_UND_SPARKASSEN',
  HypoAlpeadriabankInternationalAg = 'HYPO_ALPEADRIABANK_INTERNATIONAL_AG',
  HypoBankBurgenlandAktiengesellschaft = 'HYPO_BANK_BURGENLAND_AKTIENGESELLSCHAFT',
  HypoNoeLbFurNiederosterreichUWien = 'HYPO_NOE_LB_FUR_NIEDEROSTERREICH_U_WIEN',
  HypoOberosterreichSalzburgSteiermark = 'HYPO_OBEROSTERREICH_SALZBURG_STEIERMARK',
  HypoTirolBankAg = 'HYPO_TIROL_BANK_AG',
  HypoVorarlbergBankAg = 'HYPO_VORARLBERG_BANK_AG',
  MarchfelderBank = 'MARCHFELDER_BANK',
  OberbankAg = 'OBERBANK_AG',
  RaiffeisenBankengruppeOsterreich = 'RAIFFEISEN_BANKENGRUPPE_OSTERREICH',
  SchoellerbankAg = 'SCHOELLERBANK_AG',
  SpardaBankWien = 'SPARDA_BANK_WIEN',
  VolksbankGruppe = 'VOLKSBANK_GRUPPE',
  VolkskreditbankAg = 'VOLKSKREDITBANK_AG',
  VrBankBraunau = 'VR_BANK_BRAUNAU'
}

export enum StripePostPaymentMethodsBankFpx {
  AffinBank = 'AFFIN_BANK',
  Agrobank = 'AGROBANK',
  AllianceBank = 'ALLIANCE_BANK',
  Ambank = 'AMBANK',
  BankIslam = 'BANK_ISLAM',
  BankMuamalat = 'BANK_MUAMALAT',
  BankOfChina = 'BANK_OF_CHINA',
  BankRakyat = 'BANK_RAKYAT',
  Bsn = 'BSN',
  Cimb = 'CIMB',
  DeutscheBank = 'DEUTSCHE_BANK',
  HongLeongBank = 'HONG_LEONG_BANK',
  Hsbc = 'HSBC',
  Kfh = 'KFH',
  Maybank_2E = 'MAYBANK_2E',
  Maybank_2U = 'MAYBANK_2U',
  Ocbc = 'OCBC',
  PbEnterprise = 'PB_ENTERPRISE',
  PublicBank = 'PUBLIC_BANK',
  Rhb = 'RHB',
  StandardChartered = 'STANDARD_CHARTERED',
  Uob = 'UOB'
}

export enum StripePostPaymentMethodsBankIdeal {
  AbnAmro = 'ABN_AMRO',
  AsnBank = 'ASN_BANK',
  Bunq = 'BUNQ',
  Handelsbanken = 'HANDELSBANKEN',
  Ing = 'ING',
  Knab = 'KNAB',
  Moneyou = 'MONEYOU',
  Rabobank = 'RABOBANK',
  Regiobank = 'REGIOBANK',
  Revolut = 'REVOLUT',
  SnsBank = 'SNS_BANK',
  TriodosBank = 'TRIODOS_BANK',
  VanLanschot = 'VAN_LANSCHOT',
  Yoursafe = 'YOURSAFE'
}

export enum StripePostPaymentMethodsBankP24 {
  AliorBank = 'ALIOR_BANK',
  BankiSpbdzielcze = 'BANKI_SPBDZIELCZE',
  BankMillennium = 'BANK_MILLENNIUM',
  BankNowyBfgSa = 'BANK_NOWY_BFG_SA',
  BankPekaoSa = 'BANK_PEKAO_SA',
  Blik = 'BLIK',
  BnpParibas = 'BNP_PARIBAS',
  Boz = 'BOZ',
  CitiHandlowy = 'CITI_HANDLOWY',
  CreditAgricole = 'CREDIT_AGRICOLE',
  Envelobank = 'ENVELOBANK',
  EtransferPocztowy_24 = 'ETRANSFER_POCZTOWY_24',
  GetinBank = 'GETIN_BANK',
  Ideabank = 'IDEABANK',
  Ing = 'ING',
  Inteligo = 'INTELIGO',
  MbankMtransfer = 'MBANK_MTRANSFER',
  NestPrzelew = 'NEST_PRZELEW',
  NoblePay = 'NOBLE_PAY',
  PbacZIpko = 'PBAC_Z_IPKO',
  PlusBank = 'PLUS_BANK',
  SantanderPrzelew_24 = 'SANTANDER_PRZELEW_24',
  TmobileUsbugiBankowe = 'TMOBILE_USBUGI_BANKOWE',
  ToyotaBank = 'TOYOTA_BANK',
  VolkswagenBank = 'VOLKSWAGEN_BANK'
}

export type StripePostPaymentMethodsBillingDetailsInput = {
  address?: InputMaybe<StripeStringOrPostPaymentMethodsAddressBillingDetailsUnionInput>;
  email?: InputMaybe<Scalars['JSON']>;
  name?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentMethodsBoletoInput = {
  taxId: Scalars['String'];
};

export type StripePostPaymentMethodsCardInput = {
  token: Scalars['String'];
};

export type StripePostPaymentMethodsCardOrPostPaymentMethodsCardUnionInput = {
  stripePostPaymentMethodsCardInput?: InputMaybe<StripePostPaymentMethodsCardInput>;
};

export enum StripePostPaymentMethodsCountrySofort {
  At = 'AT',
  Be = 'BE',
  De = 'DE',
  Es = 'ES',
  It = 'IT',
  Nl = 'NL'
}

export type StripePostPaymentMethodsDobKlarnaInput = {
  day: Scalars['Int'];
  month: Scalars['Int'];
  year: Scalars['Int'];
};

export type StripePostPaymentMethodsEpsInput = {
  bank?: InputMaybe<StripePostPaymentMethodsBankEps>;
};

export type StripePostPaymentMethodsFpxInput = {
  bank: StripePostPaymentMethodsBankFpx;
};

export type StripePostPaymentMethodsIdealInput = {
  bank?: InputMaybe<StripePostPaymentMethodsBankIdeal>;
};

export type StripePostPaymentMethodsInput = {
  acssDebit?: InputMaybe<StripePostPaymentMethodsAcssDebitInput>;
  affirm?: InputMaybe<Scalars['JSON']>;
  afterpayClearpay?: InputMaybe<Scalars['JSON']>;
  alipay?: InputMaybe<Scalars['JSON']>;
  auBecsDebit?: InputMaybe<StripePostPaymentMethodsAuBecsDebitInput>;
  bacsDebit?: InputMaybe<StripePostPaymentMethodsBacsDebitInput>;
  bancontact?: InputMaybe<Scalars['JSON']>;
  billingDetails?: InputMaybe<StripePostPaymentMethodsBillingDetailsInput>;
  blik?: InputMaybe<Scalars['JSON']>;
  boleto?: InputMaybe<StripePostPaymentMethodsBoletoInput>;
  card?: InputMaybe<StripePostPaymentMethodsCardOrPostPaymentMethodsCardUnionInput>;
  cashapp?: InputMaybe<Scalars['JSON']>;
  customer?: InputMaybe<Scalars['String']>;
  customerBalance?: InputMaybe<Scalars['JSON']>;
  eps?: InputMaybe<StripePostPaymentMethodsEpsInput>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  fpx?: InputMaybe<StripePostPaymentMethodsFpxInput>;
  giropay?: InputMaybe<Scalars['JSON']>;
  grabpay?: InputMaybe<Scalars['JSON']>;
  ideal?: InputMaybe<StripePostPaymentMethodsIdealInput>;
  interacPresent?: InputMaybe<Scalars['JSON']>;
  klarna?: InputMaybe<StripePostPaymentMethodsKlarnaInput>;
  konbini?: InputMaybe<Scalars['JSON']>;
  link?: InputMaybe<Scalars['JSON']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  oxxo?: InputMaybe<Scalars['JSON']>;
  p24?: InputMaybe<StripePostPaymentMethodsP24Input>;
  paymentMethod?: InputMaybe<Scalars['String']>;
  paynow?: InputMaybe<Scalars['JSON']>;
  paypal?: InputMaybe<Scalars['JSON']>;
  pix?: InputMaybe<Scalars['JSON']>;
  promptpay?: InputMaybe<Scalars['JSON']>;
  radarOptions?: InputMaybe<StripePostPaymentMethodsRadarOptionsInput>;
  sepaDebit?: InputMaybe<StripePostPaymentMethodsSepaDebitInput>;
  sofort?: InputMaybe<StripePostPaymentMethodsSofortInput>;
  type?: InputMaybe<StripePostPaymentMethodsType>;
  usBankAccount?: InputMaybe<StripePostPaymentMethodsUsBankAccountInput>;
  wechatPay?: InputMaybe<Scalars['JSON']>;
};

export type StripePostPaymentMethodsKlarnaInput = {
  dob?: InputMaybe<StripePostPaymentMethodsDobKlarnaInput>;
};

export type StripePostPaymentMethodsP24Input = {
  bank?: InputMaybe<StripePostPaymentMethodsBankP24>;
};

export enum StripePostPaymentMethodsPaymentMethodAccountHolderTypeUsBankAccount {
  Company = 'COMPANY',
  Individual = 'INDIVIDUAL'
}

export type StripePostPaymentMethodsPaymentMethodAddressBillingDetailsInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentMethodsPaymentMethodAttachInput = {
  customer: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostPaymentMethodsPaymentMethodBillingDetailsInput = {
  address?: InputMaybe<StripeStringOrPostPaymentMethodsPaymentMethodAddressBillingDetailsUnionInput>;
  email?: InputMaybe<Scalars['JSON']>;
  name?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentMethodsPaymentMethodCardInput = {
  expMonth?: InputMaybe<Scalars['Int']>;
  expYear?: InputMaybe<Scalars['Int']>;
};

export type StripePostPaymentMethodsPaymentMethodDetachInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostPaymentMethodsPaymentMethodInput = {
  billingDetails?: InputMaybe<StripePostPaymentMethodsPaymentMethodBillingDetailsInput>;
  card?: InputMaybe<StripePostPaymentMethodsPaymentMethodCardInput>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  link?: InputMaybe<Scalars['JSON']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  usBankAccount?: InputMaybe<StripePostPaymentMethodsPaymentMethodUsBankAccountInput>;
};

export type StripePostPaymentMethodsPaymentMethodUsBankAccountInput = {
  accountHolderType?: InputMaybe<StripePostPaymentMethodsPaymentMethodAccountHolderTypeUsBankAccount>;
};

export type StripePostPaymentMethodsRadarOptionsInput = {
  session?: InputMaybe<Scalars['String']>;
};

export type StripePostPaymentMethodsSepaDebitInput = {
  iban: Scalars['String'];
};

export type StripePostPaymentMethodsSofortInput = {
  country: StripePostPaymentMethodsCountrySofort;
};

export enum StripePostPaymentMethodsType {
  AcssDebit = 'ACSS_DEBIT',
  Affirm = 'AFFIRM',
  AfterpayClearpay = 'AFTERPAY_CLEARPAY',
  Alipay = 'ALIPAY',
  AuBecsDebit = 'AU_BECS_DEBIT',
  BacsDebit = 'BACS_DEBIT',
  Bancontact = 'BANCONTACT',
  Blik = 'BLIK',
  Boleto = 'BOLETO',
  Card = 'CARD',
  Cashapp = 'CASHAPP',
  CustomerBalance = 'CUSTOMER_BALANCE',
  Eps = 'EPS',
  Fpx = 'FPX',
  Giropay = 'GIROPAY',
  Grabpay = 'GRABPAY',
  Ideal = 'IDEAL',
  Klarna = 'KLARNA',
  Konbini = 'KONBINI',
  Link = 'LINK',
  Oxxo = 'OXXO',
  Paynow = 'PAYNOW',
  Paypal = 'PAYPAL',
  Pix = 'PIX',
  Promptpay = 'PROMPTPAY',
  P_24 = 'P_24',
  SepaDebit = 'SEPA_DEBIT',
  Sofort = 'SOFORT',
  UsBankAccount = 'US_BANK_ACCOUNT',
  WechatPay = 'WECHAT_PAY'
}

export type StripePostPaymentMethodsUsBankAccountInput = {
  accountHolderType?: InputMaybe<StripePostPaymentMethodsAccountHolderTypeUsBankAccount>;
  accountNumber?: InputMaybe<Scalars['String']>;
  accountType?: InputMaybe<StripePostPaymentMethodsAccountTypeUsBankAccount>;
  financialConnectionsAccount?: InputMaybe<Scalars['String']>;
  routingNumber?: InputMaybe<Scalars['String']>;
};

export type StripePostPayoutsInput = {
  amount: Scalars['Int'];
  currency: Scalars['String'];
  description?: InputMaybe<Scalars['String']>;
  destination?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  method?: InputMaybe<StripePostPayoutsMethod>;
  sourceType?: InputMaybe<StripePostPayoutsSourceType>;
  statementDescriptor?: InputMaybe<Scalars['String']>;
};

export enum StripePostPayoutsMethod {
  Instant = 'INSTANT',
  Standard = 'STANDARD'
}

export type StripePostPayoutsPayoutCancelInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostPayoutsPayoutInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
};

export type StripePostPayoutsPayoutReverseInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
};

export enum StripePostPayoutsSourceType {
  BankAccount = 'BANK_ACCOUNT',
  Card = 'CARD',
  Fpx = 'FPX'
}

export enum StripePostPlansAggregateUsage {
  LastDuringPeriod = 'LAST_DURING_PERIOD',
  LastEver = 'LAST_EVER',
  Max = 'MAX',
  Sum = 'SUM'
}

export enum StripePostPlansBillingScheme {
  PerUnit = 'PER_UNIT',
  Tiered = 'TIERED'
}

export type StripePostPlansInput = {
  active?: InputMaybe<Scalars['Boolean']>;
  aggregateUsage?: InputMaybe<StripePostPlansAggregateUsage>;
  amount?: InputMaybe<Scalars['Int']>;
  amountDecimal?: InputMaybe<Scalars['String']>;
  billingScheme?: InputMaybe<StripePostPlansBillingScheme>;
  currency: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
  id?: InputMaybe<Scalars['String']>;
  interval: StripePostPlansInterval;
  intervalCount?: InputMaybe<Scalars['Int']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  nickname?: InputMaybe<Scalars['String']>;
  product?: InputMaybe<StripeStringOrPostPlansProductUnionInput>;
  tiers?: InputMaybe<Array<StripePostPlansTiersInput>>;
  tiersMode?: InputMaybe<StripePostPlansTiersMode>;
  transformUsage?: InputMaybe<StripePostPlansTransformUsageInput>;
  trialPeriodDays?: InputMaybe<Scalars['Int']>;
  usageType?: InputMaybe<StripePostPlansUsageType>;
};

export enum StripePostPlansInterval {
  Day = 'DAY',
  Month = 'MONTH',
  Week = 'WEEK',
  Year = 'YEAR'
}

export type StripePostPlansPlanInput = {
  active?: InputMaybe<Scalars['Boolean']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  nickname?: InputMaybe<Scalars['String']>;
  product?: InputMaybe<Scalars['String']>;
  trialPeriodDays?: InputMaybe<Scalars['Int']>;
};

export type StripePostPlansProductInput = {
  active?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  name: Scalars['String'];
  statementDescriptor?: InputMaybe<Scalars['String']>;
  taxCode?: InputMaybe<Scalars['String']>;
  unitLabel?: InputMaybe<Scalars['String']>;
};

export enum StripePostPlansRoundTransformUsage {
  Down = 'DOWN',
  Up = 'UP'
}

export type StripePostPlansTiersInput = {
  flatAmount?: InputMaybe<Scalars['Int']>;
  flatAmountDecimal?: InputMaybe<Scalars['String']>;
  unitAmount?: InputMaybe<Scalars['Int']>;
  unitAmountDecimal?: InputMaybe<Scalars['String']>;
  upTo: Scalars['JSON'];
};

export enum StripePostPlansTiersMode {
  Graduated = 'GRADUATED',
  Volume = 'VOLUME'
}

export type StripePostPlansTransformUsageInput = {
  divideBy: Scalars['Int'];
  round: StripePostPlansRoundTransformUsage;
};

export enum StripePostPlansUsageType {
  Licensed = 'LICENSED',
  Metered = 'METERED'
}

export enum StripePostPricesAggregateUsageRecurring {
  LastDuringPeriod = 'LAST_DURING_PERIOD',
  LastEver = 'LAST_EVER',
  Max = 'MAX',
  Sum = 'SUM'
}

export enum StripePostPricesBillingScheme {
  PerUnit = 'PER_UNIT',
  Tiered = 'TIERED'
}

export type StripePostPricesCustomUnitAmountInput = {
  enabled: Scalars['Boolean'];
  maximum?: InputMaybe<Scalars['Int']>;
  minimum?: InputMaybe<Scalars['Int']>;
  preset?: InputMaybe<Scalars['Int']>;
};

export type StripePostPricesInput = {
  active?: InputMaybe<Scalars['Boolean']>;
  billingScheme?: InputMaybe<StripePostPricesBillingScheme>;
  currency: Scalars['String'];
  currencyOptions?: InputMaybe<Scalars['JSON']>;
  customUnitAmount?: InputMaybe<StripePostPricesCustomUnitAmountInput>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  lookupKey?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  nickname?: InputMaybe<Scalars['String']>;
  product?: InputMaybe<Scalars['String']>;
  productData?: InputMaybe<StripePostPricesProductDataInput>;
  recurring?: InputMaybe<StripePostPricesRecurringInput>;
  taxBehavior?: InputMaybe<StripePostPricesTaxBehavior>;
  tiers?: InputMaybe<Array<StripePostPricesTiersInput>>;
  tiersMode?: InputMaybe<StripePostPricesTiersMode>;
  transferLookupKey?: InputMaybe<Scalars['Boolean']>;
  transformQuantity?: InputMaybe<StripePostPricesTransformQuantityInput>;
  unitAmount?: InputMaybe<Scalars['Int']>;
  unitAmountDecimal?: InputMaybe<Scalars['String']>;
};

export enum StripePostPricesIntervalRecurring {
  Day = 'DAY',
  Month = 'MONTH',
  Week = 'WEEK',
  Year = 'YEAR'
}

export type StripePostPricesPriceInput = {
  active?: InputMaybe<Scalars['Boolean']>;
  currencyOptions?: InputMaybe<Scalars['JSON']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  lookupKey?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  nickname?: InputMaybe<Scalars['String']>;
  taxBehavior?: InputMaybe<StripePostPricesPriceTaxBehavior>;
  transferLookupKey?: InputMaybe<Scalars['Boolean']>;
};

export enum StripePostPricesPriceTaxBehavior {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE',
  Unspecified = 'UNSPECIFIED'
}

export type StripePostPricesProductDataInput = {
  active?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  name: Scalars['String'];
  statementDescriptor?: InputMaybe<Scalars['String']>;
  taxCode?: InputMaybe<Scalars['String']>;
  unitLabel?: InputMaybe<Scalars['String']>;
};

export type StripePostPricesRecurringInput = {
  aggregateUsage?: InputMaybe<StripePostPricesAggregateUsageRecurring>;
  interval: StripePostPricesIntervalRecurring;
  intervalCount?: InputMaybe<Scalars['Int']>;
  usageType?: InputMaybe<StripePostPricesUsageTypeRecurring>;
};

export enum StripePostPricesRoundTransformQuantity {
  Down = 'DOWN',
  Up = 'UP'
}

export enum StripePostPricesTaxBehavior {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE',
  Unspecified = 'UNSPECIFIED'
}

export type StripePostPricesTiersInput = {
  flatAmount?: InputMaybe<Scalars['Int']>;
  flatAmountDecimal?: InputMaybe<Scalars['String']>;
  unitAmount?: InputMaybe<Scalars['Int']>;
  unitAmountDecimal?: InputMaybe<Scalars['String']>;
  upTo: Scalars['JSON'];
};

export enum StripePostPricesTiersMode {
  Graduated = 'GRADUATED',
  Volume = 'VOLUME'
}

export type StripePostPricesTransformQuantityInput = {
  divideBy: Scalars['Int'];
  round: StripePostPricesRoundTransformQuantity;
};

export enum StripePostPricesUsageTypeRecurring {
  Licensed = 'LICENSED',
  Metered = 'METERED'
}

export type StripePostProductsDefaultPriceDataInput = {
  currency: Scalars['String'];
  currencyOptions?: InputMaybe<Scalars['JSON']>;
  recurring?: InputMaybe<StripePostProductsRecurringDefaultPriceDataInput>;
  taxBehavior?: InputMaybe<StripePostProductsTaxBehaviorDefaultPriceData>;
  unitAmount?: InputMaybe<Scalars['Int']>;
  unitAmountDecimal?: InputMaybe<Scalars['String']>;
};

export type StripePostProductsIdInput = {
  active?: InputMaybe<Scalars['Boolean']>;
  defaultPrice?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  images?: InputMaybe<Scalars['JSON']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  name?: InputMaybe<Scalars['String']>;
  packageDimensions?: InputMaybe<StripeStringOrPostProductsIdPackageDimensionsUnionInput>;
  shippable?: InputMaybe<Scalars['Boolean']>;
  statementDescriptor?: InputMaybe<Scalars['String']>;
  taxCode?: InputMaybe<Scalars['JSON']>;
  unitLabel?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['JSON']>;
};

export type StripePostProductsIdPackageDimensionsInput = {
  height: Scalars['Float'];
  length: Scalars['Float'];
  weight: Scalars['Float'];
  width: Scalars['Float'];
};

export type StripePostProductsInput = {
  active?: InputMaybe<Scalars['Boolean']>;
  defaultPriceData?: InputMaybe<StripePostProductsDefaultPriceDataInput>;
  description?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  id?: InputMaybe<Scalars['String']>;
  images?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  name: Scalars['String'];
  packageDimensions?: InputMaybe<StripePostProductsPackageDimensionsInput>;
  shippable?: InputMaybe<Scalars['Boolean']>;
  statementDescriptor?: InputMaybe<Scalars['String']>;
  taxCode?: InputMaybe<Scalars['String']>;
  unitLabel?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['String']>;
};

export enum StripePostProductsIntervalRecurringDefaultPriceData {
  Day = 'DAY',
  Month = 'MONTH',
  Week = 'WEEK',
  Year = 'YEAR'
}

export type StripePostProductsPackageDimensionsInput = {
  height: Scalars['Float'];
  length: Scalars['Float'];
  weight: Scalars['Float'];
  width: Scalars['Float'];
};

export type StripePostProductsRecurringDefaultPriceDataInput = {
  interval: StripePostProductsIntervalRecurringDefaultPriceData;
  intervalCount?: InputMaybe<Scalars['Int']>;
};

export enum StripePostProductsTaxBehaviorDefaultPriceData {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE',
  Unspecified = 'UNSPECIFIED'
}

export type StripePostPromotionCodesInput = {
  active?: InputMaybe<Scalars['Boolean']>;
  code?: InputMaybe<Scalars['String']>;
  coupon: Scalars['String'];
  customer?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  expiresAt?: InputMaybe<Scalars['Int']>;
  maxRedemptions?: InputMaybe<Scalars['Int']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  restrictions?: InputMaybe<StripePostPromotionCodesRestrictionsInput>;
};

export type StripePostPromotionCodesPromotionCodeInput = {
  active?: InputMaybe<Scalars['Boolean']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  restrictions?: InputMaybe<StripePostPromotionCodesPromotionCodeRestrictionsInput>;
};

export type StripePostPromotionCodesPromotionCodeRestrictionsInput = {
  currencyOptions?: InputMaybe<Scalars['JSON']>;
};

export type StripePostPromotionCodesRestrictionsInput = {
  currencyOptions?: InputMaybe<Scalars['JSON']>;
  firstTimeTransaction?: InputMaybe<Scalars['Boolean']>;
  minimumAmount?: InputMaybe<Scalars['Int']>;
  minimumAmountCurrency?: InputMaybe<Scalars['String']>;
};

export type StripePostQuotesAutomaticTaxInput = {
  enabled: Scalars['Boolean'];
};

export enum StripePostQuotesCollectionMethod {
  ChargeAutomatically = 'CHARGE_AUTOMATICALLY',
  SendInvoice = 'SEND_INVOICE'
}

export type StripePostQuotesDiscountsInput = {
  coupon?: InputMaybe<Scalars['String']>;
  discount?: InputMaybe<Scalars['String']>;
};

export type StripePostQuotesFromQuoteInput = {
  isRevision?: InputMaybe<Scalars['Boolean']>;
  quote: Scalars['String'];
};

export type StripePostQuotesInput = {
  applicationFeeAmount?: InputMaybe<Scalars['JSON']>;
  applicationFeePercent?: InputMaybe<Scalars['JSON']>;
  automaticTax?: InputMaybe<StripePostQuotesAutomaticTaxInput>;
  collectionMethod?: InputMaybe<StripePostQuotesCollectionMethod>;
  customer?: InputMaybe<Scalars['String']>;
  defaultTaxRates?: InputMaybe<Scalars['JSON']>;
  description?: InputMaybe<Scalars['String']>;
  discounts?: InputMaybe<StripeStringOrPostQuotesDiscountsUnionInput>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  expiresAt?: InputMaybe<Scalars['Int']>;
  footer?: InputMaybe<Scalars['String']>;
  fromQuote?: InputMaybe<StripePostQuotesFromQuoteInput>;
  header?: InputMaybe<Scalars['String']>;
  invoiceSettings?: InputMaybe<StripePostQuotesInvoiceSettingsInput>;
  lineItems?: InputMaybe<Array<StripePostQuotesLineItemsInput>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  onBehalfOf?: InputMaybe<Scalars['JSON']>;
  subscriptionData?: InputMaybe<StripePostQuotesSubscriptionDataInput>;
  testClock?: InputMaybe<Scalars['String']>;
  transferData?: InputMaybe<StripeStringOrPostQuotesTransferDataUnionInput>;
};

export enum StripePostQuotesIntervalRecurringPriceDataLineItems {
  Day = 'DAY',
  Month = 'MONTH',
  Week = 'WEEK',
  Year = 'YEAR'
}

export type StripePostQuotesInvoiceSettingsInput = {
  daysUntilDue?: InputMaybe<Scalars['Int']>;
};

export type StripePostQuotesLineItemsInput = {
  price?: InputMaybe<Scalars['String']>;
  priceData?: InputMaybe<StripePostQuotesPriceDataLineItemsInput>;
  quantity?: InputMaybe<Scalars['Int']>;
  taxRates?: InputMaybe<Scalars['JSON']>;
};

export type StripePostQuotesPriceDataLineItemsInput = {
  currency: Scalars['String'];
  product: Scalars['String'];
  recurring?: InputMaybe<StripePostQuotesRecurringPriceDataLineItemsInput>;
  taxBehavior?: InputMaybe<StripePostQuotesTaxBehaviorPriceDataLineItems>;
  unitAmount?: InputMaybe<Scalars['Int']>;
  unitAmountDecimal?: InputMaybe<Scalars['String']>;
};

export type StripePostQuotesQuoteAcceptInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostQuotesQuoteAutomaticTaxInput = {
  enabled: Scalars['Boolean'];
};

export type StripePostQuotesQuoteCancelInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export enum StripePostQuotesQuoteCollectionMethod {
  ChargeAutomatically = 'CHARGE_AUTOMATICALLY',
  SendInvoice = 'SEND_INVOICE'
}

export type StripePostQuotesQuoteDiscountsInput = {
  coupon?: InputMaybe<Scalars['String']>;
  discount?: InputMaybe<Scalars['String']>;
};

export type StripePostQuotesQuoteFinalizeInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  expiresAt?: InputMaybe<Scalars['Int']>;
};

export type StripePostQuotesQuoteInput = {
  applicationFeeAmount?: InputMaybe<Scalars['JSON']>;
  applicationFeePercent?: InputMaybe<Scalars['JSON']>;
  automaticTax?: InputMaybe<StripePostQuotesQuoteAutomaticTaxInput>;
  collectionMethod?: InputMaybe<StripePostQuotesQuoteCollectionMethod>;
  customer?: InputMaybe<Scalars['String']>;
  defaultTaxRates?: InputMaybe<Scalars['JSON']>;
  description?: InputMaybe<Scalars['String']>;
  discounts?: InputMaybe<StripeStringOrPostQuotesQuoteDiscountsUnionInput>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  expiresAt?: InputMaybe<Scalars['Int']>;
  footer?: InputMaybe<Scalars['String']>;
  header?: InputMaybe<Scalars['String']>;
  invoiceSettings?: InputMaybe<StripePostQuotesQuoteInvoiceSettingsInput>;
  lineItems?: InputMaybe<Array<StripePostQuotesQuoteLineItemsInput>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  onBehalfOf?: InputMaybe<Scalars['JSON']>;
  subscriptionData?: InputMaybe<StripePostQuotesQuoteSubscriptionDataInput>;
  transferData?: InputMaybe<StripeStringOrPostQuotesQuoteTransferDataUnionInput>;
};

export enum StripePostQuotesQuoteIntervalRecurringPriceDataLineItems {
  Day = 'DAY',
  Month = 'MONTH',
  Week = 'WEEK',
  Year = 'YEAR'
}

export type StripePostQuotesQuoteInvoiceSettingsInput = {
  daysUntilDue?: InputMaybe<Scalars['Int']>;
};

export type StripePostQuotesQuoteLineItemsInput = {
  id?: InputMaybe<Scalars['String']>;
  price?: InputMaybe<Scalars['String']>;
  priceData?: InputMaybe<StripePostQuotesQuotePriceDataLineItemsInput>;
  quantity?: InputMaybe<Scalars['Int']>;
  taxRates?: InputMaybe<Scalars['JSON']>;
};

export type StripePostQuotesQuotePriceDataLineItemsInput = {
  currency: Scalars['String'];
  product: Scalars['String'];
  recurring?: InputMaybe<StripePostQuotesQuoteRecurringPriceDataLineItemsInput>;
  taxBehavior?: InputMaybe<StripePostQuotesQuoteTaxBehaviorPriceDataLineItems>;
  unitAmount?: InputMaybe<Scalars['Int']>;
  unitAmountDecimal?: InputMaybe<Scalars['String']>;
};

export type StripePostQuotesQuoteRecurringPriceDataLineItemsInput = {
  interval: StripePostQuotesQuoteIntervalRecurringPriceDataLineItems;
  intervalCount?: InputMaybe<Scalars['Int']>;
};

export type StripePostQuotesQuoteSubscriptionDataInput = {
  description?: InputMaybe<Scalars['String']>;
  effectiveDate?: InputMaybe<Scalars['JSON']>;
  trialPeriodDays?: InputMaybe<Scalars['JSON']>;
};

export enum StripePostQuotesQuoteTaxBehaviorPriceDataLineItems {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE',
  Unspecified = 'UNSPECIFIED'
}

export type StripePostQuotesQuoteTransferDataInput = {
  amount?: InputMaybe<Scalars['Int']>;
  amountPercent?: InputMaybe<Scalars['Float']>;
  destination: Scalars['String'];
};

export type StripePostQuotesRecurringPriceDataLineItemsInput = {
  interval: StripePostQuotesIntervalRecurringPriceDataLineItems;
  intervalCount?: InputMaybe<Scalars['Int']>;
};

export type StripePostQuotesSubscriptionDataInput = {
  description?: InputMaybe<Scalars['String']>;
  effectiveDate?: InputMaybe<Scalars['JSON']>;
  trialPeriodDays?: InputMaybe<Scalars['JSON']>;
};

export enum StripePostQuotesTaxBehaviorPriceDataLineItems {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE',
  Unspecified = 'UNSPECIFIED'
}

export type StripePostQuotesTransferDataInput = {
  amount?: InputMaybe<Scalars['Int']>;
  amountPercent?: InputMaybe<Scalars['Float']>;
  destination: Scalars['String'];
};

export type StripePostRadarValueListItemsInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  value: Scalars['String'];
  valueList: Scalars['String'];
};

export type StripePostRadarValueListsInput = {
  alias: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
  itemType?: InputMaybe<StripePostRadarValueListsItemType>;
  metadata?: InputMaybe<Scalars['JSON']>;
  name: Scalars['String'];
};

export enum StripePostRadarValueListsItemType {
  CardBin = 'CARD_BIN',
  CardFingerprint = 'CARD_FINGERPRINT',
  CaseSensitiveString = 'CASE_SENSITIVE_STRING',
  Country = 'COUNTRY',
  CustomerId = 'CUSTOMER_ID',
  Email = 'EMAIL',
  IpAddress = 'IP_ADDRESS',
  String = 'STRING'
}

export type StripePostRadarValueListsValueListInput = {
  alias?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  name?: InputMaybe<Scalars['String']>;
};

export type StripePostRefundsInput = {
  amount?: InputMaybe<Scalars['Int']>;
  charge?: InputMaybe<Scalars['String']>;
  currency?: InputMaybe<Scalars['String']>;
  customer?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  instructionsEmail?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  origin?: InputMaybe<StripePostRefundsOrigin>;
  paymentIntent?: InputMaybe<Scalars['String']>;
  reason?: InputMaybe<StripePostRefundsReason>;
  refundApplicationFee?: InputMaybe<Scalars['Boolean']>;
  reverseTransfer?: InputMaybe<Scalars['Boolean']>;
};

export enum StripePostRefundsOrigin {
  CustomerBalance = 'CUSTOMER_BALANCE'
}

export enum StripePostRefundsReason {
  Duplicate = 'DUPLICATE',
  Fraudulent = 'FRAUDULENT',
  RequestedByCustomer = 'REQUESTED_BY_CUSTOMER'
}

export type StripePostRefundsRefundCancelInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostRefundsRefundInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
};

export type StripePostReportingReportRunsInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  parameters?: InputMaybe<StripePostReportingReportRunsParametersInput>;
  reportType: Scalars['String'];
};

export type StripePostReportingReportRunsParametersInput = {
  columns?: InputMaybe<Array<Scalars['String']>>;
  connectedAccount?: InputMaybe<Scalars['String']>;
  currency?: InputMaybe<Scalars['String']>;
  intervalEnd?: InputMaybe<Scalars['Int']>;
  intervalStart?: InputMaybe<Scalars['Int']>;
  payout?: InputMaybe<Scalars['String']>;
  reportingCategory?: InputMaybe<StripePostReportingReportRunsReportingCategoryParameters>;
  timezone?: InputMaybe<StripePostReportingReportRunsTimezoneParameters>;
};

export enum StripePostReportingReportRunsReportingCategoryParameters {
  Advance = 'ADVANCE',
  AdvanceFunding = 'ADVANCE_FUNDING',
  AnticipationRepayment = 'ANTICIPATION_REPAYMENT',
  Charge = 'CHARGE',
  ChargeFailure = 'CHARGE_FAILURE',
  ConnectCollectionTransfer = 'CONNECT_COLLECTION_TRANSFER',
  ConnectReservedFunds = 'CONNECT_RESERVED_FUNDS',
  Contribution = 'CONTRIBUTION',
  Dispute = 'DISPUTE',
  DisputeReversal = 'DISPUTE_REVERSAL',
  Fee = 'FEE',
  FinancingPaydown = 'FINANCING_PAYDOWN',
  FinancingPaydownReversal = 'FINANCING_PAYDOWN_REVERSAL',
  FinancingPayout = 'FINANCING_PAYOUT',
  FinancingPayoutReversal = 'FINANCING_PAYOUT_REVERSAL',
  IssuingAuthorizationHold = 'ISSUING_AUTHORIZATION_HOLD',
  IssuingAuthorizationRelease = 'ISSUING_AUTHORIZATION_RELEASE',
  IssuingDispute = 'ISSUING_DISPUTE',
  IssuingTransaction = 'ISSUING_TRANSACTION',
  NetworkCost = 'NETWORK_COST',
  OtherAdjustment = 'OTHER_ADJUSTMENT',
  PartialCaptureReversal = 'PARTIAL_CAPTURE_REVERSAL',
  Payout = 'PAYOUT',
  PayoutReversal = 'PAYOUT_REVERSAL',
  PlatformEarning = 'PLATFORM_EARNING',
  PlatformEarningRefund = 'PLATFORM_EARNING_REFUND',
  Refund = 'REFUND',
  RefundFailure = 'REFUND_FAILURE',
  RiskReservedFunds = 'RISK_RESERVED_FUNDS',
  Tax = 'TAX',
  Topup = 'TOPUP',
  TopupReversal = 'TOPUP_REVERSAL',
  Transfer = 'TRANSFER',
  TransferReversal = 'TRANSFER_REVERSAL'
}

export enum StripePostReportingReportRunsTimezoneParameters {
  AfricaAbidjan = 'AFRICA_ABIDJAN',
  AfricaAccra = 'AFRICA_ACCRA',
  AfricaAddisAbaba = 'AFRICA_ADDIS_ABABA',
  AfricaAlgiers = 'AFRICA_ALGIERS',
  AfricaAsmara = 'AFRICA_ASMARA',
  AfricaAsmera = 'AFRICA_ASMERA',
  AfricaBamako = 'AFRICA_BAMAKO',
  AfricaBangui = 'AFRICA_BANGUI',
  AfricaBanjul = 'AFRICA_BANJUL',
  AfricaBissau = 'AFRICA_BISSAU',
  AfricaBlantyre = 'AFRICA_BLANTYRE',
  AfricaBrazzaville = 'AFRICA_BRAZZAVILLE',
  AfricaBujumbura = 'AFRICA_BUJUMBURA',
  AfricaCairo = 'AFRICA_CAIRO',
  AfricaCasablanca = 'AFRICA_CASABLANCA',
  AfricaCeuta = 'AFRICA_CEUTA',
  AfricaConakry = 'AFRICA_CONAKRY',
  AfricaDakar = 'AFRICA_DAKAR',
  AfricaDarEsSalaam = 'AFRICA_DAR_ES_SALAAM',
  AfricaDjibouti = 'AFRICA_DJIBOUTI',
  AfricaDouala = 'AFRICA_DOUALA',
  AfricaElAaiun = 'AFRICA_EL_AAIUN',
  AfricaFreetown = 'AFRICA_FREETOWN',
  AfricaGaborone = 'AFRICA_GABORONE',
  AfricaHarare = 'AFRICA_HARARE',
  AfricaJohannesburg = 'AFRICA_JOHANNESBURG',
  AfricaJuba = 'AFRICA_JUBA',
  AfricaKampala = 'AFRICA_KAMPALA',
  AfricaKhartoum = 'AFRICA_KHARTOUM',
  AfricaKigali = 'AFRICA_KIGALI',
  AfricaKinshasa = 'AFRICA_KINSHASA',
  AfricaLagos = 'AFRICA_LAGOS',
  AfricaLibreville = 'AFRICA_LIBREVILLE',
  AfricaLome = 'AFRICA_LOME',
  AfricaLuanda = 'AFRICA_LUANDA',
  AfricaLubumbashi = 'AFRICA_LUBUMBASHI',
  AfricaLusaka = 'AFRICA_LUSAKA',
  AfricaMalabo = 'AFRICA_MALABO',
  AfricaMaputo = 'AFRICA_MAPUTO',
  AfricaMaseru = 'AFRICA_MASERU',
  AfricaMbabane = 'AFRICA_MBABANE',
  AfricaMogadishu = 'AFRICA_MOGADISHU',
  AfricaMonrovia = 'AFRICA_MONROVIA',
  AfricaNairobi = 'AFRICA_NAIROBI',
  AfricaNdjamena = 'AFRICA_NDJAMENA',
  AfricaNiamey = 'AFRICA_NIAMEY',
  AfricaNouakchott = 'AFRICA_NOUAKCHOTT',
  AfricaOuagadougou = 'AFRICA_OUAGADOUGOU',
  AfricaPortoNovo = 'AFRICA_PORTO_NOVO',
  AfricaSaoTome = 'AFRICA_SAO_TOME',
  AfricaTimbuktu = 'AFRICA_TIMBUKTU',
  AfricaTripoli = 'AFRICA_TRIPOLI',
  AfricaTunis = 'AFRICA_TUNIS',
  AfricaWindhoek = 'AFRICA_WINDHOEK',
  AmericaAdak = 'AMERICA_ADAK',
  AmericaAnchorage = 'AMERICA_ANCHORAGE',
  AmericaAnguilla = 'AMERICA_ANGUILLA',
  AmericaAntigua = 'AMERICA_ANTIGUA',
  AmericaAraguaina = 'AMERICA_ARAGUAINA',
  AmericaArgentinaBuenosAires = 'AMERICA_ARGENTINA_BUENOS_AIRES',
  AmericaArgentinaCatamarca = 'AMERICA_ARGENTINA_CATAMARCA',
  AmericaArgentinaComodRivadavia = 'AMERICA_ARGENTINA_COMOD_RIVADAVIA',
  AmericaArgentinaCordoba = 'AMERICA_ARGENTINA_CORDOBA',
  AmericaArgentinaJujuy = 'AMERICA_ARGENTINA_JUJUY',
  AmericaArgentinaLaRioja = 'AMERICA_ARGENTINA_LA_RIOJA',
  AmericaArgentinaMendoza = 'AMERICA_ARGENTINA_MENDOZA',
  AmericaArgentinaRioGallegos = 'AMERICA_ARGENTINA_RIO_GALLEGOS',
  AmericaArgentinaSalta = 'AMERICA_ARGENTINA_SALTA',
  AmericaArgentinaSanJuan = 'AMERICA_ARGENTINA_SAN_JUAN',
  AmericaArgentinaSanLuis = 'AMERICA_ARGENTINA_SAN_LUIS',
  AmericaArgentinaTucuman = 'AMERICA_ARGENTINA_TUCUMAN',
  AmericaArgentinaUshuaia = 'AMERICA_ARGENTINA_USHUAIA',
  AmericaAruba = 'AMERICA_ARUBA',
  AmericaAsuncion = 'AMERICA_ASUNCION',
  AmericaAtikokan = 'AMERICA_ATIKOKAN',
  AmericaAtka = 'AMERICA_ATKA',
  AmericaBahia = 'AMERICA_BAHIA',
  AmericaBahiaBanderas = 'AMERICA_BAHIA_BANDERAS',
  AmericaBarbados = 'AMERICA_BARBADOS',
  AmericaBelem = 'AMERICA_BELEM',
  AmericaBelize = 'AMERICA_BELIZE',
  AmericaBlancSablon = 'AMERICA_BLANC_SABLON',
  AmericaBoaVista = 'AMERICA_BOA_VISTA',
  AmericaBogota = 'AMERICA_BOGOTA',
  AmericaBoise = 'AMERICA_BOISE',
  AmericaBuenosAires = 'AMERICA_BUENOS_AIRES',
  AmericaCambridgeBay = 'AMERICA_CAMBRIDGE_BAY',
  AmericaCampoGrande = 'AMERICA_CAMPO_GRANDE',
  AmericaCancun = 'AMERICA_CANCUN',
  AmericaCaracas = 'AMERICA_CARACAS',
  AmericaCatamarca = 'AMERICA_CATAMARCA',
  AmericaCayenne = 'AMERICA_CAYENNE',
  AmericaCayman = 'AMERICA_CAYMAN',
  AmericaChicago = 'AMERICA_CHICAGO',
  AmericaChihuahua = 'AMERICA_CHIHUAHUA',
  AmericaCiudadJuarez = 'AMERICA_CIUDAD_JUAREZ',
  AmericaCoralHarbour = 'AMERICA_CORAL_HARBOUR',
  AmericaCordoba = 'AMERICA_CORDOBA',
  AmericaCostaRica = 'AMERICA_COSTA_RICA',
  AmericaCreston = 'AMERICA_CRESTON',
  AmericaCuiaba = 'AMERICA_CUIABA',
  AmericaCuracao = 'AMERICA_CURACAO',
  AmericaDanmarkshavn = 'AMERICA_DANMARKSHAVN',
  AmericaDawson = 'AMERICA_DAWSON',
  AmericaDawsonCreek = 'AMERICA_DAWSON_CREEK',
  AmericaDenver = 'AMERICA_DENVER',
  AmericaDetroit = 'AMERICA_DETROIT',
  AmericaDominica = 'AMERICA_DOMINICA',
  AmericaEdmonton = 'AMERICA_EDMONTON',
  AmericaEirunepe = 'AMERICA_EIRUNEPE',
  AmericaElSalvador = 'AMERICA_EL_SALVADOR',
  AmericaEnsenada = 'AMERICA_ENSENADA',
  AmericaFortaleza = 'AMERICA_FORTALEZA',
  AmericaFortNelson = 'AMERICA_FORT_NELSON',
  AmericaFortWayne = 'AMERICA_FORT_WAYNE',
  AmericaGlaceBay = 'AMERICA_GLACE_BAY',
  AmericaGodthab = 'AMERICA_GODTHAB',
  AmericaGooseBay = 'AMERICA_GOOSE_BAY',
  AmericaGrandTurk = 'AMERICA_GRAND_TURK',
  AmericaGrenada = 'AMERICA_GRENADA',
  AmericaGuadeloupe = 'AMERICA_GUADELOUPE',
  AmericaGuatemala = 'AMERICA_GUATEMALA',
  AmericaGuayaquil = 'AMERICA_GUAYAQUIL',
  AmericaGuyana = 'AMERICA_GUYANA',
  AmericaHalifax = 'AMERICA_HALIFAX',
  AmericaHavana = 'AMERICA_HAVANA',
  AmericaHermosillo = 'AMERICA_HERMOSILLO',
  AmericaIndianapolis = 'AMERICA_INDIANAPOLIS',
  AmericaIndianaIndianapolis = 'AMERICA_INDIANA_INDIANAPOLIS',
  AmericaIndianaKnox = 'AMERICA_INDIANA_KNOX',
  AmericaIndianaMarengo = 'AMERICA_INDIANA_MARENGO',
  AmericaIndianaPetersburg = 'AMERICA_INDIANA_PETERSBURG',
  AmericaIndianaTellCity = 'AMERICA_INDIANA_TELL_CITY',
  AmericaIndianaVevay = 'AMERICA_INDIANA_VEVAY',
  AmericaIndianaVincennes = 'AMERICA_INDIANA_VINCENNES',
  AmericaIndianaWinamac = 'AMERICA_INDIANA_WINAMAC',
  AmericaInuvik = 'AMERICA_INUVIK',
  AmericaIqaluit = 'AMERICA_IQALUIT',
  AmericaJamaica = 'AMERICA_JAMAICA',
  AmericaJujuy = 'AMERICA_JUJUY',
  AmericaJuneau = 'AMERICA_JUNEAU',
  AmericaKentuckyLouisville = 'AMERICA_KENTUCKY_LOUISVILLE',
  AmericaKentuckyMonticello = 'AMERICA_KENTUCKY_MONTICELLO',
  AmericaKnoxIn = 'AMERICA_KNOX_IN',
  AmericaKralendijk = 'AMERICA_KRALENDIJK',
  AmericaLaPaz = 'AMERICA_LA_PAZ',
  AmericaLima = 'AMERICA_LIMA',
  AmericaLosAngeles = 'AMERICA_LOS_ANGELES',
  AmericaLouisville = 'AMERICA_LOUISVILLE',
  AmericaLowerPrinces = 'AMERICA_LOWER_PRINCES',
  AmericaMaceio = 'AMERICA_MACEIO',
  AmericaManagua = 'AMERICA_MANAGUA',
  AmericaManaus = 'AMERICA_MANAUS',
  AmericaMarigot = 'AMERICA_MARIGOT',
  AmericaMartinique = 'AMERICA_MARTINIQUE',
  AmericaMatamoros = 'AMERICA_MATAMOROS',
  AmericaMazatlan = 'AMERICA_MAZATLAN',
  AmericaMendoza = 'AMERICA_MENDOZA',
  AmericaMenominee = 'AMERICA_MENOMINEE',
  AmericaMerida = 'AMERICA_MERIDA',
  AmericaMetlakatla = 'AMERICA_METLAKATLA',
  AmericaMexicoCity = 'AMERICA_MEXICO_CITY',
  AmericaMiquelon = 'AMERICA_MIQUELON',
  AmericaMoncton = 'AMERICA_MONCTON',
  AmericaMonterrey = 'AMERICA_MONTERREY',
  AmericaMontevideo = 'AMERICA_MONTEVIDEO',
  AmericaMontreal = 'AMERICA_MONTREAL',
  AmericaMontserrat = 'AMERICA_MONTSERRAT',
  AmericaNassau = 'AMERICA_NASSAU',
  AmericaNewYork = 'AMERICA_NEW_YORK',
  AmericaNipigon = 'AMERICA_NIPIGON',
  AmericaNome = 'AMERICA_NOME',
  AmericaNoronha = 'AMERICA_NORONHA',
  AmericaNorthDakotaBeulah = 'AMERICA_NORTH_DAKOTA_BEULAH',
  AmericaNorthDakotaCenter = 'AMERICA_NORTH_DAKOTA_CENTER',
  AmericaNorthDakotaNewSalem = 'AMERICA_NORTH_DAKOTA_NEW_SALEM',
  AmericaNuuk = 'AMERICA_NUUK',
  AmericaOjinaga = 'AMERICA_OJINAGA',
  AmericaPanama = 'AMERICA_PANAMA',
  AmericaPangnirtung = 'AMERICA_PANGNIRTUNG',
  AmericaParamaribo = 'AMERICA_PARAMARIBO',
  AmericaPhoenix = 'AMERICA_PHOENIX',
  AmericaPortoAcre = 'AMERICA_PORTO_ACRE',
  AmericaPortoVelho = 'AMERICA_PORTO_VELHO',
  AmericaPortAuPrince = 'AMERICA_PORT_AU_PRINCE',
  AmericaPortOfSpain = 'AMERICA_PORT_OF_SPAIN',
  AmericaPuertoRico = 'AMERICA_PUERTO_RICO',
  AmericaPuntaArenas = 'AMERICA_PUNTA_ARENAS',
  AmericaRainyRiver = 'AMERICA_RAINY_RIVER',
  AmericaRankinInlet = 'AMERICA_RANKIN_INLET',
  AmericaRecife = 'AMERICA_RECIFE',
  AmericaRegina = 'AMERICA_REGINA',
  AmericaResolute = 'AMERICA_RESOLUTE',
  AmericaRioBranco = 'AMERICA_RIO_BRANCO',
  AmericaRosario = 'AMERICA_ROSARIO',
  AmericaSantarem = 'AMERICA_SANTAREM',
  AmericaSantaIsabel = 'AMERICA_SANTA_ISABEL',
  AmericaSantiago = 'AMERICA_SANTIAGO',
  AmericaSantoDomingo = 'AMERICA_SANTO_DOMINGO',
  AmericaSaoPaulo = 'AMERICA_SAO_PAULO',
  AmericaScoresbysund = 'AMERICA_SCORESBYSUND',
  AmericaShiprock = 'AMERICA_SHIPROCK',
  AmericaSitka = 'AMERICA_SITKA',
  AmericaStBarthelemy = 'AMERICA_ST_BARTHELEMY',
  AmericaStJohns = 'AMERICA_ST_JOHNS',
  AmericaStKitts = 'AMERICA_ST_KITTS',
  AmericaStLucia = 'AMERICA_ST_LUCIA',
  AmericaStThomas = 'AMERICA_ST_THOMAS',
  AmericaStVincent = 'AMERICA_ST_VINCENT',
  AmericaSwiftCurrent = 'AMERICA_SWIFT_CURRENT',
  AmericaTegucigalpa = 'AMERICA_TEGUCIGALPA',
  AmericaThule = 'AMERICA_THULE',
  AmericaThunderBay = 'AMERICA_THUNDER_BAY',
  AmericaTijuana = 'AMERICA_TIJUANA',
  AmericaToronto = 'AMERICA_TORONTO',
  AmericaTortola = 'AMERICA_TORTOLA',
  AmericaVancouver = 'AMERICA_VANCOUVER',
  AmericaVirgin = 'AMERICA_VIRGIN',
  AmericaWhitehorse = 'AMERICA_WHITEHORSE',
  AmericaWinnipeg = 'AMERICA_WINNIPEG',
  AmericaYakutat = 'AMERICA_YAKUTAT',
  AmericaYellowknife = 'AMERICA_YELLOWKNIFE',
  AntarcticaCasey = 'ANTARCTICA_CASEY',
  AntarcticaDavis = 'ANTARCTICA_DAVIS',
  AntarcticaDumontDUrville = 'ANTARCTICA_DUMONT_D_URVILLE',
  AntarcticaMacquarie = 'ANTARCTICA_MACQUARIE',
  AntarcticaMawson = 'ANTARCTICA_MAWSON',
  AntarcticaMcMurdo = 'ANTARCTICA_MC_MURDO',
  AntarcticaPalmer = 'ANTARCTICA_PALMER',
  AntarcticaRothera = 'ANTARCTICA_ROTHERA',
  AntarcticaSouthPole = 'ANTARCTICA_SOUTH_POLE',
  AntarcticaSyowa = 'ANTARCTICA_SYOWA',
  AntarcticaTroll = 'ANTARCTICA_TROLL',
  AntarcticaVostok = 'ANTARCTICA_VOSTOK',
  ArcticLongyearbyen = 'ARCTIC_LONGYEARBYEN',
  AsiaAden = 'ASIA_ADEN',
  AsiaAlmaty = 'ASIA_ALMATY',
  AsiaAmman = 'ASIA_AMMAN',
  AsiaAnadyr = 'ASIA_ANADYR',
  AsiaAqtau = 'ASIA_AQTAU',
  AsiaAqtobe = 'ASIA_AQTOBE',
  AsiaAshgabat = 'ASIA_ASHGABAT',
  AsiaAshkhabad = 'ASIA_ASHKHABAD',
  AsiaAtyrau = 'ASIA_ATYRAU',
  AsiaBaghdad = 'ASIA_BAGHDAD',
  AsiaBahrain = 'ASIA_BAHRAIN',
  AsiaBaku = 'ASIA_BAKU',
  AsiaBangkok = 'ASIA_BANGKOK',
  AsiaBarnaul = 'ASIA_BARNAUL',
  AsiaBeirut = 'ASIA_BEIRUT',
  AsiaBishkek = 'ASIA_BISHKEK',
  AsiaBrunei = 'ASIA_BRUNEI',
  AsiaCalcutta = 'ASIA_CALCUTTA',
  AsiaChita = 'ASIA_CHITA',
  AsiaChoibalsan = 'ASIA_CHOIBALSAN',
  AsiaChongqing = 'ASIA_CHONGQING',
  AsiaChungking = 'ASIA_CHUNGKING',
  AsiaColombo = 'ASIA_COLOMBO',
  AsiaDacca = 'ASIA_DACCA',
  AsiaDamascus = 'ASIA_DAMASCUS',
  AsiaDhaka = 'ASIA_DHAKA',
  AsiaDili = 'ASIA_DILI',
  AsiaDubai = 'ASIA_DUBAI',
  AsiaDushanbe = 'ASIA_DUSHANBE',
  AsiaFamagusta = 'ASIA_FAMAGUSTA',
  AsiaGaza = 'ASIA_GAZA',
  AsiaHarbin = 'ASIA_HARBIN',
  AsiaHebron = 'ASIA_HEBRON',
  AsiaHongKong = 'ASIA_HONG_KONG',
  AsiaHovd = 'ASIA_HOVD',
  AsiaHoChiMinh = 'ASIA_HO_CHI_MINH',
  AsiaIrkutsk = 'ASIA_IRKUTSK',
  AsiaIstanbul = 'ASIA_ISTANBUL',
  AsiaJakarta = 'ASIA_JAKARTA',
  AsiaJayapura = 'ASIA_JAYAPURA',
  AsiaJerusalem = 'ASIA_JERUSALEM',
  AsiaKabul = 'ASIA_KABUL',
  AsiaKamchatka = 'ASIA_KAMCHATKA',
  AsiaKarachi = 'ASIA_KARACHI',
  AsiaKashgar = 'ASIA_KASHGAR',
  AsiaKathmandu = 'ASIA_KATHMANDU',
  AsiaKatmandu = 'ASIA_KATMANDU',
  AsiaKhandyga = 'ASIA_KHANDYGA',
  AsiaKolkata = 'ASIA_KOLKATA',
  AsiaKrasnoyarsk = 'ASIA_KRASNOYARSK',
  AsiaKualaLumpur = 'ASIA_KUALA_LUMPUR',
  AsiaKuching = 'ASIA_KUCHING',
  AsiaKuwait = 'ASIA_KUWAIT',
  AsiaMacao = 'ASIA_MACAO',
  AsiaMacau = 'ASIA_MACAU',
  AsiaMagadan = 'ASIA_MAGADAN',
  AsiaMakassar = 'ASIA_MAKASSAR',
  AsiaManila = 'ASIA_MANILA',
  AsiaMuscat = 'ASIA_MUSCAT',
  AsiaNicosia = 'ASIA_NICOSIA',
  AsiaNovokuznetsk = 'ASIA_NOVOKUZNETSK',
  AsiaNovosibirsk = 'ASIA_NOVOSIBIRSK',
  AsiaOmsk = 'ASIA_OMSK',
  AsiaOral = 'ASIA_ORAL',
  AsiaPhnomPenh = 'ASIA_PHNOM_PENH',
  AsiaPontianak = 'ASIA_PONTIANAK',
  AsiaPyongyang = 'ASIA_PYONGYANG',
  AsiaQatar = 'ASIA_QATAR',
  AsiaQostanay = 'ASIA_QOSTANAY',
  AsiaQyzylorda = 'ASIA_QYZYLORDA',
  AsiaRangoon = 'ASIA_RANGOON',
  AsiaRiyadh = 'ASIA_RIYADH',
  AsiaSaigon = 'ASIA_SAIGON',
  AsiaSakhalin = 'ASIA_SAKHALIN',
  AsiaSamarkand = 'ASIA_SAMARKAND',
  AsiaSeoul = 'ASIA_SEOUL',
  AsiaShanghai = 'ASIA_SHANGHAI',
  AsiaSingapore = 'ASIA_SINGAPORE',
  AsiaSrednekolymsk = 'ASIA_SREDNEKOLYMSK',
  AsiaTaipei = 'ASIA_TAIPEI',
  AsiaTashkent = 'ASIA_TASHKENT',
  AsiaTbilisi = 'ASIA_TBILISI',
  AsiaTehran = 'ASIA_TEHRAN',
  AsiaTelAviv = 'ASIA_TEL_AVIV',
  AsiaThimbu = 'ASIA_THIMBU',
  AsiaThimphu = 'ASIA_THIMPHU',
  AsiaTokyo = 'ASIA_TOKYO',
  AsiaTomsk = 'ASIA_TOMSK',
  AsiaUjungPandang = 'ASIA_UJUNG_PANDANG',
  AsiaUlaanbaatar = 'ASIA_ULAANBAATAR',
  AsiaUlanBator = 'ASIA_ULAN_BATOR',
  AsiaUrumqi = 'ASIA_URUMQI',
  AsiaUstNera = 'ASIA_UST_NERA',
  AsiaVientiane = 'ASIA_VIENTIANE',
  AsiaVladivostok = 'ASIA_VLADIVOSTOK',
  AsiaYakutsk = 'ASIA_YAKUTSK',
  AsiaYangon = 'ASIA_YANGON',
  AsiaYekaterinburg = 'ASIA_YEKATERINBURG',
  AsiaYerevan = 'ASIA_YEREVAN',
  AtlanticAzores = 'ATLANTIC_AZORES',
  AtlanticBermuda = 'ATLANTIC_BERMUDA',
  AtlanticCanary = 'ATLANTIC_CANARY',
  AtlanticCapeVerde = 'ATLANTIC_CAPE_VERDE',
  AtlanticFaeroe = 'ATLANTIC_FAEROE',
  AtlanticFaroe = 'ATLANTIC_FAROE',
  AtlanticJanMayen = 'ATLANTIC_JAN_MAYEN',
  AtlanticMadeira = 'ATLANTIC_MADEIRA',
  AtlanticReykjavik = 'ATLANTIC_REYKJAVIK',
  AtlanticSouthGeorgia = 'ATLANTIC_SOUTH_GEORGIA',
  AtlanticStanley = 'ATLANTIC_STANLEY',
  AtlanticStHelena = 'ATLANTIC_ST_HELENA',
  AustraliaAct = 'AUSTRALIA_ACT',
  AustraliaAdelaide = 'AUSTRALIA_ADELAIDE',
  AustraliaBrisbane = 'AUSTRALIA_BRISBANE',
  AustraliaBrokenHill = 'AUSTRALIA_BROKEN_HILL',
  AustraliaCanberra = 'AUSTRALIA_CANBERRA',
  AustraliaCurrie = 'AUSTRALIA_CURRIE',
  AustraliaDarwin = 'AUSTRALIA_DARWIN',
  AustraliaEucla = 'AUSTRALIA_EUCLA',
  AustraliaHobart = 'AUSTRALIA_HOBART',
  AustraliaLhi = 'AUSTRALIA_LHI',
  AustraliaLindeman = 'AUSTRALIA_LINDEMAN',
  AustraliaLordHowe = 'AUSTRALIA_LORD_HOWE',
  AustraliaMelbourne = 'AUSTRALIA_MELBOURNE',
  AustraliaNorth = 'AUSTRALIA_NORTH',
  AustraliaNsw = 'AUSTRALIA_NSW',
  AustraliaPerth = 'AUSTRALIA_PERTH',
  AustraliaQueensland = 'AUSTRALIA_QUEENSLAND',
  AustraliaSouth = 'AUSTRALIA_SOUTH',
  AustraliaSydney = 'AUSTRALIA_SYDNEY',
  AustraliaTasmania = 'AUSTRALIA_TASMANIA',
  AustraliaVictoria = 'AUSTRALIA_VICTORIA',
  AustraliaWest = 'AUSTRALIA_WEST',
  AustraliaYancowinna = 'AUSTRALIA_YANCOWINNA',
  BrazilAcre = 'BRAZIL_ACRE',
  BrazilDeNoronha = 'BRAZIL_DE_NORONHA',
  BrazilEast = 'BRAZIL_EAST',
  BrazilWest = 'BRAZIL_WEST',
  CanadaAtlantic = 'CANADA_ATLANTIC',
  CanadaCentral = 'CANADA_CENTRAL',
  CanadaEastern = 'CANADA_EASTERN',
  CanadaMountain = 'CANADA_MOUNTAIN',
  CanadaNewfoundland = 'CANADA_NEWFOUNDLAND',
  CanadaPacific = 'CANADA_PACIFIC',
  CanadaSaskatchewan = 'CANADA_SASKATCHEWAN',
  CanadaYukon = 'CANADA_YUKON',
  Cet = 'CET',
  ChileContinental = 'CHILE_CONTINENTAL',
  ChileEasterIsland = 'CHILE_EASTER_ISLAND',
  Cst6Cdt = 'CST6CDT',
  Cuba = 'CUBA',
  Eet = 'EET',
  Egypt = 'EGYPT',
  Eire = 'EIRE',
  Est = 'EST',
  Est5Edt = 'EST5EDT',
  EtcGmt = 'ETC_GMT',
  EtcGmt0 = 'ETC_GMT0',
  EtcGmt_0 = 'ETC_GMT_0',
  EtcGmt_1 = 'ETC_GMT_1',
  EtcGmt_2 = 'ETC_GMT_2',
  EtcGmt_3 = 'ETC_GMT_3',
  EtcGmt_4 = 'ETC_GMT_4',
  EtcGmt_5 = 'ETC_GMT_5',
  EtcGmt_6 = 'ETC_GMT_6',
  EtcGmt_7 = 'ETC_GMT_7',
  EtcGmt_8 = 'ETC_GMT_8',
  EtcGmt_9 = 'ETC_GMT_9',
  EtcGmt_10 = 'ETC_GMT_10',
  EtcGmt_11 = 'ETC_GMT_11',
  EtcGmt_12 = 'ETC_GMT_12',
  EtcGmt_13 = 'ETC_GMT_13',
  EtcGmt_14 = 'ETC_GMT_14',
  EtcGreenwich = 'ETC_GREENWICH',
  EtcUct = 'ETC_UCT',
  EtcUniversal = 'ETC_UNIVERSAL',
  EtcUtc = 'ETC_UTC',
  EtcZulu = 'ETC_ZULU',
  EuropeAmsterdam = 'EUROPE_AMSTERDAM',
  EuropeAndorra = 'EUROPE_ANDORRA',
  EuropeAstrakhan = 'EUROPE_ASTRAKHAN',
  EuropeAthens = 'EUROPE_ATHENS',
  EuropeBelfast = 'EUROPE_BELFAST',
  EuropeBelgrade = 'EUROPE_BELGRADE',
  EuropeBerlin = 'EUROPE_BERLIN',
  EuropeBratislava = 'EUROPE_BRATISLAVA',
  EuropeBrussels = 'EUROPE_BRUSSELS',
  EuropeBucharest = 'EUROPE_BUCHAREST',
  EuropeBudapest = 'EUROPE_BUDAPEST',
  EuropeBusingen = 'EUROPE_BUSINGEN',
  EuropeChisinau = 'EUROPE_CHISINAU',
  EuropeCopenhagen = 'EUROPE_COPENHAGEN',
  EuropeDublin = 'EUROPE_DUBLIN',
  EuropeGibraltar = 'EUROPE_GIBRALTAR',
  EuropeGuernsey = 'EUROPE_GUERNSEY',
  EuropeHelsinki = 'EUROPE_HELSINKI',
  EuropeIsleOfMan = 'EUROPE_ISLE_OF_MAN',
  EuropeIstanbul = 'EUROPE_ISTANBUL',
  EuropeJersey = 'EUROPE_JERSEY',
  EuropeKaliningrad = 'EUROPE_KALININGRAD',
  EuropeKiev = 'EUROPE_KIEV',
  EuropeKirov = 'EUROPE_KIROV',
  EuropeKyiv = 'EUROPE_KYIV',
  EuropeLisbon = 'EUROPE_LISBON',
  EuropeLjubljana = 'EUROPE_LJUBLJANA',
  EuropeLondon = 'EUROPE_LONDON',
  EuropeLuxembourg = 'EUROPE_LUXEMBOURG',
  EuropeMadrid = 'EUROPE_MADRID',
  EuropeMalta = 'EUROPE_MALTA',
  EuropeMariehamn = 'EUROPE_MARIEHAMN',
  EuropeMinsk = 'EUROPE_MINSK',
  EuropeMonaco = 'EUROPE_MONACO',
  EuropeMoscow = 'EUROPE_MOSCOW',
  EuropeNicosia = 'EUROPE_NICOSIA',
  EuropeOslo = 'EUROPE_OSLO',
  EuropeParis = 'EUROPE_PARIS',
  EuropePodgorica = 'EUROPE_PODGORICA',
  EuropePrague = 'EUROPE_PRAGUE',
  EuropeRiga = 'EUROPE_RIGA',
  EuropeRome = 'EUROPE_ROME',
  EuropeSamara = 'EUROPE_SAMARA',
  EuropeSanMarino = 'EUROPE_SAN_MARINO',
  EuropeSarajevo = 'EUROPE_SARAJEVO',
  EuropeSaratov = 'EUROPE_SARATOV',
  EuropeSimferopol = 'EUROPE_SIMFEROPOL',
  EuropeSkopje = 'EUROPE_SKOPJE',
  EuropeSofia = 'EUROPE_SOFIA',
  EuropeStockholm = 'EUROPE_STOCKHOLM',
  EuropeTallinn = 'EUROPE_TALLINN',
  EuropeTirane = 'EUROPE_TIRANE',
  EuropeTiraspol = 'EUROPE_TIRASPOL',
  EuropeUlyanovsk = 'EUROPE_ULYANOVSK',
  EuropeUzhgorod = 'EUROPE_UZHGOROD',
  EuropeVaduz = 'EUROPE_VADUZ',
  EuropeVatican = 'EUROPE_VATICAN',
  EuropeVienna = 'EUROPE_VIENNA',
  EuropeVilnius = 'EUROPE_VILNIUS',
  EuropeVolgograd = 'EUROPE_VOLGOGRAD',
  EuropeWarsaw = 'EUROPE_WARSAW',
  EuropeZagreb = 'EUROPE_ZAGREB',
  EuropeZaporozhye = 'EUROPE_ZAPOROZHYE',
  EuropeZurich = 'EUROPE_ZURICH',
  Factory = 'FACTORY',
  Gb = 'GB',
  GbEire = 'GB_EIRE',
  Gmt = 'GMT',
  Gmt0 = 'GMT0',
  Gmt_0 = 'GMT_0',
  Greenwich = 'GREENWICH',
  Hongkong = 'HONGKONG',
  Hst = 'HST',
  Iceland = 'ICELAND',
  IndianAntananarivo = 'INDIAN_ANTANANARIVO',
  IndianChagos = 'INDIAN_CHAGOS',
  IndianChristmas = 'INDIAN_CHRISTMAS',
  IndianCocos = 'INDIAN_COCOS',
  IndianComoro = 'INDIAN_COMORO',
  IndianKerguelen = 'INDIAN_KERGUELEN',
  IndianMahe = 'INDIAN_MAHE',
  IndianMaldives = 'INDIAN_MALDIVES',
  IndianMauritius = 'INDIAN_MAURITIUS',
  IndianMayotte = 'INDIAN_MAYOTTE',
  IndianReunion = 'INDIAN_REUNION',
  Iran = 'IRAN',
  Israel = 'ISRAEL',
  Jamaica = 'JAMAICA',
  Japan = 'JAPAN',
  Kwajalein = 'KWAJALEIN',
  Libya = 'LIBYA',
  Met = 'MET',
  MexicoBajaNorte = 'MEXICO_BAJA_NORTE',
  MexicoBajaSur = 'MEXICO_BAJA_SUR',
  MexicoGeneral = 'MEXICO_GENERAL',
  Mst = 'MST',
  Mst7Mdt = 'MST7MDT',
  Navajo = 'NAVAJO',
  Nz = 'NZ',
  NzChat = 'NZ_CHAT',
  PacificApia = 'PACIFIC_APIA',
  PacificAuckland = 'PACIFIC_AUCKLAND',
  PacificBougainville = 'PACIFIC_BOUGAINVILLE',
  PacificChatham = 'PACIFIC_CHATHAM',
  PacificChuuk = 'PACIFIC_CHUUK',
  PacificEaster = 'PACIFIC_EASTER',
  PacificEfate = 'PACIFIC_EFATE',
  PacificEnderbury = 'PACIFIC_ENDERBURY',
  PacificFakaofo = 'PACIFIC_FAKAOFO',
  PacificFiji = 'PACIFIC_FIJI',
  PacificFunafuti = 'PACIFIC_FUNAFUTI',
  PacificGalapagos = 'PACIFIC_GALAPAGOS',
  PacificGambier = 'PACIFIC_GAMBIER',
  PacificGuadalcanal = 'PACIFIC_GUADALCANAL',
  PacificGuam = 'PACIFIC_GUAM',
  PacificHonolulu = 'PACIFIC_HONOLULU',
  PacificJohnston = 'PACIFIC_JOHNSTON',
  PacificKanton = 'PACIFIC_KANTON',
  PacificKiritimati = 'PACIFIC_KIRITIMATI',
  PacificKosrae = 'PACIFIC_KOSRAE',
  PacificKwajalein = 'PACIFIC_KWAJALEIN',
  PacificMajuro = 'PACIFIC_MAJURO',
  PacificMarquesas = 'PACIFIC_MARQUESAS',
  PacificMidway = 'PACIFIC_MIDWAY',
  PacificNauru = 'PACIFIC_NAURU',
  PacificNiue = 'PACIFIC_NIUE',
  PacificNorfolk = 'PACIFIC_NORFOLK',
  PacificNoumea = 'PACIFIC_NOUMEA',
  PacificPagoPago = 'PACIFIC_PAGO_PAGO',
  PacificPalau = 'PACIFIC_PALAU',
  PacificPitcairn = 'PACIFIC_PITCAIRN',
  PacificPohnpei = 'PACIFIC_POHNPEI',
  PacificPonape = 'PACIFIC_PONAPE',
  PacificPortMoresby = 'PACIFIC_PORT_MORESBY',
  PacificRarotonga = 'PACIFIC_RAROTONGA',
  PacificSaipan = 'PACIFIC_SAIPAN',
  PacificSamoa = 'PACIFIC_SAMOA',
  PacificTahiti = 'PACIFIC_TAHITI',
  PacificTarawa = 'PACIFIC_TARAWA',
  PacificTongatapu = 'PACIFIC_TONGATAPU',
  PacificTruk = 'PACIFIC_TRUK',
  PacificWake = 'PACIFIC_WAKE',
  PacificWallis = 'PACIFIC_WALLIS',
  PacificYap = 'PACIFIC_YAP',
  Poland = 'POLAND',
  Portugal = 'PORTUGAL',
  Prc = 'PRC',
  Pst8Pdt = 'PST8PDT',
  Roc = 'ROC',
  Rok = 'ROK',
  Singapore = 'SINGAPORE',
  Turkey = 'TURKEY',
  Uct = 'UCT',
  Universal = 'UNIVERSAL',
  UsAlaska = 'US_ALASKA',
  UsAleutian = 'US_ALEUTIAN',
  UsArizona = 'US_ARIZONA',
  UsCentral = 'US_CENTRAL',
  UsEastern = 'US_EASTERN',
  UsEastIndiana = 'US_EAST_INDIANA',
  UsHawaii = 'US_HAWAII',
  UsIndianaStarke = 'US_INDIANA_STARKE',
  UsMichigan = 'US_MICHIGAN',
  UsMountain = 'US_MOUNTAIN',
  UsPacific = 'US_PACIFIC',
  UsPacificNew = 'US_PACIFIC_NEW',
  UsSamoa = 'US_SAMOA',
  Utc = 'UTC',
  Wet = 'WET',
  WSu = 'W_SU',
  Zulu = 'ZULU'
}

export type StripePostReviewsReviewApproveInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export enum StripePostSetupIntentsAccountHolderTypeUsBankAccountPaymentMethodData {
  Company = 'COMPANY',
  Individual = 'INDIVIDUAL'
}

export enum StripePostSetupIntentsAccountTypeUsBankAccountPaymentMethodData {
  Checking = 'CHECKING',
  Savings = 'SAVINGS'
}

export type StripePostSetupIntentsAcssDebitPaymentMethodDataInput = {
  accountNumber: Scalars['String'];
  institutionNumber: Scalars['String'];
  transitNumber: Scalars['String'];
};

export type StripePostSetupIntentsAcssDebitPaymentMethodOptionsInput = {
  currency?: InputMaybe<StripePostSetupIntentsCurrencyAcssDebitPaymentMethodOptions>;
  mandateOptions?: InputMaybe<StripePostSetupIntentsMandateOptionsAcssDebitPaymentMethodOptionsInput>;
  verificationMethod?: InputMaybe<StripePostSetupIntentsVerificationMethodAcssDebitPaymentMethodOptions>;
};

export type StripePostSetupIntentsAddressBillingDetailsPaymentMethodDataInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export enum StripePostSetupIntentsAmountTypeMandateOptionsCardPaymentMethodOptions {
  Fixed = 'FIXED',
  Maximum = 'MAXIMUM'
}

export type StripePostSetupIntentsAuBecsDebitPaymentMethodDataInput = {
  accountNumber: Scalars['String'];
  bsbNumber: Scalars['String'];
};

export type StripePostSetupIntentsAutomaticPaymentMethodsInput = {
  enabled: Scalars['Boolean'];
};

export type StripePostSetupIntentsBacsDebitPaymentMethodDataInput = {
  accountNumber?: InputMaybe<Scalars['String']>;
  sortCode?: InputMaybe<Scalars['String']>;
};

export enum StripePostSetupIntentsBankEpsPaymentMethodData {
  ArzteUndApothekerBank = 'ARZTE_UND_APOTHEKER_BANK',
  AustrianAnadiBankAg = 'AUSTRIAN_ANADI_BANK_AG',
  BankhausCarlSpangler = 'BANKHAUS_CARL_SPANGLER',
  BankhausSchelhammerUndSchatteraAg = 'BANKHAUS_SCHELHAMMER_UND_SCHATTERA_AG',
  BankAustria = 'BANK_AUSTRIA',
  BawagPskAg = 'BAWAG_PSK_AG',
  BksBankAg = 'BKS_BANK_AG',
  BrullKallmusBankAg = 'BRULL_KALLMUS_BANK_AG',
  BtvVierLanderBank = 'BTV_VIER_LANDER_BANK',
  CapitalBankGraweGruppeAg = 'CAPITAL_BANK_GRAWE_GRUPPE_AG',
  DeutscheBankAg = 'DEUTSCHE_BANK_AG',
  Dolomitenbank = 'DOLOMITENBANK',
  EasybankAg = 'EASYBANK_AG',
  ErsteBankUndSparkassen = 'ERSTE_BANK_UND_SPARKASSEN',
  HypoAlpeadriabankInternationalAg = 'HYPO_ALPEADRIABANK_INTERNATIONAL_AG',
  HypoBankBurgenlandAktiengesellschaft = 'HYPO_BANK_BURGENLAND_AKTIENGESELLSCHAFT',
  HypoNoeLbFurNiederosterreichUWien = 'HYPO_NOE_LB_FUR_NIEDEROSTERREICH_U_WIEN',
  HypoOberosterreichSalzburgSteiermark = 'HYPO_OBEROSTERREICH_SALZBURG_STEIERMARK',
  HypoTirolBankAg = 'HYPO_TIROL_BANK_AG',
  HypoVorarlbergBankAg = 'HYPO_VORARLBERG_BANK_AG',
  MarchfelderBank = 'MARCHFELDER_BANK',
  OberbankAg = 'OBERBANK_AG',
  RaiffeisenBankengruppeOsterreich = 'RAIFFEISEN_BANKENGRUPPE_OSTERREICH',
  SchoellerbankAg = 'SCHOELLERBANK_AG',
  SpardaBankWien = 'SPARDA_BANK_WIEN',
  VolksbankGruppe = 'VOLKSBANK_GRUPPE',
  VolkskreditbankAg = 'VOLKSKREDITBANK_AG',
  VrBankBraunau = 'VR_BANK_BRAUNAU'
}

export enum StripePostSetupIntentsBankFpxPaymentMethodData {
  AffinBank = 'AFFIN_BANK',
  Agrobank = 'AGROBANK',
  AllianceBank = 'ALLIANCE_BANK',
  Ambank = 'AMBANK',
  BankIslam = 'BANK_ISLAM',
  BankMuamalat = 'BANK_MUAMALAT',
  BankOfChina = 'BANK_OF_CHINA',
  BankRakyat = 'BANK_RAKYAT',
  Bsn = 'BSN',
  Cimb = 'CIMB',
  DeutscheBank = 'DEUTSCHE_BANK',
  HongLeongBank = 'HONG_LEONG_BANK',
  Hsbc = 'HSBC',
  Kfh = 'KFH',
  Maybank_2E = 'MAYBANK_2E',
  Maybank_2U = 'MAYBANK_2U',
  Ocbc = 'OCBC',
  PbEnterprise = 'PB_ENTERPRISE',
  PublicBank = 'PUBLIC_BANK',
  Rhb = 'RHB',
  StandardChartered = 'STANDARD_CHARTERED',
  Uob = 'UOB'
}

export enum StripePostSetupIntentsBankIdealPaymentMethodData {
  AbnAmro = 'ABN_AMRO',
  AsnBank = 'ASN_BANK',
  Bunq = 'BUNQ',
  Handelsbanken = 'HANDELSBANKEN',
  Ing = 'ING',
  Knab = 'KNAB',
  Moneyou = 'MONEYOU',
  Rabobank = 'RABOBANK',
  Regiobank = 'REGIOBANK',
  Revolut = 'REVOLUT',
  SnsBank = 'SNS_BANK',
  TriodosBank = 'TRIODOS_BANK',
  VanLanschot = 'VAN_LANSCHOT',
  Yoursafe = 'YOURSAFE'
}

export enum StripePostSetupIntentsBankP24PaymentMethodData {
  AliorBank = 'ALIOR_BANK',
  BankiSpbdzielcze = 'BANKI_SPBDZIELCZE',
  BankMillennium = 'BANK_MILLENNIUM',
  BankNowyBfgSa = 'BANK_NOWY_BFG_SA',
  BankPekaoSa = 'BANK_PEKAO_SA',
  Blik = 'BLIK',
  BnpParibas = 'BNP_PARIBAS',
  Boz = 'BOZ',
  CitiHandlowy = 'CITI_HANDLOWY',
  CreditAgricole = 'CREDIT_AGRICOLE',
  Envelobank = 'ENVELOBANK',
  EtransferPocztowy_24 = 'ETRANSFER_POCZTOWY_24',
  GetinBank = 'GETIN_BANK',
  Ideabank = 'IDEABANK',
  Ing = 'ING',
  Inteligo = 'INTELIGO',
  MbankMtransfer = 'MBANK_MTRANSFER',
  NestPrzelew = 'NEST_PRZELEW',
  NoblePay = 'NOBLE_PAY',
  PbacZIpko = 'PBAC_Z_IPKO',
  PlusBank = 'PLUS_BANK',
  SantanderPrzelew_24 = 'SANTANDER_PRZELEW_24',
  TmobileUsbugiBankowe = 'TMOBILE_USBUGI_BANKOWE',
  ToyotaBank = 'TOYOTA_BANK',
  VolkswagenBank = 'VOLKSWAGEN_BANK'
}

export type StripePostSetupIntentsBillingDetailsPaymentMethodDataInput = {
  address?: InputMaybe<StripeStringOrPostSetupIntentsAddressBillingDetailsPaymentMethodDataUnionInput>;
  email?: InputMaybe<Scalars['JSON']>;
  name?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
};

export type StripePostSetupIntentsBlikPaymentMethodOptionsInput = {
  code?: InputMaybe<Scalars['String']>;
};

export type StripePostSetupIntentsBoletoPaymentMethodDataInput = {
  taxId: Scalars['String'];
};

export type StripePostSetupIntentsCardPaymentMethodOptionsInput = {
  mandateOptions?: InputMaybe<StripePostSetupIntentsMandateOptionsCardPaymentMethodOptionsInput>;
  network?: InputMaybe<StripePostSetupIntentsNetworkCardPaymentMethodOptions>;
  requestThreeDSecure?: InputMaybe<StripePostSetupIntentsRequestThreeDSecureCardPaymentMethodOptions>;
};

export enum StripePostSetupIntentsCountrySofortPaymentMethodData {
  At = 'AT',
  Be = 'BE',
  De = 'DE',
  Es = 'ES',
  It = 'IT',
  Nl = 'NL'
}

export enum StripePostSetupIntentsCurrencyAcssDebitPaymentMethodOptions {
  Cad = 'CAD',
  Usd = 'USD'
}

export type StripePostSetupIntentsCustomerAcceptanceMandateDataInput = {
  acceptedAt?: InputMaybe<Scalars['Int']>;
  offline?: InputMaybe<Scalars['JSON']>;
  online?: InputMaybe<StripePostSetupIntentsOnlineCustomerAcceptanceMandateDataInput>;
  type: StripePostSetupIntentsTypeCustomerAcceptanceMandateData;
};

export enum StripePostSetupIntentsDefaultForMandateOptionsAcssDebitPaymentMethodOptions {
  Invoice = 'INVOICE',
  Subscription = 'SUBSCRIPTION'
}

export type StripePostSetupIntentsDobKlarnaPaymentMethodDataInput = {
  day: Scalars['Int'];
  month: Scalars['Int'];
  year: Scalars['Int'];
};

export type StripePostSetupIntentsEpsPaymentMethodDataInput = {
  bank?: InputMaybe<StripePostSetupIntentsBankEpsPaymentMethodData>;
};

export type StripePostSetupIntentsFinancialConnectionsUsBankAccountPaymentMethodOptionsInput = {
  permissions?: InputMaybe<Array<StripePostSetupIntentsPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions>>;
  returnUrl?: InputMaybe<Scalars['String']>;
};

export enum StripePostSetupIntentsFlowDirections {
  Inbound = 'INBOUND',
  Outbound = 'OUTBOUND'
}

export type StripePostSetupIntentsFpxPaymentMethodDataInput = {
  bank: StripePostSetupIntentsBankFpxPaymentMethodData;
};

export type StripePostSetupIntentsIdealPaymentMethodDataInput = {
  bank?: InputMaybe<StripePostSetupIntentsBankIdealPaymentMethodData>;
};

export type StripePostSetupIntentsInput = {
  attachToSelf?: InputMaybe<Scalars['Boolean']>;
  automaticPaymentMethods?: InputMaybe<StripePostSetupIntentsAutomaticPaymentMethodsInput>;
  confirm?: InputMaybe<Scalars['Boolean']>;
  customer?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  flowDirections?: InputMaybe<Array<StripePostSetupIntentsFlowDirections>>;
  mandateData?: InputMaybe<StripePostSetupIntentsMandateDataInput>;
  metadata?: InputMaybe<Scalars['JSON']>;
  onBehalfOf?: InputMaybe<Scalars['String']>;
  paymentMethod?: InputMaybe<Scalars['String']>;
  paymentMethodData?: InputMaybe<StripePostSetupIntentsPaymentMethodDataInput>;
  paymentMethodOptions?: InputMaybe<StripePostSetupIntentsPaymentMethodOptionsInput>;
  paymentMethodTypes?: InputMaybe<Array<Scalars['String']>>;
  returnUrl?: InputMaybe<Scalars['String']>;
  singleUse?: InputMaybe<StripePostSetupIntentsSingleUseInput>;
  usage?: InputMaybe<StripePostSetupIntentsUsage>;
};

export enum StripePostSetupIntentsIntentAccountHolderTypeUsBankAccountPaymentMethodData {
  Company = 'COMPANY',
  Individual = 'INDIVIDUAL'
}

export enum StripePostSetupIntentsIntentAccountTypeUsBankAccountPaymentMethodData {
  Checking = 'CHECKING',
  Savings = 'SAVINGS'
}

export type StripePostSetupIntentsIntentAcssDebitPaymentMethodDataInput = {
  accountNumber: Scalars['String'];
  institutionNumber: Scalars['String'];
  transitNumber: Scalars['String'];
};

export type StripePostSetupIntentsIntentAcssDebitPaymentMethodOptionsInput = {
  currency?: InputMaybe<StripePostSetupIntentsIntentCurrencyAcssDebitPaymentMethodOptions>;
  mandateOptions?: InputMaybe<StripePostSetupIntentsIntentMandateOptionsAcssDebitPaymentMethodOptionsInput>;
  verificationMethod?: InputMaybe<StripePostSetupIntentsIntentVerificationMethodAcssDebitPaymentMethodOptions>;
};

export type StripePostSetupIntentsIntentAddressBillingDetailsPaymentMethodDataInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export enum StripePostSetupIntentsIntentAmountTypeMandateOptionsCardPaymentMethodOptions {
  Fixed = 'FIXED',
  Maximum = 'MAXIMUM'
}

export type StripePostSetupIntentsIntentAuBecsDebitPaymentMethodDataInput = {
  accountNumber: Scalars['String'];
  bsbNumber: Scalars['String'];
};

export type StripePostSetupIntentsIntentBacsDebitPaymentMethodDataInput = {
  accountNumber?: InputMaybe<Scalars['String']>;
  sortCode?: InputMaybe<Scalars['String']>;
};

export enum StripePostSetupIntentsIntentBankEpsPaymentMethodData {
  ArzteUndApothekerBank = 'ARZTE_UND_APOTHEKER_BANK',
  AustrianAnadiBankAg = 'AUSTRIAN_ANADI_BANK_AG',
  BankhausCarlSpangler = 'BANKHAUS_CARL_SPANGLER',
  BankhausSchelhammerUndSchatteraAg = 'BANKHAUS_SCHELHAMMER_UND_SCHATTERA_AG',
  BankAustria = 'BANK_AUSTRIA',
  BawagPskAg = 'BAWAG_PSK_AG',
  BksBankAg = 'BKS_BANK_AG',
  BrullKallmusBankAg = 'BRULL_KALLMUS_BANK_AG',
  BtvVierLanderBank = 'BTV_VIER_LANDER_BANK',
  CapitalBankGraweGruppeAg = 'CAPITAL_BANK_GRAWE_GRUPPE_AG',
  DeutscheBankAg = 'DEUTSCHE_BANK_AG',
  Dolomitenbank = 'DOLOMITENBANK',
  EasybankAg = 'EASYBANK_AG',
  ErsteBankUndSparkassen = 'ERSTE_BANK_UND_SPARKASSEN',
  HypoAlpeadriabankInternationalAg = 'HYPO_ALPEADRIABANK_INTERNATIONAL_AG',
  HypoBankBurgenlandAktiengesellschaft = 'HYPO_BANK_BURGENLAND_AKTIENGESELLSCHAFT',
  HypoNoeLbFurNiederosterreichUWien = 'HYPO_NOE_LB_FUR_NIEDEROSTERREICH_U_WIEN',
  HypoOberosterreichSalzburgSteiermark = 'HYPO_OBEROSTERREICH_SALZBURG_STEIERMARK',
  HypoTirolBankAg = 'HYPO_TIROL_BANK_AG',
  HypoVorarlbergBankAg = 'HYPO_VORARLBERG_BANK_AG',
  MarchfelderBank = 'MARCHFELDER_BANK',
  OberbankAg = 'OBERBANK_AG',
  RaiffeisenBankengruppeOsterreich = 'RAIFFEISEN_BANKENGRUPPE_OSTERREICH',
  SchoellerbankAg = 'SCHOELLERBANK_AG',
  SpardaBankWien = 'SPARDA_BANK_WIEN',
  VolksbankGruppe = 'VOLKSBANK_GRUPPE',
  VolkskreditbankAg = 'VOLKSKREDITBANK_AG',
  VrBankBraunau = 'VR_BANK_BRAUNAU'
}

export enum StripePostSetupIntentsIntentBankFpxPaymentMethodData {
  AffinBank = 'AFFIN_BANK',
  Agrobank = 'AGROBANK',
  AllianceBank = 'ALLIANCE_BANK',
  Ambank = 'AMBANK',
  BankIslam = 'BANK_ISLAM',
  BankMuamalat = 'BANK_MUAMALAT',
  BankOfChina = 'BANK_OF_CHINA',
  BankRakyat = 'BANK_RAKYAT',
  Bsn = 'BSN',
  Cimb = 'CIMB',
  DeutscheBank = 'DEUTSCHE_BANK',
  HongLeongBank = 'HONG_LEONG_BANK',
  Hsbc = 'HSBC',
  Kfh = 'KFH',
  Maybank_2E = 'MAYBANK_2E',
  Maybank_2U = 'MAYBANK_2U',
  Ocbc = 'OCBC',
  PbEnterprise = 'PB_ENTERPRISE',
  PublicBank = 'PUBLIC_BANK',
  Rhb = 'RHB',
  StandardChartered = 'STANDARD_CHARTERED',
  Uob = 'UOB'
}

export enum StripePostSetupIntentsIntentBankIdealPaymentMethodData {
  AbnAmro = 'ABN_AMRO',
  AsnBank = 'ASN_BANK',
  Bunq = 'BUNQ',
  Handelsbanken = 'HANDELSBANKEN',
  Ing = 'ING',
  Knab = 'KNAB',
  Moneyou = 'MONEYOU',
  Rabobank = 'RABOBANK',
  Regiobank = 'REGIOBANK',
  Revolut = 'REVOLUT',
  SnsBank = 'SNS_BANK',
  TriodosBank = 'TRIODOS_BANK',
  VanLanschot = 'VAN_LANSCHOT',
  Yoursafe = 'YOURSAFE'
}

export enum StripePostSetupIntentsIntentBankP24PaymentMethodData {
  AliorBank = 'ALIOR_BANK',
  BankiSpbdzielcze = 'BANKI_SPBDZIELCZE',
  BankMillennium = 'BANK_MILLENNIUM',
  BankNowyBfgSa = 'BANK_NOWY_BFG_SA',
  BankPekaoSa = 'BANK_PEKAO_SA',
  Blik = 'BLIK',
  BnpParibas = 'BNP_PARIBAS',
  Boz = 'BOZ',
  CitiHandlowy = 'CITI_HANDLOWY',
  CreditAgricole = 'CREDIT_AGRICOLE',
  Envelobank = 'ENVELOBANK',
  EtransferPocztowy_24 = 'ETRANSFER_POCZTOWY_24',
  GetinBank = 'GETIN_BANK',
  Ideabank = 'IDEABANK',
  Ing = 'ING',
  Inteligo = 'INTELIGO',
  MbankMtransfer = 'MBANK_MTRANSFER',
  NestPrzelew = 'NEST_PRZELEW',
  NoblePay = 'NOBLE_PAY',
  PbacZIpko = 'PBAC_Z_IPKO',
  PlusBank = 'PLUS_BANK',
  SantanderPrzelew_24 = 'SANTANDER_PRZELEW_24',
  TmobileUsbugiBankowe = 'TMOBILE_USBUGI_BANKOWE',
  ToyotaBank = 'TOYOTA_BANK',
  VolkswagenBank = 'VOLKSWAGEN_BANK'
}

export type StripePostSetupIntentsIntentBillingDetailsPaymentMethodDataInput = {
  address?: InputMaybe<StripeStringOrPostSetupIntentsIntentAddressBillingDetailsPaymentMethodDataUnionInput>;
  email?: InputMaybe<Scalars['JSON']>;
  name?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
};

export type StripePostSetupIntentsIntentBlikPaymentMethodOptionsInput = {
  code?: InputMaybe<Scalars['String']>;
};

export type StripePostSetupIntentsIntentBoletoPaymentMethodDataInput = {
  taxId: Scalars['String'];
};

export enum StripePostSetupIntentsIntentCancelCancellationReason {
  Abandoned = 'ABANDONED',
  Duplicate = 'DUPLICATE',
  RequestedByCustomer = 'REQUESTED_BY_CUSTOMER'
}

export type StripePostSetupIntentsIntentCancelInput = {
  cancellationReason?: InputMaybe<StripePostSetupIntentsIntentCancelCancellationReason>;
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostSetupIntentsIntentCardPaymentMethodOptionsInput = {
  mandateOptions?: InputMaybe<StripePostSetupIntentsIntentMandateOptionsCardPaymentMethodOptionsInput>;
  network?: InputMaybe<StripePostSetupIntentsIntentNetworkCardPaymentMethodOptions>;
  requestThreeDSecure?: InputMaybe<StripePostSetupIntentsIntentRequestThreeDSecureCardPaymentMethodOptions>;
};

export enum StripePostSetupIntentsIntentConfirmAccountHolderTypeUsBankAccountPaymentMethodData {
  Company = 'COMPANY',
  Individual = 'INDIVIDUAL'
}

export enum StripePostSetupIntentsIntentConfirmAccountTypeUsBankAccountPaymentMethodData {
  Checking = 'CHECKING',
  Savings = 'SAVINGS'
}

export type StripePostSetupIntentsIntentConfirmAcssDebitPaymentMethodDataInput = {
  accountNumber: Scalars['String'];
  institutionNumber: Scalars['String'];
  transitNumber: Scalars['String'];
};

export type StripePostSetupIntentsIntentConfirmAcssDebitPaymentMethodOptionsInput = {
  currency?: InputMaybe<StripePostSetupIntentsIntentConfirmCurrencyAcssDebitPaymentMethodOptions>;
  mandateOptions?: InputMaybe<StripePostSetupIntentsIntentConfirmMandateOptionsAcssDebitPaymentMethodOptionsInput>;
  verificationMethod?: InputMaybe<StripePostSetupIntentsIntentConfirmVerificationMethodAcssDebitPaymentMethodOptions>;
};

export type StripePostSetupIntentsIntentConfirmAddressBillingDetailsPaymentMethodDataInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export enum StripePostSetupIntentsIntentConfirmAmountTypeMandateOptionsCardPaymentMethodOptions {
  Fixed = 'FIXED',
  Maximum = 'MAXIMUM'
}

export type StripePostSetupIntentsIntentConfirmAuBecsDebitPaymentMethodDataInput = {
  accountNumber: Scalars['String'];
  bsbNumber: Scalars['String'];
};

export type StripePostSetupIntentsIntentConfirmBacsDebitPaymentMethodDataInput = {
  accountNumber?: InputMaybe<Scalars['String']>;
  sortCode?: InputMaybe<Scalars['String']>;
};

export enum StripePostSetupIntentsIntentConfirmBankEpsPaymentMethodData {
  ArzteUndApothekerBank = 'ARZTE_UND_APOTHEKER_BANK',
  AustrianAnadiBankAg = 'AUSTRIAN_ANADI_BANK_AG',
  BankhausCarlSpangler = 'BANKHAUS_CARL_SPANGLER',
  BankhausSchelhammerUndSchatteraAg = 'BANKHAUS_SCHELHAMMER_UND_SCHATTERA_AG',
  BankAustria = 'BANK_AUSTRIA',
  BawagPskAg = 'BAWAG_PSK_AG',
  BksBankAg = 'BKS_BANK_AG',
  BrullKallmusBankAg = 'BRULL_KALLMUS_BANK_AG',
  BtvVierLanderBank = 'BTV_VIER_LANDER_BANK',
  CapitalBankGraweGruppeAg = 'CAPITAL_BANK_GRAWE_GRUPPE_AG',
  DeutscheBankAg = 'DEUTSCHE_BANK_AG',
  Dolomitenbank = 'DOLOMITENBANK',
  EasybankAg = 'EASYBANK_AG',
  ErsteBankUndSparkassen = 'ERSTE_BANK_UND_SPARKASSEN',
  HypoAlpeadriabankInternationalAg = 'HYPO_ALPEADRIABANK_INTERNATIONAL_AG',
  HypoBankBurgenlandAktiengesellschaft = 'HYPO_BANK_BURGENLAND_AKTIENGESELLSCHAFT',
  HypoNoeLbFurNiederosterreichUWien = 'HYPO_NOE_LB_FUR_NIEDEROSTERREICH_U_WIEN',
  HypoOberosterreichSalzburgSteiermark = 'HYPO_OBEROSTERREICH_SALZBURG_STEIERMARK',
  HypoTirolBankAg = 'HYPO_TIROL_BANK_AG',
  HypoVorarlbergBankAg = 'HYPO_VORARLBERG_BANK_AG',
  MarchfelderBank = 'MARCHFELDER_BANK',
  OberbankAg = 'OBERBANK_AG',
  RaiffeisenBankengruppeOsterreich = 'RAIFFEISEN_BANKENGRUPPE_OSTERREICH',
  SchoellerbankAg = 'SCHOELLERBANK_AG',
  SpardaBankWien = 'SPARDA_BANK_WIEN',
  VolksbankGruppe = 'VOLKSBANK_GRUPPE',
  VolkskreditbankAg = 'VOLKSKREDITBANK_AG',
  VrBankBraunau = 'VR_BANK_BRAUNAU'
}

export enum StripePostSetupIntentsIntentConfirmBankFpxPaymentMethodData {
  AffinBank = 'AFFIN_BANK',
  Agrobank = 'AGROBANK',
  AllianceBank = 'ALLIANCE_BANK',
  Ambank = 'AMBANK',
  BankIslam = 'BANK_ISLAM',
  BankMuamalat = 'BANK_MUAMALAT',
  BankOfChina = 'BANK_OF_CHINA',
  BankRakyat = 'BANK_RAKYAT',
  Bsn = 'BSN',
  Cimb = 'CIMB',
  DeutscheBank = 'DEUTSCHE_BANK',
  HongLeongBank = 'HONG_LEONG_BANK',
  Hsbc = 'HSBC',
  Kfh = 'KFH',
  Maybank_2E = 'MAYBANK_2E',
  Maybank_2U = 'MAYBANK_2U',
  Ocbc = 'OCBC',
  PbEnterprise = 'PB_ENTERPRISE',
  PublicBank = 'PUBLIC_BANK',
  Rhb = 'RHB',
  StandardChartered = 'STANDARD_CHARTERED',
  Uob = 'UOB'
}

export enum StripePostSetupIntentsIntentConfirmBankIdealPaymentMethodData {
  AbnAmro = 'ABN_AMRO',
  AsnBank = 'ASN_BANK',
  Bunq = 'BUNQ',
  Handelsbanken = 'HANDELSBANKEN',
  Ing = 'ING',
  Knab = 'KNAB',
  Moneyou = 'MONEYOU',
  Rabobank = 'RABOBANK',
  Regiobank = 'REGIOBANK',
  Revolut = 'REVOLUT',
  SnsBank = 'SNS_BANK',
  TriodosBank = 'TRIODOS_BANK',
  VanLanschot = 'VAN_LANSCHOT',
  Yoursafe = 'YOURSAFE'
}

export enum StripePostSetupIntentsIntentConfirmBankP24PaymentMethodData {
  AliorBank = 'ALIOR_BANK',
  BankiSpbdzielcze = 'BANKI_SPBDZIELCZE',
  BankMillennium = 'BANK_MILLENNIUM',
  BankNowyBfgSa = 'BANK_NOWY_BFG_SA',
  BankPekaoSa = 'BANK_PEKAO_SA',
  Blik = 'BLIK',
  BnpParibas = 'BNP_PARIBAS',
  Boz = 'BOZ',
  CitiHandlowy = 'CITI_HANDLOWY',
  CreditAgricole = 'CREDIT_AGRICOLE',
  Envelobank = 'ENVELOBANK',
  EtransferPocztowy_24 = 'ETRANSFER_POCZTOWY_24',
  GetinBank = 'GETIN_BANK',
  Ideabank = 'IDEABANK',
  Ing = 'ING',
  Inteligo = 'INTELIGO',
  MbankMtransfer = 'MBANK_MTRANSFER',
  NestPrzelew = 'NEST_PRZELEW',
  NoblePay = 'NOBLE_PAY',
  PbacZIpko = 'PBAC_Z_IPKO',
  PlusBank = 'PLUS_BANK',
  SantanderPrzelew_24 = 'SANTANDER_PRZELEW_24',
  TmobileUsbugiBankowe = 'TMOBILE_USBUGI_BANKOWE',
  ToyotaBank = 'TOYOTA_BANK',
  VolkswagenBank = 'VOLKSWAGEN_BANK'
}

export type StripePostSetupIntentsIntentConfirmBillingDetailsPaymentMethodDataInput = {
  address?: InputMaybe<StripeStringOrPostSetupIntentsIntentConfirmAddressBillingDetailsPaymentMethodDataUnionInput>;
  email?: InputMaybe<Scalars['JSON']>;
  name?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
};

export type StripePostSetupIntentsIntentConfirmBlikPaymentMethodOptionsInput = {
  code?: InputMaybe<Scalars['String']>;
};

export type StripePostSetupIntentsIntentConfirmBoletoPaymentMethodDataInput = {
  taxId: Scalars['String'];
};

export type StripePostSetupIntentsIntentConfirmCardPaymentMethodOptionsInput = {
  mandateOptions?: InputMaybe<StripePostSetupIntentsIntentConfirmMandateOptionsCardPaymentMethodOptionsInput>;
  network?: InputMaybe<StripePostSetupIntentsIntentConfirmNetworkCardPaymentMethodOptions>;
  requestThreeDSecure?: InputMaybe<StripePostSetupIntentsIntentConfirmRequestThreeDSecureCardPaymentMethodOptions>;
};

export enum StripePostSetupIntentsIntentConfirmCountrySofortPaymentMethodData {
  At = 'AT',
  Be = 'BE',
  De = 'DE',
  Es = 'ES',
  It = 'IT',
  Nl = 'NL'
}

export enum StripePostSetupIntentsIntentConfirmCurrencyAcssDebitPaymentMethodOptions {
  Cad = 'CAD',
  Usd = 'USD'
}

export type StripePostSetupIntentsIntentConfirmCustomerAcceptanceMandateDataInput = {
  online: StripePostSetupIntentsIntentConfirmOnlineCustomerAcceptanceMandateDataInput;
  type: StripePostSetupIntentsIntentConfirmTypeCustomerAcceptanceMandateData;
};

export enum StripePostSetupIntentsIntentConfirmDefaultForMandateOptionsAcssDebitPaymentMethodOptions {
  Invoice = 'INVOICE',
  Subscription = 'SUBSCRIPTION'
}

export type StripePostSetupIntentsIntentConfirmDobKlarnaPaymentMethodDataInput = {
  day: Scalars['Int'];
  month: Scalars['Int'];
  year: Scalars['Int'];
};

export type StripePostSetupIntentsIntentConfirmEpsPaymentMethodDataInput = {
  bank?: InputMaybe<StripePostSetupIntentsIntentConfirmBankEpsPaymentMethodData>;
};

export type StripePostSetupIntentsIntentConfirmFinancialConnectionsUsBankAccountPaymentMethodOptionsInput = {
  permissions?: InputMaybe<Array<StripePostSetupIntentsIntentConfirmPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions>>;
  returnUrl?: InputMaybe<Scalars['String']>;
};

export type StripePostSetupIntentsIntentConfirmFpxPaymentMethodDataInput = {
  bank: StripePostSetupIntentsIntentConfirmBankFpxPaymentMethodData;
};

export type StripePostSetupIntentsIntentConfirmIdealPaymentMethodDataInput = {
  bank?: InputMaybe<StripePostSetupIntentsIntentConfirmBankIdealPaymentMethodData>;
};

export type StripePostSetupIntentsIntentConfirmInput = {
  clientSecret?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  mandateData?: InputMaybe<StripePostSetupIntentsIntentConfirmMandateDataOrPostSetupIntentsIntentConfirmMandateDataUnionInput>;
  paymentMethod?: InputMaybe<Scalars['String']>;
  paymentMethodData?: InputMaybe<StripePostSetupIntentsIntentConfirmPaymentMethodDataInput>;
  paymentMethodOptions?: InputMaybe<StripePostSetupIntentsIntentConfirmPaymentMethodOptionsInput>;
  returnUrl?: InputMaybe<Scalars['String']>;
};

export enum StripePostSetupIntentsIntentConfirmIntervalMandateOptionsCardPaymentMethodOptions {
  Day = 'DAY',
  Month = 'MONTH',
  Sporadic = 'SPORADIC',
  Week = 'WEEK',
  Year = 'YEAR'
}

export type StripePostSetupIntentsIntentConfirmKlarnaPaymentMethodDataInput = {
  dob?: InputMaybe<StripePostSetupIntentsIntentConfirmDobKlarnaPaymentMethodDataInput>;
};

export type StripePostSetupIntentsIntentConfirmLinkPaymentMethodOptionsInput = {
  persistentToken?: InputMaybe<Scalars['String']>;
};

export type StripePostSetupIntentsIntentConfirmMandateDataInput = {
  customerAcceptance: StripePostSetupIntentsIntentConfirmCustomerAcceptanceMandateDataInput;
};

export type StripePostSetupIntentsIntentConfirmMandateDataOrPostSetupIntentsIntentConfirmMandateDataUnionInput = {
  stripePostSetupIntentsIntentConfirmMandateDataInput?: InputMaybe<StripePostSetupIntentsIntentConfirmMandateDataInput>;
};

export type StripePostSetupIntentsIntentConfirmMandateOptionsAcssDebitPaymentMethodOptionsInput = {
  customMandateUrl?: InputMaybe<Scalars['JSON']>;
  defaultFor?: InputMaybe<Array<StripePostSetupIntentsIntentConfirmDefaultForMandateOptionsAcssDebitPaymentMethodOptions>>;
  intervalDescription?: InputMaybe<Scalars['String']>;
  paymentSchedule?: InputMaybe<StripePostSetupIntentsIntentConfirmPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions>;
  transactionType?: InputMaybe<StripePostSetupIntentsIntentConfirmTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions>;
};

export type StripePostSetupIntentsIntentConfirmMandateOptionsCardPaymentMethodOptionsInput = {
  amount: Scalars['Int'];
  amountType: StripePostSetupIntentsIntentConfirmAmountTypeMandateOptionsCardPaymentMethodOptions;
  currency: Scalars['String'];
  description?: InputMaybe<Scalars['String']>;
  endDate?: InputMaybe<Scalars['Int']>;
  interval: StripePostSetupIntentsIntentConfirmIntervalMandateOptionsCardPaymentMethodOptions;
  intervalCount?: InputMaybe<Scalars['Int']>;
  reference: Scalars['String'];
  startDate: Scalars['Int'];
  supportedTypes?: InputMaybe<Array<StripePostSetupIntentsIntentConfirmSupportedTypesMandateOptionsCardPaymentMethodOptions>>;
};

export enum StripePostSetupIntentsIntentConfirmNetworkCardPaymentMethodOptions {
  Amex = 'AMEX',
  CartesBancaires = 'CARTES_BANCAIRES',
  Diners = 'DINERS',
  Discover = 'DISCOVER',
  EftposAu = 'EFTPOS_AU',
  Interac = 'INTERAC',
  Jcb = 'JCB',
  Mastercard = 'MASTERCARD',
  Unionpay = 'UNIONPAY',
  Unknown = 'UNKNOWN',
  Visa = 'VISA'
}

export type StripePostSetupIntentsIntentConfirmNetworksUsBankAccountPaymentMethodOptionsInput = {
  requested?: InputMaybe<Array<StripePostSetupIntentsIntentConfirmRequestedNetworksUsBankAccountPaymentMethodOptions>>;
};

export type StripePostSetupIntentsIntentConfirmOnlineCustomerAcceptanceMandateDataInput = {
  ipAddress?: InputMaybe<Scalars['String']>;
  userAgent?: InputMaybe<Scalars['String']>;
};

export type StripePostSetupIntentsIntentConfirmP24PaymentMethodDataInput = {
  bank?: InputMaybe<StripePostSetupIntentsIntentConfirmBankP24PaymentMethodData>;
};

export type StripePostSetupIntentsIntentConfirmPaymentMethodDataInput = {
  acssDebit?: InputMaybe<StripePostSetupIntentsIntentConfirmAcssDebitPaymentMethodDataInput>;
  affirm?: InputMaybe<Scalars['JSON']>;
  afterpayClearpay?: InputMaybe<Scalars['JSON']>;
  alipay?: InputMaybe<Scalars['JSON']>;
  auBecsDebit?: InputMaybe<StripePostSetupIntentsIntentConfirmAuBecsDebitPaymentMethodDataInput>;
  bacsDebit?: InputMaybe<StripePostSetupIntentsIntentConfirmBacsDebitPaymentMethodDataInput>;
  bancontact?: InputMaybe<Scalars['JSON']>;
  billingDetails?: InputMaybe<StripePostSetupIntentsIntentConfirmBillingDetailsPaymentMethodDataInput>;
  blik?: InputMaybe<Scalars['JSON']>;
  boleto?: InputMaybe<StripePostSetupIntentsIntentConfirmBoletoPaymentMethodDataInput>;
  cashapp?: InputMaybe<Scalars['JSON']>;
  customerBalance?: InputMaybe<Scalars['JSON']>;
  eps?: InputMaybe<StripePostSetupIntentsIntentConfirmEpsPaymentMethodDataInput>;
  fpx?: InputMaybe<StripePostSetupIntentsIntentConfirmFpxPaymentMethodDataInput>;
  giropay?: InputMaybe<Scalars['JSON']>;
  grabpay?: InputMaybe<Scalars['JSON']>;
  ideal?: InputMaybe<StripePostSetupIntentsIntentConfirmIdealPaymentMethodDataInput>;
  interacPresent?: InputMaybe<Scalars['JSON']>;
  klarna?: InputMaybe<StripePostSetupIntentsIntentConfirmKlarnaPaymentMethodDataInput>;
  konbini?: InputMaybe<Scalars['JSON']>;
  link?: InputMaybe<Scalars['JSON']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  oxxo?: InputMaybe<Scalars['JSON']>;
  p24?: InputMaybe<StripePostSetupIntentsIntentConfirmP24PaymentMethodDataInput>;
  paynow?: InputMaybe<Scalars['JSON']>;
  paypal?: InputMaybe<Scalars['JSON']>;
  pix?: InputMaybe<Scalars['JSON']>;
  promptpay?: InputMaybe<Scalars['JSON']>;
  radarOptions?: InputMaybe<StripePostSetupIntentsIntentConfirmRadarOptionsPaymentMethodDataInput>;
  sepaDebit?: InputMaybe<StripePostSetupIntentsIntentConfirmSepaDebitPaymentMethodDataInput>;
  sofort?: InputMaybe<StripePostSetupIntentsIntentConfirmSofortPaymentMethodDataInput>;
  type: StripePostSetupIntentsIntentConfirmTypePaymentMethodData;
  usBankAccount?: InputMaybe<StripePostSetupIntentsIntentConfirmUsBankAccountPaymentMethodDataInput>;
  wechatPay?: InputMaybe<Scalars['JSON']>;
};

export type StripePostSetupIntentsIntentConfirmPaymentMethodOptionsInput = {
  acssDebit?: InputMaybe<StripePostSetupIntentsIntentConfirmAcssDebitPaymentMethodOptionsInput>;
  blik?: InputMaybe<StripePostSetupIntentsIntentConfirmBlikPaymentMethodOptionsInput>;
  card?: InputMaybe<StripePostSetupIntentsIntentConfirmCardPaymentMethodOptionsInput>;
  link?: InputMaybe<StripePostSetupIntentsIntentConfirmLinkPaymentMethodOptionsInput>;
  paypal?: InputMaybe<StripePostSetupIntentsIntentConfirmPaypalPaymentMethodOptionsInput>;
  sepaDebit?: InputMaybe<StripePostSetupIntentsIntentConfirmSepaDebitPaymentMethodOptionsInput>;
  usBankAccount?: InputMaybe<StripePostSetupIntentsIntentConfirmUsBankAccountPaymentMethodOptionsInput>;
};

export enum StripePostSetupIntentsIntentConfirmPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions {
  Combined = 'COMBINED',
  Interval = 'INTERVAL',
  Sporadic = 'SPORADIC'
}

export type StripePostSetupIntentsIntentConfirmPaypalPaymentMethodOptionsInput = {
  billingAgreementId?: InputMaybe<Scalars['String']>;
};

export enum StripePostSetupIntentsIntentConfirmPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions {
  Balances = 'BALANCES',
  Ownership = 'OWNERSHIP',
  PaymentMethod = 'PAYMENT_METHOD',
  Transactions = 'TRANSACTIONS'
}

export type StripePostSetupIntentsIntentConfirmRadarOptionsPaymentMethodDataInput = {
  session?: InputMaybe<Scalars['String']>;
};

export enum StripePostSetupIntentsIntentConfirmRequestThreeDSecureCardPaymentMethodOptions {
  Any = 'ANY',
  Automatic = 'AUTOMATIC'
}

export enum StripePostSetupIntentsIntentConfirmRequestedNetworksUsBankAccountPaymentMethodOptions {
  Ach = 'ACH',
  UsDomesticWire = 'US_DOMESTIC_WIRE'
}

export type StripePostSetupIntentsIntentConfirmSepaDebitPaymentMethodDataInput = {
  iban: Scalars['String'];
};

export type StripePostSetupIntentsIntentConfirmSepaDebitPaymentMethodOptionsInput = {
  mandateOptions?: InputMaybe<Scalars['JSON']>;
};

export type StripePostSetupIntentsIntentConfirmSofortPaymentMethodDataInput = {
  country: StripePostSetupIntentsIntentConfirmCountrySofortPaymentMethodData;
};

export enum StripePostSetupIntentsIntentConfirmSupportedTypesMandateOptionsCardPaymentMethodOptions {
  India = 'INDIA'
}

export enum StripePostSetupIntentsIntentConfirmTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions {
  Business = 'BUSINESS',
  Personal = 'PERSONAL'
}

export enum StripePostSetupIntentsIntentConfirmTypeCustomerAcceptanceMandateData {
  Online = 'ONLINE'
}

export enum StripePostSetupIntentsIntentConfirmTypePaymentMethodData {
  AcssDebit = 'ACSS_DEBIT',
  Affirm = 'AFFIRM',
  AfterpayClearpay = 'AFTERPAY_CLEARPAY',
  Alipay = 'ALIPAY',
  AuBecsDebit = 'AU_BECS_DEBIT',
  BacsDebit = 'BACS_DEBIT',
  Bancontact = 'BANCONTACT',
  Blik = 'BLIK',
  Boleto = 'BOLETO',
  Cashapp = 'CASHAPP',
  CustomerBalance = 'CUSTOMER_BALANCE',
  Eps = 'EPS',
  Fpx = 'FPX',
  Giropay = 'GIROPAY',
  Grabpay = 'GRABPAY',
  Ideal = 'IDEAL',
  Klarna = 'KLARNA',
  Konbini = 'KONBINI',
  Link = 'LINK',
  Oxxo = 'OXXO',
  Paynow = 'PAYNOW',
  Paypal = 'PAYPAL',
  Pix = 'PIX',
  Promptpay = 'PROMPTPAY',
  P_24 = 'P_24',
  SepaDebit = 'SEPA_DEBIT',
  Sofort = 'SOFORT',
  UsBankAccount = 'US_BANK_ACCOUNT',
  WechatPay = 'WECHAT_PAY'
}

export type StripePostSetupIntentsIntentConfirmUsBankAccountPaymentMethodDataInput = {
  accountHolderType?: InputMaybe<StripePostSetupIntentsIntentConfirmAccountHolderTypeUsBankAccountPaymentMethodData>;
  accountNumber?: InputMaybe<Scalars['String']>;
  accountType?: InputMaybe<StripePostSetupIntentsIntentConfirmAccountTypeUsBankAccountPaymentMethodData>;
  financialConnectionsAccount?: InputMaybe<Scalars['String']>;
  routingNumber?: InputMaybe<Scalars['String']>;
};

export type StripePostSetupIntentsIntentConfirmUsBankAccountPaymentMethodOptionsInput = {
  financialConnections?: InputMaybe<StripePostSetupIntentsIntentConfirmFinancialConnectionsUsBankAccountPaymentMethodOptionsInput>;
  networks?: InputMaybe<StripePostSetupIntentsIntentConfirmNetworksUsBankAccountPaymentMethodOptionsInput>;
  verificationMethod?: InputMaybe<StripePostSetupIntentsIntentConfirmVerificationMethodUsBankAccountPaymentMethodOptions>;
};

export enum StripePostSetupIntentsIntentConfirmVerificationMethodAcssDebitPaymentMethodOptions {
  Automatic = 'AUTOMATIC',
  Instant = 'INSTANT',
  Microdeposits = 'MICRODEPOSITS'
}

export enum StripePostSetupIntentsIntentConfirmVerificationMethodUsBankAccountPaymentMethodOptions {
  Automatic = 'AUTOMATIC',
  Instant = 'INSTANT',
  Microdeposits = 'MICRODEPOSITS'
}

export enum StripePostSetupIntentsIntentCountrySofortPaymentMethodData {
  At = 'AT',
  Be = 'BE',
  De = 'DE',
  Es = 'ES',
  It = 'IT',
  Nl = 'NL'
}

export enum StripePostSetupIntentsIntentCurrencyAcssDebitPaymentMethodOptions {
  Cad = 'CAD',
  Usd = 'USD'
}

export enum StripePostSetupIntentsIntentDefaultForMandateOptionsAcssDebitPaymentMethodOptions {
  Invoice = 'INVOICE',
  Subscription = 'SUBSCRIPTION'
}

export type StripePostSetupIntentsIntentDobKlarnaPaymentMethodDataInput = {
  day: Scalars['Int'];
  month: Scalars['Int'];
  year: Scalars['Int'];
};

export type StripePostSetupIntentsIntentEpsPaymentMethodDataInput = {
  bank?: InputMaybe<StripePostSetupIntentsIntentBankEpsPaymentMethodData>;
};

export type StripePostSetupIntentsIntentFinancialConnectionsUsBankAccountPaymentMethodOptionsInput = {
  permissions?: InputMaybe<Array<StripePostSetupIntentsIntentPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions>>;
  returnUrl?: InputMaybe<Scalars['String']>;
};

export enum StripePostSetupIntentsIntentFlowDirections {
  Inbound = 'INBOUND',
  Outbound = 'OUTBOUND'
}

export type StripePostSetupIntentsIntentFpxPaymentMethodDataInput = {
  bank: StripePostSetupIntentsIntentBankFpxPaymentMethodData;
};

export type StripePostSetupIntentsIntentIdealPaymentMethodDataInput = {
  bank?: InputMaybe<StripePostSetupIntentsIntentBankIdealPaymentMethodData>;
};

export type StripePostSetupIntentsIntentInput = {
  attachToSelf?: InputMaybe<Scalars['Boolean']>;
  customer?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  flowDirections?: InputMaybe<Array<StripePostSetupIntentsIntentFlowDirections>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  paymentMethod?: InputMaybe<Scalars['String']>;
  paymentMethodData?: InputMaybe<StripePostSetupIntentsIntentPaymentMethodDataInput>;
  paymentMethodOptions?: InputMaybe<StripePostSetupIntentsIntentPaymentMethodOptionsInput>;
  paymentMethodTypes?: InputMaybe<Array<Scalars['String']>>;
};

export enum StripePostSetupIntentsIntentIntervalMandateOptionsCardPaymentMethodOptions {
  Day = 'DAY',
  Month = 'MONTH',
  Sporadic = 'SPORADIC',
  Week = 'WEEK',
  Year = 'YEAR'
}

export type StripePostSetupIntentsIntentKlarnaPaymentMethodDataInput = {
  dob?: InputMaybe<StripePostSetupIntentsIntentDobKlarnaPaymentMethodDataInput>;
};

export type StripePostSetupIntentsIntentLinkPaymentMethodOptionsInput = {
  persistentToken?: InputMaybe<Scalars['String']>;
};

export type StripePostSetupIntentsIntentMandateOptionsAcssDebitPaymentMethodOptionsInput = {
  customMandateUrl?: InputMaybe<Scalars['JSON']>;
  defaultFor?: InputMaybe<Array<StripePostSetupIntentsIntentDefaultForMandateOptionsAcssDebitPaymentMethodOptions>>;
  intervalDescription?: InputMaybe<Scalars['String']>;
  paymentSchedule?: InputMaybe<StripePostSetupIntentsIntentPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions>;
  transactionType?: InputMaybe<StripePostSetupIntentsIntentTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions>;
};

export type StripePostSetupIntentsIntentMandateOptionsCardPaymentMethodOptionsInput = {
  amount: Scalars['Int'];
  amountType: StripePostSetupIntentsIntentAmountTypeMandateOptionsCardPaymentMethodOptions;
  currency: Scalars['String'];
  description?: InputMaybe<Scalars['String']>;
  endDate?: InputMaybe<Scalars['Int']>;
  interval: StripePostSetupIntentsIntentIntervalMandateOptionsCardPaymentMethodOptions;
  intervalCount?: InputMaybe<Scalars['Int']>;
  reference: Scalars['String'];
  startDate: Scalars['Int'];
  supportedTypes?: InputMaybe<Array<StripePostSetupIntentsIntentSupportedTypesMandateOptionsCardPaymentMethodOptions>>;
};

export enum StripePostSetupIntentsIntentNetworkCardPaymentMethodOptions {
  Amex = 'AMEX',
  CartesBancaires = 'CARTES_BANCAIRES',
  Diners = 'DINERS',
  Discover = 'DISCOVER',
  EftposAu = 'EFTPOS_AU',
  Interac = 'INTERAC',
  Jcb = 'JCB',
  Mastercard = 'MASTERCARD',
  Unionpay = 'UNIONPAY',
  Unknown = 'UNKNOWN',
  Visa = 'VISA'
}

export type StripePostSetupIntentsIntentNetworksUsBankAccountPaymentMethodOptionsInput = {
  requested?: InputMaybe<Array<StripePostSetupIntentsIntentRequestedNetworksUsBankAccountPaymentMethodOptions>>;
};

export type StripePostSetupIntentsIntentP24PaymentMethodDataInput = {
  bank?: InputMaybe<StripePostSetupIntentsIntentBankP24PaymentMethodData>;
};

export type StripePostSetupIntentsIntentPaymentMethodDataInput = {
  acssDebit?: InputMaybe<StripePostSetupIntentsIntentAcssDebitPaymentMethodDataInput>;
  affirm?: InputMaybe<Scalars['JSON']>;
  afterpayClearpay?: InputMaybe<Scalars['JSON']>;
  alipay?: InputMaybe<Scalars['JSON']>;
  auBecsDebit?: InputMaybe<StripePostSetupIntentsIntentAuBecsDebitPaymentMethodDataInput>;
  bacsDebit?: InputMaybe<StripePostSetupIntentsIntentBacsDebitPaymentMethodDataInput>;
  bancontact?: InputMaybe<Scalars['JSON']>;
  billingDetails?: InputMaybe<StripePostSetupIntentsIntentBillingDetailsPaymentMethodDataInput>;
  blik?: InputMaybe<Scalars['JSON']>;
  boleto?: InputMaybe<StripePostSetupIntentsIntentBoletoPaymentMethodDataInput>;
  cashapp?: InputMaybe<Scalars['JSON']>;
  customerBalance?: InputMaybe<Scalars['JSON']>;
  eps?: InputMaybe<StripePostSetupIntentsIntentEpsPaymentMethodDataInput>;
  fpx?: InputMaybe<StripePostSetupIntentsIntentFpxPaymentMethodDataInput>;
  giropay?: InputMaybe<Scalars['JSON']>;
  grabpay?: InputMaybe<Scalars['JSON']>;
  ideal?: InputMaybe<StripePostSetupIntentsIntentIdealPaymentMethodDataInput>;
  interacPresent?: InputMaybe<Scalars['JSON']>;
  klarna?: InputMaybe<StripePostSetupIntentsIntentKlarnaPaymentMethodDataInput>;
  konbini?: InputMaybe<Scalars['JSON']>;
  link?: InputMaybe<Scalars['JSON']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  oxxo?: InputMaybe<Scalars['JSON']>;
  p24?: InputMaybe<StripePostSetupIntentsIntentP24PaymentMethodDataInput>;
  paynow?: InputMaybe<Scalars['JSON']>;
  paypal?: InputMaybe<Scalars['JSON']>;
  pix?: InputMaybe<Scalars['JSON']>;
  promptpay?: InputMaybe<Scalars['JSON']>;
  radarOptions?: InputMaybe<StripePostSetupIntentsIntentRadarOptionsPaymentMethodDataInput>;
  sepaDebit?: InputMaybe<StripePostSetupIntentsIntentSepaDebitPaymentMethodDataInput>;
  sofort?: InputMaybe<StripePostSetupIntentsIntentSofortPaymentMethodDataInput>;
  type: StripePostSetupIntentsIntentTypePaymentMethodData;
  usBankAccount?: InputMaybe<StripePostSetupIntentsIntentUsBankAccountPaymentMethodDataInput>;
  wechatPay?: InputMaybe<Scalars['JSON']>;
};

export type StripePostSetupIntentsIntentPaymentMethodOptionsInput = {
  acssDebit?: InputMaybe<StripePostSetupIntentsIntentAcssDebitPaymentMethodOptionsInput>;
  blik?: InputMaybe<StripePostSetupIntentsIntentBlikPaymentMethodOptionsInput>;
  card?: InputMaybe<StripePostSetupIntentsIntentCardPaymentMethodOptionsInput>;
  link?: InputMaybe<StripePostSetupIntentsIntentLinkPaymentMethodOptionsInput>;
  paypal?: InputMaybe<StripePostSetupIntentsIntentPaypalPaymentMethodOptionsInput>;
  sepaDebit?: InputMaybe<StripePostSetupIntentsIntentSepaDebitPaymentMethodOptionsInput>;
  usBankAccount?: InputMaybe<StripePostSetupIntentsIntentUsBankAccountPaymentMethodOptionsInput>;
};

export enum StripePostSetupIntentsIntentPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions {
  Combined = 'COMBINED',
  Interval = 'INTERVAL',
  Sporadic = 'SPORADIC'
}

export type StripePostSetupIntentsIntentPaypalPaymentMethodOptionsInput = {
  billingAgreementId?: InputMaybe<Scalars['String']>;
};

export enum StripePostSetupIntentsIntentPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions {
  Balances = 'BALANCES',
  Ownership = 'OWNERSHIP',
  PaymentMethod = 'PAYMENT_METHOD',
  Transactions = 'TRANSACTIONS'
}

export type StripePostSetupIntentsIntentRadarOptionsPaymentMethodDataInput = {
  session?: InputMaybe<Scalars['String']>;
};

export enum StripePostSetupIntentsIntentRequestThreeDSecureCardPaymentMethodOptions {
  Any = 'ANY',
  Automatic = 'AUTOMATIC'
}

export enum StripePostSetupIntentsIntentRequestedNetworksUsBankAccountPaymentMethodOptions {
  Ach = 'ACH',
  UsDomesticWire = 'US_DOMESTIC_WIRE'
}

export type StripePostSetupIntentsIntentSepaDebitPaymentMethodDataInput = {
  iban: Scalars['String'];
};

export type StripePostSetupIntentsIntentSepaDebitPaymentMethodOptionsInput = {
  mandateOptions?: InputMaybe<Scalars['JSON']>;
};

export type StripePostSetupIntentsIntentSofortPaymentMethodDataInput = {
  country: StripePostSetupIntentsIntentCountrySofortPaymentMethodData;
};

export enum StripePostSetupIntentsIntentSupportedTypesMandateOptionsCardPaymentMethodOptions {
  India = 'INDIA'
}

export enum StripePostSetupIntentsIntentTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions {
  Business = 'BUSINESS',
  Personal = 'PERSONAL'
}

export enum StripePostSetupIntentsIntentTypePaymentMethodData {
  AcssDebit = 'ACSS_DEBIT',
  Affirm = 'AFFIRM',
  AfterpayClearpay = 'AFTERPAY_CLEARPAY',
  Alipay = 'ALIPAY',
  AuBecsDebit = 'AU_BECS_DEBIT',
  BacsDebit = 'BACS_DEBIT',
  Bancontact = 'BANCONTACT',
  Blik = 'BLIK',
  Boleto = 'BOLETO',
  Cashapp = 'CASHAPP',
  CustomerBalance = 'CUSTOMER_BALANCE',
  Eps = 'EPS',
  Fpx = 'FPX',
  Giropay = 'GIROPAY',
  Grabpay = 'GRABPAY',
  Ideal = 'IDEAL',
  Klarna = 'KLARNA',
  Konbini = 'KONBINI',
  Link = 'LINK',
  Oxxo = 'OXXO',
  Paynow = 'PAYNOW',
  Paypal = 'PAYPAL',
  Pix = 'PIX',
  Promptpay = 'PROMPTPAY',
  P_24 = 'P_24',
  SepaDebit = 'SEPA_DEBIT',
  Sofort = 'SOFORT',
  UsBankAccount = 'US_BANK_ACCOUNT',
  WechatPay = 'WECHAT_PAY'
}

export type StripePostSetupIntentsIntentUsBankAccountPaymentMethodDataInput = {
  accountHolderType?: InputMaybe<StripePostSetupIntentsIntentAccountHolderTypeUsBankAccountPaymentMethodData>;
  accountNumber?: InputMaybe<Scalars['String']>;
  accountType?: InputMaybe<StripePostSetupIntentsIntentAccountTypeUsBankAccountPaymentMethodData>;
  financialConnectionsAccount?: InputMaybe<Scalars['String']>;
  routingNumber?: InputMaybe<Scalars['String']>;
};

export type StripePostSetupIntentsIntentUsBankAccountPaymentMethodOptionsInput = {
  financialConnections?: InputMaybe<StripePostSetupIntentsIntentFinancialConnectionsUsBankAccountPaymentMethodOptionsInput>;
  networks?: InputMaybe<StripePostSetupIntentsIntentNetworksUsBankAccountPaymentMethodOptionsInput>;
  verificationMethod?: InputMaybe<StripePostSetupIntentsIntentVerificationMethodUsBankAccountPaymentMethodOptions>;
};

export enum StripePostSetupIntentsIntentVerificationMethodAcssDebitPaymentMethodOptions {
  Automatic = 'AUTOMATIC',
  Instant = 'INSTANT',
  Microdeposits = 'MICRODEPOSITS'
}

export enum StripePostSetupIntentsIntentVerificationMethodUsBankAccountPaymentMethodOptions {
  Automatic = 'AUTOMATIC',
  Instant = 'INSTANT',
  Microdeposits = 'MICRODEPOSITS'
}

export type StripePostSetupIntentsIntentVerifyMicrodepositsInput = {
  amounts?: InputMaybe<Array<Scalars['Int']>>;
  clientSecret?: InputMaybe<Scalars['String']>;
  descriptorCode?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export enum StripePostSetupIntentsIntervalMandateOptionsCardPaymentMethodOptions {
  Day = 'DAY',
  Month = 'MONTH',
  Sporadic = 'SPORADIC',
  Week = 'WEEK',
  Year = 'YEAR'
}

export type StripePostSetupIntentsKlarnaPaymentMethodDataInput = {
  dob?: InputMaybe<StripePostSetupIntentsDobKlarnaPaymentMethodDataInput>;
};

export type StripePostSetupIntentsLinkPaymentMethodOptionsInput = {
  persistentToken?: InputMaybe<Scalars['String']>;
};

export type StripePostSetupIntentsMandateDataInput = {
  customerAcceptance: StripePostSetupIntentsCustomerAcceptanceMandateDataInput;
};

export type StripePostSetupIntentsMandateOptionsAcssDebitPaymentMethodOptionsInput = {
  customMandateUrl?: InputMaybe<Scalars['JSON']>;
  defaultFor?: InputMaybe<Array<StripePostSetupIntentsDefaultForMandateOptionsAcssDebitPaymentMethodOptions>>;
  intervalDescription?: InputMaybe<Scalars['String']>;
  paymentSchedule?: InputMaybe<StripePostSetupIntentsPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions>;
  transactionType?: InputMaybe<StripePostSetupIntentsTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions>;
};

export type StripePostSetupIntentsMandateOptionsCardPaymentMethodOptionsInput = {
  amount: Scalars['Int'];
  amountType: StripePostSetupIntentsAmountTypeMandateOptionsCardPaymentMethodOptions;
  currency: Scalars['String'];
  description?: InputMaybe<Scalars['String']>;
  endDate?: InputMaybe<Scalars['Int']>;
  interval: StripePostSetupIntentsIntervalMandateOptionsCardPaymentMethodOptions;
  intervalCount?: InputMaybe<Scalars['Int']>;
  reference: Scalars['String'];
  startDate: Scalars['Int'];
  supportedTypes?: InputMaybe<Array<StripePostSetupIntentsSupportedTypesMandateOptionsCardPaymentMethodOptions>>;
};

export enum StripePostSetupIntentsNetworkCardPaymentMethodOptions {
  Amex = 'AMEX',
  CartesBancaires = 'CARTES_BANCAIRES',
  Diners = 'DINERS',
  Discover = 'DISCOVER',
  EftposAu = 'EFTPOS_AU',
  Interac = 'INTERAC',
  Jcb = 'JCB',
  Mastercard = 'MASTERCARD',
  Unionpay = 'UNIONPAY',
  Unknown = 'UNKNOWN',
  Visa = 'VISA'
}

export type StripePostSetupIntentsNetworksUsBankAccountPaymentMethodOptionsInput = {
  requested?: InputMaybe<Array<StripePostSetupIntentsRequestedNetworksUsBankAccountPaymentMethodOptions>>;
};

export type StripePostSetupIntentsOnlineCustomerAcceptanceMandateDataInput = {
  ipAddress: Scalars['String'];
  userAgent: Scalars['String'];
};

export type StripePostSetupIntentsP24PaymentMethodDataInput = {
  bank?: InputMaybe<StripePostSetupIntentsBankP24PaymentMethodData>;
};

export type StripePostSetupIntentsPaymentMethodDataInput = {
  acssDebit?: InputMaybe<StripePostSetupIntentsAcssDebitPaymentMethodDataInput>;
  affirm?: InputMaybe<Scalars['JSON']>;
  afterpayClearpay?: InputMaybe<Scalars['JSON']>;
  alipay?: InputMaybe<Scalars['JSON']>;
  auBecsDebit?: InputMaybe<StripePostSetupIntentsAuBecsDebitPaymentMethodDataInput>;
  bacsDebit?: InputMaybe<StripePostSetupIntentsBacsDebitPaymentMethodDataInput>;
  bancontact?: InputMaybe<Scalars['JSON']>;
  billingDetails?: InputMaybe<StripePostSetupIntentsBillingDetailsPaymentMethodDataInput>;
  blik?: InputMaybe<Scalars['JSON']>;
  boleto?: InputMaybe<StripePostSetupIntentsBoletoPaymentMethodDataInput>;
  cashapp?: InputMaybe<Scalars['JSON']>;
  customerBalance?: InputMaybe<Scalars['JSON']>;
  eps?: InputMaybe<StripePostSetupIntentsEpsPaymentMethodDataInput>;
  fpx?: InputMaybe<StripePostSetupIntentsFpxPaymentMethodDataInput>;
  giropay?: InputMaybe<Scalars['JSON']>;
  grabpay?: InputMaybe<Scalars['JSON']>;
  ideal?: InputMaybe<StripePostSetupIntentsIdealPaymentMethodDataInput>;
  interacPresent?: InputMaybe<Scalars['JSON']>;
  klarna?: InputMaybe<StripePostSetupIntentsKlarnaPaymentMethodDataInput>;
  konbini?: InputMaybe<Scalars['JSON']>;
  link?: InputMaybe<Scalars['JSON']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  oxxo?: InputMaybe<Scalars['JSON']>;
  p24?: InputMaybe<StripePostSetupIntentsP24PaymentMethodDataInput>;
  paynow?: InputMaybe<Scalars['JSON']>;
  paypal?: InputMaybe<Scalars['JSON']>;
  pix?: InputMaybe<Scalars['JSON']>;
  promptpay?: InputMaybe<Scalars['JSON']>;
  radarOptions?: InputMaybe<StripePostSetupIntentsRadarOptionsPaymentMethodDataInput>;
  sepaDebit?: InputMaybe<StripePostSetupIntentsSepaDebitPaymentMethodDataInput>;
  sofort?: InputMaybe<StripePostSetupIntentsSofortPaymentMethodDataInput>;
  type: StripePostSetupIntentsTypePaymentMethodData;
  usBankAccount?: InputMaybe<StripePostSetupIntentsUsBankAccountPaymentMethodDataInput>;
  wechatPay?: InputMaybe<Scalars['JSON']>;
};

export type StripePostSetupIntentsPaymentMethodOptionsInput = {
  acssDebit?: InputMaybe<StripePostSetupIntentsAcssDebitPaymentMethodOptionsInput>;
  blik?: InputMaybe<StripePostSetupIntentsBlikPaymentMethodOptionsInput>;
  card?: InputMaybe<StripePostSetupIntentsCardPaymentMethodOptionsInput>;
  link?: InputMaybe<StripePostSetupIntentsLinkPaymentMethodOptionsInput>;
  paypal?: InputMaybe<StripePostSetupIntentsPaypalPaymentMethodOptionsInput>;
  sepaDebit?: InputMaybe<StripePostSetupIntentsSepaDebitPaymentMethodOptionsInput>;
  usBankAccount?: InputMaybe<StripePostSetupIntentsUsBankAccountPaymentMethodOptionsInput>;
};

export enum StripePostSetupIntentsPaymentScheduleMandateOptionsAcssDebitPaymentMethodOptions {
  Combined = 'COMBINED',
  Interval = 'INTERVAL',
  Sporadic = 'SPORADIC'
}

export type StripePostSetupIntentsPaypalPaymentMethodOptionsInput = {
  billingAgreementId?: InputMaybe<Scalars['String']>;
};

export enum StripePostSetupIntentsPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptions {
  Balances = 'BALANCES',
  Ownership = 'OWNERSHIP',
  PaymentMethod = 'PAYMENT_METHOD',
  Transactions = 'TRANSACTIONS'
}

export type StripePostSetupIntentsRadarOptionsPaymentMethodDataInput = {
  session?: InputMaybe<Scalars['String']>;
};

export enum StripePostSetupIntentsRequestThreeDSecureCardPaymentMethodOptions {
  Any = 'ANY',
  Automatic = 'AUTOMATIC'
}

export enum StripePostSetupIntentsRequestedNetworksUsBankAccountPaymentMethodOptions {
  Ach = 'ACH',
  UsDomesticWire = 'US_DOMESTIC_WIRE'
}

export type StripePostSetupIntentsSepaDebitPaymentMethodDataInput = {
  iban: Scalars['String'];
};

export type StripePostSetupIntentsSepaDebitPaymentMethodOptionsInput = {
  mandateOptions?: InputMaybe<Scalars['JSON']>;
};

export type StripePostSetupIntentsSingleUseInput = {
  amount: Scalars['Int'];
  currency: Scalars['String'];
};

export type StripePostSetupIntentsSofortPaymentMethodDataInput = {
  country: StripePostSetupIntentsCountrySofortPaymentMethodData;
};

export enum StripePostSetupIntentsSupportedTypesMandateOptionsCardPaymentMethodOptions {
  India = 'INDIA'
}

export enum StripePostSetupIntentsTransactionTypeMandateOptionsAcssDebitPaymentMethodOptions {
  Business = 'BUSINESS',
  Personal = 'PERSONAL'
}

export enum StripePostSetupIntentsTypeCustomerAcceptanceMandateData {
  Offline = 'OFFLINE',
  Online = 'ONLINE'
}

export enum StripePostSetupIntentsTypePaymentMethodData {
  AcssDebit = 'ACSS_DEBIT',
  Affirm = 'AFFIRM',
  AfterpayClearpay = 'AFTERPAY_CLEARPAY',
  Alipay = 'ALIPAY',
  AuBecsDebit = 'AU_BECS_DEBIT',
  BacsDebit = 'BACS_DEBIT',
  Bancontact = 'BANCONTACT',
  Blik = 'BLIK',
  Boleto = 'BOLETO',
  Cashapp = 'CASHAPP',
  CustomerBalance = 'CUSTOMER_BALANCE',
  Eps = 'EPS',
  Fpx = 'FPX',
  Giropay = 'GIROPAY',
  Grabpay = 'GRABPAY',
  Ideal = 'IDEAL',
  Klarna = 'KLARNA',
  Konbini = 'KONBINI',
  Link = 'LINK',
  Oxxo = 'OXXO',
  Paynow = 'PAYNOW',
  Paypal = 'PAYPAL',
  Pix = 'PIX',
  Promptpay = 'PROMPTPAY',
  P_24 = 'P_24',
  SepaDebit = 'SEPA_DEBIT',
  Sofort = 'SOFORT',
  UsBankAccount = 'US_BANK_ACCOUNT',
  WechatPay = 'WECHAT_PAY'
}

export type StripePostSetupIntentsUsBankAccountPaymentMethodDataInput = {
  accountHolderType?: InputMaybe<StripePostSetupIntentsAccountHolderTypeUsBankAccountPaymentMethodData>;
  accountNumber?: InputMaybe<Scalars['String']>;
  accountType?: InputMaybe<StripePostSetupIntentsAccountTypeUsBankAccountPaymentMethodData>;
  financialConnectionsAccount?: InputMaybe<Scalars['String']>;
  routingNumber?: InputMaybe<Scalars['String']>;
};

export type StripePostSetupIntentsUsBankAccountPaymentMethodOptionsInput = {
  financialConnections?: InputMaybe<StripePostSetupIntentsFinancialConnectionsUsBankAccountPaymentMethodOptionsInput>;
  networks?: InputMaybe<StripePostSetupIntentsNetworksUsBankAccountPaymentMethodOptionsInput>;
  verificationMethod?: InputMaybe<StripePostSetupIntentsVerificationMethodUsBankAccountPaymentMethodOptions>;
};

export enum StripePostSetupIntentsUsage {
  OffSession = 'OFF_SESSION',
  OnSession = 'ON_SESSION'
}

export enum StripePostSetupIntentsVerificationMethodAcssDebitPaymentMethodOptions {
  Automatic = 'AUTOMATIC',
  Instant = 'INSTANT',
  Microdeposits = 'MICRODEPOSITS'
}

export enum StripePostSetupIntentsVerificationMethodUsBankAccountPaymentMethodOptions {
  Automatic = 'AUTOMATIC',
  Instant = 'INSTANT',
  Microdeposits = 'MICRODEPOSITS'
}

export type StripePostShippingRatesDeliveryEstimateInput = {
  maximum?: InputMaybe<StripePostShippingRatesMaximumDeliveryEstimateInput>;
  minimum?: InputMaybe<StripePostShippingRatesMinimumDeliveryEstimateInput>;
};

export type StripePostShippingRatesFixedAmountInput = {
  amount: Scalars['Int'];
  currency: Scalars['String'];
  currencyOptions?: InputMaybe<Scalars['JSON']>;
};

export type StripePostShippingRatesInput = {
  deliveryEstimate?: InputMaybe<StripePostShippingRatesDeliveryEstimateInput>;
  displayName: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
  fixedAmount?: InputMaybe<StripePostShippingRatesFixedAmountInput>;
  metadata?: InputMaybe<Scalars['JSON']>;
  taxBehavior?: InputMaybe<StripePostShippingRatesTaxBehavior>;
  taxCode?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<StripePostShippingRatesType>;
};

export type StripePostShippingRatesMaximumDeliveryEstimateInput = {
  unit: StripePostShippingRatesUnitMaximumDeliveryEstimate;
  value: Scalars['Int'];
};

export type StripePostShippingRatesMinimumDeliveryEstimateInput = {
  unit: StripePostShippingRatesUnitMinimumDeliveryEstimate;
  value: Scalars['Int'];
};

export type StripePostShippingRatesShippingRateTokenFixedAmountInput = {
  currencyOptions?: InputMaybe<Scalars['JSON']>;
};

export type StripePostShippingRatesShippingRateTokenInput = {
  active?: InputMaybe<Scalars['Boolean']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  fixedAmount?: InputMaybe<StripePostShippingRatesShippingRateTokenFixedAmountInput>;
  metadata?: InputMaybe<Scalars['JSON']>;
  taxBehavior?: InputMaybe<StripePostShippingRatesShippingRateTokenTaxBehavior>;
};

export enum StripePostShippingRatesShippingRateTokenTaxBehavior {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE',
  Unspecified = 'UNSPECIFIED'
}

export enum StripePostShippingRatesTaxBehavior {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE',
  Unspecified = 'UNSPECIFIED'
}

export enum StripePostShippingRatesType {
  FixedAmount = 'FIXED_AMOUNT'
}

export enum StripePostShippingRatesUnitMaximumDeliveryEstimate {
  BusinessDay = 'BUSINESS_DAY',
  Day = 'DAY',
  Hour = 'HOUR',
  Month = 'MONTH',
  Week = 'WEEK'
}

export enum StripePostShippingRatesUnitMinimumDeliveryEstimate {
  BusinessDay = 'BUSINESS_DAY',
  Day = 'DAY',
  Hour = 'HOUR',
  Month = 'MONTH',
  Week = 'WEEK'
}

export type StripePostSourcesAcceptanceMandateInput = {
  date?: InputMaybe<Scalars['Int']>;
  ip?: InputMaybe<Scalars['String']>;
  offline?: InputMaybe<StripePostSourcesOfflineAcceptanceMandateInput>;
  online?: InputMaybe<StripePostSourcesOnlineAcceptanceMandateInput>;
  status: StripePostSourcesStatusAcceptanceMandate;
  type?: InputMaybe<StripePostSourcesTypeAcceptanceMandate>;
  userAgent?: InputMaybe<Scalars['String']>;
};

export type StripePostSourcesAddressOwnerInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostSourcesAddressShippingSourceOrderInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1: Scalars['String'];
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export enum StripePostSourcesFlow {
  CodeVerification = 'CODE_VERIFICATION',
  None = 'NONE',
  Receiver = 'RECEIVER',
  Redirect = 'REDIRECT'
}

export type StripePostSourcesInput = {
  amount?: InputMaybe<Scalars['Int']>;
  currency?: InputMaybe<Scalars['String']>;
  customer?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  flow?: InputMaybe<StripePostSourcesFlow>;
  mandate?: InputMaybe<StripePostSourcesMandateInput>;
  metadata?: InputMaybe<Scalars['JSON']>;
  originalSource?: InputMaybe<Scalars['String']>;
  owner?: InputMaybe<StripePostSourcesOwnerInput>;
  receiver?: InputMaybe<StripePostSourcesReceiverInput>;
  redirect?: InputMaybe<StripePostSourcesRedirectInput>;
  sourceOrder?: InputMaybe<StripePostSourcesSourceOrderInput>;
  statementDescriptor?: InputMaybe<Scalars['String']>;
  token?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<Scalars['String']>;
  usage?: InputMaybe<StripePostSourcesUsage>;
};

export enum StripePostSourcesIntervalMandate {
  OneTime = 'ONE_TIME',
  Scheduled = 'SCHEDULED',
  Variable = 'VARIABLE'
}

export type StripePostSourcesItemsSourceOrderInput = {
  amount?: InputMaybe<Scalars['Int']>;
  currency?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  parent?: InputMaybe<Scalars['String']>;
  quantity?: InputMaybe<Scalars['Int']>;
  type?: InputMaybe<StripePostSourcesTypeItemsSourceOrder>;
};

export type StripePostSourcesMandateInput = {
  acceptance?: InputMaybe<StripePostSourcesAcceptanceMandateInput>;
  amount?: InputMaybe<Scalars['JSON']>;
  currency?: InputMaybe<Scalars['String']>;
  interval?: InputMaybe<StripePostSourcesIntervalMandate>;
  notificationMethod?: InputMaybe<StripePostSourcesNotificationMethodMandate>;
};

export enum StripePostSourcesNotificationMethodMandate {
  DeprecatedNone = 'DEPRECATED_NONE',
  Email = 'EMAIL',
  Manual = 'MANUAL',
  None = 'NONE',
  StripeEmail = 'STRIPE_EMAIL'
}

export type StripePostSourcesOfflineAcceptanceMandateInput = {
  contactEmail: Scalars['String'];
};

export type StripePostSourcesOnlineAcceptanceMandateInput = {
  date?: InputMaybe<Scalars['Int']>;
  ip?: InputMaybe<Scalars['String']>;
  userAgent?: InputMaybe<Scalars['String']>;
};

export type StripePostSourcesOwnerInput = {
  address?: InputMaybe<StripePostSourcesAddressOwnerInput>;
  email?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
};

export type StripePostSourcesReceiverInput = {
  refundAttributesMethod?: InputMaybe<StripePostSourcesRefundAttributesMethodReceiver>;
};

export type StripePostSourcesRedirectInput = {
  returnUrl: Scalars['String'];
};

export enum StripePostSourcesRefundAttributesMethodReceiver {
  Email = 'EMAIL',
  Manual = 'MANUAL',
  None = 'NONE'
}

export type StripePostSourcesShippingSourceOrderInput = {
  address: StripePostSourcesAddressShippingSourceOrderInput;
  carrier?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
  trackingNumber?: InputMaybe<Scalars['String']>;
};

export type StripePostSourcesSourceAcceptanceMandateInput = {
  date?: InputMaybe<Scalars['Int']>;
  ip?: InputMaybe<Scalars['String']>;
  offline?: InputMaybe<StripePostSourcesSourceOfflineAcceptanceMandateInput>;
  online?: InputMaybe<StripePostSourcesSourceOnlineAcceptanceMandateInput>;
  status: StripePostSourcesSourceStatusAcceptanceMandate;
  type?: InputMaybe<StripePostSourcesSourceTypeAcceptanceMandate>;
  userAgent?: InputMaybe<Scalars['String']>;
};

export type StripePostSourcesSourceAddressOwnerInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostSourcesSourceAddressShippingSourceOrderInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1: Scalars['String'];
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostSourcesSourceInput = {
  amount?: InputMaybe<Scalars['Int']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  mandate?: InputMaybe<StripePostSourcesSourceMandateInput>;
  metadata?: InputMaybe<Scalars['JSON']>;
  owner?: InputMaybe<StripePostSourcesSourceOwnerInput>;
  sourceOrder?: InputMaybe<StripePostSourcesSourceSourceOrderInput>;
};

export enum StripePostSourcesSourceIntervalMandate {
  OneTime = 'ONE_TIME',
  Scheduled = 'SCHEDULED',
  Variable = 'VARIABLE'
}

export type StripePostSourcesSourceItemsSourceOrderInput = {
  amount?: InputMaybe<Scalars['Int']>;
  currency?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  parent?: InputMaybe<Scalars['String']>;
  quantity?: InputMaybe<Scalars['Int']>;
  type?: InputMaybe<StripePostSourcesSourceTypeItemsSourceOrder>;
};

export type StripePostSourcesSourceMandateInput = {
  acceptance?: InputMaybe<StripePostSourcesSourceAcceptanceMandateInput>;
  amount?: InputMaybe<Scalars['JSON']>;
  currency?: InputMaybe<Scalars['String']>;
  interval?: InputMaybe<StripePostSourcesSourceIntervalMandate>;
  notificationMethod?: InputMaybe<StripePostSourcesSourceNotificationMethodMandate>;
};

export enum StripePostSourcesSourceNotificationMethodMandate {
  DeprecatedNone = 'DEPRECATED_NONE',
  Email = 'EMAIL',
  Manual = 'MANUAL',
  None = 'NONE',
  StripeEmail = 'STRIPE_EMAIL'
}

export type StripePostSourcesSourceOfflineAcceptanceMandateInput = {
  contactEmail: Scalars['String'];
};

export type StripePostSourcesSourceOnlineAcceptanceMandateInput = {
  date?: InputMaybe<Scalars['Int']>;
  ip?: InputMaybe<Scalars['String']>;
  userAgent?: InputMaybe<Scalars['String']>;
};

export type StripePostSourcesSourceOrderInput = {
  items?: InputMaybe<Array<StripePostSourcesItemsSourceOrderInput>>;
  shipping?: InputMaybe<StripePostSourcesShippingSourceOrderInput>;
};

export type StripePostSourcesSourceOwnerInput = {
  address?: InputMaybe<StripePostSourcesSourceAddressOwnerInput>;
  email?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
};

export type StripePostSourcesSourceShippingSourceOrderInput = {
  address: StripePostSourcesSourceAddressShippingSourceOrderInput;
  carrier?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
  trackingNumber?: InputMaybe<Scalars['String']>;
};

export type StripePostSourcesSourceSourceOrderInput = {
  items?: InputMaybe<Array<StripePostSourcesSourceItemsSourceOrderInput>>;
  shipping?: InputMaybe<StripePostSourcesSourceShippingSourceOrderInput>;
};

export enum StripePostSourcesSourceStatusAcceptanceMandate {
  Accepted = 'ACCEPTED',
  Pending = 'PENDING',
  Refused = 'REFUSED',
  Revoked = 'REVOKED'
}

export enum StripePostSourcesSourceTypeAcceptanceMandate {
  Offline = 'OFFLINE',
  Online = 'ONLINE'
}

export enum StripePostSourcesSourceTypeItemsSourceOrder {
  Discount = 'DISCOUNT',
  Shipping = 'SHIPPING',
  Sku = 'SKU',
  Tax = 'TAX'
}

export type StripePostSourcesSourceVerifyInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  values: Array<Scalars['String']>;
};

export enum StripePostSourcesStatusAcceptanceMandate {
  Accepted = 'ACCEPTED',
  Pending = 'PENDING',
  Refused = 'REFUSED',
  Revoked = 'REVOKED'
}

export enum StripePostSourcesTypeAcceptanceMandate {
  Offline = 'OFFLINE',
  Online = 'ONLINE'
}

export enum StripePostSourcesTypeItemsSourceOrder {
  Discount = 'DISCOUNT',
  Shipping = 'SHIPPING',
  Sku = 'SKU',
  Tax = 'TAX'
}

export enum StripePostSourcesUsage {
  Reusable = 'REUSABLE',
  SingleUse = 'SINGLE_USE'
}

export type StripePostSubscriptionItemsBillingThresholdsInput = {
  usageGte: Scalars['Int'];
};

export type StripePostSubscriptionItemsInput = {
  billingThresholds?: InputMaybe<StripeStringOrPostSubscriptionItemsBillingThresholdsUnionInput>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  paymentBehavior?: InputMaybe<StripePostSubscriptionItemsPaymentBehavior>;
  price?: InputMaybe<Scalars['String']>;
  priceData?: InputMaybe<StripePostSubscriptionItemsPriceDataInput>;
  prorationBehavior?: InputMaybe<StripePostSubscriptionItemsProrationBehavior>;
  prorationDate?: InputMaybe<Scalars['Int']>;
  quantity?: InputMaybe<Scalars['Int']>;
  subscription: Scalars['String'];
  taxRates?: InputMaybe<Scalars['JSON']>;
};

export enum StripePostSubscriptionItemsIntervalRecurringPriceData {
  Day = 'DAY',
  Month = 'MONTH',
  Week = 'WEEK',
  Year = 'YEAR'
}

export type StripePostSubscriptionItemsItemBillingThresholdsInput = {
  usageGte: Scalars['Int'];
};

export type StripePostSubscriptionItemsItemInput = {
  billingThresholds?: InputMaybe<StripeStringOrPostSubscriptionItemsItemBillingThresholdsUnionInput>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  offSession?: InputMaybe<Scalars['Boolean']>;
  paymentBehavior?: InputMaybe<StripePostSubscriptionItemsItemPaymentBehavior>;
  price?: InputMaybe<Scalars['String']>;
  priceData?: InputMaybe<StripePostSubscriptionItemsItemPriceDataInput>;
  prorationBehavior?: InputMaybe<StripePostSubscriptionItemsItemProrationBehavior>;
  prorationDate?: InputMaybe<Scalars['Int']>;
  quantity?: InputMaybe<Scalars['Int']>;
  taxRates?: InputMaybe<Scalars['JSON']>;
};

export enum StripePostSubscriptionItemsItemIntervalRecurringPriceData {
  Day = 'DAY',
  Month = 'MONTH',
  Week = 'WEEK',
  Year = 'YEAR'
}

export enum StripePostSubscriptionItemsItemPaymentBehavior {
  AllowIncomplete = 'ALLOW_INCOMPLETE',
  DefaultIncomplete = 'DEFAULT_INCOMPLETE',
  ErrorIfIncomplete = 'ERROR_IF_INCOMPLETE',
  PendingIfIncomplete = 'PENDING_IF_INCOMPLETE'
}

export type StripePostSubscriptionItemsItemPriceDataInput = {
  currency: Scalars['String'];
  product: Scalars['String'];
  recurring: StripePostSubscriptionItemsItemRecurringPriceDataInput;
  taxBehavior?: InputMaybe<StripePostSubscriptionItemsItemTaxBehaviorPriceData>;
  unitAmount?: InputMaybe<Scalars['Int']>;
  unitAmountDecimal?: InputMaybe<Scalars['String']>;
};

export enum StripePostSubscriptionItemsItemProrationBehavior {
  AlwaysInvoice = 'ALWAYS_INVOICE',
  CreateProrations = 'CREATE_PRORATIONS',
  None = 'NONE'
}

export type StripePostSubscriptionItemsItemRecurringPriceDataInput = {
  interval: StripePostSubscriptionItemsItemIntervalRecurringPriceData;
  intervalCount?: InputMaybe<Scalars['Int']>;
};

export enum StripePostSubscriptionItemsItemTaxBehaviorPriceData {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE',
  Unspecified = 'UNSPECIFIED'
}

export enum StripePostSubscriptionItemsPaymentBehavior {
  AllowIncomplete = 'ALLOW_INCOMPLETE',
  DefaultIncomplete = 'DEFAULT_INCOMPLETE',
  ErrorIfIncomplete = 'ERROR_IF_INCOMPLETE',
  PendingIfIncomplete = 'PENDING_IF_INCOMPLETE'
}

export type StripePostSubscriptionItemsPriceDataInput = {
  currency: Scalars['String'];
  product: Scalars['String'];
  recurring: StripePostSubscriptionItemsRecurringPriceDataInput;
  taxBehavior?: InputMaybe<StripePostSubscriptionItemsTaxBehaviorPriceData>;
  unitAmount?: InputMaybe<Scalars['Int']>;
  unitAmountDecimal?: InputMaybe<Scalars['String']>;
};

export enum StripePostSubscriptionItemsProrationBehavior {
  AlwaysInvoice = 'ALWAYS_INVOICE',
  CreateProrations = 'CREATE_PRORATIONS',
  None = 'NONE'
}

export type StripePostSubscriptionItemsRecurringPriceDataInput = {
  interval: StripePostSubscriptionItemsIntervalRecurringPriceData;
  intervalCount?: InputMaybe<Scalars['Int']>;
};

export enum StripePostSubscriptionItemsSubscriptionItemUsageRecordsAction {
  Increment = 'INCREMENT',
  Set = 'SET'
}

export type StripePostSubscriptionItemsSubscriptionItemUsageRecordsInput = {
  action?: InputMaybe<StripePostSubscriptionItemsSubscriptionItemUsageRecordsAction>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  quantity: Scalars['Int'];
  timestamp?: InputMaybe<Scalars['JSON']>;
};

export enum StripePostSubscriptionItemsTaxBehaviorPriceData {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE',
  Unspecified = 'UNSPECIFIED'
}

export type StripePostSubscriptionSchedulesAddInvoiceItemsPhasesInput = {
  price?: InputMaybe<Scalars['String']>;
  priceData?: InputMaybe<StripePostSubscriptionSchedulesPriceDataAddInvoiceItemsPhasesInput>;
  quantity?: InputMaybe<Scalars['Int']>;
  taxRates?: InputMaybe<Scalars['JSON']>;
};

export type StripePostSubscriptionSchedulesAutomaticTaxDefaultSettingsInput = {
  enabled: Scalars['Boolean'];
};

export type StripePostSubscriptionSchedulesAutomaticTaxPhasesInput = {
  enabled: Scalars['Boolean'];
};

export enum StripePostSubscriptionSchedulesBillingCycleAnchorDefaultSettings {
  Automatic = 'AUTOMATIC',
  PhaseStart = 'PHASE_START'
}

export enum StripePostSubscriptionSchedulesBillingCycleAnchorPhases {
  Automatic = 'AUTOMATIC',
  PhaseStart = 'PHASE_START'
}

export type StripePostSubscriptionSchedulesBillingThresholdsDefaultSettingsInput = {
  amountGte?: InputMaybe<Scalars['Int']>;
  resetBillingCycleAnchor?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostSubscriptionSchedulesBillingThresholdsItemsPhasesInput = {
  usageGte: Scalars['Int'];
};

export type StripePostSubscriptionSchedulesBillingThresholdsPhasesInput = {
  amountGte?: InputMaybe<Scalars['Int']>;
  resetBillingCycleAnchor?: InputMaybe<Scalars['Boolean']>;
};

export enum StripePostSubscriptionSchedulesCollectionMethodDefaultSettings {
  ChargeAutomatically = 'CHARGE_AUTOMATICALLY',
  SendInvoice = 'SEND_INVOICE'
}

export enum StripePostSubscriptionSchedulesCollectionMethodPhases {
  ChargeAutomatically = 'CHARGE_AUTOMATICALLY',
  SendInvoice = 'SEND_INVOICE'
}

export type StripePostSubscriptionSchedulesDefaultSettingsInput = {
  applicationFeePercent?: InputMaybe<Scalars['Float']>;
  automaticTax?: InputMaybe<StripePostSubscriptionSchedulesAutomaticTaxDefaultSettingsInput>;
  billingCycleAnchor?: InputMaybe<StripePostSubscriptionSchedulesBillingCycleAnchorDefaultSettings>;
  billingThresholds?: InputMaybe<StripeStringOrPostSubscriptionSchedulesBillingThresholdsDefaultSettingsUnionInput>;
  collectionMethod?: InputMaybe<StripePostSubscriptionSchedulesCollectionMethodDefaultSettings>;
  defaultPaymentMethod?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  invoiceSettings?: InputMaybe<StripePostSubscriptionSchedulesInvoiceSettingsDefaultSettingsInput>;
  onBehalfOf?: InputMaybe<Scalars['JSON']>;
  transferData?: InputMaybe<StripeStringOrPostSubscriptionSchedulesTransferDataDefaultSettingsUnionInput>;
};

export enum StripePostSubscriptionSchedulesEndBehavior {
  Cancel = 'CANCEL',
  None = 'NONE',
  Release = 'RELEASE',
  Renew = 'RENEW'
}

export type StripePostSubscriptionSchedulesInput = {
  customer?: InputMaybe<Scalars['String']>;
  defaultSettings?: InputMaybe<StripePostSubscriptionSchedulesDefaultSettingsInput>;
  endBehavior?: InputMaybe<StripePostSubscriptionSchedulesEndBehavior>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  fromSubscription?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  phases?: InputMaybe<Array<StripePostSubscriptionSchedulesPhasesInput>>;
  startDate?: InputMaybe<Scalars['JSON']>;
};

export enum StripePostSubscriptionSchedulesIntervalRecurringPriceDataItemsPhases {
  Day = 'DAY',
  Month = 'MONTH',
  Week = 'WEEK',
  Year = 'YEAR'
}

export type StripePostSubscriptionSchedulesInvoiceSettingsDefaultSettingsInput = {
  daysUntilDue?: InputMaybe<Scalars['Int']>;
};

export type StripePostSubscriptionSchedulesInvoiceSettingsPhasesInput = {
  daysUntilDue?: InputMaybe<Scalars['Int']>;
};

export type StripePostSubscriptionSchedulesItemsPhasesInput = {
  billingThresholds?: InputMaybe<StripeStringOrPostSubscriptionSchedulesBillingThresholdsItemsPhasesUnionInput>;
  metadata?: InputMaybe<Scalars['JSON']>;
  price?: InputMaybe<Scalars['String']>;
  priceData?: InputMaybe<StripePostSubscriptionSchedulesPriceDataItemsPhasesInput>;
  quantity?: InputMaybe<Scalars['Int']>;
  taxRates?: InputMaybe<Scalars['JSON']>;
};

export type StripePostSubscriptionSchedulesPhasesInput = {
  addInvoiceItems?: InputMaybe<Array<StripePostSubscriptionSchedulesAddInvoiceItemsPhasesInput>>;
  applicationFeePercent?: InputMaybe<Scalars['Float']>;
  automaticTax?: InputMaybe<StripePostSubscriptionSchedulesAutomaticTaxPhasesInput>;
  billingCycleAnchor?: InputMaybe<StripePostSubscriptionSchedulesBillingCycleAnchorPhases>;
  billingThresholds?: InputMaybe<StripeStringOrPostSubscriptionSchedulesBillingThresholdsPhasesUnionInput>;
  collectionMethod?: InputMaybe<StripePostSubscriptionSchedulesCollectionMethodPhases>;
  coupon?: InputMaybe<Scalars['String']>;
  currency?: InputMaybe<Scalars['String']>;
  defaultPaymentMethod?: InputMaybe<Scalars['String']>;
  defaultTaxRates?: InputMaybe<Scalars['JSON']>;
  description?: InputMaybe<Scalars['String']>;
  endDate?: InputMaybe<Scalars['Int']>;
  invoiceSettings?: InputMaybe<StripePostSubscriptionSchedulesInvoiceSettingsPhasesInput>;
  items: Array<StripePostSubscriptionSchedulesItemsPhasesInput>;
  iterations?: InputMaybe<Scalars['Int']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  onBehalfOf?: InputMaybe<Scalars['String']>;
  prorationBehavior?: InputMaybe<StripePostSubscriptionSchedulesProrationBehaviorPhases>;
  transferData?: InputMaybe<StripePostSubscriptionSchedulesTransferDataPhasesInput>;
  trial?: InputMaybe<Scalars['Boolean']>;
  trialEnd?: InputMaybe<Scalars['Int']>;
};

export type StripePostSubscriptionSchedulesPriceDataAddInvoiceItemsPhasesInput = {
  currency: Scalars['String'];
  product: Scalars['String'];
  taxBehavior?: InputMaybe<StripePostSubscriptionSchedulesTaxBehaviorPriceDataAddInvoiceItemsPhases>;
  unitAmount?: InputMaybe<Scalars['Int']>;
  unitAmountDecimal?: InputMaybe<Scalars['String']>;
};

export type StripePostSubscriptionSchedulesPriceDataItemsPhasesInput = {
  currency: Scalars['String'];
  product: Scalars['String'];
  recurring: StripePostSubscriptionSchedulesRecurringPriceDataItemsPhasesInput;
  taxBehavior?: InputMaybe<StripePostSubscriptionSchedulesTaxBehaviorPriceDataItemsPhases>;
  unitAmount?: InputMaybe<Scalars['Int']>;
  unitAmountDecimal?: InputMaybe<Scalars['String']>;
};

export enum StripePostSubscriptionSchedulesProrationBehaviorPhases {
  AlwaysInvoice = 'ALWAYS_INVOICE',
  CreateProrations = 'CREATE_PRORATIONS',
  None = 'NONE'
}

export type StripePostSubscriptionSchedulesRecurringPriceDataItemsPhasesInput = {
  interval: StripePostSubscriptionSchedulesIntervalRecurringPriceDataItemsPhases;
  intervalCount?: InputMaybe<Scalars['Int']>;
};

export type StripePostSubscriptionSchedulesScheduleAddInvoiceItemsPhasesInput = {
  price?: InputMaybe<Scalars['String']>;
  priceData?: InputMaybe<StripePostSubscriptionSchedulesSchedulePriceDataAddInvoiceItemsPhasesInput>;
  quantity?: InputMaybe<Scalars['Int']>;
  taxRates?: InputMaybe<Scalars['JSON']>;
};

export type StripePostSubscriptionSchedulesScheduleAutomaticTaxDefaultSettingsInput = {
  enabled: Scalars['Boolean'];
};

export type StripePostSubscriptionSchedulesScheduleAutomaticTaxPhasesInput = {
  enabled: Scalars['Boolean'];
};

export enum StripePostSubscriptionSchedulesScheduleBillingCycleAnchorDefaultSettings {
  Automatic = 'AUTOMATIC',
  PhaseStart = 'PHASE_START'
}

export enum StripePostSubscriptionSchedulesScheduleBillingCycleAnchorPhases {
  Automatic = 'AUTOMATIC',
  PhaseStart = 'PHASE_START'
}

export type StripePostSubscriptionSchedulesScheduleBillingThresholdsDefaultSettingsInput = {
  amountGte?: InputMaybe<Scalars['Int']>;
  resetBillingCycleAnchor?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostSubscriptionSchedulesScheduleBillingThresholdsItemsPhasesInput = {
  usageGte: Scalars['Int'];
};

export type StripePostSubscriptionSchedulesScheduleBillingThresholdsPhasesInput = {
  amountGte?: InputMaybe<Scalars['Int']>;
  resetBillingCycleAnchor?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostSubscriptionSchedulesScheduleCancelInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  invoiceNow?: InputMaybe<Scalars['Boolean']>;
  prorate?: InputMaybe<Scalars['Boolean']>;
};

export enum StripePostSubscriptionSchedulesScheduleCollectionMethodDefaultSettings {
  ChargeAutomatically = 'CHARGE_AUTOMATICALLY',
  SendInvoice = 'SEND_INVOICE'
}

export enum StripePostSubscriptionSchedulesScheduleCollectionMethodPhases {
  ChargeAutomatically = 'CHARGE_AUTOMATICALLY',
  SendInvoice = 'SEND_INVOICE'
}

export type StripePostSubscriptionSchedulesScheduleDefaultSettingsInput = {
  applicationFeePercent?: InputMaybe<Scalars['Float']>;
  automaticTax?: InputMaybe<StripePostSubscriptionSchedulesScheduleAutomaticTaxDefaultSettingsInput>;
  billingCycleAnchor?: InputMaybe<StripePostSubscriptionSchedulesScheduleBillingCycleAnchorDefaultSettings>;
  billingThresholds?: InputMaybe<StripeStringOrPostSubscriptionSchedulesScheduleBillingThresholdsDefaultSettingsUnionInput>;
  collectionMethod?: InputMaybe<StripePostSubscriptionSchedulesScheduleCollectionMethodDefaultSettings>;
  defaultPaymentMethod?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  invoiceSettings?: InputMaybe<StripePostSubscriptionSchedulesScheduleInvoiceSettingsDefaultSettingsInput>;
  onBehalfOf?: InputMaybe<Scalars['JSON']>;
  transferData?: InputMaybe<StripeStringOrPostSubscriptionSchedulesScheduleTransferDataDefaultSettingsUnionInput>;
};

export enum StripePostSubscriptionSchedulesScheduleEndBehavior {
  Cancel = 'CANCEL',
  None = 'NONE',
  Release = 'RELEASE',
  Renew = 'RENEW'
}

export type StripePostSubscriptionSchedulesScheduleInput = {
  defaultSettings?: InputMaybe<StripePostSubscriptionSchedulesScheduleDefaultSettingsInput>;
  endBehavior?: InputMaybe<StripePostSubscriptionSchedulesScheduleEndBehavior>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  phases?: InputMaybe<Array<StripePostSubscriptionSchedulesSchedulePhasesInput>>;
  prorationBehavior?: InputMaybe<StripePostSubscriptionSchedulesScheduleProrationBehavior>;
};

export enum StripePostSubscriptionSchedulesScheduleIntervalRecurringPriceDataItemsPhases {
  Day = 'DAY',
  Month = 'MONTH',
  Week = 'WEEK',
  Year = 'YEAR'
}

export type StripePostSubscriptionSchedulesScheduleInvoiceSettingsDefaultSettingsInput = {
  daysUntilDue?: InputMaybe<Scalars['Int']>;
};

export type StripePostSubscriptionSchedulesScheduleInvoiceSettingsPhasesInput = {
  daysUntilDue?: InputMaybe<Scalars['Int']>;
};

export type StripePostSubscriptionSchedulesScheduleItemsPhasesInput = {
  billingThresholds?: InputMaybe<StripeStringOrPostSubscriptionSchedulesScheduleBillingThresholdsItemsPhasesUnionInput>;
  metadata?: InputMaybe<Scalars['JSON']>;
  price?: InputMaybe<Scalars['String']>;
  priceData?: InputMaybe<StripePostSubscriptionSchedulesSchedulePriceDataItemsPhasesInput>;
  quantity?: InputMaybe<Scalars['Int']>;
  taxRates?: InputMaybe<Scalars['JSON']>;
};

export type StripePostSubscriptionSchedulesSchedulePhasesInput = {
  addInvoiceItems?: InputMaybe<Array<StripePostSubscriptionSchedulesScheduleAddInvoiceItemsPhasesInput>>;
  applicationFeePercent?: InputMaybe<Scalars['Float']>;
  automaticTax?: InputMaybe<StripePostSubscriptionSchedulesScheduleAutomaticTaxPhasesInput>;
  billingCycleAnchor?: InputMaybe<StripePostSubscriptionSchedulesScheduleBillingCycleAnchorPhases>;
  billingThresholds?: InputMaybe<StripeStringOrPostSubscriptionSchedulesScheduleBillingThresholdsPhasesUnionInput>;
  collectionMethod?: InputMaybe<StripePostSubscriptionSchedulesScheduleCollectionMethodPhases>;
  coupon?: InputMaybe<Scalars['String']>;
  defaultPaymentMethod?: InputMaybe<Scalars['String']>;
  defaultTaxRates?: InputMaybe<Scalars['JSON']>;
  description?: InputMaybe<Scalars['String']>;
  endDate?: InputMaybe<Scalars['JSON']>;
  invoiceSettings?: InputMaybe<StripePostSubscriptionSchedulesScheduleInvoiceSettingsPhasesInput>;
  items: Array<StripePostSubscriptionSchedulesScheduleItemsPhasesInput>;
  iterations?: InputMaybe<Scalars['Int']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  onBehalfOf?: InputMaybe<Scalars['String']>;
  prorationBehavior?: InputMaybe<StripePostSubscriptionSchedulesScheduleProrationBehaviorPhases>;
  startDate?: InputMaybe<Scalars['JSON']>;
  transferData?: InputMaybe<StripePostSubscriptionSchedulesScheduleTransferDataPhasesInput>;
  trial?: InputMaybe<Scalars['Boolean']>;
  trialEnd?: InputMaybe<Scalars['JSON']>;
};

export type StripePostSubscriptionSchedulesSchedulePriceDataAddInvoiceItemsPhasesInput = {
  currency: Scalars['String'];
  product: Scalars['String'];
  taxBehavior?: InputMaybe<StripePostSubscriptionSchedulesScheduleTaxBehaviorPriceDataAddInvoiceItemsPhases>;
  unitAmount?: InputMaybe<Scalars['Int']>;
  unitAmountDecimal?: InputMaybe<Scalars['String']>;
};

export type StripePostSubscriptionSchedulesSchedulePriceDataItemsPhasesInput = {
  currency: Scalars['String'];
  product: Scalars['String'];
  recurring: StripePostSubscriptionSchedulesScheduleRecurringPriceDataItemsPhasesInput;
  taxBehavior?: InputMaybe<StripePostSubscriptionSchedulesScheduleTaxBehaviorPriceDataItemsPhases>;
  unitAmount?: InputMaybe<Scalars['Int']>;
  unitAmountDecimal?: InputMaybe<Scalars['String']>;
};

export enum StripePostSubscriptionSchedulesScheduleProrationBehavior {
  AlwaysInvoice = 'ALWAYS_INVOICE',
  CreateProrations = 'CREATE_PRORATIONS',
  None = 'NONE'
}

export enum StripePostSubscriptionSchedulesScheduleProrationBehaviorPhases {
  AlwaysInvoice = 'ALWAYS_INVOICE',
  CreateProrations = 'CREATE_PRORATIONS',
  None = 'NONE'
}

export type StripePostSubscriptionSchedulesScheduleRecurringPriceDataItemsPhasesInput = {
  interval: StripePostSubscriptionSchedulesScheduleIntervalRecurringPriceDataItemsPhases;
  intervalCount?: InputMaybe<Scalars['Int']>;
};

export type StripePostSubscriptionSchedulesScheduleReleaseInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  preserveCancelDate?: InputMaybe<Scalars['Boolean']>;
};

export enum StripePostSubscriptionSchedulesScheduleTaxBehaviorPriceDataAddInvoiceItemsPhases {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE',
  Unspecified = 'UNSPECIFIED'
}

export enum StripePostSubscriptionSchedulesScheduleTaxBehaviorPriceDataItemsPhases {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE',
  Unspecified = 'UNSPECIFIED'
}

export type StripePostSubscriptionSchedulesScheduleTransferDataDefaultSettingsInput = {
  amountPercent?: InputMaybe<Scalars['Float']>;
  destination: Scalars['String'];
};

export type StripePostSubscriptionSchedulesScheduleTransferDataPhasesInput = {
  amountPercent?: InputMaybe<Scalars['Float']>;
  destination: Scalars['String'];
};

export enum StripePostSubscriptionSchedulesTaxBehaviorPriceDataAddInvoiceItemsPhases {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE',
  Unspecified = 'UNSPECIFIED'
}

export enum StripePostSubscriptionSchedulesTaxBehaviorPriceDataItemsPhases {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE',
  Unspecified = 'UNSPECIFIED'
}

export type StripePostSubscriptionSchedulesTransferDataDefaultSettingsInput = {
  amountPercent?: InputMaybe<Scalars['Float']>;
  destination: Scalars['String'];
};

export type StripePostSubscriptionSchedulesTransferDataPhasesInput = {
  amountPercent?: InputMaybe<Scalars['Float']>;
  destination: Scalars['String'];
};

export type StripePostSubscriptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput = {
  mandateOptions?: InputMaybe<StripePostSubscriptionsMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput>;
  verificationMethod?: InputMaybe<StripePostSubscriptionsVerificationMethodAcssDebitPaymentMethodOptionsPaymentSettings>;
};

export type StripePostSubscriptionsAddInvoiceItemsInput = {
  price?: InputMaybe<Scalars['String']>;
  priceData?: InputMaybe<StripePostSubscriptionsPriceDataAddInvoiceItemsInput>;
  quantity?: InputMaybe<Scalars['Int']>;
  taxRates?: InputMaybe<Scalars['JSON']>;
};

export enum StripePostSubscriptionsAmountTypeMandateOptionsCardPaymentMethodOptionsPaymentSettings {
  Fixed = 'FIXED',
  Maximum = 'MAXIMUM'
}

export type StripePostSubscriptionsAutomaticTaxInput = {
  enabled: Scalars['Boolean'];
};

export type StripePostSubscriptionsBancontactPaymentMethodOptionsPaymentSettingsInput = {
  preferredLanguage?: InputMaybe<StripePostSubscriptionsPreferredLanguageBancontactPaymentMethodOptionsPaymentSettings>;
};

export type StripePostSubscriptionsBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput = {
  euBankTransfer?: InputMaybe<StripePostSubscriptionsEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput>;
  type?: InputMaybe<Scalars['String']>;
};

export type StripePostSubscriptionsBillingThresholdsInput = {
  amountGte?: InputMaybe<Scalars['Int']>;
  resetBillingCycleAnchor?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostSubscriptionsBillingThresholdsItemsInput = {
  usageGte: Scalars['Int'];
};

export type StripePostSubscriptionsCardPaymentMethodOptionsPaymentSettingsInput = {
  mandateOptions?: InputMaybe<StripePostSubscriptionsMandateOptionsCardPaymentMethodOptionsPaymentSettingsInput>;
  network?: InputMaybe<StripePostSubscriptionsNetworkCardPaymentMethodOptionsPaymentSettings>;
  requestThreeDSecure?: InputMaybe<StripePostSubscriptionsRequestThreeDSecureCardPaymentMethodOptionsPaymentSettings>;
};

export enum StripePostSubscriptionsCollectionMethod {
  ChargeAutomatically = 'CHARGE_AUTOMATICALLY',
  SendInvoice = 'SEND_INVOICE'
}

export type StripePostSubscriptionsCustomerBalancePaymentMethodOptionsPaymentSettingsInput = {
  bankTransfer?: InputMaybe<StripePostSubscriptionsBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput>;
  fundingType?: InputMaybe<Scalars['String']>;
};

export type StripePostSubscriptionsEndBehaviorTrialSettingsInput = {
  missingPaymentMethod: StripePostSubscriptionsMissingPaymentMethodEndBehaviorTrialSettings;
};

export type StripePostSubscriptionsEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput = {
  country: Scalars['String'];
};

export type StripePostSubscriptionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput = {
  permissions?: InputMaybe<Array<StripePostSubscriptionsPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettings>>;
};

export type StripePostSubscriptionsInput = {
  addInvoiceItems?: InputMaybe<Array<StripePostSubscriptionsAddInvoiceItemsInput>>;
  applicationFeePercent?: InputMaybe<Scalars['Float']>;
  automaticTax?: InputMaybe<StripePostSubscriptionsAutomaticTaxInput>;
  backdateStartDate?: InputMaybe<Scalars['Int']>;
  billingCycleAnchor?: InputMaybe<Scalars['Int']>;
  billingThresholds?: InputMaybe<StripeStringOrPostSubscriptionsBillingThresholdsUnionInput>;
  cancelAt?: InputMaybe<Scalars['Int']>;
  cancelAtPeriodEnd?: InputMaybe<Scalars['Boolean']>;
  collectionMethod?: InputMaybe<StripePostSubscriptionsCollectionMethod>;
  coupon?: InputMaybe<Scalars['String']>;
  currency?: InputMaybe<Scalars['String']>;
  customer: Scalars['String'];
  daysUntilDue?: InputMaybe<Scalars['Int']>;
  defaultPaymentMethod?: InputMaybe<Scalars['String']>;
  defaultSource?: InputMaybe<Scalars['String']>;
  defaultTaxRates?: InputMaybe<Scalars['JSON']>;
  description?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  items?: InputMaybe<Array<StripePostSubscriptionsItemsInput>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  offSession?: InputMaybe<Scalars['Boolean']>;
  onBehalfOf?: InputMaybe<Scalars['JSON']>;
  paymentBehavior?: InputMaybe<StripePostSubscriptionsPaymentBehavior>;
  paymentSettings?: InputMaybe<StripePostSubscriptionsPaymentSettingsInput>;
  pendingInvoiceItemInterval?: InputMaybe<StripeStringOrPostSubscriptionsPendingInvoiceItemIntervalUnionInput>;
  promotionCode?: InputMaybe<Scalars['String']>;
  prorationBehavior?: InputMaybe<StripePostSubscriptionsProrationBehavior>;
  transferData?: InputMaybe<StripePostSubscriptionsTransferDataInput>;
  trialEnd?: InputMaybe<Scalars['JSON']>;
  trialFromPlan?: InputMaybe<Scalars['Boolean']>;
  trialPeriodDays?: InputMaybe<Scalars['Int']>;
  trialSettings?: InputMaybe<StripePostSubscriptionsTrialSettingsInput>;
};

export enum StripePostSubscriptionsIntervalPendingInvoiceItemInterval {
  Day = 'DAY',
  Month = 'MONTH',
  Week = 'WEEK',
  Year = 'YEAR'
}

export enum StripePostSubscriptionsIntervalRecurringPriceDataItems {
  Day = 'DAY',
  Month = 'MONTH',
  Week = 'WEEK',
  Year = 'YEAR'
}

export type StripePostSubscriptionsItemsInput = {
  billingThresholds?: InputMaybe<StripeStringOrPostSubscriptionsBillingThresholdsItemsUnionInput>;
  metadata?: InputMaybe<Scalars['JSON']>;
  price?: InputMaybe<Scalars['String']>;
  priceData?: InputMaybe<StripePostSubscriptionsPriceDataItemsInput>;
  quantity?: InputMaybe<Scalars['Int']>;
  taxRates?: InputMaybe<Scalars['JSON']>;
};

export type StripePostSubscriptionsMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput = {
  transactionType?: InputMaybe<StripePostSubscriptionsTransactionTypeMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettings>;
};

export type StripePostSubscriptionsMandateOptionsCardPaymentMethodOptionsPaymentSettingsInput = {
  amount?: InputMaybe<Scalars['Int']>;
  amountType?: InputMaybe<StripePostSubscriptionsAmountTypeMandateOptionsCardPaymentMethodOptionsPaymentSettings>;
  description?: InputMaybe<Scalars['String']>;
};

export enum StripePostSubscriptionsMissingPaymentMethodEndBehaviorTrialSettings {
  Cancel = 'CANCEL',
  CreateInvoice = 'CREATE_INVOICE',
  Pause = 'PAUSE'
}

export enum StripePostSubscriptionsNetworkCardPaymentMethodOptionsPaymentSettings {
  Amex = 'AMEX',
  CartesBancaires = 'CARTES_BANCAIRES',
  Diners = 'DINERS',
  Discover = 'DISCOVER',
  EftposAu = 'EFTPOS_AU',
  Interac = 'INTERAC',
  Jcb = 'JCB',
  Mastercard = 'MASTERCARD',
  Unionpay = 'UNIONPAY',
  Unknown = 'UNKNOWN',
  Visa = 'VISA'
}

export enum StripePostSubscriptionsPaymentBehavior {
  AllowIncomplete = 'ALLOW_INCOMPLETE',
  DefaultIncomplete = 'DEFAULT_INCOMPLETE',
  ErrorIfIncomplete = 'ERROR_IF_INCOMPLETE',
  PendingIfIncomplete = 'PENDING_IF_INCOMPLETE'
}

export type StripePostSubscriptionsPaymentMethodOptionsPaymentSettingsInput = {
  acssDebit?: InputMaybe<StripeStringOrPostSubscriptionsAcssDebitPaymentMethodOptionsPaymentSettingsUnionInput>;
  bancontact?: InputMaybe<StripeStringOrPostSubscriptionsBancontactPaymentMethodOptionsPaymentSettingsUnionInput>;
  card?: InputMaybe<StripeStringOrPostSubscriptionsCardPaymentMethodOptionsPaymentSettingsUnionInput>;
  customerBalance?: InputMaybe<StripeStringOrPostSubscriptionsCustomerBalancePaymentMethodOptionsPaymentSettingsUnionInput>;
  konbini?: InputMaybe<Scalars['JSON']>;
  usBankAccount?: InputMaybe<StripeStringOrPostSubscriptionsUsBankAccountPaymentMethodOptionsPaymentSettingsUnionInput>;
};

export type StripePostSubscriptionsPaymentSettingsInput = {
  paymentMethodOptions?: InputMaybe<StripePostSubscriptionsPaymentMethodOptionsPaymentSettingsInput>;
  paymentMethodTypes?: InputMaybe<Scalars['JSON']>;
  saveDefaultPaymentMethod?: InputMaybe<StripePostSubscriptionsSaveDefaultPaymentMethodPaymentSettings>;
};

export type StripePostSubscriptionsPendingInvoiceItemIntervalInput = {
  interval: StripePostSubscriptionsIntervalPendingInvoiceItemInterval;
  intervalCount?: InputMaybe<Scalars['Int']>;
};

export enum StripePostSubscriptionsPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettings {
  Balances = 'BALANCES',
  Ownership = 'OWNERSHIP',
  PaymentMethod = 'PAYMENT_METHOD',
  Transactions = 'TRANSACTIONS'
}

export enum StripePostSubscriptionsPreferredLanguageBancontactPaymentMethodOptionsPaymentSettings {
  De = 'DE',
  En = 'EN',
  Fr = 'FR',
  Nl = 'NL'
}

export type StripePostSubscriptionsPriceDataAddInvoiceItemsInput = {
  currency: Scalars['String'];
  product: Scalars['String'];
  taxBehavior?: InputMaybe<StripePostSubscriptionsTaxBehaviorPriceDataAddInvoiceItems>;
  unitAmount?: InputMaybe<Scalars['Int']>;
  unitAmountDecimal?: InputMaybe<Scalars['String']>;
};

export type StripePostSubscriptionsPriceDataItemsInput = {
  currency: Scalars['String'];
  product: Scalars['String'];
  recurring: StripePostSubscriptionsRecurringPriceDataItemsInput;
  taxBehavior?: InputMaybe<StripePostSubscriptionsTaxBehaviorPriceDataItems>;
  unitAmount?: InputMaybe<Scalars['Int']>;
  unitAmountDecimal?: InputMaybe<Scalars['String']>;
};

export enum StripePostSubscriptionsProrationBehavior {
  AlwaysInvoice = 'ALWAYS_INVOICE',
  CreateProrations = 'CREATE_PRORATIONS',
  None = 'NONE'
}

export type StripePostSubscriptionsRecurringPriceDataItemsInput = {
  interval: StripePostSubscriptionsIntervalRecurringPriceDataItems;
  intervalCount?: InputMaybe<Scalars['Int']>;
};

export enum StripePostSubscriptionsRequestThreeDSecureCardPaymentMethodOptionsPaymentSettings {
  Any = 'ANY',
  Automatic = 'AUTOMATIC'
}

export enum StripePostSubscriptionsSaveDefaultPaymentMethodPaymentSettings {
  Off = 'OFF',
  OnSubscription = 'ON_SUBSCRIPTION'
}

export type StripePostSubscriptionsSubscriptionExposedIdAcssDebitPaymentMethodOptionsPaymentSettingsInput = {
  mandateOptions?: InputMaybe<StripePostSubscriptionsSubscriptionExposedIdMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput>;
  verificationMethod?: InputMaybe<StripePostSubscriptionsSubscriptionExposedIdVerificationMethodAcssDebitPaymentMethodOptionsPaymentSettings>;
};

export type StripePostSubscriptionsSubscriptionExposedIdAddInvoiceItemsInput = {
  price?: InputMaybe<Scalars['String']>;
  priceData?: InputMaybe<StripePostSubscriptionsSubscriptionExposedIdPriceDataAddInvoiceItemsInput>;
  quantity?: InputMaybe<Scalars['Int']>;
  taxRates?: InputMaybe<Scalars['JSON']>;
};

export enum StripePostSubscriptionsSubscriptionExposedIdAmountTypeMandateOptionsCardPaymentMethodOptionsPaymentSettings {
  Fixed = 'FIXED',
  Maximum = 'MAXIMUM'
}

export type StripePostSubscriptionsSubscriptionExposedIdAutomaticTaxInput = {
  enabled: Scalars['Boolean'];
};

export type StripePostSubscriptionsSubscriptionExposedIdBancontactPaymentMethodOptionsPaymentSettingsInput = {
  preferredLanguage?: InputMaybe<StripePostSubscriptionsSubscriptionExposedIdPreferredLanguageBancontactPaymentMethodOptionsPaymentSettings>;
};

export type StripePostSubscriptionsSubscriptionExposedIdBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput = {
  euBankTransfer?: InputMaybe<StripePostSubscriptionsSubscriptionExposedIdEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput>;
  type?: InputMaybe<Scalars['String']>;
};

export enum StripePostSubscriptionsSubscriptionExposedIdBehaviorPauseCollection {
  KeepAsDraft = 'KEEP_AS_DRAFT',
  MarkUncollectible = 'MARK_UNCOLLECTIBLE',
  Void = 'VOID'
}

export enum StripePostSubscriptionsSubscriptionExposedIdBillingCycleAnchor {
  Now = 'NOW',
  Unchanged = 'UNCHANGED'
}

export type StripePostSubscriptionsSubscriptionExposedIdBillingThresholdsInput = {
  amountGte?: InputMaybe<Scalars['Int']>;
  resetBillingCycleAnchor?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostSubscriptionsSubscriptionExposedIdBillingThresholdsItemsInput = {
  usageGte: Scalars['Int'];
};

export type StripePostSubscriptionsSubscriptionExposedIdCancellationDetailsInput = {
  comment?: InputMaybe<Scalars['String']>;
  feedback?: InputMaybe<Scalars['String']>;
};

export type StripePostSubscriptionsSubscriptionExposedIdCardPaymentMethodOptionsPaymentSettingsInput = {
  mandateOptions?: InputMaybe<StripePostSubscriptionsSubscriptionExposedIdMandateOptionsCardPaymentMethodOptionsPaymentSettingsInput>;
  network?: InputMaybe<StripePostSubscriptionsSubscriptionExposedIdNetworkCardPaymentMethodOptionsPaymentSettings>;
  requestThreeDSecure?: InputMaybe<StripePostSubscriptionsSubscriptionExposedIdRequestThreeDSecureCardPaymentMethodOptionsPaymentSettings>;
};

export enum StripePostSubscriptionsSubscriptionExposedIdCollectionMethod {
  ChargeAutomatically = 'CHARGE_AUTOMATICALLY',
  SendInvoice = 'SEND_INVOICE'
}

export type StripePostSubscriptionsSubscriptionExposedIdCustomerBalancePaymentMethodOptionsPaymentSettingsInput = {
  bankTransfer?: InputMaybe<StripePostSubscriptionsSubscriptionExposedIdBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput>;
  fundingType?: InputMaybe<Scalars['String']>;
};

export type StripePostSubscriptionsSubscriptionExposedIdEndBehaviorTrialSettingsInput = {
  missingPaymentMethod: StripePostSubscriptionsSubscriptionExposedIdMissingPaymentMethodEndBehaviorTrialSettings;
};

export type StripePostSubscriptionsSubscriptionExposedIdEuBankTransferBankTransferCustomerBalancePaymentMethodOptionsPaymentSettingsInput = {
  country: Scalars['String'];
};

export type StripePostSubscriptionsSubscriptionExposedIdFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput = {
  permissions?: InputMaybe<Array<StripePostSubscriptionsSubscriptionExposedIdPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettings>>;
};

export type StripePostSubscriptionsSubscriptionExposedIdInput = {
  addInvoiceItems?: InputMaybe<Array<StripePostSubscriptionsSubscriptionExposedIdAddInvoiceItemsInput>>;
  applicationFeePercent?: InputMaybe<Scalars['Float']>;
  automaticTax?: InputMaybe<StripePostSubscriptionsSubscriptionExposedIdAutomaticTaxInput>;
  billingCycleAnchor?: InputMaybe<StripePostSubscriptionsSubscriptionExposedIdBillingCycleAnchor>;
  billingThresholds?: InputMaybe<StripeStringOrPostSubscriptionsSubscriptionExposedIdBillingThresholdsUnionInput>;
  cancelAt?: InputMaybe<Scalars['JSON']>;
  cancelAtPeriodEnd?: InputMaybe<Scalars['Boolean']>;
  cancellationDetails?: InputMaybe<StripePostSubscriptionsSubscriptionExposedIdCancellationDetailsInput>;
  collectionMethod?: InputMaybe<StripePostSubscriptionsSubscriptionExposedIdCollectionMethod>;
  coupon?: InputMaybe<Scalars['String']>;
  daysUntilDue?: InputMaybe<Scalars['Int']>;
  defaultPaymentMethod?: InputMaybe<Scalars['String']>;
  defaultSource?: InputMaybe<Scalars['String']>;
  defaultTaxRates?: InputMaybe<Scalars['JSON']>;
  description?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  items?: InputMaybe<Array<StripePostSubscriptionsSubscriptionExposedIdItemsInput>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  offSession?: InputMaybe<Scalars['Boolean']>;
  onBehalfOf?: InputMaybe<Scalars['JSON']>;
  pauseCollection?: InputMaybe<StripeStringOrPostSubscriptionsSubscriptionExposedIdPauseCollectionUnionInput>;
  paymentBehavior?: InputMaybe<StripePostSubscriptionsSubscriptionExposedIdPaymentBehavior>;
  paymentSettings?: InputMaybe<StripePostSubscriptionsSubscriptionExposedIdPaymentSettingsInput>;
  pendingInvoiceItemInterval?: InputMaybe<StripeStringOrPostSubscriptionsSubscriptionExposedIdPendingInvoiceItemIntervalUnionInput>;
  promotionCode?: InputMaybe<Scalars['String']>;
  prorationBehavior?: InputMaybe<StripePostSubscriptionsSubscriptionExposedIdProrationBehavior>;
  prorationDate?: InputMaybe<Scalars['Int']>;
  transferData?: InputMaybe<StripeStringOrPostSubscriptionsSubscriptionExposedIdTransferDataUnionInput>;
  trialEnd?: InputMaybe<Scalars['JSON']>;
  trialFromPlan?: InputMaybe<Scalars['Boolean']>;
  trialSettings?: InputMaybe<StripePostSubscriptionsSubscriptionExposedIdTrialSettingsInput>;
};

export enum StripePostSubscriptionsSubscriptionExposedIdIntervalPendingInvoiceItemInterval {
  Day = 'DAY',
  Month = 'MONTH',
  Week = 'WEEK',
  Year = 'YEAR'
}

export enum StripePostSubscriptionsSubscriptionExposedIdIntervalRecurringPriceDataItems {
  Day = 'DAY',
  Month = 'MONTH',
  Week = 'WEEK',
  Year = 'YEAR'
}

export type StripePostSubscriptionsSubscriptionExposedIdItemsInput = {
  billingThresholds?: InputMaybe<StripeStringOrPostSubscriptionsSubscriptionExposedIdBillingThresholdsItemsUnionInput>;
  clearUsage?: InputMaybe<Scalars['Boolean']>;
  deleted?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  price?: InputMaybe<Scalars['String']>;
  priceData?: InputMaybe<StripePostSubscriptionsSubscriptionExposedIdPriceDataItemsInput>;
  quantity?: InputMaybe<Scalars['Int']>;
  taxRates?: InputMaybe<Scalars['JSON']>;
};

export type StripePostSubscriptionsSubscriptionExposedIdMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput = {
  transactionType?: InputMaybe<StripePostSubscriptionsSubscriptionExposedIdTransactionTypeMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettings>;
};

export type StripePostSubscriptionsSubscriptionExposedIdMandateOptionsCardPaymentMethodOptionsPaymentSettingsInput = {
  amount?: InputMaybe<Scalars['Int']>;
  amountType?: InputMaybe<StripePostSubscriptionsSubscriptionExposedIdAmountTypeMandateOptionsCardPaymentMethodOptionsPaymentSettings>;
  description?: InputMaybe<Scalars['String']>;
};

export enum StripePostSubscriptionsSubscriptionExposedIdMissingPaymentMethodEndBehaviorTrialSettings {
  Cancel = 'CANCEL',
  CreateInvoice = 'CREATE_INVOICE',
  Pause = 'PAUSE'
}

export enum StripePostSubscriptionsSubscriptionExposedIdNetworkCardPaymentMethodOptionsPaymentSettings {
  Amex = 'AMEX',
  CartesBancaires = 'CARTES_BANCAIRES',
  Diners = 'DINERS',
  Discover = 'DISCOVER',
  EftposAu = 'EFTPOS_AU',
  Interac = 'INTERAC',
  Jcb = 'JCB',
  Mastercard = 'MASTERCARD',
  Unionpay = 'UNIONPAY',
  Unknown = 'UNKNOWN',
  Visa = 'VISA'
}

export type StripePostSubscriptionsSubscriptionExposedIdPauseCollectionInput = {
  behavior: StripePostSubscriptionsSubscriptionExposedIdBehaviorPauseCollection;
  resumesAt?: InputMaybe<Scalars['Int']>;
};

export enum StripePostSubscriptionsSubscriptionExposedIdPaymentBehavior {
  AllowIncomplete = 'ALLOW_INCOMPLETE',
  DefaultIncomplete = 'DEFAULT_INCOMPLETE',
  ErrorIfIncomplete = 'ERROR_IF_INCOMPLETE',
  PendingIfIncomplete = 'PENDING_IF_INCOMPLETE'
}

export type StripePostSubscriptionsSubscriptionExposedIdPaymentMethodOptionsPaymentSettingsInput = {
  acssDebit?: InputMaybe<StripeStringOrPostSubscriptionsSubscriptionExposedIdAcssDebitPaymentMethodOptionsPaymentSettingsUnionInput>;
  bancontact?: InputMaybe<StripeStringOrPostSubscriptionsSubscriptionExposedIdBancontactPaymentMethodOptionsPaymentSettingsUnionInput>;
  card?: InputMaybe<StripeStringOrPostSubscriptionsSubscriptionExposedIdCardPaymentMethodOptionsPaymentSettingsUnionInput>;
  customerBalance?: InputMaybe<StripeStringOrPostSubscriptionsSubscriptionExposedIdCustomerBalancePaymentMethodOptionsPaymentSettingsUnionInput>;
  konbini?: InputMaybe<Scalars['JSON']>;
  usBankAccount?: InputMaybe<StripeStringOrPostSubscriptionsSubscriptionExposedIdUsBankAccountPaymentMethodOptionsPaymentSettingsUnionInput>;
};

export type StripePostSubscriptionsSubscriptionExposedIdPaymentSettingsInput = {
  paymentMethodOptions?: InputMaybe<StripePostSubscriptionsSubscriptionExposedIdPaymentMethodOptionsPaymentSettingsInput>;
  paymentMethodTypes?: InputMaybe<Scalars['JSON']>;
  saveDefaultPaymentMethod?: InputMaybe<StripePostSubscriptionsSubscriptionExposedIdSaveDefaultPaymentMethodPaymentSettings>;
};

export type StripePostSubscriptionsSubscriptionExposedIdPendingInvoiceItemIntervalInput = {
  interval: StripePostSubscriptionsSubscriptionExposedIdIntervalPendingInvoiceItemInterval;
  intervalCount?: InputMaybe<Scalars['Int']>;
};

export enum StripePostSubscriptionsSubscriptionExposedIdPermissionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettings {
  Balances = 'BALANCES',
  Ownership = 'OWNERSHIP',
  PaymentMethod = 'PAYMENT_METHOD',
  Transactions = 'TRANSACTIONS'
}

export enum StripePostSubscriptionsSubscriptionExposedIdPreferredLanguageBancontactPaymentMethodOptionsPaymentSettings {
  De = 'DE',
  En = 'EN',
  Fr = 'FR',
  Nl = 'NL'
}

export type StripePostSubscriptionsSubscriptionExposedIdPriceDataAddInvoiceItemsInput = {
  currency: Scalars['String'];
  product: Scalars['String'];
  taxBehavior?: InputMaybe<StripePostSubscriptionsSubscriptionExposedIdTaxBehaviorPriceDataAddInvoiceItems>;
  unitAmount?: InputMaybe<Scalars['Int']>;
  unitAmountDecimal?: InputMaybe<Scalars['String']>;
};

export type StripePostSubscriptionsSubscriptionExposedIdPriceDataItemsInput = {
  currency: Scalars['String'];
  product: Scalars['String'];
  recurring: StripePostSubscriptionsSubscriptionExposedIdRecurringPriceDataItemsInput;
  taxBehavior?: InputMaybe<StripePostSubscriptionsSubscriptionExposedIdTaxBehaviorPriceDataItems>;
  unitAmount?: InputMaybe<Scalars['Int']>;
  unitAmountDecimal?: InputMaybe<Scalars['String']>;
};

export enum StripePostSubscriptionsSubscriptionExposedIdProrationBehavior {
  AlwaysInvoice = 'ALWAYS_INVOICE',
  CreateProrations = 'CREATE_PRORATIONS',
  None = 'NONE'
}

export type StripePostSubscriptionsSubscriptionExposedIdRecurringPriceDataItemsInput = {
  interval: StripePostSubscriptionsSubscriptionExposedIdIntervalRecurringPriceDataItems;
  intervalCount?: InputMaybe<Scalars['Int']>;
};

export enum StripePostSubscriptionsSubscriptionExposedIdRequestThreeDSecureCardPaymentMethodOptionsPaymentSettings {
  Any = 'ANY',
  Automatic = 'AUTOMATIC'
}

export enum StripePostSubscriptionsSubscriptionExposedIdSaveDefaultPaymentMethodPaymentSettings {
  Off = 'OFF',
  OnSubscription = 'ON_SUBSCRIPTION'
}

export enum StripePostSubscriptionsSubscriptionExposedIdTaxBehaviorPriceDataAddInvoiceItems {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE',
  Unspecified = 'UNSPECIFIED'
}

export enum StripePostSubscriptionsSubscriptionExposedIdTaxBehaviorPriceDataItems {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE',
  Unspecified = 'UNSPECIFIED'
}

export enum StripePostSubscriptionsSubscriptionExposedIdTransactionTypeMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettings {
  Business = 'BUSINESS',
  Personal = 'PERSONAL'
}

export type StripePostSubscriptionsSubscriptionExposedIdTransferDataInput = {
  amountPercent?: InputMaybe<Scalars['Float']>;
  destination: Scalars['String'];
};

export type StripePostSubscriptionsSubscriptionExposedIdTrialSettingsInput = {
  endBehavior: StripePostSubscriptionsSubscriptionExposedIdEndBehaviorTrialSettingsInput;
};

export type StripePostSubscriptionsSubscriptionExposedIdUsBankAccountPaymentMethodOptionsPaymentSettingsInput = {
  financialConnections?: InputMaybe<StripePostSubscriptionsSubscriptionExposedIdFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput>;
  verificationMethod?: InputMaybe<StripePostSubscriptionsSubscriptionExposedIdVerificationMethodUsBankAccountPaymentMethodOptionsPaymentSettings>;
};

export enum StripePostSubscriptionsSubscriptionExposedIdVerificationMethodAcssDebitPaymentMethodOptionsPaymentSettings {
  Automatic = 'AUTOMATIC',
  Instant = 'INSTANT',
  Microdeposits = 'MICRODEPOSITS'
}

export enum StripePostSubscriptionsSubscriptionExposedIdVerificationMethodUsBankAccountPaymentMethodOptionsPaymentSettings {
  Automatic = 'AUTOMATIC',
  Instant = 'INSTANT',
  Microdeposits = 'MICRODEPOSITS'
}

export enum StripePostSubscriptionsSubscriptionResumeBillingCycleAnchor {
  Now = 'NOW',
  Unchanged = 'UNCHANGED'
}

export type StripePostSubscriptionsSubscriptionResumeInput = {
  billingCycleAnchor?: InputMaybe<StripePostSubscriptionsSubscriptionResumeBillingCycleAnchor>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  prorationBehavior?: InputMaybe<StripePostSubscriptionsSubscriptionResumeProrationBehavior>;
  prorationDate?: InputMaybe<Scalars['Int']>;
};

export enum StripePostSubscriptionsSubscriptionResumeProrationBehavior {
  AlwaysInvoice = 'ALWAYS_INVOICE',
  CreateProrations = 'CREATE_PRORATIONS',
  None = 'NONE'
}

export enum StripePostSubscriptionsTaxBehaviorPriceDataAddInvoiceItems {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE',
  Unspecified = 'UNSPECIFIED'
}

export enum StripePostSubscriptionsTaxBehaviorPriceDataItems {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE',
  Unspecified = 'UNSPECIFIED'
}

export enum StripePostSubscriptionsTransactionTypeMandateOptionsAcssDebitPaymentMethodOptionsPaymentSettings {
  Business = 'BUSINESS',
  Personal = 'PERSONAL'
}

export type StripePostSubscriptionsTransferDataInput = {
  amountPercent?: InputMaybe<Scalars['Float']>;
  destination: Scalars['String'];
};

export type StripePostSubscriptionsTrialSettingsInput = {
  endBehavior: StripePostSubscriptionsEndBehaviorTrialSettingsInput;
};

export type StripePostSubscriptionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput = {
  financialConnections?: InputMaybe<StripePostSubscriptionsFinancialConnectionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput>;
  verificationMethod?: InputMaybe<StripePostSubscriptionsVerificationMethodUsBankAccountPaymentMethodOptionsPaymentSettings>;
};

export enum StripePostSubscriptionsVerificationMethodAcssDebitPaymentMethodOptionsPaymentSettings {
  Automatic = 'AUTOMATIC',
  Instant = 'INSTANT',
  Microdeposits = 'MICRODEPOSITS'
}

export enum StripePostSubscriptionsVerificationMethodUsBankAccountPaymentMethodOptionsPaymentSettings {
  Automatic = 'AUTOMATIC',
  Instant = 'INSTANT',
  Microdeposits = 'MICRODEPOSITS'
}

export type StripePostTaxCalculationsAddressCustomerDetailsInput = {
  city?: InputMaybe<Scalars['String']>;
  country: Scalars['String'];
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export enum StripePostTaxCalculationsAddressSourceCustomerDetails {
  Billing = 'BILLING',
  Shipping = 'SHIPPING'
}

export type StripePostTaxCalculationsCustomerDetailsInput = {
  address?: InputMaybe<StripePostTaxCalculationsAddressCustomerDetailsInput>;
  addressSource?: InputMaybe<StripePostTaxCalculationsAddressSourceCustomerDetails>;
  ipAddress?: InputMaybe<Scalars['String']>;
  taxIds?: InputMaybe<Array<StripePostTaxCalculationsTaxIdsCustomerDetailsInput>>;
  taxabilityOverride?: InputMaybe<StripePostTaxCalculationsTaxabilityOverrideCustomerDetails>;
};

export type StripePostTaxCalculationsInput = {
  currency: Scalars['String'];
  customer?: InputMaybe<Scalars['String']>;
  customerDetails?: InputMaybe<StripePostTaxCalculationsCustomerDetailsInput>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  lineItems: Array<StripePostTaxCalculationsLineItemsInput>;
  shippingCost?: InputMaybe<StripePostTaxCalculationsShippingCostInput>;
  taxDate?: InputMaybe<Scalars['Int']>;
};

export type StripePostTaxCalculationsLineItemsInput = {
  amount: Scalars['Int'];
  product?: InputMaybe<Scalars['String']>;
  quantity?: InputMaybe<Scalars['Int']>;
  reference?: InputMaybe<Scalars['String']>;
  taxBehavior?: InputMaybe<StripePostTaxCalculationsTaxBehaviorLineItems>;
  taxCode?: InputMaybe<Scalars['String']>;
};

export type StripePostTaxCalculationsShippingCostInput = {
  amount?: InputMaybe<Scalars['Int']>;
  shippingRate?: InputMaybe<Scalars['String']>;
  taxBehavior?: InputMaybe<StripePostTaxCalculationsTaxBehaviorShippingCost>;
  taxCode?: InputMaybe<Scalars['String']>;
};

export enum StripePostTaxCalculationsTaxBehaviorLineItems {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE'
}

export enum StripePostTaxCalculationsTaxBehaviorShippingCost {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE'
}

export type StripePostTaxCalculationsTaxIdsCustomerDetailsInput = {
  type: StripePostTaxCalculationsTypeTaxIdsCustomerDetails;
  value: Scalars['String'];
};

export enum StripePostTaxCalculationsTaxabilityOverrideCustomerDetails {
  CustomerExempt = 'CUSTOMER_EXEMPT',
  None = 'NONE',
  ReverseCharge = 'REVERSE_CHARGE'
}

export enum StripePostTaxCalculationsTypeTaxIdsCustomerDetails {
  AeTrn = 'AE_TRN',
  AuAbn = 'AU_ABN',
  AuArn = 'AU_ARN',
  BgUic = 'BG_UIC',
  BrCnpj = 'BR_CNPJ',
  BrCpf = 'BR_CPF',
  CaBn = 'CA_BN',
  CaGstHst = 'CA_GST_HST',
  CaPstBc = 'CA_PST_BC',
  CaPstMb = 'CA_PST_MB',
  CaPstSk = 'CA_PST_SK',
  CaQst = 'CA_QST',
  ChVat = 'CH_VAT',
  ClTin = 'CL_TIN',
  EgTin = 'EG_TIN',
  EsCif = 'ES_CIF',
  EuOssVat = 'EU_OSS_VAT',
  EuVat = 'EU_VAT',
  GbVat = 'GB_VAT',
  GeVat = 'GE_VAT',
  HkBr = 'HK_BR',
  HuTin = 'HU_TIN',
  IdNpwp = 'ID_NPWP',
  IlVat = 'IL_VAT',
  InGst = 'IN_GST',
  IsVat = 'IS_VAT',
  JpCn = 'JP_CN',
  JpRn = 'JP_RN',
  JpTrn = 'JP_TRN',
  KePin = 'KE_PIN',
  KrBrn = 'KR_BRN',
  LiUid = 'LI_UID',
  MxRfc = 'MX_RFC',
  MyFrp = 'MY_FRP',
  MyItn = 'MY_ITN',
  MySst = 'MY_SST',
  NoVat = 'NO_VAT',
  NzGst = 'NZ_GST',
  PhTin = 'PH_TIN',
  RuInn = 'RU_INN',
  RuKpp = 'RU_KPP',
  SaVat = 'SA_VAT',
  SgGst = 'SG_GST',
  SgUen = 'SG_UEN',
  SiTin = 'SI_TIN',
  ThVat = 'TH_VAT',
  TrTin = 'TR_TIN',
  TwVat = 'TW_VAT',
  UaVat = 'UA_VAT',
  UsEin = 'US_EIN',
  ZaVat = 'ZA_VAT'
}

export type StripePostTaxRatesInput = {
  active?: InputMaybe<Scalars['Boolean']>;
  country?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  displayName: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
  inclusive: Scalars['Boolean'];
  jurisdiction?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  percentage: Scalars['Float'];
  state?: InputMaybe<Scalars['String']>;
  taxType?: InputMaybe<StripePostTaxRatesTaxType>;
};

export type StripePostTaxRatesTaxRateInput = {
  active?: InputMaybe<Scalars['Boolean']>;
  country?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  displayName?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  jurisdiction?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  state?: InputMaybe<Scalars['String']>;
  taxType?: InputMaybe<StripePostTaxRatesTaxRateTaxType>;
};

export enum StripePostTaxRatesTaxRateTaxType {
  AmusementTax = 'AMUSEMENT_TAX',
  CommunicationsTax = 'COMMUNICATIONS_TAX',
  Gst = 'GST',
  Hst = 'HST',
  Igst = 'IGST',
  Jct = 'JCT',
  LeaseTax = 'LEASE_TAX',
  Pst = 'PST',
  Qst = 'QST',
  Rst = 'RST',
  SalesTax = 'SALES_TAX',
  Vat = 'VAT'
}

export enum StripePostTaxRatesTaxType {
  AmusementTax = 'AMUSEMENT_TAX',
  CommunicationsTax = 'COMMUNICATIONS_TAX',
  Gst = 'GST',
  Hst = 'HST',
  Igst = 'IGST',
  Jct = 'JCT',
  LeaseTax = 'LEASE_TAX',
  Pst = 'PST',
  Qst = 'QST',
  Rst = 'RST',
  SalesTax = 'SALES_TAX',
  Vat = 'VAT'
}

export type StripePostTaxTransactionsCreateFromCalculationInput = {
  calculation: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  reference: Scalars['String'];
};

export type StripePostTaxTransactionsCreateReversalInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  lineItems?: InputMaybe<Array<StripePostTaxTransactionsCreateReversalLineItemsInput>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  mode: StripePostTaxTransactionsCreateReversalMode;
  originalTransaction: Scalars['String'];
  reference: Scalars['String'];
  shippingCost?: InputMaybe<StripePostTaxTransactionsCreateReversalShippingCostInput>;
};

export type StripePostTaxTransactionsCreateReversalLineItemsInput = {
  amount: Scalars['Int'];
  amountTax: Scalars['Int'];
  metadata?: InputMaybe<Scalars['JSON']>;
  originalLineItem: Scalars['String'];
  quantity?: InputMaybe<Scalars['Int']>;
  reference: Scalars['String'];
};

export enum StripePostTaxTransactionsCreateReversalMode {
  Full = 'FULL',
  Partial = 'PARTIAL'
}

export type StripePostTaxTransactionsCreateReversalShippingCostInput = {
  amount: Scalars['Int'];
  amountTax: Scalars['Int'];
};

export type StripePostTerminalConfigurationsAudTippingInput = {
  fixedAmounts?: InputMaybe<Array<Scalars['Int']>>;
  percentages?: InputMaybe<Array<Scalars['Int']>>;
  smartTipThreshold?: InputMaybe<Scalars['Int']>;
};

export type StripePostTerminalConfigurationsBbposWiseposEInput = {
  splashscreen?: InputMaybe<Scalars['JSON']>;
};

export type StripePostTerminalConfigurationsCadTippingInput = {
  fixedAmounts?: InputMaybe<Array<Scalars['Int']>>;
  percentages?: InputMaybe<Array<Scalars['Int']>>;
  smartTipThreshold?: InputMaybe<Scalars['Int']>;
};

export type StripePostTerminalConfigurationsChfTippingInput = {
  fixedAmounts?: InputMaybe<Array<Scalars['Int']>>;
  percentages?: InputMaybe<Array<Scalars['Int']>>;
  smartTipThreshold?: InputMaybe<Scalars['Int']>;
};

export type StripePostTerminalConfigurationsConfigurationAudTippingInput = {
  fixedAmounts?: InputMaybe<Array<Scalars['Int']>>;
  percentages?: InputMaybe<Array<Scalars['Int']>>;
  smartTipThreshold?: InputMaybe<Scalars['Int']>;
};

export type StripePostTerminalConfigurationsConfigurationBbposWiseposEInput = {
  splashscreen?: InputMaybe<Scalars['JSON']>;
};

export type StripePostTerminalConfigurationsConfigurationCadTippingInput = {
  fixedAmounts?: InputMaybe<Array<Scalars['Int']>>;
  percentages?: InputMaybe<Array<Scalars['Int']>>;
  smartTipThreshold?: InputMaybe<Scalars['Int']>;
};

export type StripePostTerminalConfigurationsConfigurationChfTippingInput = {
  fixedAmounts?: InputMaybe<Array<Scalars['Int']>>;
  percentages?: InputMaybe<Array<Scalars['Int']>>;
  smartTipThreshold?: InputMaybe<Scalars['Int']>;
};

export type StripePostTerminalConfigurationsConfigurationCzkTippingInput = {
  fixedAmounts?: InputMaybe<Array<Scalars['Int']>>;
  percentages?: InputMaybe<Array<Scalars['Int']>>;
  smartTipThreshold?: InputMaybe<Scalars['Int']>;
};

export type StripePostTerminalConfigurationsConfigurationDkkTippingInput = {
  fixedAmounts?: InputMaybe<Array<Scalars['Int']>>;
  percentages?: InputMaybe<Array<Scalars['Int']>>;
  smartTipThreshold?: InputMaybe<Scalars['Int']>;
};

export type StripePostTerminalConfigurationsConfigurationEurTippingInput = {
  fixedAmounts?: InputMaybe<Array<Scalars['Int']>>;
  percentages?: InputMaybe<Array<Scalars['Int']>>;
  smartTipThreshold?: InputMaybe<Scalars['Int']>;
};

export type StripePostTerminalConfigurationsConfigurationGbpTippingInput = {
  fixedAmounts?: InputMaybe<Array<Scalars['Int']>>;
  percentages?: InputMaybe<Array<Scalars['Int']>>;
  smartTipThreshold?: InputMaybe<Scalars['Int']>;
};

export type StripePostTerminalConfigurationsConfigurationHkdTippingInput = {
  fixedAmounts?: InputMaybe<Array<Scalars['Int']>>;
  percentages?: InputMaybe<Array<Scalars['Int']>>;
  smartTipThreshold?: InputMaybe<Scalars['Int']>;
};

export type StripePostTerminalConfigurationsConfigurationInput = {
  bbposWiseposE?: InputMaybe<StripeStringOrPostTerminalConfigurationsConfigurationBbposWiseposEUnionInput>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  tipping?: InputMaybe<StripeStringOrPostTerminalConfigurationsConfigurationTippingUnionInput>;
  verifoneP400?: InputMaybe<StripeStringOrPostTerminalConfigurationsConfigurationVerifoneP400UnionInput>;
};

export type StripePostTerminalConfigurationsConfigurationMyrTippingInput = {
  fixedAmounts?: InputMaybe<Array<Scalars['Int']>>;
  percentages?: InputMaybe<Array<Scalars['Int']>>;
  smartTipThreshold?: InputMaybe<Scalars['Int']>;
};

export type StripePostTerminalConfigurationsConfigurationNokTippingInput = {
  fixedAmounts?: InputMaybe<Array<Scalars['Int']>>;
  percentages?: InputMaybe<Array<Scalars['Int']>>;
  smartTipThreshold?: InputMaybe<Scalars['Int']>;
};

export type StripePostTerminalConfigurationsConfigurationNzdTippingInput = {
  fixedAmounts?: InputMaybe<Array<Scalars['Int']>>;
  percentages?: InputMaybe<Array<Scalars['Int']>>;
  smartTipThreshold?: InputMaybe<Scalars['Int']>;
};

export type StripePostTerminalConfigurationsConfigurationSekTippingInput = {
  fixedAmounts?: InputMaybe<Array<Scalars['Int']>>;
  percentages?: InputMaybe<Array<Scalars['Int']>>;
  smartTipThreshold?: InputMaybe<Scalars['Int']>;
};

export type StripePostTerminalConfigurationsConfigurationSgdTippingInput = {
  fixedAmounts?: InputMaybe<Array<Scalars['Int']>>;
  percentages?: InputMaybe<Array<Scalars['Int']>>;
  smartTipThreshold?: InputMaybe<Scalars['Int']>;
};

export type StripePostTerminalConfigurationsConfigurationTippingInput = {
  aud?: InputMaybe<StripePostTerminalConfigurationsConfigurationAudTippingInput>;
  cad?: InputMaybe<StripePostTerminalConfigurationsConfigurationCadTippingInput>;
  chf?: InputMaybe<StripePostTerminalConfigurationsConfigurationChfTippingInput>;
  czk?: InputMaybe<StripePostTerminalConfigurationsConfigurationCzkTippingInput>;
  dkk?: InputMaybe<StripePostTerminalConfigurationsConfigurationDkkTippingInput>;
  eur?: InputMaybe<StripePostTerminalConfigurationsConfigurationEurTippingInput>;
  gbp?: InputMaybe<StripePostTerminalConfigurationsConfigurationGbpTippingInput>;
  hkd?: InputMaybe<StripePostTerminalConfigurationsConfigurationHkdTippingInput>;
  myr?: InputMaybe<StripePostTerminalConfigurationsConfigurationMyrTippingInput>;
  nok?: InputMaybe<StripePostTerminalConfigurationsConfigurationNokTippingInput>;
  nzd?: InputMaybe<StripePostTerminalConfigurationsConfigurationNzdTippingInput>;
  sek?: InputMaybe<StripePostTerminalConfigurationsConfigurationSekTippingInput>;
  sgd?: InputMaybe<StripePostTerminalConfigurationsConfigurationSgdTippingInput>;
  usd?: InputMaybe<StripePostTerminalConfigurationsConfigurationUsdTippingInput>;
};

export type StripePostTerminalConfigurationsConfigurationUsdTippingInput = {
  fixedAmounts?: InputMaybe<Array<Scalars['Int']>>;
  percentages?: InputMaybe<Array<Scalars['Int']>>;
  smartTipThreshold?: InputMaybe<Scalars['Int']>;
};

export type StripePostTerminalConfigurationsConfigurationVerifoneP400Input = {
  splashscreen?: InputMaybe<Scalars['JSON']>;
};

export type StripePostTerminalConfigurationsCzkTippingInput = {
  fixedAmounts?: InputMaybe<Array<Scalars['Int']>>;
  percentages?: InputMaybe<Array<Scalars['Int']>>;
  smartTipThreshold?: InputMaybe<Scalars['Int']>;
};

export type StripePostTerminalConfigurationsDkkTippingInput = {
  fixedAmounts?: InputMaybe<Array<Scalars['Int']>>;
  percentages?: InputMaybe<Array<Scalars['Int']>>;
  smartTipThreshold?: InputMaybe<Scalars['Int']>;
};

export type StripePostTerminalConfigurationsEurTippingInput = {
  fixedAmounts?: InputMaybe<Array<Scalars['Int']>>;
  percentages?: InputMaybe<Array<Scalars['Int']>>;
  smartTipThreshold?: InputMaybe<Scalars['Int']>;
};

export type StripePostTerminalConfigurationsGbpTippingInput = {
  fixedAmounts?: InputMaybe<Array<Scalars['Int']>>;
  percentages?: InputMaybe<Array<Scalars['Int']>>;
  smartTipThreshold?: InputMaybe<Scalars['Int']>;
};

export type StripePostTerminalConfigurationsHkdTippingInput = {
  fixedAmounts?: InputMaybe<Array<Scalars['Int']>>;
  percentages?: InputMaybe<Array<Scalars['Int']>>;
  smartTipThreshold?: InputMaybe<Scalars['Int']>;
};

export type StripePostTerminalConfigurationsInput = {
  bbposWiseposE?: InputMaybe<StripePostTerminalConfigurationsBbposWiseposEInput>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  tipping?: InputMaybe<StripeStringOrPostTerminalConfigurationsTippingUnionInput>;
  verifoneP400?: InputMaybe<StripePostTerminalConfigurationsVerifoneP400Input>;
};

export type StripePostTerminalConfigurationsMyrTippingInput = {
  fixedAmounts?: InputMaybe<Array<Scalars['Int']>>;
  percentages?: InputMaybe<Array<Scalars['Int']>>;
  smartTipThreshold?: InputMaybe<Scalars['Int']>;
};

export type StripePostTerminalConfigurationsNokTippingInput = {
  fixedAmounts?: InputMaybe<Array<Scalars['Int']>>;
  percentages?: InputMaybe<Array<Scalars['Int']>>;
  smartTipThreshold?: InputMaybe<Scalars['Int']>;
};

export type StripePostTerminalConfigurationsNzdTippingInput = {
  fixedAmounts?: InputMaybe<Array<Scalars['Int']>>;
  percentages?: InputMaybe<Array<Scalars['Int']>>;
  smartTipThreshold?: InputMaybe<Scalars['Int']>;
};

export type StripePostTerminalConfigurationsSekTippingInput = {
  fixedAmounts?: InputMaybe<Array<Scalars['Int']>>;
  percentages?: InputMaybe<Array<Scalars['Int']>>;
  smartTipThreshold?: InputMaybe<Scalars['Int']>;
};

export type StripePostTerminalConfigurationsSgdTippingInput = {
  fixedAmounts?: InputMaybe<Array<Scalars['Int']>>;
  percentages?: InputMaybe<Array<Scalars['Int']>>;
  smartTipThreshold?: InputMaybe<Scalars['Int']>;
};

export type StripePostTerminalConfigurationsTippingInput = {
  aud?: InputMaybe<StripePostTerminalConfigurationsAudTippingInput>;
  cad?: InputMaybe<StripePostTerminalConfigurationsCadTippingInput>;
  chf?: InputMaybe<StripePostTerminalConfigurationsChfTippingInput>;
  czk?: InputMaybe<StripePostTerminalConfigurationsCzkTippingInput>;
  dkk?: InputMaybe<StripePostTerminalConfigurationsDkkTippingInput>;
  eur?: InputMaybe<StripePostTerminalConfigurationsEurTippingInput>;
  gbp?: InputMaybe<StripePostTerminalConfigurationsGbpTippingInput>;
  hkd?: InputMaybe<StripePostTerminalConfigurationsHkdTippingInput>;
  myr?: InputMaybe<StripePostTerminalConfigurationsMyrTippingInput>;
  nok?: InputMaybe<StripePostTerminalConfigurationsNokTippingInput>;
  nzd?: InputMaybe<StripePostTerminalConfigurationsNzdTippingInput>;
  sek?: InputMaybe<StripePostTerminalConfigurationsSekTippingInput>;
  sgd?: InputMaybe<StripePostTerminalConfigurationsSgdTippingInput>;
  usd?: InputMaybe<StripePostTerminalConfigurationsUsdTippingInput>;
};

export type StripePostTerminalConfigurationsUsdTippingInput = {
  fixedAmounts?: InputMaybe<Array<Scalars['Int']>>;
  percentages?: InputMaybe<Array<Scalars['Int']>>;
  smartTipThreshold?: InputMaybe<Scalars['Int']>;
};

export type StripePostTerminalConfigurationsVerifoneP400Input = {
  splashscreen?: InputMaybe<Scalars['JSON']>;
};

export type StripePostTerminalConnectionTokensInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  location?: InputMaybe<Scalars['String']>;
};

export type StripePostTerminalLocationsAddressInput = {
  city?: InputMaybe<Scalars['String']>;
  country: Scalars['String'];
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostTerminalLocationsInput = {
  address: StripePostTerminalLocationsAddressInput;
  configurationOverrides?: InputMaybe<Scalars['String']>;
  displayName: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
};

export type StripePostTerminalLocationsLocationAddressInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostTerminalLocationsLocationInput = {
  address?: InputMaybe<StripePostTerminalLocationsLocationAddressInput>;
  configurationOverrides?: InputMaybe<Scalars['String']>;
  displayName?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
};

export type StripePostTerminalReadersInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  label?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  registrationCode: Scalars['String'];
};

export type StripePostTerminalReadersReaderCancelActionInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostTerminalReadersReaderInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  label?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
};

export type StripePostTerminalReadersReaderProcessPaymentIntentInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  paymentIntent: Scalars['String'];
  processConfig?: InputMaybe<StripePostTerminalReadersReaderProcessPaymentIntentProcessConfigInput>;
};

export type StripePostTerminalReadersReaderProcessPaymentIntentProcessConfigInput = {
  skipTipping?: InputMaybe<Scalars['Boolean']>;
  tipping?: InputMaybe<StripePostTerminalReadersReaderProcessPaymentIntentTippingProcessConfigInput>;
};

export type StripePostTerminalReadersReaderProcessPaymentIntentTippingProcessConfigInput = {
  amountEligible?: InputMaybe<Scalars['Int']>;
};

export type StripePostTerminalReadersReaderProcessSetupIntentInput = {
  customerConsentCollected: Scalars['Boolean'];
  expand?: InputMaybe<Array<Scalars['String']>>;
  setupIntent: Scalars['String'];
};

export type StripePostTerminalReadersReaderRefundPaymentInput = {
  amount?: InputMaybe<Scalars['Int']>;
  charge?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  paymentIntent?: InputMaybe<Scalars['String']>;
  refundApplicationFee?: InputMaybe<Scalars['Boolean']>;
  reverseTransfer?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostTerminalReadersReaderSetReaderDisplayCartInput = {
  currency: Scalars['String'];
  lineItems: Array<StripePostTerminalReadersReaderSetReaderDisplayLineItemsCartInput>;
  tax?: InputMaybe<Scalars['Int']>;
  total: Scalars['Int'];
};

export type StripePostTerminalReadersReaderSetReaderDisplayInput = {
  cart?: InputMaybe<StripePostTerminalReadersReaderSetReaderDisplayCartInput>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  type: StripePostTerminalReadersReaderSetReaderDisplayType;
};

export type StripePostTerminalReadersReaderSetReaderDisplayLineItemsCartInput = {
  amount: Scalars['Int'];
  description: Scalars['String'];
  quantity: Scalars['Int'];
};

export enum StripePostTerminalReadersReaderSetReaderDisplayType {
  Cart = 'CART'
}

export type StripePostTestHelpersCustomersCustomerFundCashBalanceInput = {
  amount: Scalars['Int'];
  currency: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
  reference?: InputMaybe<Scalars['String']>;
};

export type StripePostTestHelpersIssuingCardsCardShippingDeliverInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostTestHelpersIssuingCardsCardShippingFailInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostTestHelpersIssuingCardsCardShippingReturnInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostTestHelpersIssuingCardsCardShippingShipInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostTestHelpersRefundsRefundExpireInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostTestHelpersTerminalReadersReaderPresentPaymentMethodCardPresentInput = {
  number?: InputMaybe<Scalars['String']>;
};

export type StripePostTestHelpersTerminalReadersReaderPresentPaymentMethodInput = {
  amountTip?: InputMaybe<Scalars['Int']>;
  cardPresent?: InputMaybe<StripePostTestHelpersTerminalReadersReaderPresentPaymentMethodCardPresentInput>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  interacPresent?: InputMaybe<StripePostTestHelpersTerminalReadersReaderPresentPaymentMethodInteracPresentInput>;
  type?: InputMaybe<StripePostTestHelpersTerminalReadersReaderPresentPaymentMethodType>;
};

export type StripePostTestHelpersTerminalReadersReaderPresentPaymentMethodInteracPresentInput = {
  number?: InputMaybe<Scalars['String']>;
};

export enum StripePostTestHelpersTerminalReadersReaderPresentPaymentMethodType {
  CardPresent = 'CARD_PRESENT',
  InteracPresent = 'INTERAC_PRESENT'
}

export type StripePostTestHelpersTestClocksInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  frozenTime: Scalars['Int'];
  name?: InputMaybe<Scalars['String']>;
};

export type StripePostTestHelpersTestClocksTestClockAdvanceInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  frozenTime: Scalars['Int'];
};

export enum StripePostTestHelpersTreasuryInboundTransfersIdFailCodeFailureDetails {
  AccountClosed = 'ACCOUNT_CLOSED',
  AccountFrozen = 'ACCOUNT_FROZEN',
  BankAccountRestricted = 'BANK_ACCOUNT_RESTRICTED',
  BankOwnershipChanged = 'BANK_OWNERSHIP_CHANGED',
  DebitNotAuthorized = 'DEBIT_NOT_AUTHORIZED',
  IncorrectAccountHolderAddress = 'INCORRECT_ACCOUNT_HOLDER_ADDRESS',
  IncorrectAccountHolderName = 'INCORRECT_ACCOUNT_HOLDER_NAME',
  IncorrectAccountHolderTaxId = 'INCORRECT_ACCOUNT_HOLDER_TAX_ID',
  InsufficientFunds = 'INSUFFICIENT_FUNDS',
  InvalidAccountNumber = 'INVALID_ACCOUNT_NUMBER',
  InvalidCurrency = 'INVALID_CURRENCY',
  NoAccount = 'NO_ACCOUNT',
  Other = 'OTHER'
}

export type StripePostTestHelpersTreasuryInboundTransfersIdFailFailureDetailsInput = {
  code?: InputMaybe<StripePostTestHelpersTreasuryInboundTransfersIdFailCodeFailureDetails>;
};

export type StripePostTestHelpersTreasuryInboundTransfersIdFailInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  failureDetails?: InputMaybe<StripePostTestHelpersTreasuryInboundTransfersIdFailFailureDetailsInput>;
};

export type StripePostTestHelpersTreasuryInboundTransfersIdReturnInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostTestHelpersTreasuryInboundTransfersIdSucceedInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostTestHelpersTreasuryOutboundPaymentsIdFailInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostTestHelpersTreasuryOutboundPaymentsIdPostInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export enum StripePostTestHelpersTreasuryOutboundPaymentsIdReturnCodeReturnedDetails {
  AccountClosed = 'ACCOUNT_CLOSED',
  AccountFrozen = 'ACCOUNT_FROZEN',
  BankAccountRestricted = 'BANK_ACCOUNT_RESTRICTED',
  BankOwnershipChanged = 'BANK_OWNERSHIP_CHANGED',
  Declined = 'DECLINED',
  IncorrectAccountHolderName = 'INCORRECT_ACCOUNT_HOLDER_NAME',
  InvalidAccountNumber = 'INVALID_ACCOUNT_NUMBER',
  InvalidCurrency = 'INVALID_CURRENCY',
  NoAccount = 'NO_ACCOUNT',
  Other = 'OTHER'
}

export type StripePostTestHelpersTreasuryOutboundPaymentsIdReturnInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  returnedDetails?: InputMaybe<StripePostTestHelpersTreasuryOutboundPaymentsIdReturnReturnedDetailsInput>;
};

export type StripePostTestHelpersTreasuryOutboundPaymentsIdReturnReturnedDetailsInput = {
  code?: InputMaybe<StripePostTestHelpersTreasuryOutboundPaymentsIdReturnCodeReturnedDetails>;
};

export type StripePostTestHelpersTreasuryOutboundTransfersOutboundTransferFailInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostTestHelpersTreasuryOutboundTransfersOutboundTransferPostInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export enum StripePostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnCodeReturnedDetails {
  AccountClosed = 'ACCOUNT_CLOSED',
  AccountFrozen = 'ACCOUNT_FROZEN',
  BankAccountRestricted = 'BANK_ACCOUNT_RESTRICTED',
  BankOwnershipChanged = 'BANK_OWNERSHIP_CHANGED',
  Declined = 'DECLINED',
  IncorrectAccountHolderName = 'INCORRECT_ACCOUNT_HOLDER_NAME',
  InvalidAccountNumber = 'INVALID_ACCOUNT_NUMBER',
  InvalidCurrency = 'INVALID_CURRENCY',
  NoAccount = 'NO_ACCOUNT',
  Other = 'OTHER'
}

export type StripePostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  returnedDetails?: InputMaybe<StripePostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnReturnedDetailsInput>;
};

export type StripePostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnReturnedDetailsInput = {
  code?: InputMaybe<StripePostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnCodeReturnedDetails>;
};

export type StripePostTestHelpersTreasuryReceivedCreditsInitiatingPaymentMethodDetailsInput = {
  type: StripePostTestHelpersTreasuryReceivedCreditsTypeInitiatingPaymentMethodDetails;
  usBankAccount?: InputMaybe<StripePostTestHelpersTreasuryReceivedCreditsUsBankAccountInitiatingPaymentMethodDetailsInput>;
};

export type StripePostTestHelpersTreasuryReceivedCreditsInput = {
  amount: Scalars['Int'];
  currency: Scalars['String'];
  description?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  financialAccount: Scalars['String'];
  initiatingPaymentMethodDetails?: InputMaybe<StripePostTestHelpersTreasuryReceivedCreditsInitiatingPaymentMethodDetailsInput>;
  network: StripePostTestHelpersTreasuryReceivedCreditsNetwork;
};

export enum StripePostTestHelpersTreasuryReceivedCreditsNetwork {
  Ach = 'ACH',
  UsDomesticWire = 'US_DOMESTIC_WIRE'
}

export enum StripePostTestHelpersTreasuryReceivedCreditsTypeInitiatingPaymentMethodDetails {
  UsBankAccount = 'US_BANK_ACCOUNT'
}

export type StripePostTestHelpersTreasuryReceivedCreditsUsBankAccountInitiatingPaymentMethodDetailsInput = {
  accountHolderName?: InputMaybe<Scalars['String']>;
  accountNumber?: InputMaybe<Scalars['String']>;
  routingNumber?: InputMaybe<Scalars['String']>;
};

export type StripePostTestHelpersTreasuryReceivedDebitsInitiatingPaymentMethodDetailsInput = {
  type: StripePostTestHelpersTreasuryReceivedDebitsTypeInitiatingPaymentMethodDetails;
  usBankAccount?: InputMaybe<StripePostTestHelpersTreasuryReceivedDebitsUsBankAccountInitiatingPaymentMethodDetailsInput>;
};

export type StripePostTestHelpersTreasuryReceivedDebitsInput = {
  amount: Scalars['Int'];
  currency: Scalars['String'];
  description?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  financialAccount: Scalars['String'];
  initiatingPaymentMethodDetails?: InputMaybe<StripePostTestHelpersTreasuryReceivedDebitsInitiatingPaymentMethodDetailsInput>;
  network: StripePostTestHelpersTreasuryReceivedDebitsNetwork;
};

export enum StripePostTestHelpersTreasuryReceivedDebitsNetwork {
  Ach = 'ACH'
}

export enum StripePostTestHelpersTreasuryReceivedDebitsTypeInitiatingPaymentMethodDetails {
  UsBankAccount = 'US_BANK_ACCOUNT'
}

export type StripePostTestHelpersTreasuryReceivedDebitsUsBankAccountInitiatingPaymentMethodDetailsInput = {
  accountHolderName?: InputMaybe<Scalars['String']>;
  accountNumber?: InputMaybe<Scalars['String']>;
  routingNumber?: InputMaybe<Scalars['String']>;
};

export enum StripePostTokensAccountHolderTypeBankAccount {
  Company = 'COMPANY',
  Individual = 'INDIVIDUAL'
}

export type StripePostTokensAccountInput = {
  businessType?: InputMaybe<StripePostTokensBusinessTypeAccount>;
  company?: InputMaybe<StripePostTokensCompanyAccountInput>;
  individual?: InputMaybe<StripePostTokensIndividualAccountInput>;
  tosShownAndAccepted?: InputMaybe<Scalars['Boolean']>;
};

export enum StripePostTokensAccountTypeBankAccount {
  Checking = 'CHECKING',
  Futsu = 'FUTSU',
  Savings = 'SAVINGS',
  Toza = 'TOZA'
}

export type StripePostTokensAdditionalDocumentVerificationIndividualAccountInput = {
  back?: InputMaybe<Scalars['String']>;
  front?: InputMaybe<Scalars['String']>;
};

export type StripePostTokensAdditionalDocumentVerificationPersonInput = {
  back?: InputMaybe<Scalars['String']>;
  front?: InputMaybe<Scalars['String']>;
};

export type StripePostTokensAddressCompanyAccountInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostTokensAddressIndividualAccountInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostTokensAddressKanaCompanyAccountInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
  town?: InputMaybe<Scalars['String']>;
};

export type StripePostTokensAddressKanaIndividualAccountInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
  town?: InputMaybe<Scalars['String']>;
};

export type StripePostTokensAddressKanaPersonInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
  town?: InputMaybe<Scalars['String']>;
};

export type StripePostTokensAddressKanjiCompanyAccountInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
  town?: InputMaybe<Scalars['String']>;
};

export type StripePostTokensAddressKanjiIndividualAccountInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
  town?: InputMaybe<Scalars['String']>;
};

export type StripePostTokensAddressKanjiPersonInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
  town?: InputMaybe<Scalars['String']>;
};

export type StripePostTokensAddressPersonInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostTokensBankAccountInput = {
  accountHolderName?: InputMaybe<Scalars['String']>;
  accountHolderType?: InputMaybe<StripePostTokensAccountHolderTypeBankAccount>;
  accountNumber: Scalars['String'];
  accountType?: InputMaybe<StripePostTokensAccountTypeBankAccount>;
  country: Scalars['String'];
  currency?: InputMaybe<Scalars['String']>;
  routingNumber?: InputMaybe<Scalars['String']>;
};

export enum StripePostTokensBusinessTypeAccount {
  Company = 'COMPANY',
  GovernmentEntity = 'GOVERNMENT_ENTITY',
  Individual = 'INDIVIDUAL',
  NonProfit = 'NON_PROFIT'
}

export type StripePostTokensCardInput = {
  addressCity?: InputMaybe<Scalars['String']>;
  addressCountry?: InputMaybe<Scalars['String']>;
  addressLine1?: InputMaybe<Scalars['String']>;
  addressLine2?: InputMaybe<Scalars['String']>;
  addressState?: InputMaybe<Scalars['String']>;
  addressZip?: InputMaybe<Scalars['String']>;
  currency?: InputMaybe<Scalars['String']>;
  cvc?: InputMaybe<Scalars['String']>;
  expMonth: Scalars['String'];
  expYear: Scalars['String'];
  name?: InputMaybe<Scalars['String']>;
  number: Scalars['String'];
};

export type StripePostTokensCompanyAccountInput = {
  address?: InputMaybe<StripePostTokensAddressCompanyAccountInput>;
  addressKana?: InputMaybe<StripePostTokensAddressKanaCompanyAccountInput>;
  addressKanji?: InputMaybe<StripePostTokensAddressKanjiCompanyAccountInput>;
  directorsProvided?: InputMaybe<Scalars['Boolean']>;
  executivesProvided?: InputMaybe<Scalars['Boolean']>;
  exportLicenseId?: InputMaybe<Scalars['String']>;
  exportPurposeCode?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  nameKana?: InputMaybe<Scalars['String']>;
  nameKanji?: InputMaybe<Scalars['String']>;
  ownersProvided?: InputMaybe<Scalars['Boolean']>;
  ownershipDeclaration?: InputMaybe<StripePostTokensOwnershipDeclarationCompanyAccountInput>;
  ownershipDeclarationShownAndSigned?: InputMaybe<Scalars['Boolean']>;
  phone?: InputMaybe<Scalars['String']>;
  registrationNumber?: InputMaybe<Scalars['String']>;
  structure?: InputMaybe<Scalars['String']>;
  taxId?: InputMaybe<Scalars['String']>;
  taxIdRegistrar?: InputMaybe<Scalars['String']>;
  vatId?: InputMaybe<Scalars['String']>;
  verification?: InputMaybe<StripePostTokensVerificationCompanyAccountInput>;
};

export type StripePostTokensCompanyAuthorizationDocumentsPersonInput = {
  files?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostTokensCvcUpdateInput = {
  cvc: Scalars['String'];
};

export type StripePostTokensDobIndividualAccountInput = {
  day: Scalars['Int'];
  month: Scalars['Int'];
  year: Scalars['Int'];
};

export type StripePostTokensDobPersonInput = {
  day: Scalars['Int'];
  month: Scalars['Int'];
  year: Scalars['Int'];
};

export type StripePostTokensDocumentVerificationCompanyAccountInput = {
  back?: InputMaybe<Scalars['String']>;
  front?: InputMaybe<Scalars['String']>;
};

export type StripePostTokensDocumentVerificationIndividualAccountInput = {
  back?: InputMaybe<Scalars['String']>;
  front?: InputMaybe<Scalars['String']>;
};

export type StripePostTokensDocumentVerificationPersonInput = {
  back?: InputMaybe<Scalars['String']>;
  front?: InputMaybe<Scalars['String']>;
};

export type StripePostTokensDocumentsPersonInput = {
  companyAuthorization?: InputMaybe<StripePostTokensCompanyAuthorizationDocumentsPersonInput>;
  passport?: InputMaybe<StripePostTokensPassportDocumentsPersonInput>;
  visa?: InputMaybe<StripePostTokensVisaDocumentsPersonInput>;
};

export type StripePostTokensIndividualAccountInput = {
  address?: InputMaybe<StripePostTokensAddressIndividualAccountInput>;
  addressKana?: InputMaybe<StripePostTokensAddressKanaIndividualAccountInput>;
  addressKanji?: InputMaybe<StripePostTokensAddressKanjiIndividualAccountInput>;
  dob?: InputMaybe<StripeStringOrPostTokensDobIndividualAccountUnionInput>;
  email?: InputMaybe<Scalars['String']>;
  firstName?: InputMaybe<Scalars['String']>;
  firstNameKana?: InputMaybe<Scalars['String']>;
  firstNameKanji?: InputMaybe<Scalars['String']>;
  fullNameAliases?: InputMaybe<Scalars['JSON']>;
  gender?: InputMaybe<Scalars['String']>;
  idNumber?: InputMaybe<Scalars['String']>;
  idNumberSecondary?: InputMaybe<Scalars['String']>;
  lastName?: InputMaybe<Scalars['String']>;
  lastNameKana?: InputMaybe<Scalars['String']>;
  lastNameKanji?: InputMaybe<Scalars['String']>;
  maidenName?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  phone?: InputMaybe<Scalars['String']>;
  politicalExposure?: InputMaybe<StripePostTokensPoliticalExposureIndividualAccount>;
  registeredAddress?: InputMaybe<StripePostTokensRegisteredAddressIndividualAccountInput>;
  ssnLast4?: InputMaybe<Scalars['String']>;
  verification?: InputMaybe<StripePostTokensVerificationIndividualAccountInput>;
};

export type StripePostTokensInput = {
  account?: InputMaybe<StripePostTokensAccountInput>;
  bankAccount?: InputMaybe<StripePostTokensBankAccountInput>;
  card?: InputMaybe<StripeStringOrPostTokensCardUnionInput>;
  customer?: InputMaybe<Scalars['String']>;
  cvcUpdate?: InputMaybe<StripePostTokensCvcUpdateInput>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  person?: InputMaybe<StripePostTokensPersonInput>;
  pii?: InputMaybe<StripePostTokensPiiInput>;
};

export type StripePostTokensOwnershipDeclarationCompanyAccountInput = {
  date?: InputMaybe<Scalars['Int']>;
  ip?: InputMaybe<Scalars['String']>;
  userAgent?: InputMaybe<Scalars['String']>;
};

export type StripePostTokensPassportDocumentsPersonInput = {
  files?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostTokensPersonInput = {
  address?: InputMaybe<StripePostTokensAddressPersonInput>;
  addressKana?: InputMaybe<StripePostTokensAddressKanaPersonInput>;
  addressKanji?: InputMaybe<StripePostTokensAddressKanjiPersonInput>;
  dob?: InputMaybe<StripeStringOrPostTokensDobPersonUnionInput>;
  documents?: InputMaybe<StripePostTokensDocumentsPersonInput>;
  email?: InputMaybe<Scalars['String']>;
  firstName?: InputMaybe<Scalars['String']>;
  firstNameKana?: InputMaybe<Scalars['String']>;
  firstNameKanji?: InputMaybe<Scalars['String']>;
  fullNameAliases?: InputMaybe<Scalars['JSON']>;
  gender?: InputMaybe<Scalars['String']>;
  idNumber?: InputMaybe<Scalars['String']>;
  idNumberSecondary?: InputMaybe<Scalars['String']>;
  lastName?: InputMaybe<Scalars['String']>;
  lastNameKana?: InputMaybe<Scalars['String']>;
  lastNameKanji?: InputMaybe<Scalars['String']>;
  maidenName?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  nationality?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
  politicalExposure?: InputMaybe<Scalars['String']>;
  registeredAddress?: InputMaybe<StripePostTokensRegisteredAddressPersonInput>;
  relationship?: InputMaybe<StripePostTokensRelationshipPersonInput>;
  ssnLast4?: InputMaybe<Scalars['String']>;
  verification?: InputMaybe<StripePostTokensVerificationPersonInput>;
};

export type StripePostTokensPiiInput = {
  idNumber?: InputMaybe<Scalars['String']>;
};

export enum StripePostTokensPoliticalExposureIndividualAccount {
  Existing = 'EXISTING',
  None = 'NONE'
}

export type StripePostTokensRegisteredAddressIndividualAccountInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostTokensRegisteredAddressPersonInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostTokensRelationshipPersonInput = {
  director?: InputMaybe<Scalars['Boolean']>;
  executive?: InputMaybe<Scalars['Boolean']>;
  owner?: InputMaybe<Scalars['Boolean']>;
  percentOwnership?: InputMaybe<Scalars['JSON']>;
  representative?: InputMaybe<Scalars['Boolean']>;
  title?: InputMaybe<Scalars['String']>;
};

export type StripePostTokensVerificationCompanyAccountInput = {
  document?: InputMaybe<StripePostTokensDocumentVerificationCompanyAccountInput>;
};

export type StripePostTokensVerificationIndividualAccountInput = {
  additionalDocument?: InputMaybe<StripePostTokensAdditionalDocumentVerificationIndividualAccountInput>;
  document?: InputMaybe<StripePostTokensDocumentVerificationIndividualAccountInput>;
};

export type StripePostTokensVerificationPersonInput = {
  additionalDocument?: InputMaybe<StripePostTokensAdditionalDocumentVerificationPersonInput>;
  document?: InputMaybe<StripePostTokensDocumentVerificationPersonInput>;
};

export type StripePostTokensVisaDocumentsPersonInput = {
  files?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostTopupsInput = {
  amount: Scalars['Int'];
  currency: Scalars['String'];
  description?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  source?: InputMaybe<Scalars['String']>;
  statementDescriptor?: InputMaybe<Scalars['String']>;
  transferGroup?: InputMaybe<Scalars['String']>;
};

export type StripePostTopupsTopupCancelInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostTopupsTopupInput = {
  description?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
};

export type StripePostTransfersIdReversalsInput = {
  amount?: InputMaybe<Scalars['Int']>;
  description?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  refundApplicationFee?: InputMaybe<Scalars['Boolean']>;
};

export type StripePostTransfersInput = {
  amount?: InputMaybe<Scalars['Int']>;
  currency: Scalars['String'];
  description?: InputMaybe<Scalars['String']>;
  destination: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  sourceTransaction?: InputMaybe<Scalars['String']>;
  sourceType?: InputMaybe<StripePostTransfersSourceType>;
  transferGroup?: InputMaybe<Scalars['String']>;
};

export enum StripePostTransfersSourceType {
  BankAccount = 'BANK_ACCOUNT',
  Card = 'CARD',
  Fpx = 'FPX'
}

export type StripePostTransfersTransferInput = {
  description?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
};

export type StripePostTransfersTransferReversalsIdInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
};

export type StripePostTreasuryCreditReversalsInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  receivedCredit: Scalars['String'];
};

export type StripePostTreasuryDebitReversalsInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  receivedDebit: Scalars['String'];
};

export type StripePostTreasuryFinancialAccountsAbaFinancialAddressesFeaturesInput = {
  requested: Scalars['Boolean'];
};

export type StripePostTreasuryFinancialAccountsAchInboundTransfersFeaturesInput = {
  requested: Scalars['Boolean'];
};

export type StripePostTreasuryFinancialAccountsAchOutboundPaymentsFeaturesInput = {
  requested: Scalars['Boolean'];
};

export type StripePostTreasuryFinancialAccountsAchOutboundTransfersFeaturesInput = {
  requested: Scalars['Boolean'];
};

export type StripePostTreasuryFinancialAccountsCardIssuingFeaturesInput = {
  requested: Scalars['Boolean'];
};

export type StripePostTreasuryFinancialAccountsDepositInsuranceFeaturesInput = {
  requested: Scalars['Boolean'];
};

export type StripePostTreasuryFinancialAccountsFeaturesInput = {
  cardIssuing?: InputMaybe<StripePostTreasuryFinancialAccountsCardIssuingFeaturesInput>;
  depositInsurance?: InputMaybe<StripePostTreasuryFinancialAccountsDepositInsuranceFeaturesInput>;
  financialAddresses?: InputMaybe<StripePostTreasuryFinancialAccountsFinancialAddressesFeaturesInput>;
  inboundTransfers?: InputMaybe<StripePostTreasuryFinancialAccountsInboundTransfersFeaturesInput>;
  intraStripeFlows?: InputMaybe<StripePostTreasuryFinancialAccountsIntraStripeFlowsFeaturesInput>;
  outboundPayments?: InputMaybe<StripePostTreasuryFinancialAccountsOutboundPaymentsFeaturesInput>;
  outboundTransfers?: InputMaybe<StripePostTreasuryFinancialAccountsOutboundTransfersFeaturesInput>;
};

export type StripePostTreasuryFinancialAccountsFinancialAccountAbaFinancialAddressesFeaturesInput = {
  requested: Scalars['Boolean'];
};

export type StripePostTreasuryFinancialAccountsFinancialAccountAchInboundTransfersFeaturesInput = {
  requested: Scalars['Boolean'];
};

export type StripePostTreasuryFinancialAccountsFinancialAccountAchOutboundPaymentsFeaturesInput = {
  requested: Scalars['Boolean'];
};

export type StripePostTreasuryFinancialAccountsFinancialAccountAchOutboundTransfersFeaturesInput = {
  requested: Scalars['Boolean'];
};

export type StripePostTreasuryFinancialAccountsFinancialAccountCardIssuingFeaturesInput = {
  requested: Scalars['Boolean'];
};

export type StripePostTreasuryFinancialAccountsFinancialAccountDepositInsuranceFeaturesInput = {
  requested: Scalars['Boolean'];
};

export type StripePostTreasuryFinancialAccountsFinancialAccountFeaturesInput = {
  cardIssuing?: InputMaybe<StripePostTreasuryFinancialAccountsFinancialAccountCardIssuingFeaturesInput>;
  depositInsurance?: InputMaybe<StripePostTreasuryFinancialAccountsFinancialAccountDepositInsuranceFeaturesInput>;
  financialAddresses?: InputMaybe<StripePostTreasuryFinancialAccountsFinancialAccountFinancialAddressesFeaturesInput>;
  inboundTransfers?: InputMaybe<StripePostTreasuryFinancialAccountsFinancialAccountInboundTransfersFeaturesInput>;
  intraStripeFlows?: InputMaybe<StripePostTreasuryFinancialAccountsFinancialAccountIntraStripeFlowsFeaturesInput>;
  outboundPayments?: InputMaybe<StripePostTreasuryFinancialAccountsFinancialAccountOutboundPaymentsFeaturesInput>;
  outboundTransfers?: InputMaybe<StripePostTreasuryFinancialAccountsFinancialAccountOutboundTransfersFeaturesInput>;
};

export type StripePostTreasuryFinancialAccountsFinancialAccountFinancialAddressesFeaturesInput = {
  aba?: InputMaybe<StripePostTreasuryFinancialAccountsFinancialAccountAbaFinancialAddressesFeaturesInput>;
};

export enum StripePostTreasuryFinancialAccountsFinancialAccountInboundFlowsPlatformRestrictions {
  Restricted = 'RESTRICTED',
  Unrestricted = 'UNRESTRICTED'
}

export type StripePostTreasuryFinancialAccountsFinancialAccountInboundTransfersFeaturesInput = {
  ach?: InputMaybe<StripePostTreasuryFinancialAccountsFinancialAccountAchInboundTransfersFeaturesInput>;
};

export type StripePostTreasuryFinancialAccountsFinancialAccountInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  features?: InputMaybe<StripePostTreasuryFinancialAccountsFinancialAccountFeaturesInput>;
  metadata?: InputMaybe<Scalars['JSON']>;
  platformRestrictions?: InputMaybe<StripePostTreasuryFinancialAccountsFinancialAccountPlatformRestrictionsInput>;
};

export type StripePostTreasuryFinancialAccountsFinancialAccountIntraStripeFlowsFeaturesInput = {
  requested: Scalars['Boolean'];
};

export enum StripePostTreasuryFinancialAccountsFinancialAccountOutboundFlowsPlatformRestrictions {
  Restricted = 'RESTRICTED',
  Unrestricted = 'UNRESTRICTED'
}

export type StripePostTreasuryFinancialAccountsFinancialAccountOutboundPaymentsFeaturesInput = {
  ach?: InputMaybe<StripePostTreasuryFinancialAccountsFinancialAccountAchOutboundPaymentsFeaturesInput>;
  usDomesticWire?: InputMaybe<StripePostTreasuryFinancialAccountsFinancialAccountUsDomesticWireOutboundPaymentsFeaturesInput>;
};

export type StripePostTreasuryFinancialAccountsFinancialAccountOutboundTransfersFeaturesInput = {
  ach?: InputMaybe<StripePostTreasuryFinancialAccountsFinancialAccountAchOutboundTransfersFeaturesInput>;
  usDomesticWire?: InputMaybe<StripePostTreasuryFinancialAccountsFinancialAccountUsDomesticWireOutboundTransfersFeaturesInput>;
};

export type StripePostTreasuryFinancialAccountsFinancialAccountPlatformRestrictionsInput = {
  inboundFlows?: InputMaybe<StripePostTreasuryFinancialAccountsFinancialAccountInboundFlowsPlatformRestrictions>;
  outboundFlows?: InputMaybe<StripePostTreasuryFinancialAccountsFinancialAccountOutboundFlowsPlatformRestrictions>;
};

export type StripePostTreasuryFinancialAccountsFinancialAccountUsDomesticWireOutboundPaymentsFeaturesInput = {
  requested: Scalars['Boolean'];
};

export type StripePostTreasuryFinancialAccountsFinancialAccountUsDomesticWireOutboundTransfersFeaturesInput = {
  requested: Scalars['Boolean'];
};

export type StripePostTreasuryFinancialAccountsFinancialAddressesFeaturesInput = {
  aba?: InputMaybe<StripePostTreasuryFinancialAccountsAbaFinancialAddressesFeaturesInput>;
};

export enum StripePostTreasuryFinancialAccountsInboundFlowsPlatformRestrictions {
  Restricted = 'RESTRICTED',
  Unrestricted = 'UNRESTRICTED'
}

export type StripePostTreasuryFinancialAccountsInboundTransfersFeaturesInput = {
  ach?: InputMaybe<StripePostTreasuryFinancialAccountsAchInboundTransfersFeaturesInput>;
};

export type StripePostTreasuryFinancialAccountsInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  features?: InputMaybe<StripePostTreasuryFinancialAccountsFeaturesInput>;
  metadata?: InputMaybe<Scalars['JSON']>;
  platformRestrictions?: InputMaybe<StripePostTreasuryFinancialAccountsPlatformRestrictionsInput>;
  supportedCurrencies: Array<Scalars['String']>;
};

export type StripePostTreasuryFinancialAccountsIntraStripeFlowsFeaturesInput = {
  requested: Scalars['Boolean'];
};

export enum StripePostTreasuryFinancialAccountsOutboundFlowsPlatformRestrictions {
  Restricted = 'RESTRICTED',
  Unrestricted = 'UNRESTRICTED'
}

export type StripePostTreasuryFinancialAccountsOutboundPaymentsFeaturesInput = {
  ach?: InputMaybe<StripePostTreasuryFinancialAccountsAchOutboundPaymentsFeaturesInput>;
  usDomesticWire?: InputMaybe<StripePostTreasuryFinancialAccountsUsDomesticWireOutboundPaymentsFeaturesInput>;
};

export type StripePostTreasuryFinancialAccountsOutboundTransfersFeaturesInput = {
  ach?: InputMaybe<StripePostTreasuryFinancialAccountsAchOutboundTransfersFeaturesInput>;
  usDomesticWire?: InputMaybe<StripePostTreasuryFinancialAccountsUsDomesticWireOutboundTransfersFeaturesInput>;
};

export type StripePostTreasuryFinancialAccountsPlatformRestrictionsInput = {
  inboundFlows?: InputMaybe<StripePostTreasuryFinancialAccountsInboundFlowsPlatformRestrictions>;
  outboundFlows?: InputMaybe<StripePostTreasuryFinancialAccountsOutboundFlowsPlatformRestrictions>;
};

export type StripePostTreasuryFinancialAccountsUsDomesticWireOutboundPaymentsFeaturesInput = {
  requested: Scalars['Boolean'];
};

export type StripePostTreasuryFinancialAccountsUsDomesticWireOutboundTransfersFeaturesInput = {
  requested: Scalars['Boolean'];
};

export type StripePostTreasuryInboundTransfersInboundTransferCancelInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostTreasuryInboundTransfersInput = {
  amount: Scalars['Int'];
  currency: Scalars['String'];
  description?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  financialAccount: Scalars['String'];
  metadata?: InputMaybe<Scalars['JSON']>;
  originPaymentMethod: Scalars['String'];
  statementDescriptor?: InputMaybe<Scalars['String']>;
};

export enum StripePostTreasuryOutboundPaymentsAccountHolderTypeUsBankAccountDestinationPaymentMethodData {
  Company = 'COMPANY',
  Individual = 'INDIVIDUAL'
}

export enum StripePostTreasuryOutboundPaymentsAccountTypeUsBankAccountDestinationPaymentMethodData {
  Checking = 'CHECKING',
  Savings = 'SAVINGS'
}

export type StripePostTreasuryOutboundPaymentsAddressBillingDetailsDestinationPaymentMethodDataInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

export type StripePostTreasuryOutboundPaymentsBillingDetailsDestinationPaymentMethodDataInput = {
  address?: InputMaybe<StripeStringOrPostTreasuryOutboundPaymentsAddressBillingDetailsDestinationPaymentMethodDataUnionInput>;
  email?: InputMaybe<Scalars['JSON']>;
  name?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
};

export type StripePostTreasuryOutboundPaymentsDestinationPaymentMethodDataInput = {
  billingDetails?: InputMaybe<StripePostTreasuryOutboundPaymentsBillingDetailsDestinationPaymentMethodDataInput>;
  financialAccount?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  type: StripePostTreasuryOutboundPaymentsTypeDestinationPaymentMethodData;
  usBankAccount?: InputMaybe<StripePostTreasuryOutboundPaymentsUsBankAccountDestinationPaymentMethodDataInput>;
};

export type StripePostTreasuryOutboundPaymentsDestinationPaymentMethodOptionsInput = {
  usBankAccount?: InputMaybe<StripeStringOrPostTreasuryOutboundPaymentsUsBankAccountDestinationPaymentMethodOptionsUnionInput>;
};

export type StripePostTreasuryOutboundPaymentsEndUserDetailsInput = {
  ipAddress?: InputMaybe<Scalars['String']>;
  present: Scalars['Boolean'];
};

export type StripePostTreasuryOutboundPaymentsIdCancelInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostTreasuryOutboundPaymentsInput = {
  amount: Scalars['Int'];
  currency: Scalars['String'];
  customer?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  destinationPaymentMethod?: InputMaybe<Scalars['String']>;
  destinationPaymentMethodData?: InputMaybe<StripePostTreasuryOutboundPaymentsDestinationPaymentMethodDataInput>;
  destinationPaymentMethodOptions?: InputMaybe<StripePostTreasuryOutboundPaymentsDestinationPaymentMethodOptionsInput>;
  endUserDetails?: InputMaybe<StripePostTreasuryOutboundPaymentsEndUserDetailsInput>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  financialAccount: Scalars['String'];
  metadata?: InputMaybe<Scalars['JSON']>;
  statementDescriptor?: InputMaybe<Scalars['String']>;
};

export enum StripePostTreasuryOutboundPaymentsNetworkUsBankAccountDestinationPaymentMethodOptions {
  Ach = 'ACH',
  UsDomesticWire = 'US_DOMESTIC_WIRE'
}

export enum StripePostTreasuryOutboundPaymentsTypeDestinationPaymentMethodData {
  FinancialAccount = 'FINANCIAL_ACCOUNT',
  UsBankAccount = 'US_BANK_ACCOUNT'
}

export type StripePostTreasuryOutboundPaymentsUsBankAccountDestinationPaymentMethodDataInput = {
  accountHolderType?: InputMaybe<StripePostTreasuryOutboundPaymentsAccountHolderTypeUsBankAccountDestinationPaymentMethodData>;
  accountNumber?: InputMaybe<Scalars['String']>;
  accountType?: InputMaybe<StripePostTreasuryOutboundPaymentsAccountTypeUsBankAccountDestinationPaymentMethodData>;
  financialConnectionsAccount?: InputMaybe<Scalars['String']>;
  routingNumber?: InputMaybe<Scalars['String']>;
};

export type StripePostTreasuryOutboundPaymentsUsBankAccountDestinationPaymentMethodOptionsInput = {
  network?: InputMaybe<StripePostTreasuryOutboundPaymentsNetworkUsBankAccountDestinationPaymentMethodOptions>;
};

export type StripePostTreasuryOutboundTransfersDestinationPaymentMethodOptionsInput = {
  usBankAccount?: InputMaybe<StripeStringOrPostTreasuryOutboundTransfersUsBankAccountDestinationPaymentMethodOptionsUnionInput>;
};

export type StripePostTreasuryOutboundTransfersInput = {
  amount: Scalars['Int'];
  currency: Scalars['String'];
  description?: InputMaybe<Scalars['String']>;
  destinationPaymentMethod?: InputMaybe<Scalars['String']>;
  destinationPaymentMethodOptions?: InputMaybe<StripePostTreasuryOutboundTransfersDestinationPaymentMethodOptionsInput>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  financialAccount: Scalars['String'];
  metadata?: InputMaybe<Scalars['JSON']>;
  statementDescriptor?: InputMaybe<Scalars['String']>;
};

export enum StripePostTreasuryOutboundTransfersNetworkUsBankAccountDestinationPaymentMethodOptions {
  Ach = 'ACH',
  UsDomesticWire = 'US_DOMESTIC_WIRE'
}

export type StripePostTreasuryOutboundTransfersOutboundTransferCancelInput = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};

export type StripePostTreasuryOutboundTransfersUsBankAccountDestinationPaymentMethodOptionsInput = {
  network?: InputMaybe<StripePostTreasuryOutboundTransfersNetworkUsBankAccountDestinationPaymentMethodOptions>;
};

export type StripePostWebhookEndpointsInput = {
  apiVersion?: InputMaybe<Scalars['String']>;
  connect?: InputMaybe<Scalars['Boolean']>;
  description?: InputMaybe<Scalars['String']>;
  enabledEvents: Array<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  url: Scalars['String'];
};

export type StripePostWebhookEndpointsWebhookEndpointInput = {
  description?: InputMaybe<Scalars['String']>;
  disabled?: InputMaybe<Scalars['Boolean']>;
  enabledEvents?: InputMaybe<Array<Scalars['String']>>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  metadata?: InputMaybe<Scalars['JSON']>;
  url?: InputMaybe<Scalars['String']>;
};

export type StripePrice = {
  __typename?: 'StripePrice';
  active: Scalars['Boolean'];
  billingScheme: StripePriceBillingScheme;
  created: Scalars['Int'];
  currency: Scalars['String'];
  currencyOptions?: Maybe<Scalars['JSON']>;
  customUnitAmount?: Maybe<StripeCustomUnitAmount>;
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  lookupKey?: Maybe<Scalars['String']>;
  metadata: Scalars['JSON'];
  nickname?: Maybe<Scalars['String']>;
  object: StripePriceObject;
  product: StripeStringOrDeletedProductOrProductUnion;
  recurring?: Maybe<StripeRecurring>;
  taxBehavior?: Maybe<StripePriceTaxBehavior>;
  tiers?: Maybe<Array<StripePriceTier>>;
  tiersMode?: Maybe<StripePriceTiersMode>;
  transformQuantity?: Maybe<StripeTransformQuantity>;
  type: StripePriceType;
  unitAmount?: Maybe<Scalars['Int']>;
  unitAmountDecimal?: Maybe<Scalars['String']>;
};

export enum StripePriceBillingScheme {
  PerUnit = 'PER_UNIT',
  Tiered = 'TIERED'
}

export enum StripePriceObject {
  Price = 'PRICE'
}

export enum StripePriceTaxBehavior {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE',
  Unspecified = 'UNSPECIFIED'
}

export type StripePriceTier = {
  __typename?: 'StripePriceTier';
  flatAmount?: Maybe<Scalars['Int']>;
  flatAmountDecimal?: Maybe<Scalars['String']>;
  unitAmount?: Maybe<Scalars['Int']>;
  unitAmountDecimal?: Maybe<Scalars['String']>;
  upTo?: Maybe<Scalars['Int']>;
};

export enum StripePriceTiersMode {
  Graduated = 'GRADUATED',
  Volume = 'VOLUME'
}

export enum StripePriceType {
  OneTime = 'ONE_TIME',
  Recurring = 'RECURRING'
}

export type StripeProduct = {
  __typename?: 'StripeProduct';
  active: Scalars['Boolean'];
  created: Scalars['Int'];
  defaultPrice?: Maybe<StripeStringOrPriceUnion>;
  description?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  images: Array<Scalars['String']>;
  livemode: Scalars['Boolean'];
  metadata: Scalars['JSON'];
  name: Scalars['String'];
  object: StripeProductObject;
  packageDimensions?: Maybe<StripePackageDimensions>;
  shippable?: Maybe<Scalars['Boolean']>;
  statementDescriptor?: Maybe<Scalars['String']>;
  taxCode?: Maybe<StripeStringOrTaxCodeUnion>;
  unitLabel?: Maybe<Scalars['String']>;
  updated: Scalars['Int'];
  url?: Maybe<Scalars['String']>;
};

export enum StripeProductObject {
  Product = 'PRODUCT'
}

export type StripePromotionCode = {
  __typename?: 'StripePromotionCode';
  active: Scalars['Boolean'];
  code: Scalars['String'];
  coupon: StripeCoupon;
  created: Scalars['Int'];
  customer?: Maybe<StripeStringOrDeletedCustomerOrCustomerUnion>;
  expiresAt?: Maybe<Scalars['Int']>;
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  maxRedemptions?: Maybe<Scalars['Int']>;
  metadata?: Maybe<Scalars['JSON']>;
  object: StripePromotionCodeObject;
  restrictions: StripePromotionCodesResourceRestrictions;
  timesRedeemed: Scalars['Int'];
};

export enum StripePromotionCodeObject {
  PromotionCode = 'PROMOTION_CODE'
}

export type StripePromotionCodesResourceRestrictions = {
  __typename?: 'StripePromotionCodesResourceRestrictions';
  currencyOptions?: Maybe<Scalars['JSON']>;
  firstTimeTransaction: Scalars['Boolean'];
  minimumAmount?: Maybe<Scalars['Int']>;
  minimumAmountCurrency?: Maybe<Scalars['String']>;
};

export type StripeQuery = {
  __typename?: 'StripeQuery';
  account?: Maybe<StripeAccount>;
  accounts?: Maybe<StripeGetAccounts>;
  accountsAccount?: Maybe<StripeAccount>;
  accountsAccountBankAccountsId?: Maybe<StripeExternalAccount>;
  accountsAccountExternalAccounts?: Maybe<StripeGetAccountsAccountExternalAccounts>;
  accountsAccountExternalAccountsId?: Maybe<StripeExternalAccount>;
  accountsAccountPeople?: Maybe<StripeGetAccountsAccountPeople>;
  accountsAccountPeoplePerson?: Maybe<StripePerson>;
  accountsAccountPersons?: Maybe<StripeGetAccountsAccountPersons>;
  accountsAccountPersonsPerson?: Maybe<StripePerson>;
  applePayDomain?: Maybe<StripeApplePayDomain>;
  applePayDomains?: Maybe<StripeGetApplePayDomains>;
  applicationFee?: Maybe<StripeApplicationFee>;
  applicationFees?: Maybe<StripeGetApplicationFees>;
  appsSecret?: Maybe<StripeAppsSecret>;
  appsSecrets?: Maybe<StripeGetAppsSecrets>;
  balance?: Maybe<StripeBalance>;
  balanceHistory?: Maybe<StripeGetBalanceHistory>;
  balanceHistoryId?: Maybe<StripeBalanceTransaction>;
  balanceTransactions?: Maybe<StripeGetBalanceTransactions>;
  balanceTransactionsId?: Maybe<StripeBalanceTransaction>;
  bankAccount?: Maybe<StripeBankAccount>;
  bankAccounts?: Maybe<StripeGetCustomersCustomerBankAccounts>;
  billingPortalConfiguration?: Maybe<StripeBillingPortalConfiguration>;
  billingPortalConfigurations?: Maybe<StripeGetBillingPortalConfigurations>;
  capabilities?: Maybe<StripeGetAccountsAccountCapabilities>;
  capability?: Maybe<StripeCapability>;
  card?: Maybe<StripeCard>;
  cards?: Maybe<StripeGetCustomersCustomerCards>;
  cashBalance?: Maybe<StripeCashBalance>;
  charge?: Maybe<StripeCharge>;
  charges?: Maybe<StripeGetCharges>;
  chargesChargeDispute?: Maybe<StripeDispute>;
  chargesChargeRefunds?: Maybe<StripeGetChargesChargeRefunds>;
  chargesChargeRefundsRefund?: Maybe<StripeRefund>;
  chargesSearch?: Maybe<StripeGetChargesSearch>;
  checkoutSession?: Maybe<StripeCheckoutSession>;
  checkoutSessions?: Maybe<StripeGetCheckoutSessions>;
  checkoutSessionsSessionLineItems?: Maybe<StripeGetCheckoutSessionsSessionLineItems>;
  countrySpec?: Maybe<StripeCountrySpec>;
  countrySpecs?: Maybe<StripeGetCountrySpecs>;
  coupon?: Maybe<StripeCoupon>;
  coupons?: Maybe<StripeGetCoupons>;
  creditNotes?: Maybe<StripeGetCreditNotes>;
  creditNotesCreditNoteLines?: Maybe<StripeGetCreditNotesCreditNoteLines>;
  creditNotesId?: Maybe<StripeCreditNote>;
  creditNotesPreview?: Maybe<StripeCreditNote>;
  creditNotesPreviewLines?: Maybe<StripeGetCreditNotesPreviewLines>;
  customerBalanceTransaction?: Maybe<StripeCustomerBalanceTransaction>;
  customerBalanceTransactions?: Maybe<StripeGetCustomersCustomerBalanceTransactions>;
  customerCashBalanceTransaction?: Maybe<StripeCustomerCashBalanceTransaction>;
  customerCashBalanceTransactions?: Maybe<StripeGetCustomersCustomerCashBalanceTransactions>;
  customers?: Maybe<StripeGetCustomers>;
  customersCustomer?: Maybe<StripeDeletedCustomerOrCustomerUnion>;
  customersCustomerDiscount?: Maybe<StripeDiscount>;
  customersCustomerPaymentMethods?: Maybe<StripeGetCustomersCustomerPaymentMethods>;
  customersCustomerPaymentMethodsPaymentMethod?: Maybe<StripePaymentMethod>;
  customersCustomerSources?: Maybe<StripeGetCustomersCustomerSources>;
  customersCustomerSubscriptions?: Maybe<StripeGetCustomersCustomerSubscriptions>;
  customersCustomerSubscriptionsSubscriptionExposedId?: Maybe<StripeSubscription>;
  customersCustomerSubscriptionsSubscriptionExposedIdDiscount?: Maybe<StripeDiscount>;
  customersSearch?: Maybe<StripeGetCustomersSearch>;
  disputes?: Maybe<StripeGetDisputes>;
  disputesDispute?: Maybe<StripeDispute>;
  event?: Maybe<StripeEvent>;
  events?: Maybe<StripeGetEvents>;
  exchangeRate?: Maybe<StripeExchangeRate>;
  exchangeRates?: Maybe<StripeGetExchangeRates>;
  feeRefund?: Maybe<StripeFeeRefund>;
  feeRefunds?: Maybe<StripeGetApplicationFeesIdRefunds>;
  file?: Maybe<StripeFile>;
  fileLink?: Maybe<StripeFileLink>;
  fileLinks?: Maybe<StripeGetFileLinks>;
  files?: Maybe<StripeGetFiles>;
  financialConnectionsAccounts?: Maybe<StripeGetFinancialConnectionsAccounts>;
  financialConnectionsAccountsAccount?: Maybe<StripeFinancialConnectionsAccount>;
  financialConnectionsAccountsAccountOwners?: Maybe<StripeGetFinancialConnectionsAccountsAccountOwners>;
  financialConnectionsSessionsSession?: Maybe<StripeFinancialConnectionsSession>;
  identityVerificationReport?: Maybe<StripeIdentityVerificationReport>;
  identityVerificationReports?: Maybe<StripeGetIdentityVerificationReports>;
  identityVerificationSession?: Maybe<StripeIdentityVerificationSession>;
  identityVerificationSessions?: Maybe<StripeGetIdentityVerificationSessions>;
  invoiceitem?: Maybe<StripeInvoiceitem>;
  invoiceitems?: Maybe<StripeGetInvoiceitems>;
  invoices?: Maybe<StripeGetInvoices>;
  invoicesInvoice?: Maybe<StripeInvoice>;
  invoicesInvoiceLines?: Maybe<StripeGetInvoicesInvoiceLines>;
  invoicesSearch?: Maybe<StripeGetInvoicesSearch>;
  invoicesUpcoming?: Maybe<StripeInvoice>;
  invoicesUpcomingLines?: Maybe<StripeGetInvoicesUpcomingLines>;
  issuingAuthorization?: Maybe<StripeIssuingAuthorization>;
  issuingAuthorizations?: Maybe<StripeGetIssuingAuthorizations>;
  issuingCard?: Maybe<StripeIssuingCard>;
  issuingCardholder?: Maybe<StripeIssuingCardholder>;
  issuingCardholders?: Maybe<StripeGetIssuingCardholders>;
  issuingCards?: Maybe<StripeGetIssuingCards>;
  issuingDispute?: Maybe<StripeIssuingDispute>;
  issuingDisputes?: Maybe<StripeGetIssuingDisputes>;
  issuingSettlement?: Maybe<StripeIssuingSettlement>;
  issuingSettlements?: Maybe<StripeGetIssuingSettlements>;
  issuingTransaction?: Maybe<StripeIssuingTransaction>;
  issuingTransactions?: Maybe<StripeGetIssuingTransactions>;
  linkAccountSessionsSession?: Maybe<StripeFinancialConnectionsSession>;
  linkedAccounts?: Maybe<StripeGetLinkedAccounts>;
  linkedAccountsAccount?: Maybe<StripeFinancialConnectionsAccount>;
  linkedAccountsAccountOwners?: Maybe<StripeGetLinkedAccountsAccountOwners>;
  mandate?: Maybe<StripeMandate>;
  paymentIntent?: Maybe<StripePaymentIntent>;
  paymentIntents?: Maybe<StripeGetPaymentIntents>;
  paymentIntentsSearch?: Maybe<StripeGetPaymentIntentsSearch>;
  paymentLink?: Maybe<StripePaymentLink>;
  paymentLinks?: Maybe<StripeGetPaymentLinks>;
  paymentLinksPaymentLinkLineItems?: Maybe<StripeGetPaymentLinksPaymentLinkLineItems>;
  paymentMethods?: Maybe<StripeGetPaymentMethods>;
  paymentMethodsPaymentMethod?: Maybe<StripePaymentMethod>;
  paymentSource?: Maybe<StripePaymentSource>;
  payout?: Maybe<StripePayout>;
  payouts?: Maybe<StripeGetPayouts>;
  plan?: Maybe<StripePlan>;
  plans?: Maybe<StripeGetPlans>;
  price?: Maybe<StripePrice>;
  prices?: Maybe<StripeGetPrices>;
  pricesSearch?: Maybe<StripeGetPricesSearch>;
  product?: Maybe<StripeProduct>;
  products?: Maybe<StripeGetProducts>;
  productsSearch?: Maybe<StripeGetProductsSearch>;
  promotionCode?: Maybe<StripePromotionCode>;
  promotionCodes?: Maybe<StripeGetPromotionCodes>;
  quote?: Maybe<StripeQuote>;
  quotes?: Maybe<StripeGetQuotes>;
  quotesQuoteComputedUpfrontLineItems?: Maybe<StripeGetQuotesQuoteComputedUpfrontLineItems>;
  quotesQuoteLineItems?: Maybe<StripeGetQuotesQuoteLineItems>;
  radarEarlyFraudWarning?: Maybe<StripeRadarEarlyFraudWarning>;
  radarEarlyFraudWarnings?: Maybe<StripeGetRadarEarlyFraudWarnings>;
  radarValueList?: Maybe<StripeRadarValueList>;
  radarValueListItem?: Maybe<StripeRadarValueListItem>;
  radarValueListItems?: Maybe<StripeGetRadarValueListItems>;
  radarValueLists?: Maybe<StripeGetRadarValueLists>;
  refunds?: Maybe<StripeGetRefunds>;
  refundsRefund?: Maybe<StripeRefund>;
  reportingReportRun?: Maybe<StripeReportingReportRun>;
  reportingReportRuns?: Maybe<StripeGetReportingReportRuns>;
  reportingReportType?: Maybe<StripeReportingReportType>;
  reportingReportTypes?: Maybe<StripeGetReportingReportTypes>;
  review?: Maybe<StripeReview>;
  reviews?: Maybe<StripeGetReviews>;
  scheduledQueryRun?: Maybe<StripeScheduledQueryRun>;
  scheduledQueryRuns?: Maybe<StripeGetSigmaScheduledQueryRuns>;
  setupAttempts?: Maybe<StripeGetSetupAttempts>;
  setupIntent?: Maybe<StripeSetupIntent>;
  setupIntents?: Maybe<StripeGetSetupIntents>;
  shippingRate?: Maybe<StripeShippingRate>;
  shippingRates?: Maybe<StripeGetShippingRates>;
  source?: Maybe<StripeSource>;
  sourceMandateNotification?: Maybe<StripeSourceMandateNotification>;
  sourceTransaction?: Maybe<StripeSourceTransaction>;
  sourceTransactions?: Maybe<StripeGetSourcesSourceSourceTransactions>;
  subscriptionItem?: Maybe<StripeSubscriptionItem>;
  subscriptionItems?: Maybe<StripeGetSubscriptionItems>;
  subscriptionSchedule?: Maybe<StripeSubscriptionSchedule>;
  subscriptionSchedules?: Maybe<StripeGetSubscriptionSchedules>;
  subscriptions?: Maybe<StripeGetSubscriptions>;
  subscriptionsSearch?: Maybe<StripeGetSubscriptionsSearch>;
  subscriptionsSubscriptionExposedId?: Maybe<StripeSubscription>;
  taxCalculationLineItems?: Maybe<StripeGetTaxCalculationsCalculationLineItems>;
  taxCode?: Maybe<StripeTaxCode>;
  taxCodes?: Maybe<StripeGetTaxCodes>;
  taxId?: Maybe<StripeTaxId>;
  taxIds?: Maybe<StripeGetCustomersCustomerTaxIds>;
  taxRate?: Maybe<StripeTaxRate>;
  taxRates?: Maybe<StripeGetTaxRates>;
  taxTransaction?: Maybe<StripeTaxTransaction>;
  taxTransactionLineItems?: Maybe<StripeGetTaxTransactionsTransactionLineItems>;
  terminalConfigurations?: Maybe<StripeGetTerminalConfigurations>;
  terminalConfigurationsConfiguration?: Maybe<StripeDeletedTerminalConfigurationOrTerminalConfigurationUnion>;
  terminalLocations?: Maybe<StripeGetTerminalLocations>;
  terminalLocationsLocation?: Maybe<StripeDeletedTerminalLocationOrTerminalLocationUnion>;
  terminalReaders?: Maybe<StripeGetTerminalReaders>;
  terminalReadersReader?: Maybe<StripeDeletedTerminalReaderOrTerminalReaderUnion>;
  testHelpersTestClock?: Maybe<StripeTestHelpersTestClock>;
  testHelpersTestClocks?: Maybe<StripeGetTestHelpersTestClocks>;
  token?: Maybe<StripeToken>;
  topup?: Maybe<StripeTopup>;
  topups?: Maybe<StripeGetTopups>;
  transfer?: Maybe<StripeTransfer>;
  transferReversal?: Maybe<StripeTransferReversal>;
  transferReversals?: Maybe<StripeGetTransfersIdReversals>;
  transfers?: Maybe<StripeGetTransfers>;
  treasuryCreditReversal?: Maybe<StripeTreasuryCreditReversal>;
  treasuryCreditReversals?: Maybe<StripeGetTreasuryCreditReversals>;
  treasuryDebitReversal?: Maybe<StripeTreasuryDebitReversal>;
  treasuryDebitReversals?: Maybe<StripeGetTreasuryDebitReversals>;
  treasuryFinancialAccount?: Maybe<StripeTreasuryFinancialAccount>;
  treasuryFinancialAccountFeatures?: Maybe<StripeTreasuryFinancialAccountFeatures>;
  treasuryFinancialAccounts?: Maybe<StripeGetTreasuryFinancialAccounts>;
  treasuryInboundTransfer?: Maybe<StripeTreasuryInboundTransfer>;
  treasuryInboundTransfers?: Maybe<StripeGetTreasuryInboundTransfers>;
  treasuryOutboundPayment?: Maybe<StripeTreasuryOutboundPayment>;
  treasuryOutboundPayments?: Maybe<StripeGetTreasuryOutboundPayments>;
  treasuryOutboundTransfer?: Maybe<StripeTreasuryOutboundTransfer>;
  treasuryOutboundTransfers?: Maybe<StripeGetTreasuryOutboundTransfers>;
  treasuryReceivedCredit?: Maybe<StripeTreasuryReceivedCredit>;
  treasuryReceivedCredits?: Maybe<StripeGetTreasuryReceivedCredits>;
  treasuryReceivedDebit?: Maybe<StripeTreasuryReceivedDebit>;
  treasuryReceivedDebits?: Maybe<StripeGetTreasuryReceivedDebits>;
  treasuryTransaction?: Maybe<StripeTreasuryTransaction>;
  treasuryTransactionEntries?: Maybe<StripeGetTreasuryTransactionEntries>;
  treasuryTransactionEntry?: Maybe<StripeTreasuryTransactionEntry>;
  treasuryTransactions?: Maybe<StripeGetTreasuryTransactions>;
  usageRecordSummaries?: Maybe<StripeGetSubscriptionItemsSubscriptionItemUsageRecordSummaries>;
  webhookEndpoint?: Maybe<StripeWebhookEndpoint>;
  webhookEndpoints?: Maybe<StripeGetWebhookEndpoints>;
};


export type StripeQueryAccountArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};


export type StripeQueryAccountsArgs = {
  created?: InputMaybe<StripeIntOrGetAccountsCreatedUnionInput>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryAccountsAccountArgs = {
  account: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
};


export type StripeQueryAccountsAccountBankAccountsIdArgs = {
  account: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
  id: Scalars['String'];
};


export type StripeQueryAccountsAccountExternalAccountsArgs = {
  account: Scalars['String'];
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryAccountsAccountExternalAccountsIdArgs = {
  account: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
  id: Scalars['String'];
};


export type StripeQueryAccountsAccountPeopleArgs = {
  account: Scalars['String'];
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  relationship?: InputMaybe<StripeGetAccountsAccountPeopleRelationshipInput>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryAccountsAccountPeoplePersonArgs = {
  account: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
  person: Scalars['String'];
};


export type StripeQueryAccountsAccountPersonsArgs = {
  account: Scalars['String'];
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  relationship?: InputMaybe<StripeGetAccountsAccountPersonsRelationshipInput>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryAccountsAccountPersonsPersonArgs = {
  account: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
  person: Scalars['String'];
};


export type StripeQueryApplePayDomainArgs = {
  domain: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
};


export type StripeQueryApplePayDomainsArgs = {
  domainName?: InputMaybe<Scalars['String']>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryApplicationFeeArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  id: Scalars['String'];
};


export type StripeQueryApplicationFeesArgs = {
  charge?: InputMaybe<Scalars['String']>;
  created?: InputMaybe<StripeIntOrGetApplicationFeesCreatedUnionInput>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryAppsSecretArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  name: Scalars['String'];
  scope: StripeGetAppsSecretsFindScopeInput;
};


export type StripeQueryAppsSecretsArgs = {
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  scope: StripeGetAppsSecretsScopeInput;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryBalanceArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};


export type StripeQueryBalanceHistoryArgs = {
  created?: InputMaybe<StripeIntOrGetBalanceHistoryCreatedUnionInput>;
  currency?: InputMaybe<Scalars['String']>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  payout?: InputMaybe<Scalars['String']>;
  source?: InputMaybe<Scalars['String']>;
  startingAfter?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<Scalars['String']>;
};


export type StripeQueryBalanceHistoryIdArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  id: Scalars['String'];
};


export type StripeQueryBalanceTransactionsArgs = {
  created?: InputMaybe<StripeIntOrGetBalanceTransactionsCreatedUnionInput>;
  currency?: InputMaybe<Scalars['String']>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  payout?: InputMaybe<Scalars['String']>;
  source?: InputMaybe<Scalars['String']>;
  startingAfter?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<Scalars['String']>;
};


export type StripeQueryBalanceTransactionsIdArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  id: Scalars['String'];
};


export type StripeQueryBankAccountArgs = {
  customer: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
  id: Scalars['String'];
};


export type StripeQueryBankAccountsArgs = {
  customer: Scalars['String'];
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryBillingPortalConfigurationArgs = {
  configuration: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
};


export type StripeQueryBillingPortalConfigurationsArgs = {
  active?: InputMaybe<Scalars['Boolean']>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  isDefault?: InputMaybe<Scalars['Boolean']>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryCapabilitiesArgs = {
  account: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
};


export type StripeQueryCapabilityArgs = {
  account: Scalars['String'];
  capability: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
};


export type StripeQueryCardArgs = {
  customer: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
  id: Scalars['String'];
};


export type StripeQueryCardsArgs = {
  customer: Scalars['String'];
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryCashBalanceArgs = {
  customer: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
};


export type StripeQueryChargeArgs = {
  charge: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
};


export type StripeQueryChargesArgs = {
  created?: InputMaybe<StripeIntOrGetChargesCreatedUnionInput>;
  customer?: InputMaybe<Scalars['String']>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  paymentIntent?: InputMaybe<Scalars['String']>;
  startingAfter?: InputMaybe<Scalars['String']>;
  transferGroup?: InputMaybe<Scalars['String']>;
};


export type StripeQueryChargesChargeDisputeArgs = {
  charge: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
};


export type StripeQueryChargesChargeRefundsArgs = {
  charge: Scalars['String'];
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryChargesChargeRefundsRefundArgs = {
  charge: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
  refund: Scalars['String'];
};


export type StripeQueryChargesSearchArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  page?: InputMaybe<Scalars['String']>;
  query: Scalars['String'];
};


export type StripeQueryCheckoutSessionArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  session: Scalars['String'];
};


export type StripeQueryCheckoutSessionsArgs = {
  customer?: InputMaybe<Scalars['String']>;
  customerDetails?: InputMaybe<StripeGetCheckoutSessionsCustomerDetailsInput>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  paymentIntent?: InputMaybe<Scalars['String']>;
  paymentLink?: InputMaybe<Scalars['String']>;
  startingAfter?: InputMaybe<Scalars['String']>;
  subscription?: InputMaybe<Scalars['String']>;
};


export type StripeQueryCheckoutSessionsSessionLineItemsArgs = {
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  session: Scalars['String'];
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryCountrySpecArgs = {
  country: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
};


export type StripeQueryCountrySpecsArgs = {
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryCouponArgs = {
  coupon: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
};


export type StripeQueryCouponsArgs = {
  created?: InputMaybe<StripeIntOrGetCouponsCreatedUnionInput>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryCreditNotesArgs = {
  customer?: InputMaybe<Scalars['String']>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  invoice?: InputMaybe<Scalars['String']>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryCreditNotesCreditNoteLinesArgs = {
  creditNote: Scalars['String'];
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryCreditNotesIdArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  id: Scalars['String'];
};


export type StripeQueryCreditNotesPreviewArgs = {
  amount?: InputMaybe<Scalars['Int']>;
  creditAmount?: InputMaybe<Scalars['Int']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  invoice: Scalars['String'];
  lines?: InputMaybe<Array<StripeGetCreditNotesPreviewLinesInput>>;
  memo?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  outOfBandAmount?: InputMaybe<Scalars['Int']>;
  reason?: InputMaybe<StripeGetCreditNotesPreviewReason>;
  refund?: InputMaybe<Scalars['String']>;
  refundAmount?: InputMaybe<Scalars['Int']>;
  shippingCost?: InputMaybe<StripeGetCreditNotesPreviewShippingCostInput>;
};


export type StripeQueryCreditNotesPreviewLinesArgs = {
  amount?: InputMaybe<Scalars['Int']>;
  creditAmount?: InputMaybe<Scalars['Int']>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  invoice: Scalars['String'];
  limit?: InputMaybe<Scalars['Int']>;
  lines?: InputMaybe<Array<StripeGetCreditNotesPreviewLinesLinesInput>>;
  memo?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['JSON']>;
  outOfBandAmount?: InputMaybe<Scalars['Int']>;
  reason?: InputMaybe<StripeGetCreditNotesPreviewLinesReason>;
  refund?: InputMaybe<Scalars['String']>;
  refundAmount?: InputMaybe<Scalars['Int']>;
  shippingCost?: InputMaybe<StripeGetCreditNotesPreviewLinesShippingCostInput>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryCustomerBalanceTransactionArgs = {
  customer: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
  transaction: Scalars['String'];
};


export type StripeQueryCustomerBalanceTransactionsArgs = {
  customer: Scalars['String'];
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryCustomerCashBalanceTransactionArgs = {
  customer: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
  transaction: Scalars['String'];
};


export type StripeQueryCustomerCashBalanceTransactionsArgs = {
  customer: Scalars['String'];
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryCustomersArgs = {
  created?: InputMaybe<StripeIntOrGetCustomersCreatedUnionInput>;
  email?: InputMaybe<Scalars['String']>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
  testClock?: InputMaybe<Scalars['String']>;
};


export type StripeQueryCustomersCustomerArgs = {
  customer: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
};


export type StripeQueryCustomersCustomerDiscountArgs = {
  customer: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
};


export type StripeQueryCustomersCustomerPaymentMethodsArgs = {
  customer: Scalars['String'];
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<StripeGetCustomersCustomerPaymentMethodsType>;
};


export type StripeQueryCustomersCustomerPaymentMethodsPaymentMethodArgs = {
  customer: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
  paymentMethod: Scalars['String'];
};


export type StripeQueryCustomersCustomerSourcesArgs = {
  customer: Scalars['String'];
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  object?: InputMaybe<Scalars['String']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryCustomersCustomerSubscriptionsArgs = {
  customer: Scalars['String'];
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryCustomersCustomerSubscriptionsSubscriptionExposedIdArgs = {
  customer: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
  subscriptionExposedId: Scalars['String'];
};


export type StripeQueryCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountArgs = {
  customer: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
  subscriptionExposedId: Scalars['String'];
};


export type StripeQueryCustomersSearchArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  page?: InputMaybe<Scalars['String']>;
  query: Scalars['String'];
};


export type StripeQueryDisputesArgs = {
  charge?: InputMaybe<Scalars['String']>;
  created?: InputMaybe<StripeIntOrGetDisputesCreatedUnionInput>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  paymentIntent?: InputMaybe<Scalars['String']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryDisputesDisputeArgs = {
  dispute: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
};


export type StripeQueryEventArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  id: Scalars['String'];
};


export type StripeQueryEventsArgs = {
  created?: InputMaybe<StripeIntOrGetEventsCreatedUnionInput>;
  deliverySuccess?: InputMaybe<Scalars['Boolean']>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<Scalars['String']>;
  types?: InputMaybe<Array<Scalars['String']>>;
};


export type StripeQueryExchangeRateArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  rateId: Scalars['String'];
};


export type StripeQueryExchangeRatesArgs = {
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryFeeRefundArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  fee: Scalars['String'];
  id: Scalars['String'];
};


export type StripeQueryFeeRefundsArgs = {
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  id: Scalars['String'];
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryFileArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  file: Scalars['String'];
};


export type StripeQueryFileLinkArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  link: Scalars['String'];
};


export type StripeQueryFileLinksArgs = {
  created?: InputMaybe<StripeIntOrGetFileLinksCreatedUnionInput>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  expired?: InputMaybe<Scalars['Boolean']>;
  file?: InputMaybe<Scalars['String']>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryFilesArgs = {
  created?: InputMaybe<StripeIntOrGetFilesCreatedUnionInput>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  purpose?: InputMaybe<StripeGetFilesPurpose>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryFinancialConnectionsAccountsArgs = {
  accountHolder?: InputMaybe<StripeGetFinancialConnectionsAccountsAccountHolderInput>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  session?: InputMaybe<Scalars['String']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryFinancialConnectionsAccountsAccountArgs = {
  account: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
};


export type StripeQueryFinancialConnectionsAccountsAccountOwnersArgs = {
  account: Scalars['String'];
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  ownership: Scalars['String'];
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryFinancialConnectionsSessionsSessionArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  session: Scalars['String'];
};


export type StripeQueryIdentityVerificationReportArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  report: Scalars['String'];
};


export type StripeQueryIdentityVerificationReportsArgs = {
  created?: InputMaybe<StripeIntOrGetIdentityVerificationReportsCreatedUnionInput>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<StripeGetIdentityVerificationReportsType>;
  verificationSession?: InputMaybe<Scalars['String']>;
};


export type StripeQueryIdentityVerificationSessionArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  session: Scalars['String'];
};


export type StripeQueryIdentityVerificationSessionsArgs = {
  created?: InputMaybe<StripeIntOrGetIdentityVerificationSessionsCreatedUnionInput>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<StripeGetIdentityVerificationSessionsStatus>;
};


export type StripeQueryInvoiceitemArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  invoiceitem: Scalars['String'];
};


export type StripeQueryInvoiceitemsArgs = {
  created?: InputMaybe<StripeIntOrGetInvoiceitemsCreatedUnionInput>;
  customer?: InputMaybe<Scalars['String']>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  invoice?: InputMaybe<Scalars['String']>;
  limit?: InputMaybe<Scalars['Int']>;
  pending?: InputMaybe<Scalars['Boolean']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryInvoicesArgs = {
  collectionMethod?: InputMaybe<StripeGetInvoicesCollectionMethod>;
  created?: InputMaybe<StripeIntOrGetInvoicesCreatedUnionInput>;
  customer?: InputMaybe<Scalars['String']>;
  dueDate?: InputMaybe<StripeIntOrGetInvoicesDueDateUnionInput>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<StripeGetInvoicesStatus>;
  subscription?: InputMaybe<Scalars['String']>;
};


export type StripeQueryInvoicesInvoiceArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  invoice: Scalars['String'];
};


export type StripeQueryInvoicesInvoiceLinesArgs = {
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  invoice: Scalars['String'];
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryInvoicesSearchArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  page?: InputMaybe<Scalars['String']>;
  query: Scalars['String'];
};


export type StripeQueryInvoicesUpcomingArgs = {
  automaticTax?: InputMaybe<StripeGetInvoicesUpcomingAutomaticTaxInput>;
  coupon?: InputMaybe<Scalars['String']>;
  currency?: InputMaybe<Scalars['String']>;
  customer?: InputMaybe<Scalars['String']>;
  customerDetails?: InputMaybe<StripeGetInvoicesUpcomingCustomerDetailsInput>;
  discounts?: InputMaybe<StripeStringOrGetInvoicesUpcomingDiscountsUnionInput>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  invoiceItems?: InputMaybe<Array<StripeGetInvoicesUpcomingInvoiceItemsInput>>;
  schedule?: InputMaybe<Scalars['String']>;
  subscription?: InputMaybe<Scalars['String']>;
  subscriptionBillingCycleAnchor?: InputMaybe<StripeIntUnionInput>;
  subscriptionCancelAt?: InputMaybe<StripeIntOrStringUnionInput>;
  subscriptionCancelAtPeriodEnd?: InputMaybe<Scalars['Boolean']>;
  subscriptionCancelNow?: InputMaybe<Scalars['Boolean']>;
  subscriptionDefaultTaxRates?: InputMaybe<StripeStringOrStringUnionInput>;
  subscriptionItems?: InputMaybe<Array<StripeGetInvoicesUpcomingSubscriptionItemsInput>>;
  subscriptionProrationBehavior?: InputMaybe<StripeGetInvoicesUpcomingSubscriptionProrationBehavior>;
  subscriptionProrationDate?: InputMaybe<Scalars['Int']>;
  subscriptionResumeAt?: InputMaybe<StripeGetInvoicesUpcomingSubscriptionResumeAt>;
  subscriptionStartDate?: InputMaybe<Scalars['Int']>;
  subscriptionTrialEnd?: InputMaybe<StripeIntUnionInput>;
  subscriptionTrialFromPlan?: InputMaybe<Scalars['Boolean']>;
};


export type StripeQueryInvoicesUpcomingLinesArgs = {
  automaticTax?: InputMaybe<StripeGetInvoicesUpcomingLinesAutomaticTaxInput>;
  coupon?: InputMaybe<Scalars['String']>;
  currency?: InputMaybe<Scalars['String']>;
  customer?: InputMaybe<Scalars['String']>;
  customerDetails?: InputMaybe<StripeGetInvoicesUpcomingLinesCustomerDetailsInput>;
  discounts?: InputMaybe<StripeStringOrGetInvoicesUpcomingLinesDiscountsUnionInput>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  invoiceItems?: InputMaybe<Array<StripeGetInvoicesUpcomingLinesInvoiceItemsInput>>;
  limit?: InputMaybe<Scalars['Int']>;
  schedule?: InputMaybe<Scalars['String']>;
  startingAfter?: InputMaybe<Scalars['String']>;
  subscription?: InputMaybe<Scalars['String']>;
  subscriptionBillingCycleAnchor?: InputMaybe<StripeIntUnionInput>;
  subscriptionCancelAt?: InputMaybe<StripeIntOrStringUnionInput>;
  subscriptionCancelAtPeriodEnd?: InputMaybe<Scalars['Boolean']>;
  subscriptionCancelNow?: InputMaybe<Scalars['Boolean']>;
  subscriptionDefaultTaxRates?: InputMaybe<StripeStringOrStringUnionInput>;
  subscriptionItems?: InputMaybe<Array<StripeGetInvoicesUpcomingLinesSubscriptionItemsInput>>;
  subscriptionProrationBehavior?: InputMaybe<StripeGetInvoicesUpcomingLinesSubscriptionProrationBehavior>;
  subscriptionProrationDate?: InputMaybe<Scalars['Int']>;
  subscriptionResumeAt?: InputMaybe<StripeGetInvoicesUpcomingLinesSubscriptionResumeAt>;
  subscriptionStartDate?: InputMaybe<Scalars['Int']>;
  subscriptionTrialEnd?: InputMaybe<StripeIntUnionInput>;
  subscriptionTrialFromPlan?: InputMaybe<Scalars['Boolean']>;
};


export type StripeQueryIssuingAuthorizationArgs = {
  authorization: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
};


export type StripeQueryIssuingAuthorizationsArgs = {
  card?: InputMaybe<Scalars['String']>;
  cardholder?: InputMaybe<Scalars['String']>;
  created?: InputMaybe<StripeIntOrGetIssuingAuthorizationsCreatedUnionInput>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<StripeGetIssuingAuthorizationsStatus>;
};


export type StripeQueryIssuingCardArgs = {
  card: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
};


export type StripeQueryIssuingCardholderArgs = {
  cardholder: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
};


export type StripeQueryIssuingCardholdersArgs = {
  created?: InputMaybe<StripeIntOrGetIssuingCardholdersCreatedUnionInput>;
  email?: InputMaybe<Scalars['String']>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  startingAfter?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<StripeGetIssuingCardholdersStatus>;
  type?: InputMaybe<StripeGetIssuingCardholdersType>;
};


export type StripeQueryIssuingCardsArgs = {
  cardholder?: InputMaybe<Scalars['String']>;
  created?: InputMaybe<StripeIntOrGetIssuingCardsCreatedUnionInput>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expMonth?: InputMaybe<Scalars['Int']>;
  expYear?: InputMaybe<Scalars['Int']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  last4?: InputMaybe<Scalars['String']>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<StripeGetIssuingCardsStatus>;
  type?: InputMaybe<StripeGetIssuingCardsType>;
};


export type StripeQueryIssuingDisputeArgs = {
  dispute: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
};


export type StripeQueryIssuingDisputesArgs = {
  created?: InputMaybe<StripeIntOrGetIssuingDisputesCreatedUnionInput>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<StripeGetIssuingDisputesStatus>;
  transaction?: InputMaybe<Scalars['String']>;
};


export type StripeQueryIssuingSettlementArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  settlement: Scalars['String'];
};


export type StripeQueryIssuingSettlementsArgs = {
  created?: InputMaybe<StripeIntOrGetIssuingSettlementsCreatedUnionInput>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryIssuingTransactionArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  transaction: Scalars['String'];
};


export type StripeQueryIssuingTransactionsArgs = {
  card?: InputMaybe<Scalars['String']>;
  cardholder?: InputMaybe<Scalars['String']>;
  created?: InputMaybe<StripeIntOrGetIssuingTransactionsCreatedUnionInput>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<StripeGetIssuingTransactionsType>;
};


export type StripeQueryLinkAccountSessionsSessionArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  session: Scalars['String'];
};


export type StripeQueryLinkedAccountsArgs = {
  accountHolder?: InputMaybe<StripeGetLinkedAccountsAccountHolderInput>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  session?: InputMaybe<Scalars['String']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryLinkedAccountsAccountArgs = {
  account: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
};


export type StripeQueryLinkedAccountsAccountOwnersArgs = {
  account: Scalars['String'];
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  ownership: Scalars['String'];
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryMandateArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  mandate: Scalars['String'];
};


export type StripeQueryPaymentIntentArgs = {
  clientSecret?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  intent: Scalars['String'];
};


export type StripeQueryPaymentIntentsArgs = {
  created?: InputMaybe<StripeIntOrGetPaymentIntentsCreatedUnionInput>;
  customer?: InputMaybe<Scalars['String']>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryPaymentIntentsSearchArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  page?: InputMaybe<Scalars['String']>;
  query: Scalars['String'];
};


export type StripeQueryPaymentLinkArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  paymentLink: Scalars['String'];
};


export type StripeQueryPaymentLinksArgs = {
  active?: InputMaybe<Scalars['Boolean']>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryPaymentLinksPaymentLinkLineItemsArgs = {
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  paymentLink: Scalars['String'];
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryPaymentMethodsArgs = {
  customer?: InputMaybe<Scalars['String']>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<StripeGetPaymentMethodsType>;
};


export type StripeQueryPaymentMethodsPaymentMethodArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  paymentMethod: Scalars['String'];
};


export type StripeQueryPaymentSourceArgs = {
  customer: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
  id: Scalars['String'];
};


export type StripeQueryPayoutArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  payout: Scalars['String'];
};


export type StripeQueryPayoutsArgs = {
  arrivalDate?: InputMaybe<StripeIntOrGetPayoutsArrivalDateUnionInput>;
  created?: InputMaybe<StripeIntOrGetPayoutsCreatedUnionInput>;
  destination?: InputMaybe<Scalars['String']>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<Scalars['String']>;
};


export type StripeQueryPlanArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  plan: Scalars['String'];
};


export type StripeQueryPlansArgs = {
  active?: InputMaybe<Scalars['Boolean']>;
  created?: InputMaybe<StripeIntOrGetPlansCreatedUnionInput>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  product?: InputMaybe<Scalars['String']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryPriceArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  price: Scalars['String'];
};


export type StripeQueryPricesArgs = {
  active?: InputMaybe<Scalars['Boolean']>;
  created?: InputMaybe<StripeIntOrGetPricesCreatedUnionInput>;
  currency?: InputMaybe<Scalars['String']>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  lookupKeys?: InputMaybe<Array<Scalars['String']>>;
  product?: InputMaybe<Scalars['String']>;
  recurring?: InputMaybe<StripeGetPricesRecurringInput>;
  startingAfter?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<StripeGetPricesType>;
};


export type StripeQueryPricesSearchArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  page?: InputMaybe<Scalars['String']>;
  query: Scalars['String'];
};


export type StripeQueryProductArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  id: Scalars['String'];
};


export type StripeQueryProductsArgs = {
  active?: InputMaybe<Scalars['Boolean']>;
  created?: InputMaybe<StripeIntOrGetProductsCreatedUnionInput>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  ids?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  shippable?: InputMaybe<Scalars['Boolean']>;
  startingAfter?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['String']>;
};


export type StripeQueryProductsSearchArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  page?: InputMaybe<Scalars['String']>;
  query: Scalars['String'];
};


export type StripeQueryPromotionCodeArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  promotionCode: Scalars['String'];
};


export type StripeQueryPromotionCodesArgs = {
  active?: InputMaybe<Scalars['Boolean']>;
  code?: InputMaybe<Scalars['String']>;
  coupon?: InputMaybe<Scalars['String']>;
  created?: InputMaybe<StripeIntOrGetPromotionCodesCreatedUnionInput>;
  customer?: InputMaybe<Scalars['String']>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryQuoteArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  quote: Scalars['String'];
};


export type StripeQueryQuotesArgs = {
  customer?: InputMaybe<Scalars['String']>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<StripeGetQuotesStatus>;
  testClock?: InputMaybe<Scalars['String']>;
};


export type StripeQueryQuotesQuoteComputedUpfrontLineItemsArgs = {
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  quote: Scalars['String'];
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryQuotesQuoteLineItemsArgs = {
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  quote: Scalars['String'];
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryRadarEarlyFraudWarningArgs = {
  earlyFraudWarning: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
};


export type StripeQueryRadarEarlyFraudWarningsArgs = {
  charge?: InputMaybe<Scalars['String']>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  paymentIntent?: InputMaybe<Scalars['String']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryRadarValueListArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  valueList: Scalars['String'];
};


export type StripeQueryRadarValueListItemArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  item: Scalars['String'];
};


export type StripeQueryRadarValueListItemsArgs = {
  created?: InputMaybe<StripeIntOrGetRadarValueListItemsCreatedUnionInput>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
  value?: InputMaybe<Scalars['String']>;
  valueList: Scalars['String'];
};


export type StripeQueryRadarValueListsArgs = {
  alias?: InputMaybe<Scalars['String']>;
  contains?: InputMaybe<Scalars['String']>;
  created?: InputMaybe<StripeIntOrGetRadarValueListsCreatedUnionInput>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryRefundsArgs = {
  charge?: InputMaybe<Scalars['String']>;
  created?: InputMaybe<StripeIntOrGetRefundsCreatedUnionInput>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  paymentIntent?: InputMaybe<Scalars['String']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryRefundsRefundArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  refund: Scalars['String'];
};


export type StripeQueryReportingReportRunArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  reportRun: Scalars['String'];
};


export type StripeQueryReportingReportRunsArgs = {
  created?: InputMaybe<StripeIntOrGetReportingReportRunsCreatedUnionInput>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryReportingReportTypeArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  reportType: Scalars['String'];
};


export type StripeQueryReportingReportTypesArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
};


export type StripeQueryReviewArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  review: Scalars['String'];
};


export type StripeQueryReviewsArgs = {
  created?: InputMaybe<StripeIntOrGetReviewsCreatedUnionInput>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryScheduledQueryRunArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  scheduledQueryRun: Scalars['String'];
};


export type StripeQueryScheduledQueryRunsArgs = {
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQuerySetupAttemptsArgs = {
  created?: InputMaybe<StripeIntOrGetSetupAttemptsCreatedUnionInput>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  setupIntent: Scalars['String'];
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQuerySetupIntentArgs = {
  clientSecret?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  intent: Scalars['String'];
};


export type StripeQuerySetupIntentsArgs = {
  attachToSelf?: InputMaybe<Scalars['Boolean']>;
  created?: InputMaybe<StripeIntOrGetSetupIntentsCreatedUnionInput>;
  customer?: InputMaybe<Scalars['String']>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  paymentMethod?: InputMaybe<Scalars['String']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryShippingRateArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  shippingRateToken: Scalars['String'];
};


export type StripeQueryShippingRatesArgs = {
  active?: InputMaybe<Scalars['Boolean']>;
  created?: InputMaybe<StripeIntOrGetShippingRatesCreatedUnionInput>;
  currency?: InputMaybe<Scalars['String']>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQuerySourceArgs = {
  clientSecret?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  source: Scalars['String'];
};


export type StripeQuerySourceMandateNotificationArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  mandateNotification: Scalars['String'];
  source: Scalars['String'];
};


export type StripeQuerySourceTransactionArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  source: Scalars['String'];
  sourceTransaction: Scalars['String'];
};


export type StripeQuerySourceTransactionsArgs = {
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  source: Scalars['String'];
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQuerySubscriptionItemArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  item: Scalars['String'];
};


export type StripeQuerySubscriptionItemsArgs = {
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
  subscription: Scalars['String'];
};


export type StripeQuerySubscriptionScheduleArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  schedule: Scalars['String'];
};


export type StripeQuerySubscriptionSchedulesArgs = {
  canceledAt?: InputMaybe<StripeIntOrGetSubscriptionSchedulesCanceledAtUnionInput>;
  completedAt?: InputMaybe<StripeIntOrGetSubscriptionSchedulesCompletedAtUnionInput>;
  created?: InputMaybe<StripeIntOrGetSubscriptionSchedulesCreatedUnionInput>;
  customer?: InputMaybe<Scalars['String']>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  releasedAt?: InputMaybe<StripeIntOrGetSubscriptionSchedulesReleasedAtUnionInput>;
  scheduled?: InputMaybe<Scalars['Boolean']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQuerySubscriptionsArgs = {
  collectionMethod?: InputMaybe<StripeGetSubscriptionsCollectionMethod>;
  created?: InputMaybe<StripeIntOrGetSubscriptionsCreatedUnionInput>;
  currentPeriodEnd?: InputMaybe<StripeIntOrGetSubscriptionsCurrentPeriodEndUnionInput>;
  currentPeriodStart?: InputMaybe<StripeIntOrGetSubscriptionsCurrentPeriodStartUnionInput>;
  customer?: InputMaybe<Scalars['String']>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  price?: InputMaybe<Scalars['String']>;
  startingAfter?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<StripeGetSubscriptionsStatus>;
  testClock?: InputMaybe<Scalars['String']>;
};


export type StripeQuerySubscriptionsSearchArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  page?: InputMaybe<Scalars['String']>;
  query: Scalars['String'];
};


export type StripeQuerySubscriptionsSubscriptionExposedIdArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  subscriptionExposedId: Scalars['String'];
};


export type StripeQueryTaxCalculationLineItemsArgs = {
  calculation: Scalars['String'];
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryTaxCodeArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  id: Scalars['String'];
};


export type StripeQueryTaxCodesArgs = {
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryTaxIdArgs = {
  customer: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
  id: Scalars['String'];
};


export type StripeQueryTaxIdsArgs = {
  customer: Scalars['String'];
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryTaxRateArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  taxRate: Scalars['String'];
};


export type StripeQueryTaxRatesArgs = {
  active?: InputMaybe<Scalars['Boolean']>;
  created?: InputMaybe<StripeIntOrGetTaxRatesCreatedUnionInput>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  inclusive?: InputMaybe<Scalars['Boolean']>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryTaxTransactionArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  transaction: Scalars['String'];
};


export type StripeQueryTaxTransactionLineItemsArgs = {
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
  transaction: Scalars['String'];
};


export type StripeQueryTerminalConfigurationsArgs = {
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  isAccountDefault?: InputMaybe<Scalars['Boolean']>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryTerminalConfigurationsConfigurationArgs = {
  configuration: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
};


export type StripeQueryTerminalLocationsArgs = {
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryTerminalLocationsLocationArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  location: Scalars['String'];
};


export type StripeQueryTerminalReadersArgs = {
  deviceType?: InputMaybe<StripeGetTerminalReadersDeviceType>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  location?: InputMaybe<Scalars['String']>;
  startingAfter?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<StripeGetTerminalReadersStatus>;
};


export type StripeQueryTerminalReadersReaderArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  reader: Scalars['String'];
};


export type StripeQueryTestHelpersTestClockArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  testClock: Scalars['String'];
};


export type StripeQueryTestHelpersTestClocksArgs = {
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryTokenArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  token: Scalars['String'];
};


export type StripeQueryTopupArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  topup: Scalars['String'];
};


export type StripeQueryTopupsArgs = {
  amount?: InputMaybe<StripeIntOrGetTopupsAmountUnionInput>;
  created?: InputMaybe<StripeIntOrGetTopupsCreatedUnionInput>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<StripeGetTopupsStatus>;
};


export type StripeQueryTransferArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  transfer: Scalars['String'];
};


export type StripeQueryTransferReversalArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  id: Scalars['String'];
  transfer: Scalars['String'];
};


export type StripeQueryTransferReversalsArgs = {
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  id: Scalars['String'];
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryTransfersArgs = {
  created?: InputMaybe<StripeIntOrGetTransfersCreatedUnionInput>;
  destination?: InputMaybe<Scalars['String']>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
  transferGroup?: InputMaybe<Scalars['String']>;
};


export type StripeQueryTreasuryCreditReversalArgs = {
  creditReversal: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
};


export type StripeQueryTreasuryCreditReversalsArgs = {
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  financialAccount: Scalars['String'];
  limit?: InputMaybe<Scalars['Int']>;
  receivedCredit?: InputMaybe<Scalars['String']>;
  startingAfter?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<StripeGetTreasuryCreditReversalsStatus>;
};


export type StripeQueryTreasuryDebitReversalArgs = {
  debitReversal: Scalars['String'];
  expand?: InputMaybe<Array<Scalars['String']>>;
};


export type StripeQueryTreasuryDebitReversalsArgs = {
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  financialAccount: Scalars['String'];
  limit?: InputMaybe<Scalars['Int']>;
  receivedDebit?: InputMaybe<Scalars['String']>;
  resolution?: InputMaybe<StripeGetTreasuryDebitReversalsResolution>;
  startingAfter?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<StripeGetTreasuryDebitReversalsStatus>;
};


export type StripeQueryTreasuryFinancialAccountArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  financialAccount: Scalars['String'];
};


export type StripeQueryTreasuryFinancialAccountFeaturesArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  financialAccount: Scalars['String'];
};


export type StripeQueryTreasuryFinancialAccountsArgs = {
  created?: InputMaybe<StripeIntOrGetTreasuryFinancialAccountsCreatedUnionInput>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};


export type StripeQueryTreasuryInboundTransferArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  id: Scalars['String'];
};


export type StripeQueryTreasuryInboundTransfersArgs = {
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  financialAccount: Scalars['String'];
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<StripeGetTreasuryInboundTransfersStatus>;
};


export type StripeQueryTreasuryOutboundPaymentArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  id: Scalars['String'];
};


export type StripeQueryTreasuryOutboundPaymentsArgs = {
  customer?: InputMaybe<Scalars['String']>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  financialAccount: Scalars['String'];
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<StripeGetTreasuryOutboundPaymentsStatus>;
};


export type StripeQueryTreasuryOutboundTransferArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  outboundTransfer: Scalars['String'];
};


export type StripeQueryTreasuryOutboundTransfersArgs = {
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  financialAccount: Scalars['String'];
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<StripeGetTreasuryOutboundTransfersStatus>;
};


export type StripeQueryTreasuryReceivedCreditArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  id: Scalars['String'];
};


export type StripeQueryTreasuryReceivedCreditsArgs = {
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  financialAccount: Scalars['String'];
  limit?: InputMaybe<Scalars['Int']>;
  linkedFlows?: InputMaybe<StripeGetTreasuryReceivedCreditsLinkedFlowsInput>;
  startingAfter?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<StripeGetTreasuryReceivedCreditsStatus>;
};


export type StripeQueryTreasuryReceivedDebitArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  id: Scalars['String'];
};


export type StripeQueryTreasuryReceivedDebitsArgs = {
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  financialAccount: Scalars['String'];
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<StripeGetTreasuryReceivedDebitsStatus>;
};


export type StripeQueryTreasuryTransactionArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  id: Scalars['String'];
};


export type StripeQueryTreasuryTransactionEntriesArgs = {
  created?: InputMaybe<StripeIntOrGetTreasuryTransactionEntriesCreatedUnionInput>;
  effectiveAt?: InputMaybe<StripeIntOrGetTreasuryTransactionEntriesEffectiveAtUnionInput>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  financialAccount: Scalars['String'];
  limit?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<StripeGetTreasuryTransactionEntriesOrderBy>;
  startingAfter?: InputMaybe<Scalars['String']>;
  transaction?: InputMaybe<Scalars['String']>;
};


export type StripeQueryTreasuryTransactionEntryArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  id: Scalars['String'];
};


export type StripeQueryTreasuryTransactionsArgs = {
  created?: InputMaybe<StripeIntOrGetTreasuryTransactionsCreatedUnionInput>;
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  financialAccount: Scalars['String'];
  limit?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<StripeGetTreasuryTransactionsOrderBy>;
  startingAfter?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<StripeGetTreasuryTransactionsStatus>;
  statusTransitions?: InputMaybe<StripeGetTreasuryTransactionsStatusTransitionsInput>;
};


export type StripeQueryUsageRecordSummariesArgs = {
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
  subscriptionItem: Scalars['String'];
};


export type StripeQueryWebhookEndpointArgs = {
  expand?: InputMaybe<Array<Scalars['String']>>;
  webhookEndpoint: Scalars['String'];
};


export type StripeQueryWebhookEndpointsArgs = {
  endingBefore?: InputMaybe<Scalars['String']>;
  expand?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Int']>;
  startingAfter?: InputMaybe<Scalars['String']>;
};

export type StripeQuote = {
  __typename?: 'StripeQuote';
  amountSubtotal: Scalars['Int'];
  amountTotal: Scalars['Int'];
  application?: Maybe<StripeStringOrDeletedApplicationOrApplicationUnion>;
  applicationFeeAmount?: Maybe<Scalars['Int']>;
  applicationFeePercent?: Maybe<Scalars['Float']>;
  automaticTax: StripeQuotesResourceAutomaticTax;
  collectionMethod: StripeQuoteCollectionMethod;
  computed: StripeQuotesResourceComputed;
  created: Scalars['Int'];
  currency?: Maybe<Scalars['String']>;
  customer?: Maybe<StripeStringOrDeletedCustomerOrCustomerUnion>;
  defaultTaxRates?: Maybe<Array<StripeStringOrTaxRateUnion>>;
  description?: Maybe<Scalars['String']>;
  discounts: Array<StripeStringOrDiscountUnion>;
  expiresAt: Scalars['Int'];
  footer?: Maybe<Scalars['String']>;
  fromQuote?: Maybe<StripeQuotesResourceFromQuote>;
  header?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  invoice?: Maybe<StripeStringOrDeletedInvoiceOrInvoiceUnion>;
  invoiceSettings?: Maybe<StripeInvoiceSettingQuoteSetting>;
  lineItems?: Maybe<StripeQuoteLineItems>;
  livemode: Scalars['Boolean'];
  metadata: Scalars['JSON'];
  number?: Maybe<Scalars['String']>;
  object: StripeQuoteObject;
  onBehalfOf?: Maybe<StripeStringOrAccountUnion>;
  status: StripeQuoteStatus;
  statusTransitions: StripeQuotesResourceStatusTransitions;
  subscription?: Maybe<StripeStringOrSubscriptionUnion>;
  subscriptionData: StripeQuotesResourceSubscriptionDataSubscriptionData;
  subscriptionSchedule?: Maybe<StripeStringOrSubscriptionScheduleUnion>;
  testClock?: Maybe<StripeStringOrTestHelpersTestClockUnion>;
  totalDetails: StripeQuotesResourceTotalDetails;
  transferData?: Maybe<StripeQuotesResourceTransferData>;
};

export enum StripeQuoteCollectionMethod {
  ChargeAutomatically = 'CHARGE_AUTOMATICALLY',
  SendInvoice = 'SEND_INVOICE'
}

export type StripeQuoteLineItems = {
  __typename?: 'StripeQuoteLineItems';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeItem>;
  object: StripeQuoteObjectLineItems;
  url: Scalars['String'];
};

export enum StripeQuoteObject {
  Quote = 'QUOTE'
}

export enum StripeQuoteObjectLineItems {
  List = 'LIST'
}

export enum StripeQuoteStatus {
  Accepted = 'ACCEPTED',
  Canceled = 'CANCELED',
  Draft = 'DRAFT',
  Open = 'OPEN'
}

export type StripeQuotesResourceAutomaticTax = {
  __typename?: 'StripeQuotesResourceAutomaticTax';
  enabled: Scalars['Boolean'];
  status?: Maybe<StripeQuotesResourceAutomaticTaxStatus>;
};

export enum StripeQuotesResourceAutomaticTaxStatus {
  Complete = 'COMPLETE',
  Failed = 'FAILED',
  RequiresLocationInputs = 'REQUIRES_LOCATION_INPUTS'
}

export type StripeQuotesResourceComputed = {
  __typename?: 'StripeQuotesResourceComputed';
  recurring?: Maybe<StripeQuotesResourceRecurring>;
  upfront: StripeQuotesResourceUpfront;
};

export type StripeQuotesResourceFromQuote = {
  __typename?: 'StripeQuotesResourceFromQuote';
  isRevision: Scalars['Boolean'];
  quote: StripeStringOrQuoteUnion;
};

export type StripeQuotesResourceRecurring = {
  __typename?: 'StripeQuotesResourceRecurring';
  amountSubtotal: Scalars['Int'];
  amountTotal: Scalars['Int'];
  interval: StripeQuotesResourceRecurringInterval;
  intervalCount: Scalars['Int'];
  totalDetails: StripeQuotesResourceTotalDetails;
};

export enum StripeQuotesResourceRecurringInterval {
  Day = 'DAY',
  Month = 'MONTH',
  Week = 'WEEK',
  Year = 'YEAR'
}

export type StripeQuotesResourceStatusTransitions = {
  __typename?: 'StripeQuotesResourceStatusTransitions';
  acceptedAt?: Maybe<Scalars['Int']>;
  canceledAt?: Maybe<Scalars['Int']>;
  finalizedAt?: Maybe<Scalars['Int']>;
};

export type StripeQuotesResourceSubscriptionDataSubscriptionData = {
  __typename?: 'StripeQuotesResourceSubscriptionDataSubscriptionData';
  description?: Maybe<Scalars['String']>;
  effectiveDate?: Maybe<Scalars['Int']>;
  trialPeriodDays?: Maybe<Scalars['Int']>;
};

export type StripeQuotesResourceTotalDetails = {
  __typename?: 'StripeQuotesResourceTotalDetails';
  amountDiscount: Scalars['Int'];
  amountShipping?: Maybe<Scalars['Int']>;
  amountTax: Scalars['Int'];
  breakdown?: Maybe<StripeQuotesResourceTotalDetailsResourceBreakdown>;
};

export type StripeQuotesResourceTotalDetailsResourceBreakdown = {
  __typename?: 'StripeQuotesResourceTotalDetailsResourceBreakdown';
  discounts: Array<StripeLineItemsDiscountAmount>;
  taxes: Array<StripeLineItemsTaxAmount>;
};

export type StripeQuotesResourceTransferData = {
  __typename?: 'StripeQuotesResourceTransferData';
  amount?: Maybe<Scalars['Int']>;
  amountPercent?: Maybe<Scalars['Float']>;
  destination: StripeStringOrAccountUnion;
};

export type StripeQuotesResourceUpfront = {
  __typename?: 'StripeQuotesResourceUpfront';
  amountSubtotal: Scalars['Int'];
  amountTotal: Scalars['Int'];
  lineItems?: Maybe<StripeQuotesResourceUpfrontLineItems>;
  totalDetails: StripeQuotesResourceTotalDetails;
};

export type StripeQuotesResourceUpfrontLineItems = {
  __typename?: 'StripeQuotesResourceUpfrontLineItems';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeItem>;
  object: StripeQuotesResourceUpfrontObjectLineItems;
  url: Scalars['String'];
};

export enum StripeQuotesResourceUpfrontObjectLineItems {
  List = 'LIST'
}

export type StripeRadarEarlyFraudWarning = {
  __typename?: 'StripeRadarEarlyFraudWarning';
  actionable: Scalars['Boolean'];
  charge: StripeStringOrChargeUnion;
  created: Scalars['Int'];
  fraudType: Scalars['String'];
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  object: StripeRadarEarlyFraudWarningObject;
  paymentIntent?: Maybe<StripeStringOrPaymentIntentUnion>;
};

export enum StripeRadarEarlyFraudWarningObject {
  RadarEarlyFraudWarning = 'RADAR_EARLY_FRAUD_WARNING'
}

export type StripeRadarRadarOptions = {
  __typename?: 'StripeRadarRadarOptions';
  session?: Maybe<Scalars['String']>;
};

export type StripeRadarReviewResourceLocation = {
  __typename?: 'StripeRadarReviewResourceLocation';
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  region?: Maybe<Scalars['String']>;
};

export type StripeRadarReviewResourceSession = {
  __typename?: 'StripeRadarReviewResourceSession';
  browser?: Maybe<Scalars['String']>;
  device?: Maybe<Scalars['String']>;
  platform?: Maybe<Scalars['String']>;
  version?: Maybe<Scalars['String']>;
};

export type StripeRadarValueList = {
  __typename?: 'StripeRadarValueList';
  alias: Scalars['String'];
  created: Scalars['Int'];
  createdBy: Scalars['String'];
  id: Scalars['String'];
  itemType: StripeRadarValueListItemType;
  listItems: StripeRadarValueListListItems;
  livemode: Scalars['Boolean'];
  metadata: Scalars['JSON'];
  name: Scalars['String'];
  object: StripeRadarValueListObject;
};

export type StripeRadarValueListItem = {
  __typename?: 'StripeRadarValueListItem';
  created: Scalars['Int'];
  createdBy: Scalars['String'];
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  object: StripeRadarValueListItemObject;
  value: Scalars['String'];
  valueList: Scalars['String'];
};

export enum StripeRadarValueListItemObject {
  RadarValueListItem = 'RADAR_VALUE_LIST_ITEM'
}

export enum StripeRadarValueListItemType {
  CardBin = 'CARD_BIN',
  CardFingerprint = 'CARD_FINGERPRINT',
  CaseSensitiveString = 'CASE_SENSITIVE_STRING',
  Country = 'COUNTRY',
  CustomerId = 'CUSTOMER_ID',
  Email = 'EMAIL',
  IpAddress = 'IP_ADDRESS',
  String = 'STRING'
}

export type StripeRadarValueListListItems = {
  __typename?: 'StripeRadarValueListListItems';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeRadarValueListItem>;
  object: StripeRadarValueListObjectListItems;
  url: Scalars['String'];
};

export enum StripeRadarValueListObject {
  RadarValueList = 'RADAR_VALUE_LIST'
}

export enum StripeRadarValueListObjectListItems {
  List = 'LIST'
}

export type StripeReceivedPaymentMethodDetailsFinancialAccount = {
  __typename?: 'StripeReceivedPaymentMethodDetailsFinancialAccount';
  id: Scalars['String'];
  network: StripeReceivedPaymentMethodDetailsFinancialAccountNetwork;
};

export enum StripeReceivedPaymentMethodDetailsFinancialAccountNetwork {
  Stripe = 'STRIPE'
}

export type StripeRecurring = {
  __typename?: 'StripeRecurring';
  aggregateUsage?: Maybe<StripeRecurringAggregateUsage>;
  interval: StripeRecurringInterval;
  intervalCount: Scalars['Int'];
  usageType: StripeRecurringUsageType;
};

export enum StripeRecurringAggregateUsage {
  LastDuringPeriod = 'LAST_DURING_PERIOD',
  LastEver = 'LAST_EVER',
  Max = 'MAX',
  Sum = 'SUM'
}

export enum StripeRecurringInterval {
  Day = 'DAY',
  Month = 'MONTH',
  Week = 'WEEK',
  Year = 'YEAR'
}

export enum StripeRecurringUsageType {
  Licensed = 'LICENSED',
  Metered = 'METERED'
}

export type StripeRefund = {
  __typename?: 'StripeRefund';
  amount: Scalars['Int'];
  balanceTransaction?: Maybe<StripeStringOrBalanceTransactionUnion>;
  charge?: Maybe<StripeStringOrChargeUnion>;
  created: Scalars['Int'];
  currency: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  failureBalanceTransaction?: Maybe<StripeStringOrBalanceTransactionUnion>;
  failureReason?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  instructionsEmail?: Maybe<Scalars['String']>;
  metadata?: Maybe<Scalars['JSON']>;
  nextAction?: Maybe<StripeRefundNextAction>;
  object: StripeRefundObject;
  paymentIntent?: Maybe<StripeStringOrPaymentIntentUnion>;
  reason?: Maybe<StripeRefundReason>;
  receiptNumber?: Maybe<Scalars['String']>;
  sourceTransferReversal?: Maybe<StripeStringOrTransferReversalUnion>;
  status?: Maybe<Scalars['String']>;
  transferReversal?: Maybe<StripeStringOrTransferReversalUnion>;
};

export type StripeRefundNextAction = {
  __typename?: 'StripeRefundNextAction';
  displayDetails?: Maybe<StripeRefundNextActionDisplayDetails>;
  type: Scalars['String'];
};

export type StripeRefundNextActionDisplayDetails = {
  __typename?: 'StripeRefundNextActionDisplayDetails';
  emailSent: StripeEmailSent;
  expiresAt: Scalars['Int'];
};

export enum StripeRefundObject {
  Refund = 'REFUND'
}

export enum StripeRefundReason {
  Duplicate = 'DUPLICATE',
  ExpiredUncapturedCharge = 'EXPIRED_UNCAPTURED_CHARGE',
  Fraudulent = 'FRAUDULENT',
  RequestedByCustomer = 'REQUESTED_BY_CUSTOMER'
}

export type StripeReportingReportRun = {
  __typename?: 'StripeReportingReportRun';
  created: Scalars['Int'];
  error?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  object: StripeReportingReportRunObject;
  parameters: StripeFinancialReportingFinanceReportRunRunParameters;
  reportType: Scalars['String'];
  result?: Maybe<StripeFile>;
  status: Scalars['String'];
  succeededAt?: Maybe<Scalars['Int']>;
};

export enum StripeReportingReportRunObject {
  ReportingReportRun = 'REPORTING_REPORT_RUN'
}

export type StripeReportingReportType = {
  __typename?: 'StripeReportingReportType';
  dataAvailableEnd: Scalars['Int'];
  dataAvailableStart: Scalars['Int'];
  defaultColumns?: Maybe<Array<Scalars['String']>>;
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  name: Scalars['String'];
  object: StripeReportingReportTypeObject;
  updated: Scalars['Int'];
  version: Scalars['Int'];
};

export enum StripeReportingReportTypeObject {
  ReportingReportType = 'REPORTING_REPORT_TYPE'
}

export type StripeReserveTransaction = {
  __typename?: 'StripeReserveTransaction';
  amount: Scalars['Int'];
  currency: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  object: StripeReserveTransactionObject;
};

export enum StripeReserveTransactionObject {
  ReserveTransaction = 'RESERVE_TRANSACTION'
}

export type StripeReview = {
  __typename?: 'StripeReview';
  billingZip?: Maybe<Scalars['String']>;
  charge?: Maybe<StripeStringOrChargeUnion>;
  closedReason?: Maybe<StripeReviewClosedReason>;
  created: Scalars['Int'];
  id: Scalars['String'];
  ipAddress?: Maybe<Scalars['String']>;
  ipAddressLocation?: Maybe<StripeRadarReviewResourceLocation>;
  livemode: Scalars['Boolean'];
  object: StripeReviewObject;
  open: Scalars['Boolean'];
  openedReason: StripeReviewOpenedReason;
  paymentIntent?: Maybe<StripeStringOrPaymentIntentUnion>;
  reason: Scalars['String'];
  session?: Maybe<StripeRadarReviewResourceSession>;
};

export enum StripeReviewClosedReason {
  Approved = 'APPROVED',
  Disputed = 'DISPUTED',
  Redacted = 'REDACTED',
  Refunded = 'REFUNDED',
  RefundedAsFraud = 'REFUNDED_AS_FRAUD'
}

export enum StripeReviewObject {
  Review = 'REVIEW'
}

export enum StripeReviewOpenedReason {
  Manual = 'MANUAL',
  Rule = 'RULE'
}

export type StripeRule = {
  __typename?: 'StripeRule';
  action: Scalars['String'];
  id: Scalars['String'];
  predicate: Scalars['String'];
};

export type StripeScheduledQueryRun = {
  __typename?: 'StripeScheduledQueryRun';
  created: Scalars['Int'];
  dataLoadTime: Scalars['Int'];
  error?: Maybe<StripeSigmaScheduledQueryRunError>;
  file?: Maybe<StripeFile>;
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  object: StripeScheduledQueryRunObject;
  resultAvailableUntil: Scalars['Int'];
  sql: Scalars['String'];
  status: Scalars['String'];
  title: Scalars['String'];
};

export enum StripeScheduledQueryRunObject {
  ScheduledQueryRun = 'SCHEDULED_QUERY_RUN'
}

export type StripeSchedulesPhaseAutomaticTax = {
  __typename?: 'StripeSchedulesPhaseAutomaticTax';
  enabled: Scalars['Boolean'];
};

export type StripeSecretServiceResourceScope = {
  __typename?: 'StripeSecretServiceResourceScope';
  type: StripeSecretServiceResourceScopeType;
  user?: Maybe<Scalars['String']>;
};

export enum StripeSecretServiceResourceScopeType {
  Account = 'ACCOUNT',
  User = 'USER'
}

export type StripeSepaDebitGeneratedFrom = {
  __typename?: 'StripeSepaDebitGeneratedFrom';
  charge?: Maybe<StripeStringOrChargeUnion>;
  setupAttempt?: Maybe<StripeStringOrSetupAttemptUnion>;
};

export type StripeSetupAttempt = {
  __typename?: 'StripeSetupAttempt';
  application?: Maybe<StripeStringOrApplicationUnion>;
  attachToSelf?: Maybe<Scalars['Boolean']>;
  created: Scalars['Int'];
  customer?: Maybe<StripeStringOrDeletedCustomerOrCustomerUnion>;
  flowDirections?: Maybe<Array<StripeSetupAttemptFlowDirections>>;
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  object: StripeSetupAttemptObject;
  onBehalfOf?: Maybe<StripeStringOrAccountUnion>;
  paymentMethod: StripeStringOrPaymentMethodUnion;
  paymentMethodDetails: StripeSetupAttemptPaymentMethodDetails;
  setupError?: Maybe<StripeApiErrors>;
  setupIntent: StripeStringOrSetupIntentUnion;
  status: Scalars['String'];
  usage: Scalars['String'];
};

export enum StripeSetupAttemptFlowDirections {
  Inbound = 'INBOUND',
  Outbound = 'OUTBOUND'
}

export enum StripeSetupAttemptObject {
  SetupAttempt = 'SETUP_ATTEMPT'
}

export type StripeSetupAttemptPaymentMethodDetails = {
  __typename?: 'StripeSetupAttemptPaymentMethodDetails';
  acssDebit?: Maybe<Scalars['JSON']>;
  auBecsDebit?: Maybe<Scalars['JSON']>;
  bacsDebit?: Maybe<Scalars['JSON']>;
  bancontact?: Maybe<StripeSetupAttemptPaymentMethodDetailsBancontact>;
  blik?: Maybe<Scalars['JSON']>;
  boleto?: Maybe<Scalars['JSON']>;
  card?: Maybe<StripeSetupAttemptPaymentMethodDetailsCard>;
  cardPresent?: Maybe<StripeSetupAttemptPaymentMethodDetailsCardPresent>;
  cashapp?: Maybe<Scalars['JSON']>;
  ideal?: Maybe<StripeSetupAttemptPaymentMethodDetailsIdeal>;
  klarna?: Maybe<Scalars['JSON']>;
  link?: Maybe<Scalars['JSON']>;
  paypal?: Maybe<Scalars['JSON']>;
  sepaDebit?: Maybe<Scalars['JSON']>;
  sofort?: Maybe<StripeSetupAttemptPaymentMethodDetailsSofort>;
  type: Scalars['String'];
  usBankAccount?: Maybe<Scalars['JSON']>;
};

export type StripeSetupAttemptPaymentMethodDetailsBancontact = {
  __typename?: 'StripeSetupAttemptPaymentMethodDetailsBancontact';
  bankCode?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  bic?: Maybe<Scalars['String']>;
  generatedSepaDebit?: Maybe<StripeStringOrPaymentMethodUnion>;
  generatedSepaDebitMandate?: Maybe<StripeStringOrMandateUnion>;
  ibanLast4?: Maybe<Scalars['String']>;
  preferredLanguage?: Maybe<StripeSetupAttemptPaymentMethodDetailsBancontactPreferredLanguage>;
  verifiedName?: Maybe<Scalars['String']>;
};

export enum StripeSetupAttemptPaymentMethodDetailsBancontactPreferredLanguage {
  De = 'DE',
  En = 'EN',
  Fr = 'FR',
  Nl = 'NL'
}

export type StripeSetupAttemptPaymentMethodDetailsCard = {
  __typename?: 'StripeSetupAttemptPaymentMethodDetailsCard';
  brand?: Maybe<Scalars['String']>;
  checks?: Maybe<StripePaymentMethodDetailsCardChecks>;
  country?: Maybe<Scalars['String']>;
  expMonth?: Maybe<Scalars['Int']>;
  expYear?: Maybe<Scalars['Int']>;
  fingerprint?: Maybe<Scalars['String']>;
  funding?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  network?: Maybe<Scalars['String']>;
  threeDSecure?: Maybe<StripeThreeDSecureDetails>;
  wallet?: Maybe<StripeSetupAttemptPaymentMethodDetailsCardWallet>;
};

export type StripeSetupAttemptPaymentMethodDetailsCardPresent = {
  __typename?: 'StripeSetupAttemptPaymentMethodDetailsCardPresent';
  generatedCard?: Maybe<StripeStringOrPaymentMethodUnion>;
};

export type StripeSetupAttemptPaymentMethodDetailsCardWallet = {
  __typename?: 'StripeSetupAttemptPaymentMethodDetailsCardWallet';
  applePay?: Maybe<Scalars['JSON']>;
  googlePay?: Maybe<Scalars['JSON']>;
  type: StripeSetupAttemptPaymentMethodDetailsCardWalletType;
};

export enum StripeSetupAttemptPaymentMethodDetailsCardWalletType {
  ApplePay = 'APPLE_PAY',
  GooglePay = 'GOOGLE_PAY',
  Link = 'LINK'
}

export type StripeSetupAttemptPaymentMethodDetailsIdeal = {
  __typename?: 'StripeSetupAttemptPaymentMethodDetailsIdeal';
  bank?: Maybe<StripeSetupAttemptPaymentMethodDetailsIdealBank>;
  bic?: Maybe<StripeSetupAttemptPaymentMethodDetailsIdealBic>;
  generatedSepaDebit?: Maybe<StripeStringOrPaymentMethodUnion>;
  generatedSepaDebitMandate?: Maybe<StripeStringOrMandateUnion>;
  ibanLast4?: Maybe<Scalars['String']>;
  verifiedName?: Maybe<Scalars['String']>;
};

export enum StripeSetupAttemptPaymentMethodDetailsIdealBank {
  AbnAmro = 'ABN_AMRO',
  AsnBank = 'ASN_BANK',
  Bunq = 'BUNQ',
  Handelsbanken = 'HANDELSBANKEN',
  Ing = 'ING',
  Knab = 'KNAB',
  Moneyou = 'MONEYOU',
  Rabobank = 'RABOBANK',
  Regiobank = 'REGIOBANK',
  Revolut = 'REVOLUT',
  SnsBank = 'SNS_BANK',
  TriodosBank = 'TRIODOS_BANK',
  VanLanschot = 'VAN_LANSCHOT',
  Yoursafe = 'YOURSAFE'
}

export enum StripeSetupAttemptPaymentMethodDetailsIdealBic {
  Abnanl2A = 'ABNANL2A',
  Asnbnl21 = 'ASNBNL21',
  Bitsnl2A = 'BITSNL2A',
  Bunqnl2A = 'BUNQNL2A',
  Fvlbnl22 = 'FVLBNL22',
  Handnl2A = 'HANDNL2A',
  Ingbnl2A = 'INGBNL2A',
  Knabnl2H = 'KNABNL2H',
  Moyonl21 = 'MOYONL21',
  Rabonl2U = 'RABONL2U',
  Rbrbnl21 = 'RBRBNL21',
  Revoie23 = 'REVOIE23',
  Revolt21 = 'REVOLT21',
  Snsbnl2A = 'SNSBNL2A',
  Trionl2U = 'TRIONL2U'
}

export type StripeSetupAttemptPaymentMethodDetailsSofort = {
  __typename?: 'StripeSetupAttemptPaymentMethodDetailsSofort';
  bankCode?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  bic?: Maybe<Scalars['String']>;
  generatedSepaDebit?: Maybe<StripeStringOrPaymentMethodUnion>;
  generatedSepaDebitMandate?: Maybe<StripeStringOrMandateUnion>;
  ibanLast4?: Maybe<Scalars['String']>;
  preferredLanguage?: Maybe<StripeSetupAttemptPaymentMethodDetailsSofortPreferredLanguage>;
  verifiedName?: Maybe<Scalars['String']>;
};

export enum StripeSetupAttemptPaymentMethodDetailsSofortPreferredLanguage {
  De = 'DE',
  En = 'EN',
  Fr = 'FR',
  Nl = 'NL'
}

export type StripeSetupIntent = {
  __typename?: 'StripeSetupIntent';
  application?: Maybe<StripeStringOrApplicationUnion>;
  attachToSelf?: Maybe<Scalars['Boolean']>;
  automaticPaymentMethods?: Maybe<StripePaymentFlowsAutomaticPaymentMethodsSetupIntent>;
  cancellationReason?: Maybe<StripeSetupIntentCancellationReason>;
  clientSecret?: Maybe<Scalars['String']>;
  created: Scalars['Int'];
  customer?: Maybe<StripeStringOrDeletedCustomerOrCustomerUnion>;
  description?: Maybe<Scalars['String']>;
  flowDirections?: Maybe<Array<StripeSetupIntentFlowDirections>>;
  id: Scalars['String'];
  lastSetupError?: Maybe<StripeApiErrors>;
  latestAttempt?: Maybe<StripeStringOrSetupAttemptUnion>;
  livemode: Scalars['Boolean'];
  mandate?: Maybe<StripeStringOrMandateUnion>;
  metadata?: Maybe<Scalars['JSON']>;
  nextAction?: Maybe<StripeSetupIntentNextAction>;
  object: StripeSetupIntentObject;
  onBehalfOf?: Maybe<StripeStringOrAccountUnion>;
  paymentMethod?: Maybe<StripeStringOrPaymentMethodUnion>;
  paymentMethodOptions?: Maybe<StripeSetupIntentPaymentMethodOptions>;
  paymentMethodTypes: Array<Scalars['String']>;
  singleUseMandate?: Maybe<StripeStringOrMandateUnion>;
  status: StripeSetupIntentStatus;
  usage: Scalars['String'];
};

export enum StripeSetupIntentCancellationReason {
  Abandoned = 'ABANDONED',
  Duplicate = 'DUPLICATE',
  RequestedByCustomer = 'REQUESTED_BY_CUSTOMER'
}

export enum StripeSetupIntentFlowDirections {
  Inbound = 'INBOUND',
  Outbound = 'OUTBOUND'
}

export type StripeSetupIntentNextAction = {
  __typename?: 'StripeSetupIntentNextAction';
  cashappHandleRedirectOrDisplayQrCode?: Maybe<StripePaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode>;
  redirectToUrl?: Maybe<StripeSetupIntentNextActionRedirectToUrl>;
  type: Scalars['String'];
  useStripeSdk?: Maybe<Scalars['JSON']>;
  verifyWithMicrodeposits?: Maybe<StripeSetupIntentNextActionVerifyWithMicrodeposits>;
};

export type StripeSetupIntentNextActionRedirectToUrl = {
  __typename?: 'StripeSetupIntentNextActionRedirectToUrl';
  returnUrl?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

export type StripeSetupIntentNextActionVerifyWithMicrodeposits = {
  __typename?: 'StripeSetupIntentNextActionVerifyWithMicrodeposits';
  arrivalDate: Scalars['Int'];
  hostedVerificationUrl: Scalars['String'];
  microdepositType?: Maybe<StripeSetupIntentNextActionVerifyWithMicrodepositsMicrodepositType>;
};

export enum StripeSetupIntentNextActionVerifyWithMicrodepositsMicrodepositType {
  Amounts = 'AMOUNTS',
  DescriptorCode = 'DESCRIPTOR_CODE'
}

export enum StripeSetupIntentObject {
  SetupIntent = 'SETUP_INTENT'
}

export type StripeSetupIntentPaymentMethodOptions = {
  __typename?: 'StripeSetupIntentPaymentMethodOptions';
  acssDebit?: Maybe<StripeSetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsAcssDebitUnion>;
  blik?: Maybe<StripeSetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsBlikUnion>;
  card?: Maybe<StripeSetupIntentPaymentMethodOptionsCard>;
  link?: Maybe<StripeSetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsLinkUnion>;
  paypal?: Maybe<StripeSetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsPaypalUnion>;
  sepaDebit?: Maybe<StripeSetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsSepaDebitUnion>;
  usBankAccount?: Maybe<StripeSetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsUsBankAccountUnion>;
};

export type StripeSetupIntentPaymentMethodOptionsAcssDebit = {
  __typename?: 'StripeSetupIntentPaymentMethodOptionsAcssDebit';
  currency?: Maybe<StripeSetupIntentPaymentMethodOptionsAcssDebitCurrency>;
  mandateOptions?: Maybe<StripeSetupIntentPaymentMethodOptionsMandateOptionsAcssDebit>;
  verificationMethod?: Maybe<StripeSetupIntentPaymentMethodOptionsAcssDebitVerificationMethod>;
};

export enum StripeSetupIntentPaymentMethodOptionsAcssDebitCurrency {
  Cad = 'CAD',
  Usd = 'USD'
}

export enum StripeSetupIntentPaymentMethodOptionsAcssDebitVerificationMethod {
  Automatic = 'AUTOMATIC',
  Instant = 'INSTANT',
  Microdeposits = 'MICRODEPOSITS'
}

export type StripeSetupIntentPaymentMethodOptionsBlik = {
  __typename?: 'StripeSetupIntentPaymentMethodOptionsBlik';
  mandateOptions?: Maybe<StripeSetupIntentPaymentMethodOptionsMandateOptionsBlik>;
};

export type StripeSetupIntentPaymentMethodOptionsCard = {
  __typename?: 'StripeSetupIntentPaymentMethodOptionsCard';
  mandateOptions?: Maybe<StripeSetupIntentPaymentMethodOptionsCardMandateOptions>;
  network?: Maybe<StripeSetupIntentPaymentMethodOptionsCardNetwork>;
  requestThreeDSecure?: Maybe<StripeSetupIntentPaymentMethodOptionsCardRequestThreeDSecure>;
};

export type StripeSetupIntentPaymentMethodOptionsCardMandateOptions = {
  __typename?: 'StripeSetupIntentPaymentMethodOptionsCardMandateOptions';
  amount: Scalars['Int'];
  amountType: StripeSetupIntentPaymentMethodOptionsCardMandateOptionsAmountType;
  currency: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  endDate?: Maybe<Scalars['Int']>;
  interval: StripeSetupIntentPaymentMethodOptionsCardMandateOptionsInterval;
  intervalCount?: Maybe<Scalars['Int']>;
  reference: Scalars['String'];
  startDate: Scalars['Int'];
  supportedTypes?: Maybe<Array<StripeSetupIntentPaymentMethodOptionsCardMandateOptionsSupportedTypes>>;
};

export enum StripeSetupIntentPaymentMethodOptionsCardMandateOptionsAmountType {
  Fixed = 'FIXED',
  Maximum = 'MAXIMUM'
}

export enum StripeSetupIntentPaymentMethodOptionsCardMandateOptionsInterval {
  Day = 'DAY',
  Month = 'MONTH',
  Sporadic = 'SPORADIC',
  Week = 'WEEK',
  Year = 'YEAR'
}

export enum StripeSetupIntentPaymentMethodOptionsCardMandateOptionsSupportedTypes {
  India = 'INDIA'
}

export enum StripeSetupIntentPaymentMethodOptionsCardNetwork {
  Amex = 'AMEX',
  CartesBancaires = 'CARTES_BANCAIRES',
  Diners = 'DINERS',
  Discover = 'DISCOVER',
  EftposAu = 'EFTPOS_AU',
  Interac = 'INTERAC',
  Jcb = 'JCB',
  Mastercard = 'MASTERCARD',
  Unionpay = 'UNIONPAY',
  Unknown = 'UNKNOWN',
  Visa = 'VISA'
}

export enum StripeSetupIntentPaymentMethodOptionsCardRequestThreeDSecure {
  Any = 'ANY',
  Automatic = 'AUTOMATIC',
  ChallengeOnly = 'CHALLENGE_ONLY'
}

export type StripeSetupIntentPaymentMethodOptionsLink = {
  __typename?: 'StripeSetupIntentPaymentMethodOptionsLink';
  persistentToken?: Maybe<Scalars['String']>;
};

export type StripeSetupIntentPaymentMethodOptionsMandateOptionsAcssDebit = {
  __typename?: 'StripeSetupIntentPaymentMethodOptionsMandateOptionsAcssDebit';
  customMandateUrl?: Maybe<Scalars['String']>;
  defaultFor?: Maybe<Array<StripeSetupIntentPaymentMethodOptionsMandateOptionsAcssDebitDefaultFor>>;
  intervalDescription?: Maybe<Scalars['String']>;
  paymentSchedule?: Maybe<StripeSetupIntentPaymentMethodOptionsMandateOptionsAcssDebitPaymentSchedule>;
  transactionType?: Maybe<StripeSetupIntentPaymentMethodOptionsMandateOptionsAcssDebitTransactionType>;
};

export enum StripeSetupIntentPaymentMethodOptionsMandateOptionsAcssDebitDefaultFor {
  Invoice = 'INVOICE',
  Subscription = 'SUBSCRIPTION'
}

export enum StripeSetupIntentPaymentMethodOptionsMandateOptionsAcssDebitPaymentSchedule {
  Combined = 'COMBINED',
  Interval = 'INTERVAL',
  Sporadic = 'SPORADIC'
}

export enum StripeSetupIntentPaymentMethodOptionsMandateOptionsAcssDebitTransactionType {
  Business = 'BUSINESS',
  Personal = 'PERSONAL'
}

export type StripeSetupIntentPaymentMethodOptionsMandateOptionsBlik = {
  __typename?: 'StripeSetupIntentPaymentMethodOptionsMandateOptionsBlik';
  expiresAfter?: Maybe<Scalars['Int']>;
  offSession?: Maybe<StripeMandateOptionsOffSessionDetailsBlik>;
  type?: Maybe<StripeSetupIntentPaymentMethodOptionsMandateOptionsBlikType>;
};

export enum StripeSetupIntentPaymentMethodOptionsMandateOptionsBlikType {
  OffSession = 'OFF_SESSION',
  OnSession = 'ON_SESSION'
}

export type StripeSetupIntentPaymentMethodOptionsPaypal = {
  __typename?: 'StripeSetupIntentPaymentMethodOptionsPaypal';
  billingAgreementId?: Maybe<Scalars['String']>;
};

export type StripeSetupIntentPaymentMethodOptionsSepaDebit = {
  __typename?: 'StripeSetupIntentPaymentMethodOptionsSepaDebit';
  mandateOptions?: Maybe<Scalars['JSON']>;
};

export type StripeSetupIntentPaymentMethodOptionsUsBankAccount = {
  __typename?: 'StripeSetupIntentPaymentMethodOptionsUsBankAccount';
  financialConnections?: Maybe<StripeLinkedAccountOptionsUsBankAccount>;
  verificationMethod?: Maybe<StripeSetupIntentPaymentMethodOptionsUsBankAccountVerificationMethod>;
};

export enum StripeSetupIntentPaymentMethodOptionsUsBankAccountVerificationMethod {
  Automatic = 'AUTOMATIC',
  Instant = 'INSTANT',
  Microdeposits = 'MICRODEPOSITS'
}

export enum StripeSetupIntentStatus {
  Canceled = 'CANCELED',
  Processing = 'PROCESSING',
  RequiresAction = 'REQUIRES_ACTION',
  RequiresConfirmation = 'REQUIRES_CONFIRMATION',
  RequiresPaymentMethod = 'REQUIRES_PAYMENT_METHOD',
  Succeeded = 'SUCCEEDED'
}

export type StripeSetupIntentTypeSpecificPaymentMethodOptionsClient = {
  __typename?: 'StripeSetupIntentTypeSpecificPaymentMethodOptionsClient';
  verificationMethod?: Maybe<StripeSetupIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod>;
};

export type StripeSetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsAcssDebitUnion = StripeSetupIntentPaymentMethodOptionsAcssDebit | StripeSetupIntentTypeSpecificPaymentMethodOptionsClient;

export type StripeSetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsBlikUnion = StripeSetupIntentPaymentMethodOptionsBlik | StripeSetupIntentTypeSpecificPaymentMethodOptionsClient;

export type StripeSetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsLinkUnion = StripeSetupIntentPaymentMethodOptionsLink | StripeSetupIntentTypeSpecificPaymentMethodOptionsClient;

export type StripeSetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsPaypalUnion = StripeSetupIntentPaymentMethodOptionsPaypal | StripeSetupIntentTypeSpecificPaymentMethodOptionsClient;

export type StripeSetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsSepaDebitUnion = StripeSetupIntentPaymentMethodOptionsSepaDebit | StripeSetupIntentTypeSpecificPaymentMethodOptionsClient;

export type StripeSetupIntentTypeSpecificPaymentMethodOptionsClientOrSetupIntentPaymentMethodOptionsUsBankAccountUnion = StripeSetupIntentPaymentMethodOptionsUsBankAccount | StripeSetupIntentTypeSpecificPaymentMethodOptionsClient;

export enum StripeSetupIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod {
  Automatic = 'AUTOMATIC',
  Instant = 'INSTANT',
  Microdeposits = 'MICRODEPOSITS'
}

export type StripeShipping = {
  __typename?: 'StripeShipping';
  address?: Maybe<StripeAddress>;
  carrier?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  trackingNumber?: Maybe<Scalars['String']>;
};

export type StripeShippingRate = {
  __typename?: 'StripeShippingRate';
  active: Scalars['Boolean'];
  created: Scalars['Int'];
  deliveryEstimate?: Maybe<StripeShippingRateDeliveryEstimate>;
  displayName?: Maybe<Scalars['String']>;
  fixedAmount?: Maybe<StripeShippingRateFixedAmount>;
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  metadata: Scalars['JSON'];
  object: StripeShippingRateObject;
  taxBehavior?: Maybe<StripeShippingRateTaxBehavior>;
  taxCode?: Maybe<StripeStringOrTaxCodeUnion>;
  type: StripeShippingRateType;
};

export type StripeShippingRateDeliveryEstimate = {
  __typename?: 'StripeShippingRateDeliveryEstimate';
  maximum?: Maybe<StripeShippingRateDeliveryEstimateBound>;
  minimum?: Maybe<StripeShippingRateDeliveryEstimateBound>;
};

export type StripeShippingRateDeliveryEstimateBound = {
  __typename?: 'StripeShippingRateDeliveryEstimateBound';
  unit: StripeShippingRateDeliveryEstimateBoundUnit;
  value: Scalars['Int'];
};

export enum StripeShippingRateDeliveryEstimateBoundUnit {
  BusinessDay = 'BUSINESS_DAY',
  Day = 'DAY',
  Hour = 'HOUR',
  Month = 'MONTH',
  Week = 'WEEK'
}

export type StripeShippingRateFixedAmount = {
  __typename?: 'StripeShippingRateFixedAmount';
  amount: Scalars['Int'];
  currency: Scalars['String'];
  currencyOptions?: Maybe<Scalars['JSON']>;
};

export enum StripeShippingRateObject {
  ShippingRate = 'SHIPPING_RATE'
}

export enum StripeShippingRateTaxBehavior {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE',
  Unspecified = 'UNSPECIFIED'
}

export enum StripeShippingRateType {
  FixedAmount = 'FIXED_AMOUNT'
}

export type StripeSigmaScheduledQueryRunError = {
  __typename?: 'StripeSigmaScheduledQueryRunError';
  message: Scalars['String'];
};

export type StripeSource = {
  __typename?: 'StripeSource';
  achCreditTransfer?: Maybe<StripeSourceTypeAchCreditTransfer>;
  achDebit?: Maybe<StripeSourceTypeAchDebit>;
  acssDebit?: Maybe<StripeSourceTypeAcssDebit>;
  alipay?: Maybe<StripeSourceTypeAlipay>;
  amount?: Maybe<Scalars['Int']>;
  auBecsDebit?: Maybe<StripeSourceTypeAuBecsDebit>;
  bancontact?: Maybe<StripeSourceTypeBancontact>;
  card?: Maybe<StripeSourceTypeCard>;
  cardPresent?: Maybe<StripeSourceTypeCardPresent>;
  clientSecret: Scalars['String'];
  codeVerification?: Maybe<StripeSourceCodeVerificationFlow>;
  created: Scalars['Int'];
  currency?: Maybe<Scalars['String']>;
  customer?: Maybe<Scalars['String']>;
  eps?: Maybe<StripeSourceTypeEps>;
  flow: Scalars['String'];
  giropay?: Maybe<StripeSourceTypeGiropay>;
  id: Scalars['String'];
  ideal?: Maybe<StripeSourceTypeIdeal>;
  klarna?: Maybe<StripeSourceTypeKlarna>;
  livemode: Scalars['Boolean'];
  metadata?: Maybe<Scalars['JSON']>;
  multibanco?: Maybe<StripeSourceTypeMultibanco>;
  object: StripeSourceObject;
  owner?: Maybe<StripeSourceOwner>;
  p24?: Maybe<StripeSourceTypeP24>;
  receiver?: Maybe<StripeSourceReceiverFlow>;
  redirect?: Maybe<StripeSourceRedirectFlow>;
  sepaDebit?: Maybe<StripeSourceTypeSepaDebit>;
  sofort?: Maybe<StripeSourceTypeSofort>;
  sourceOrder?: Maybe<StripeSourceOrder>;
  statementDescriptor?: Maybe<Scalars['String']>;
  status: Scalars['String'];
  threeDSecure?: Maybe<StripeSourceTypeThreeDSecure>;
  type: StripeSourceType;
  usage?: Maybe<Scalars['String']>;
  wechat?: Maybe<StripeSourceTypeWechat>;
};

export type StripeSourceCodeVerificationFlow = {
  __typename?: 'StripeSourceCodeVerificationFlow';
  attemptsRemaining: Scalars['Int'];
  status: Scalars['String'];
};

export type StripeSourceMandateNotification = {
  __typename?: 'StripeSourceMandateNotification';
  acssDebit?: Maybe<StripeSourceMandateNotificationAcssDebitData>;
  amount?: Maybe<Scalars['Int']>;
  bacsDebit?: Maybe<StripeSourceMandateNotificationBacsDebitData>;
  created: Scalars['Int'];
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  object: StripeSourceMandateNotificationObject;
  reason: Scalars['String'];
  sepaDebit?: Maybe<StripeSourceMandateNotificationSepaDebitData>;
  source: StripeSource;
  status: Scalars['String'];
  type: Scalars['String'];
};

export type StripeSourceMandateNotificationAcssDebitData = {
  __typename?: 'StripeSourceMandateNotificationAcssDebitData';
  statementDescriptor?: Maybe<Scalars['String']>;
};

export type StripeSourceMandateNotificationBacsDebitData = {
  __typename?: 'StripeSourceMandateNotificationBacsDebitData';
  last4?: Maybe<Scalars['String']>;
};

export enum StripeSourceMandateNotificationObject {
  SourceMandateNotification = 'SOURCE_MANDATE_NOTIFICATION'
}

export type StripeSourceMandateNotificationSepaDebitData = {
  __typename?: 'StripeSourceMandateNotificationSepaDebitData';
  creditorIdentifier?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  mandateReference?: Maybe<Scalars['String']>;
};

export enum StripeSourceObject {
  Source = 'SOURCE'
}

export type StripeSourceOrBankAccountOrCardUnion = StripeBankAccount | StripeCard | StripeSource;

export type StripeSourceOrCardOrBankAccountUnion = StripeBankAccount | StripeCard | StripeSource;

export type StripeSourceOrder = {
  __typename?: 'StripeSourceOrder';
  amount: Scalars['Int'];
  currency: Scalars['String'];
  email?: Maybe<Scalars['String']>;
  items?: Maybe<Array<StripeSourceOrderItem>>;
  shipping?: Maybe<StripeShipping>;
};

export type StripeSourceOrderItem = {
  __typename?: 'StripeSourceOrderItem';
  amount?: Maybe<Scalars['Int']>;
  currency?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  parent?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
};

export type StripeSourceOwner = {
  __typename?: 'StripeSourceOwner';
  address?: Maybe<StripeAddress>;
  email?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  verifiedAddress?: Maybe<StripeAddress>;
  verifiedEmail?: Maybe<Scalars['String']>;
  verifiedName?: Maybe<Scalars['String']>;
  verifiedPhone?: Maybe<Scalars['String']>;
};

export type StripeSourceReceiverFlow = {
  __typename?: 'StripeSourceReceiverFlow';
  address?: Maybe<Scalars['String']>;
  amountCharged: Scalars['Int'];
  amountReceived: Scalars['Int'];
  amountReturned: Scalars['Int'];
  refundAttributesMethod: Scalars['String'];
  refundAttributesStatus: Scalars['String'];
};

export type StripeSourceRedirectFlow = {
  __typename?: 'StripeSourceRedirectFlow';
  failureReason?: Maybe<Scalars['String']>;
  returnUrl: Scalars['String'];
  status: Scalars['String'];
  url: Scalars['String'];
};

export type StripeSourceTransaction = {
  __typename?: 'StripeSourceTransaction';
  achCreditTransfer?: Maybe<StripeSourceTransactionAchCreditTransferData>;
  amount: Scalars['Int'];
  chfCreditTransfer?: Maybe<StripeSourceTransactionChfCreditTransferData>;
  created: Scalars['Int'];
  currency: Scalars['String'];
  gbpCreditTransfer?: Maybe<StripeSourceTransactionGbpCreditTransferData>;
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  object: StripeSourceTransactionObject;
  paperCheck?: Maybe<StripeSourceTransactionPaperCheckData>;
  sepaCreditTransfer?: Maybe<StripeSourceTransactionSepaCreditTransferData>;
  source: Scalars['String'];
  status: Scalars['String'];
  type: StripeSourceTransactionType;
};

export type StripeSourceTransactionAchCreditTransferData = {
  __typename?: 'StripeSourceTransactionAchCreditTransferData';
  customerData?: Maybe<Scalars['String']>;
  fingerprint?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  routingNumber?: Maybe<Scalars['String']>;
};

export type StripeSourceTransactionChfCreditTransferData = {
  __typename?: 'StripeSourceTransactionChfCreditTransferData';
  reference?: Maybe<Scalars['String']>;
  senderAddressCountry?: Maybe<Scalars['String']>;
  senderAddressLine1?: Maybe<Scalars['String']>;
  senderIban?: Maybe<Scalars['String']>;
  senderName?: Maybe<Scalars['String']>;
};

export type StripeSourceTransactionGbpCreditTransferData = {
  __typename?: 'StripeSourceTransactionGbpCreditTransferData';
  fingerprint?: Maybe<Scalars['String']>;
  fundingMethod?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  reference?: Maybe<Scalars['String']>;
  senderAccountNumber?: Maybe<Scalars['String']>;
  senderName?: Maybe<Scalars['String']>;
  senderSortCode?: Maybe<Scalars['String']>;
};

export enum StripeSourceTransactionObject {
  SourceTransaction = 'SOURCE_TRANSACTION'
}

export type StripeSourceTransactionPaperCheckData = {
  __typename?: 'StripeSourceTransactionPaperCheckData';
  availableAt?: Maybe<Scalars['String']>;
  invoices?: Maybe<Scalars['String']>;
};

export type StripeSourceTransactionSepaCreditTransferData = {
  __typename?: 'StripeSourceTransactionSepaCreditTransferData';
  reference?: Maybe<Scalars['String']>;
  senderIban?: Maybe<Scalars['String']>;
  senderName?: Maybe<Scalars['String']>;
};

export enum StripeSourceTransactionType {
  AchCreditTransfer = 'ACH_CREDIT_TRANSFER',
  AchDebit = 'ACH_DEBIT',
  Alipay = 'ALIPAY',
  Bancontact = 'BANCONTACT',
  Card = 'CARD',
  CardPresent = 'CARD_PRESENT',
  Eps = 'EPS',
  Giropay = 'GIROPAY',
  Ideal = 'IDEAL',
  Klarna = 'KLARNA',
  Multibanco = 'MULTIBANCO',
  P_24 = 'P_24',
  SepaDebit = 'SEPA_DEBIT',
  Sofort = 'SOFORT',
  ThreeDSecure = 'THREE_D_SECURE',
  Wechat = 'WECHAT'
}

export enum StripeSourceType {
  AchCreditTransfer = 'ACH_CREDIT_TRANSFER',
  AchDebit = 'ACH_DEBIT',
  AcssDebit = 'ACSS_DEBIT',
  Alipay = 'ALIPAY',
  AuBecsDebit = 'AU_BECS_DEBIT',
  Bancontact = 'BANCONTACT',
  Card = 'CARD',
  CardPresent = 'CARD_PRESENT',
  Eps = 'EPS',
  Giropay = 'GIROPAY',
  Ideal = 'IDEAL',
  Klarna = 'KLARNA',
  Multibanco = 'MULTIBANCO',
  P_24 = 'P_24',
  SepaDebit = 'SEPA_DEBIT',
  Sofort = 'SOFORT',
  ThreeDSecure = 'THREE_D_SECURE',
  Wechat = 'WECHAT'
}

export type StripeSourceTypeAchCreditTransfer = {
  __typename?: 'StripeSourceTypeAchCreditTransfer';
  accountNumber?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  fingerprint?: Maybe<Scalars['String']>;
  refundAccountHolderName?: Maybe<Scalars['String']>;
  refundAccountHolderType?: Maybe<Scalars['String']>;
  refundRoutingNumber?: Maybe<Scalars['String']>;
  routingNumber?: Maybe<Scalars['String']>;
  swiftCode?: Maybe<Scalars['String']>;
};

export type StripeSourceTypeAchDebit = {
  __typename?: 'StripeSourceTypeAchDebit';
  bankName?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  fingerprint?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  routingNumber?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type StripeSourceTypeAcssDebit = {
  __typename?: 'StripeSourceTypeAcssDebit';
  bankAddressCity?: Maybe<Scalars['String']>;
  bankAddressLine1?: Maybe<Scalars['String']>;
  bankAddressLine2?: Maybe<Scalars['String']>;
  bankAddressPostalCode?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  fingerprint?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  routingNumber?: Maybe<Scalars['String']>;
};

export type StripeSourceTypeAlipay = {
  __typename?: 'StripeSourceTypeAlipay';
  dataString?: Maybe<Scalars['String']>;
  nativeUrl?: Maybe<Scalars['String']>;
  statementDescriptor?: Maybe<Scalars['String']>;
};

export type StripeSourceTypeAuBecsDebit = {
  __typename?: 'StripeSourceTypeAuBecsDebit';
  bsbNumber?: Maybe<Scalars['String']>;
  fingerprint?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
};

export type StripeSourceTypeBancontact = {
  __typename?: 'StripeSourceTypeBancontact';
  bankCode?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  bic?: Maybe<Scalars['String']>;
  ibanLast4?: Maybe<Scalars['String']>;
  preferredLanguage?: Maybe<Scalars['String']>;
  statementDescriptor?: Maybe<Scalars['String']>;
};

export type StripeSourceTypeCard = {
  __typename?: 'StripeSourceTypeCard';
  addressLine1Check?: Maybe<Scalars['String']>;
  addressZipCheck?: Maybe<Scalars['String']>;
  brand?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  cvcCheck?: Maybe<Scalars['String']>;
  dynamicLast4?: Maybe<Scalars['String']>;
  expMonth?: Maybe<Scalars['Int']>;
  expYear?: Maybe<Scalars['Int']>;
  fingerprint?: Maybe<Scalars['String']>;
  funding?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  threeDSecure?: Maybe<Scalars['String']>;
  tokenizationMethod?: Maybe<Scalars['String']>;
};

export type StripeSourceTypeCardPresent = {
  __typename?: 'StripeSourceTypeCardPresent';
  applicationCryptogram?: Maybe<Scalars['String']>;
  applicationPreferredName?: Maybe<Scalars['String']>;
  authorizationCode?: Maybe<Scalars['String']>;
  authorizationResponseCode?: Maybe<Scalars['String']>;
  brand?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  cvmType?: Maybe<Scalars['String']>;
  dataType?: Maybe<Scalars['String']>;
  dedicatedFileName?: Maybe<Scalars['String']>;
  emvAuthData?: Maybe<Scalars['String']>;
  evidenceCustomerSignature?: Maybe<Scalars['String']>;
  evidenceTransactionCertificate?: Maybe<Scalars['String']>;
  expMonth?: Maybe<Scalars['Int']>;
  expYear?: Maybe<Scalars['Int']>;
  fingerprint?: Maybe<Scalars['String']>;
  funding?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  posDeviceId?: Maybe<Scalars['String']>;
  posEntryMode?: Maybe<Scalars['String']>;
  readMethod?: Maybe<Scalars['String']>;
  reader?: Maybe<Scalars['String']>;
  terminalVerificationResults?: Maybe<Scalars['String']>;
  transactionStatusInformation?: Maybe<Scalars['String']>;
};

export type StripeSourceTypeEps = {
  __typename?: 'StripeSourceTypeEps';
  reference?: Maybe<Scalars['String']>;
  statementDescriptor?: Maybe<Scalars['String']>;
};

export type StripeSourceTypeGiropay = {
  __typename?: 'StripeSourceTypeGiropay';
  bankCode?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  bic?: Maybe<Scalars['String']>;
  statementDescriptor?: Maybe<Scalars['String']>;
};

export type StripeSourceTypeIdeal = {
  __typename?: 'StripeSourceTypeIdeal';
  bank?: Maybe<Scalars['String']>;
  bic?: Maybe<Scalars['String']>;
  ibanLast4?: Maybe<Scalars['String']>;
  statementDescriptor?: Maybe<Scalars['String']>;
};

export type StripeSourceTypeKlarna = {
  __typename?: 'StripeSourceTypeKlarna';
  backgroundImageUrl?: Maybe<Scalars['String']>;
  clientToken?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  locale?: Maybe<Scalars['String']>;
  logoUrl?: Maybe<Scalars['String']>;
  pageTitle?: Maybe<Scalars['String']>;
  payLaterAssetUrlsDescriptive?: Maybe<Scalars['String']>;
  payLaterAssetUrlsStandard?: Maybe<Scalars['String']>;
  payLaterName?: Maybe<Scalars['String']>;
  payLaterRedirectUrl?: Maybe<Scalars['String']>;
  payNowAssetUrlsDescriptive?: Maybe<Scalars['String']>;
  payNowAssetUrlsStandard?: Maybe<Scalars['String']>;
  payNowName?: Maybe<Scalars['String']>;
  payNowRedirectUrl?: Maybe<Scalars['String']>;
  payOverTimeAssetUrlsDescriptive?: Maybe<Scalars['String']>;
  payOverTimeAssetUrlsStandard?: Maybe<Scalars['String']>;
  payOverTimeName?: Maybe<Scalars['String']>;
  payOverTimeRedirectUrl?: Maybe<Scalars['String']>;
  paymentMethodCategories?: Maybe<Scalars['String']>;
  purchaseCountry?: Maybe<Scalars['String']>;
  purchaseType?: Maybe<Scalars['String']>;
  redirectUrl?: Maybe<Scalars['String']>;
  shippingDelay?: Maybe<Scalars['Int']>;
  shippingFirstName?: Maybe<Scalars['String']>;
  shippingLastName?: Maybe<Scalars['String']>;
};

export type StripeSourceTypeMultibanco = {
  __typename?: 'StripeSourceTypeMultibanco';
  entity?: Maybe<Scalars['String']>;
  reference?: Maybe<Scalars['String']>;
  refundAccountHolderAddressCity?: Maybe<Scalars['String']>;
  refundAccountHolderAddressCountry?: Maybe<Scalars['String']>;
  refundAccountHolderAddressLine1?: Maybe<Scalars['String']>;
  refundAccountHolderAddressLine2?: Maybe<Scalars['String']>;
  refundAccountHolderAddressPostalCode?: Maybe<Scalars['String']>;
  refundAccountHolderAddressState?: Maybe<Scalars['String']>;
  refundAccountHolderName?: Maybe<Scalars['String']>;
  refundIban?: Maybe<Scalars['String']>;
};

export type StripeSourceTypeP24 = {
  __typename?: 'StripeSourceTypeP24';
  reference?: Maybe<Scalars['String']>;
};

export type StripeSourceTypeSepaDebit = {
  __typename?: 'StripeSourceTypeSepaDebit';
  bankCode?: Maybe<Scalars['String']>;
  branchCode?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  fingerprint?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  mandateReference?: Maybe<Scalars['String']>;
  mandateUrl?: Maybe<Scalars['String']>;
};

export type StripeSourceTypeSofort = {
  __typename?: 'StripeSourceTypeSofort';
  bankCode?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  bic?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  ibanLast4?: Maybe<Scalars['String']>;
  preferredLanguage?: Maybe<Scalars['String']>;
  statementDescriptor?: Maybe<Scalars['String']>;
};

export type StripeSourceTypeThreeDSecure = {
  __typename?: 'StripeSourceTypeThreeDSecure';
  addressLine1Check?: Maybe<Scalars['String']>;
  addressZipCheck?: Maybe<Scalars['String']>;
  authenticated?: Maybe<Scalars['Boolean']>;
  brand?: Maybe<Scalars['String']>;
  card?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customer?: Maybe<Scalars['String']>;
  cvcCheck?: Maybe<Scalars['String']>;
  dynamicLast4?: Maybe<Scalars['String']>;
  expMonth?: Maybe<Scalars['Int']>;
  expYear?: Maybe<Scalars['Int']>;
  fingerprint?: Maybe<Scalars['String']>;
  funding?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  threeDSecure?: Maybe<Scalars['String']>;
  tokenizationMethod?: Maybe<Scalars['String']>;
};

export type StripeSourceTypeWechat = {
  __typename?: 'StripeSourceTypeWechat';
  prepayId?: Maybe<Scalars['String']>;
  qrCodeUrl?: Maybe<Scalars['String']>;
  statementDescriptor?: Maybe<Scalars['String']>;
};

export type StripeString = {
  __typename?: 'StripeString';
  data?: Maybe<Scalars['String']>;
};

export type StripeStringOrAccountUnion = StripeAccount | StripeString;

export type StripeStringOrApplicationFeeUnion = StripeApplicationFee | StripeString;

export type StripeStringOrApplicationUnion = StripeApplication | StripeString;

export type StripeStringOrBalanceTransactionUnion = StripeBalanceTransaction | StripeString;

export type StripeStringOrBillingPortalConfigurationUnion = StripeBillingPortalConfiguration | StripeString;

export type StripeStringOrChargeUnion = StripeCharge | StripeString;

export type StripeStringOrCreditNoteUnion = StripeCreditNote | StripeString;

export type StripeStringOrCustomerBalanceTransactionUnion = StripeCustomerBalanceTransaction | StripeString;

export type StripeStringOrCustomerUnion = StripeCustomer | StripeString;

export type StripeStringOrDeletedApplicationOrApplicationUnion = StripeApplication | StripeDeletedApplication | StripeString;

export type StripeStringOrDeletedCardOrDeletedBankAccountOrCardOrBankAccountUnion = StripeBankAccount | StripeCard | StripeDeletedBankAccount | StripeDeletedCard | StripeString;

export type StripeStringOrDeletedCouponOrCouponUnion = StripeCoupon | StripeDeletedCoupon | StripeString;

export type StripeStringOrDeletedCustomerOrCustomerUnion = StripeCustomer | StripeDeletedCustomer | StripeString;

export type StripeStringOrDeletedDiscountOrDiscountUnion = StripeDeletedDiscount | StripeDiscount | StripeString;

export type StripeStringOrDeletedInvoiceOrInvoiceUnion = StripeDeletedInvoice | StripeInvoice | StripeString;

export type StripeStringOrDeletedPriceOrPriceUnion = StripeDeletedPrice | StripePrice | StripeString;

export type StripeStringOrDeletedProductOrProductUnion = StripeDeletedProduct | StripeProduct | StripeString;

export type StripeStringOrDeletedTaxIdOrTaxIdUnion = StripeDeletedTaxId | StripeString | StripeTaxId;

export type StripeStringOrDiscountUnion = StripeDiscount | StripeString;

export type StripeStringOrFileUnion = StripeFile | StripeString;

export type StripeStringOrFinancialConnectionsAccountOwnershipUnion = StripeFinancialConnectionsAccountOwnership | StripeString;

export type StripeStringOrGetInvoicesUpcomingAddressCustomerDetailsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripeGetInvoicesUpcomingAddressCustomerDetailsInput?: InputMaybe<StripeGetInvoicesUpcomingAddressCustomerDetailsInput>;
};

export type StripeStringOrGetInvoicesUpcomingBillingThresholdsSubscriptionItemsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripeGetInvoicesUpcomingBillingThresholdsSubscriptionItemsInput?: InputMaybe<StripeGetInvoicesUpcomingBillingThresholdsSubscriptionItemsInput>;
};

export type StripeStringOrGetInvoicesUpcomingDiscountsInvoiceItemsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripeGetInvoicesUpcomingDiscountsInvoiceItemsInput?: InputMaybe<StripeGetInvoicesUpcomingDiscountsInvoiceItemsInput>;
};

export type StripeStringOrGetInvoicesUpcomingDiscountsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripeGetInvoicesUpcomingDiscountsInput?: InputMaybe<StripeGetInvoicesUpcomingDiscountsInput>;
};

export type StripeStringOrGetInvoicesUpcomingLinesAddressCustomerDetailsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripeGetInvoicesUpcomingLinesAddressCustomerDetailsInput?: InputMaybe<StripeGetInvoicesUpcomingLinesAddressCustomerDetailsInput>;
};

export type StripeStringOrGetInvoicesUpcomingLinesBillingThresholdsSubscriptionItemsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripeGetInvoicesUpcomingLinesBillingThresholdsSubscriptionItemsInput?: InputMaybe<StripeGetInvoicesUpcomingLinesBillingThresholdsSubscriptionItemsInput>;
};

export type StripeStringOrGetInvoicesUpcomingLinesDiscountsInvoiceItemsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripeGetInvoicesUpcomingLinesDiscountsInvoiceItemsInput?: InputMaybe<StripeGetInvoicesUpcomingLinesDiscountsInvoiceItemsInput>;
};

export type StripeStringOrGetInvoicesUpcomingLinesDiscountsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripeGetInvoicesUpcomingLinesDiscountsInput?: InputMaybe<StripeGetInvoicesUpcomingLinesDiscountsInput>;
};

export type StripeStringOrGetInvoicesUpcomingLinesShippingCustomerDetailsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripeGetInvoicesUpcomingLinesShippingCustomerDetailsInput?: InputMaybe<StripeGetInvoicesUpcomingLinesShippingCustomerDetailsInput>;
};

export type StripeStringOrGetInvoicesUpcomingShippingCustomerDetailsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripeGetInvoicesUpcomingShippingCustomerDetailsInput?: InputMaybe<StripeGetInvoicesUpcomingShippingCustomerDetailsInput>;
};

export type StripeStringOrIdentityVerificationReportUnion = StripeIdentityVerificationReport | StripeString;

export type StripeStringOrInvoiceUnion = StripeInvoice | StripeString;

export type StripeStringOrInvoiceitemUnion = StripeInvoiceitem | StripeString;

export type StripeStringOrIssuingAuthorizationUnion = StripeIssuingAuthorization | StripeString;

export type StripeStringOrIssuingCardUnion = StripeIssuingCard | StripeString;

export type StripeStringOrIssuingCardholderUnion = StripeIssuingCardholder | StripeString;

export type StripeStringOrIssuingDisputeUnion = StripeIssuingDispute | StripeString;

export type StripeStringOrIssuingTransactionUnion = StripeIssuingTransaction | StripeString;

export type StripeStringOrMandateUnion = StripeMandate | StripeString;

export type StripeStringOrPaymentIntentUnion = StripePaymentIntent | StripeString;

export type StripeStringOrPaymentLinkUnion = StripePaymentLink | StripeString;

export type StripeStringOrPaymentMethodUnion = StripePaymentMethod | StripeString;

export type StripeStringOrPayoutUnion = StripePayout | StripeString;

export type StripeStringOrPostAccountsAccountBankAccountsBankAccountUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostAccountsAccountBankAccountsBankAccountInput?: InputMaybe<StripePostAccountsAccountBankAccountsBankAccountInput>;
};

export type StripeStringOrPostAccountsAccountDobIndividualUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostAccountsAccountDobIndividualInput?: InputMaybe<StripePostAccountsAccountDobIndividualInput>;
};

export type StripeStringOrPostAccountsAccountExternalAccountsBankAccountUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostAccountsAccountExternalAccountsBankAccountInput?: InputMaybe<StripePostAccountsAccountExternalAccountsBankAccountInput>;
};

export type StripeStringOrPostAccountsAccountPeopleDobUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostAccountsAccountPeopleDobInput?: InputMaybe<StripePostAccountsAccountPeopleDobInput>;
};

export type StripeStringOrPostAccountsAccountPeoplePersonDobUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostAccountsAccountPeoplePersonDobInput?: InputMaybe<StripePostAccountsAccountPeoplePersonDobInput>;
};

export type StripeStringOrPostAccountsAccountPersonsDobUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostAccountsAccountPersonsDobInput?: InputMaybe<StripePostAccountsAccountPersonsDobInput>;
};

export type StripeStringOrPostAccountsAccountPersonsPersonDobUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostAccountsAccountPersonsPersonDobInput?: InputMaybe<StripePostAccountsAccountPersonsPersonDobInput>;
};

export type StripeStringOrPostAccountsBankAccountUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostAccountsBankAccountInput?: InputMaybe<StripePostAccountsBankAccountInput>;
};

export type StripeStringOrPostAccountsDobIndividualUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostAccountsDobIndividualInput?: InputMaybe<StripePostAccountsDobIndividualInput>;
};

export type StripeStringOrPostBillingPortalConfigurationsConfigurationProductsSubscriptionUpdateFeaturesUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostBillingPortalConfigurationsConfigurationProductsSubscriptionUpdateFeaturesInput?: InputMaybe<StripePostBillingPortalConfigurationsConfigurationProductsSubscriptionUpdateFeaturesInput>;
};

export type StripeStringOrPostBillingPortalConfigurationsProductsSubscriptionUpdateFeaturesUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostBillingPortalConfigurationsProductsSubscriptionUpdateFeaturesInput?: InputMaybe<StripePostBillingPortalConfigurationsProductsSubscriptionUpdateFeaturesInput>;
};

export type StripeStringOrPostChargesCardUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostChargesCardInput?: InputMaybe<StripePostChargesCardInput>;
};

export type StripeStringOrPostChargesDestinationUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostChargesDestinationInput?: InputMaybe<StripePostChargesDestinationInput>;
};

export type StripeStringOrPostCheckoutSessionsCustomFieldsInvoiceDataInvoiceCreationUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostCheckoutSessionsCustomFieldsInvoiceDataInvoiceCreationInput?: InputMaybe<StripePostCheckoutSessionsCustomFieldsInvoiceDataInvoiceCreationInput>;
};

export type StripeStringOrPostCheckoutSessionsRenderingOptionsInvoiceDataInvoiceCreationUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostCheckoutSessionsRenderingOptionsInvoiceDataInvoiceCreationInput?: InputMaybe<StripePostCheckoutSessionsRenderingOptionsInvoiceDataInvoiceCreationInput>;
};

export type StripeStringOrPostCheckoutSessionsShippingAddressCustomTextUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostCheckoutSessionsShippingAddressCustomTextInput?: InputMaybe<StripePostCheckoutSessionsShippingAddressCustomTextInput>;
};

export type StripeStringOrPostCheckoutSessionsSubmitCustomTextUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostCheckoutSessionsSubmitCustomTextInput?: InputMaybe<StripePostCheckoutSessionsSubmitCustomTextInput>;
};

export type StripeStringOrPostCustomersAddressUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostCustomersAddressInput?: InputMaybe<StripePostCustomersAddressInput>;
};

export type StripeStringOrPostCustomersCustomFieldsInvoiceSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostCustomersCustomFieldsInvoiceSettingsInput?: InputMaybe<StripePostCustomersCustomFieldsInvoiceSettingsInput>;
};

export type StripeStringOrPostCustomersCustomerAddressUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostCustomersCustomerAddressInput?: InputMaybe<StripePostCustomersCustomerAddressInput>;
};

export type StripeStringOrPostCustomersCustomerBankAccountUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostCustomersCustomerBankAccountInput?: InputMaybe<StripePostCustomersCustomerBankAccountInput>;
};

export type StripeStringOrPostCustomersCustomerBankAccountsBankAccountUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostCustomersCustomerBankAccountsBankAccountInput?: InputMaybe<StripePostCustomersCustomerBankAccountsBankAccountInput>;
};

export type StripeStringOrPostCustomersCustomerBankAccountsCardUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostCustomersCustomerBankAccountsCardInput?: InputMaybe<StripePostCustomersCustomerBankAccountsCardInput>;
};

export type StripeStringOrPostCustomersCustomerCardUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostCustomersCustomerCardInput?: InputMaybe<StripePostCustomersCustomerCardInput>;
};

export type StripeStringOrPostCustomersCustomerCardsBankAccountUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostCustomersCustomerCardsBankAccountInput?: InputMaybe<StripePostCustomersCustomerCardsBankAccountInput>;
};

export type StripeStringOrPostCustomersCustomerCardsCardUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostCustomersCustomerCardsCardInput?: InputMaybe<StripePostCustomersCustomerCardsCardInput>;
};

export type StripeStringOrPostCustomersCustomerCustomFieldsInvoiceSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostCustomersCustomerCustomFieldsInvoiceSettingsInput?: InputMaybe<StripePostCustomersCustomerCustomFieldsInvoiceSettingsInput>;
};

export type StripeStringOrPostCustomersCustomerRenderingOptionsInvoiceSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostCustomersCustomerRenderingOptionsInvoiceSettingsInput?: InputMaybe<StripePostCustomersCustomerRenderingOptionsInvoiceSettingsInput>;
};

export type StripeStringOrPostCustomersCustomerShippingUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostCustomersCustomerShippingInput?: InputMaybe<StripePostCustomersCustomerShippingInput>;
};

export type StripeStringOrPostCustomersCustomerSourcesBankAccountUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostCustomersCustomerSourcesBankAccountInput?: InputMaybe<StripePostCustomersCustomerSourcesBankAccountInput>;
};

export type StripeStringOrPostCustomersCustomerSourcesCardUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostCustomersCustomerSourcesCardInput?: InputMaybe<StripePostCustomersCustomerSourcesCardInput>;
};

export type StripeStringOrPostCustomersCustomerSubscriptionsAcssDebitPaymentMethodOptionsPaymentSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostCustomersCustomerSubscriptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput?: InputMaybe<StripePostCustomersCustomerSubscriptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput>;
};

export type StripeStringOrPostCustomersCustomerSubscriptionsBancontactPaymentMethodOptionsPaymentSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostCustomersCustomerSubscriptionsBancontactPaymentMethodOptionsPaymentSettingsInput?: InputMaybe<StripePostCustomersCustomerSubscriptionsBancontactPaymentMethodOptionsPaymentSettingsInput>;
};

export type StripeStringOrPostCustomersCustomerSubscriptionsBillingThresholdsItemsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostCustomersCustomerSubscriptionsBillingThresholdsItemsInput?: InputMaybe<StripePostCustomersCustomerSubscriptionsBillingThresholdsItemsInput>;
};

export type StripeStringOrPostCustomersCustomerSubscriptionsBillingThresholdsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostCustomersCustomerSubscriptionsBillingThresholdsInput?: InputMaybe<StripePostCustomersCustomerSubscriptionsBillingThresholdsInput>;
};

export type StripeStringOrPostCustomersCustomerSubscriptionsCardPaymentMethodOptionsPaymentSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostCustomersCustomerSubscriptionsCardPaymentMethodOptionsPaymentSettingsInput?: InputMaybe<StripePostCustomersCustomerSubscriptionsCardPaymentMethodOptionsPaymentSettingsInput>;
};

export type StripeStringOrPostCustomersCustomerSubscriptionsCustomerBalancePaymentMethodOptionsPaymentSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostCustomersCustomerSubscriptionsCustomerBalancePaymentMethodOptionsPaymentSettingsInput?: InputMaybe<StripePostCustomersCustomerSubscriptionsCustomerBalancePaymentMethodOptionsPaymentSettingsInput>;
};

export type StripeStringOrPostCustomersCustomerSubscriptionsPendingInvoiceItemIntervalUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostCustomersCustomerSubscriptionsPendingInvoiceItemIntervalInput?: InputMaybe<StripePostCustomersCustomerSubscriptionsPendingInvoiceItemIntervalInput>;
};

export type StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdAcssDebitPaymentMethodOptionsPaymentSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostCustomersCustomerSubscriptionsSubscriptionExposedIdAcssDebitPaymentMethodOptionsPaymentSettingsInput?: InputMaybe<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdAcssDebitPaymentMethodOptionsPaymentSettingsInput>;
};

export type StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdBancontactPaymentMethodOptionsPaymentSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostCustomersCustomerSubscriptionsSubscriptionExposedIdBancontactPaymentMethodOptionsPaymentSettingsInput?: InputMaybe<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdBancontactPaymentMethodOptionsPaymentSettingsInput>;
};

export type StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdBillingThresholdsItemsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostCustomersCustomerSubscriptionsSubscriptionExposedIdBillingThresholdsItemsInput?: InputMaybe<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdBillingThresholdsItemsInput>;
};

export type StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdBillingThresholdsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostCustomersCustomerSubscriptionsSubscriptionExposedIdBillingThresholdsInput?: InputMaybe<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdBillingThresholdsInput>;
};

export type StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdCardPaymentMethodOptionsPaymentSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostCustomersCustomerSubscriptionsSubscriptionExposedIdCardPaymentMethodOptionsPaymentSettingsInput?: InputMaybe<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdCardPaymentMethodOptionsPaymentSettingsInput>;
};

export type StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdCustomerBalancePaymentMethodOptionsPaymentSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostCustomersCustomerSubscriptionsSubscriptionExposedIdCustomerBalancePaymentMethodOptionsPaymentSettingsInput?: InputMaybe<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdCustomerBalancePaymentMethodOptionsPaymentSettingsInput>;
};

export type StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdPauseCollectionUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPauseCollectionInput?: InputMaybe<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPauseCollectionInput>;
};

export type StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdPendingInvoiceItemIntervalUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPendingInvoiceItemIntervalInput?: InputMaybe<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdPendingInvoiceItemIntervalInput>;
};

export type StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdTransferDataUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostCustomersCustomerSubscriptionsSubscriptionExposedIdTransferDataInput?: InputMaybe<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdTransferDataInput>;
};

export type StripeStringOrPostCustomersCustomerSubscriptionsSubscriptionExposedIdUsBankAccountPaymentMethodOptionsPaymentSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostCustomersCustomerSubscriptionsSubscriptionExposedIdUsBankAccountPaymentMethodOptionsPaymentSettingsInput?: InputMaybe<StripePostCustomersCustomerSubscriptionsSubscriptionExposedIdUsBankAccountPaymentMethodOptionsPaymentSettingsInput>;
};

export type StripeStringOrPostCustomersCustomerSubscriptionsUsBankAccountPaymentMethodOptionsPaymentSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostCustomersCustomerSubscriptionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput?: InputMaybe<StripePostCustomersCustomerSubscriptionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput>;
};

export type StripeStringOrPostCustomersRenderingOptionsInvoiceSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostCustomersRenderingOptionsInvoiceSettingsInput?: InputMaybe<StripePostCustomersRenderingOptionsInvoiceSettingsInput>;
};

export type StripeStringOrPostCustomersShippingUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostCustomersShippingInput?: InputMaybe<StripePostCustomersShippingInput>;
};

export type StripeStringOrPostIdentityVerificationSessionsDocumentOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostIdentityVerificationSessionsDocumentOptionsInput?: InputMaybe<StripePostIdentityVerificationSessionsDocumentOptionsInput>;
};

export type StripeStringOrPostIdentityVerificationSessionsSessionDocumentOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostIdentityVerificationSessionsSessionDocumentOptionsInput?: InputMaybe<StripePostIdentityVerificationSessionsSessionDocumentOptionsInput>;
};

export type StripeStringOrPostInvoiceitemsDiscountsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostInvoiceitemsDiscountsInput?: InputMaybe<StripePostInvoiceitemsDiscountsInput>;
};

export type StripeStringOrPostInvoiceitemsInvoiceitemDiscountsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostInvoiceitemsInvoiceitemDiscountsInput?: InputMaybe<StripePostInvoiceitemsInvoiceitemDiscountsInput>;
};

export type StripeStringOrPostInvoicesAcssDebitPaymentMethodOptionsPaymentSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostInvoicesAcssDebitPaymentMethodOptionsPaymentSettingsInput?: InputMaybe<StripePostInvoicesAcssDebitPaymentMethodOptionsPaymentSettingsInput>;
};

export type StripeStringOrPostInvoicesBancontactPaymentMethodOptionsPaymentSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostInvoicesBancontactPaymentMethodOptionsPaymentSettingsInput?: InputMaybe<StripePostInvoicesBancontactPaymentMethodOptionsPaymentSettingsInput>;
};

export type StripeStringOrPostInvoicesCardPaymentMethodOptionsPaymentSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostInvoicesCardPaymentMethodOptionsPaymentSettingsInput?: InputMaybe<StripePostInvoicesCardPaymentMethodOptionsPaymentSettingsInput>;
};

export type StripeStringOrPostInvoicesCustomFieldsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostInvoicesCustomFieldsInput?: InputMaybe<StripePostInvoicesCustomFieldsInput>;
};

export type StripeStringOrPostInvoicesCustomerBalancePaymentMethodOptionsPaymentSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostInvoicesCustomerBalancePaymentMethodOptionsPaymentSettingsInput?: InputMaybe<StripePostInvoicesCustomerBalancePaymentMethodOptionsPaymentSettingsInput>;
};

export type StripeStringOrPostInvoicesDiscountsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostInvoicesDiscountsInput?: InputMaybe<StripePostInvoicesDiscountsInput>;
};

export type StripeStringOrPostInvoicesInvoiceAcssDebitPaymentMethodOptionsPaymentSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostInvoicesInvoiceAcssDebitPaymentMethodOptionsPaymentSettingsInput?: InputMaybe<StripePostInvoicesInvoiceAcssDebitPaymentMethodOptionsPaymentSettingsInput>;
};

export type StripeStringOrPostInvoicesInvoiceBancontactPaymentMethodOptionsPaymentSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostInvoicesInvoiceBancontactPaymentMethodOptionsPaymentSettingsInput?: InputMaybe<StripePostInvoicesInvoiceBancontactPaymentMethodOptionsPaymentSettingsInput>;
};

export type StripeStringOrPostInvoicesInvoiceCardPaymentMethodOptionsPaymentSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostInvoicesInvoiceCardPaymentMethodOptionsPaymentSettingsInput?: InputMaybe<StripePostInvoicesInvoiceCardPaymentMethodOptionsPaymentSettingsInput>;
};

export type StripeStringOrPostInvoicesInvoiceCustomFieldsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostInvoicesInvoiceCustomFieldsInput?: InputMaybe<StripePostInvoicesInvoiceCustomFieldsInput>;
};

export type StripeStringOrPostInvoicesInvoiceCustomerBalancePaymentMethodOptionsPaymentSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostInvoicesInvoiceCustomerBalancePaymentMethodOptionsPaymentSettingsInput?: InputMaybe<StripePostInvoicesInvoiceCustomerBalancePaymentMethodOptionsPaymentSettingsInput>;
};

export type StripeStringOrPostInvoicesInvoiceDiscountsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostInvoicesInvoiceDiscountsInput?: InputMaybe<StripePostInvoicesInvoiceDiscountsInput>;
};

export type StripeStringOrPostInvoicesInvoicePlanInstallmentsCardPaymentMethodOptionsPaymentSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostInvoicesInvoicePlanInstallmentsCardPaymentMethodOptionsPaymentSettingsInput?: InputMaybe<StripePostInvoicesInvoicePlanInstallmentsCardPaymentMethodOptionsPaymentSettingsInput>;
};

export type StripeStringOrPostInvoicesInvoiceRenderingOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostInvoicesInvoiceRenderingOptionsInput?: InputMaybe<StripePostInvoicesInvoiceRenderingOptionsInput>;
};

export type StripeStringOrPostInvoicesInvoiceShippingCostUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostInvoicesInvoiceShippingCostInput?: InputMaybe<StripePostInvoicesInvoiceShippingCostInput>;
};

export type StripeStringOrPostInvoicesInvoiceShippingDetailsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostInvoicesInvoiceShippingDetailsInput?: InputMaybe<StripePostInvoicesInvoiceShippingDetailsInput>;
};

export type StripeStringOrPostInvoicesInvoiceTransferDataUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostInvoicesInvoiceTransferDataInput?: InputMaybe<StripePostInvoicesInvoiceTransferDataInput>;
};

export type StripeStringOrPostInvoicesInvoiceUsBankAccountPaymentMethodOptionsPaymentSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostInvoicesInvoiceUsBankAccountPaymentMethodOptionsPaymentSettingsInput?: InputMaybe<StripePostInvoicesInvoiceUsBankAccountPaymentMethodOptionsPaymentSettingsInput>;
};

export type StripeStringOrPostInvoicesPlanInstallmentsCardPaymentMethodOptionsPaymentSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostInvoicesPlanInstallmentsCardPaymentMethodOptionsPaymentSettingsInput?: InputMaybe<StripePostInvoicesPlanInstallmentsCardPaymentMethodOptionsPaymentSettingsInput>;
};

export type StripeStringOrPostInvoicesRenderingOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostInvoicesRenderingOptionsInput?: InputMaybe<StripePostInvoicesRenderingOptionsInput>;
};

export type StripeStringOrPostInvoicesUsBankAccountPaymentMethodOptionsPaymentSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostInvoicesUsBankAccountPaymentMethodOptionsPaymentSettingsInput?: InputMaybe<StripePostInvoicesUsBankAccountPaymentMethodOptionsPaymentSettingsInput>;
};

export type StripeStringOrPostIssuingDisputesCanceledEvidenceUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostIssuingDisputesCanceledEvidenceInput?: InputMaybe<StripePostIssuingDisputesCanceledEvidenceInput>;
};

export type StripeStringOrPostIssuingDisputesDisputeCanceledEvidenceUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostIssuingDisputesDisputeCanceledEvidenceInput?: InputMaybe<StripePostIssuingDisputesDisputeCanceledEvidenceInput>;
};

export type StripeStringOrPostIssuingDisputesDisputeDuplicateEvidenceUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostIssuingDisputesDisputeDuplicateEvidenceInput?: InputMaybe<StripePostIssuingDisputesDisputeDuplicateEvidenceInput>;
};

export type StripeStringOrPostIssuingDisputesDisputeFraudulentEvidenceUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostIssuingDisputesDisputeFraudulentEvidenceInput?: InputMaybe<StripePostIssuingDisputesDisputeFraudulentEvidenceInput>;
};

export type StripeStringOrPostIssuingDisputesDisputeMerchandiseNotAsDescribedEvidenceUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostIssuingDisputesDisputeMerchandiseNotAsDescribedEvidenceInput?: InputMaybe<StripePostIssuingDisputesDisputeMerchandiseNotAsDescribedEvidenceInput>;
};

export type StripeStringOrPostIssuingDisputesDisputeNotReceivedEvidenceUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostIssuingDisputesDisputeNotReceivedEvidenceInput?: InputMaybe<StripePostIssuingDisputesDisputeNotReceivedEvidenceInput>;
};

export type StripeStringOrPostIssuingDisputesDisputeOtherEvidenceUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostIssuingDisputesDisputeOtherEvidenceInput?: InputMaybe<StripePostIssuingDisputesDisputeOtherEvidenceInput>;
};

export type StripeStringOrPostIssuingDisputesDisputeServiceNotAsDescribedEvidenceUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostIssuingDisputesDisputeServiceNotAsDescribedEvidenceInput?: InputMaybe<StripePostIssuingDisputesDisputeServiceNotAsDescribedEvidenceInput>;
};

export type StripeStringOrPostIssuingDisputesDuplicateEvidenceUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostIssuingDisputesDuplicateEvidenceInput?: InputMaybe<StripePostIssuingDisputesDuplicateEvidenceInput>;
};

export type StripeStringOrPostIssuingDisputesFraudulentEvidenceUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostIssuingDisputesFraudulentEvidenceInput?: InputMaybe<StripePostIssuingDisputesFraudulentEvidenceInput>;
};

export type StripeStringOrPostIssuingDisputesMerchandiseNotAsDescribedEvidenceUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostIssuingDisputesMerchandiseNotAsDescribedEvidenceInput?: InputMaybe<StripePostIssuingDisputesMerchandiseNotAsDescribedEvidenceInput>;
};

export type StripeStringOrPostIssuingDisputesNotReceivedEvidenceUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostIssuingDisputesNotReceivedEvidenceInput?: InputMaybe<StripePostIssuingDisputesNotReceivedEvidenceInput>;
};

export type StripeStringOrPostIssuingDisputesOtherEvidenceUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostIssuingDisputesOtherEvidenceInput?: InputMaybe<StripePostIssuingDisputesOtherEvidenceInput>;
};

export type StripeStringOrPostIssuingDisputesServiceNotAsDescribedEvidenceUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostIssuingDisputesServiceNotAsDescribedEvidenceInput?: InputMaybe<StripePostIssuingDisputesServiceNotAsDescribedEvidenceInput>;
};

export type StripeStringOrPostPaymentIntentsAcssDebitPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsAcssDebitPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsAcssDebitPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsAddressBillingDetailsPaymentMethodDataUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsAddressBillingDetailsPaymentMethodDataInput?: InputMaybe<StripePostPaymentIntentsAddressBillingDetailsPaymentMethodDataInput>;
};

export type StripeStringOrPostPaymentIntentsAffirmPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsAffirmPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsAffirmPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsAfterpayClearpayPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsAfterpayClearpayPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsAfterpayClearpayPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsAlipayPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsAlipayPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsAlipayPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsAuBecsDebitPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsAuBecsDebitPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsAuBecsDebitPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsBacsDebitPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsBacsDebitPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsBacsDebitPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsBancontactPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsBancontactPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsBancontactPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsBlikPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsBlikPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsBlikPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsBoletoPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsBoletoPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsBoletoPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsCardPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsCardPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsCardPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsCardPresentPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsCardPresentPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsCardPresentPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsCashappPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsCashappPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsCashappPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsCustomerBalancePaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsCustomerBalancePaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsCustomerBalancePaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsEpsPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsEpsPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsEpsPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsFpxPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsFpxPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsFpxPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsGiropayPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsGiropayPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsGiropayPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsGrabpayPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsGrabpayPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsGrabpayPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIdealPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIdealPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIdealPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentAcssDebitPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentAcssDebitPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentAcssDebitPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentAddressBillingDetailsPaymentMethodDataUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentAddressBillingDetailsPaymentMethodDataInput?: InputMaybe<StripePostPaymentIntentsIntentAddressBillingDetailsPaymentMethodDataInput>;
};

export type StripeStringOrPostPaymentIntentsIntentAffirmPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentAffirmPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentAffirmPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentAfterpayClearpayPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentAfterpayClearpayPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentAfterpayClearpayPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentAlipayPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentAlipayPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentAlipayPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentAuBecsDebitPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentAuBecsDebitPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentAuBecsDebitPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentBacsDebitPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentBacsDebitPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentBacsDebitPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentBancontactPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentBancontactPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentBancontactPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentBlikPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentBlikPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentBlikPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentBoletoPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentBoletoPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentBoletoPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentCardPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentCardPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentCardPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentCardPresentPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentCardPresentPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentCardPresentPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentCashappPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentCashappPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentCashappPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentConfirmAcssDebitPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentConfirmAcssDebitPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentConfirmAcssDebitPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentConfirmAddressBillingDetailsPaymentMethodDataUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentConfirmAddressBillingDetailsPaymentMethodDataInput?: InputMaybe<StripePostPaymentIntentsIntentConfirmAddressBillingDetailsPaymentMethodDataInput>;
};

export type StripeStringOrPostPaymentIntentsIntentConfirmAffirmPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentConfirmAffirmPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentConfirmAffirmPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentConfirmAfterpayClearpayPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentConfirmAfterpayClearpayPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentConfirmAfterpayClearpayPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentConfirmAlipayPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentConfirmAlipayPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentConfirmAlipayPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentConfirmAuBecsDebitPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentConfirmAuBecsDebitPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentConfirmAuBecsDebitPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentConfirmBacsDebitPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentConfirmBacsDebitPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentConfirmBacsDebitPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentConfirmBancontactPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentConfirmBancontactPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentConfirmBancontactPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentConfirmBlikPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentConfirmBlikPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentConfirmBlikPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentConfirmBoletoPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentConfirmBoletoPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentConfirmBoletoPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentConfirmCardPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentConfirmCardPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentConfirmCardPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentConfirmCardPresentPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentConfirmCardPresentPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentConfirmCardPresentPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentConfirmCashappPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentConfirmCashappPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentConfirmCashappPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentConfirmCustomerBalancePaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentConfirmCustomerBalancePaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentConfirmCustomerBalancePaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentConfirmEpsPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentConfirmEpsPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentConfirmEpsPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentConfirmFpxPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentConfirmFpxPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentConfirmFpxPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentConfirmGiropayPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentConfirmGiropayPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentConfirmGiropayPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentConfirmGrabpayPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentConfirmGrabpayPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentConfirmGrabpayPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentConfirmIdealPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentConfirmIdealPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentConfirmIdealPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentConfirmKlarnaPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentConfirmKlarnaPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentConfirmKlarnaPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentConfirmKonbiniPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentConfirmKonbiniPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentConfirmKonbiniPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentConfirmLinkPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentConfirmLinkPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentConfirmLinkPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentConfirmOxxoPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentConfirmOxxoPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentConfirmOxxoPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentConfirmP24PaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentConfirmP24PaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentConfirmP24PaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentConfirmPaynowPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentConfirmPaynowPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentConfirmPaynowPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentConfirmPaypalPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentConfirmPaypalPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentConfirmPaypalPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentConfirmPixPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentConfirmPixPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentConfirmPixPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentConfirmPlanInstallmentsCardPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentConfirmPlanInstallmentsCardPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentConfirmPlanInstallmentsCardPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentConfirmPromptpayPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentConfirmPromptpayPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentConfirmPromptpayPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentConfirmSepaDebitPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentConfirmSepaDebitPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentConfirmSepaDebitPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentConfirmShippingUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentConfirmShippingInput?: InputMaybe<StripePostPaymentIntentsIntentConfirmShippingInput>;
};

export type StripeStringOrPostPaymentIntentsIntentConfirmSofortPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentConfirmSofortPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentConfirmSofortPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentConfirmUsBankAccountPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentConfirmUsBankAccountPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentConfirmUsBankAccountPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentConfirmWechatPayPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentConfirmWechatPayPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentConfirmWechatPayPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentCustomerBalancePaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentCustomerBalancePaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentCustomerBalancePaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentEpsPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentEpsPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentEpsPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentFpxPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentFpxPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentFpxPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentGiropayPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentGiropayPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentGiropayPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentGrabpayPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentGrabpayPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentGrabpayPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentIdealPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentIdealPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentIdealPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentKlarnaPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentKlarnaPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentKlarnaPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentKonbiniPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentKonbiniPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentKonbiniPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentLinkPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentLinkPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentLinkPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentOxxoPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentOxxoPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentOxxoPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentP24PaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentP24PaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentP24PaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentPaynowPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentPaynowPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentPaynowPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentPaypalPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentPaypalPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentPaypalPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentPixPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentPixPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentPixPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentPlanInstallmentsCardPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentPlanInstallmentsCardPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentPlanInstallmentsCardPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentPromptpayPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentPromptpayPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentPromptpayPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentSepaDebitPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentSepaDebitPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentSepaDebitPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentShippingUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentShippingInput?: InputMaybe<StripePostPaymentIntentsIntentShippingInput>;
};

export type StripeStringOrPostPaymentIntentsIntentSofortPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentSofortPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentSofortPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentUsBankAccountPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentUsBankAccountPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentUsBankAccountPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsIntentWechatPayPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsIntentWechatPayPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsIntentWechatPayPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsKlarnaPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsKlarnaPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsKlarnaPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsKonbiniPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsKonbiniPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsKonbiniPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsLinkPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsLinkPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsLinkPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsOxxoPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsOxxoPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsOxxoPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsP24PaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsP24PaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsP24PaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsPaynowPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsPaynowPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsPaynowPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsPaypalPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsPaypalPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsPaypalPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsPixPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsPixPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsPixPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsPlanInstallmentsCardPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsPlanInstallmentsCardPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsPlanInstallmentsCardPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsPromptpayPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsPromptpayPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsPromptpayPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsSepaDebitPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsSepaDebitPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsSepaDebitPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsSofortPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsSofortPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsSofortPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsUsBankAccountPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsUsBankAccountPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsUsBankAccountPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentIntentsWechatPayPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentIntentsWechatPayPaymentMethodOptionsInput?: InputMaybe<StripePostPaymentIntentsWechatPayPaymentMethodOptionsInput>;
};

export type StripeStringOrPostPaymentLinksCustomFieldsInvoiceDataInvoiceCreationUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentLinksCustomFieldsInvoiceDataInvoiceCreationInput?: InputMaybe<StripePostPaymentLinksCustomFieldsInvoiceDataInvoiceCreationInput>;
};

export type StripeStringOrPostPaymentLinksPaymentLinkCustomFieldsInvoiceDataInvoiceCreationUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentLinksPaymentLinkCustomFieldsInvoiceDataInvoiceCreationInput?: InputMaybe<StripePostPaymentLinksPaymentLinkCustomFieldsInvoiceDataInvoiceCreationInput>;
};

export type StripeStringOrPostPaymentLinksPaymentLinkCustomFieldsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentLinksPaymentLinkCustomFieldsInput?: InputMaybe<StripePostPaymentLinksPaymentLinkCustomFieldsInput>;
};

export type StripeStringOrPostPaymentLinksPaymentLinkRenderingOptionsInvoiceDataInvoiceCreationUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentLinksPaymentLinkRenderingOptionsInvoiceDataInvoiceCreationInput?: InputMaybe<StripePostPaymentLinksPaymentLinkRenderingOptionsInvoiceDataInvoiceCreationInput>;
};

export type StripeStringOrPostPaymentLinksPaymentLinkShippingAddressCollectionUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentLinksPaymentLinkShippingAddressCollectionInput?: InputMaybe<StripePostPaymentLinksPaymentLinkShippingAddressCollectionInput>;
};

export type StripeStringOrPostPaymentLinksPaymentLinkShippingAddressCustomTextUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentLinksPaymentLinkShippingAddressCustomTextInput?: InputMaybe<StripePostPaymentLinksPaymentLinkShippingAddressCustomTextInput>;
};

export type StripeStringOrPostPaymentLinksPaymentLinkSubmitCustomTextUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentLinksPaymentLinkSubmitCustomTextInput?: InputMaybe<StripePostPaymentLinksPaymentLinkSubmitCustomTextInput>;
};

export type StripeStringOrPostPaymentLinksRenderingOptionsInvoiceDataInvoiceCreationUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentLinksRenderingOptionsInvoiceDataInvoiceCreationInput?: InputMaybe<StripePostPaymentLinksRenderingOptionsInvoiceDataInvoiceCreationInput>;
};

export type StripeStringOrPostPaymentLinksShippingAddressCustomTextUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentLinksShippingAddressCustomTextInput?: InputMaybe<StripePostPaymentLinksShippingAddressCustomTextInput>;
};

export type StripeStringOrPostPaymentLinksSubmitCustomTextUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentLinksSubmitCustomTextInput?: InputMaybe<StripePostPaymentLinksSubmitCustomTextInput>;
};

export type StripeStringOrPostPaymentMethodsAddressBillingDetailsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentMethodsAddressBillingDetailsInput?: InputMaybe<StripePostPaymentMethodsAddressBillingDetailsInput>;
};

export type StripeStringOrPostPaymentMethodsPaymentMethodAddressBillingDetailsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPaymentMethodsPaymentMethodAddressBillingDetailsInput?: InputMaybe<StripePostPaymentMethodsPaymentMethodAddressBillingDetailsInput>;
};

export type StripeStringOrPostPlansProductUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostPlansProductInput?: InputMaybe<StripePostPlansProductInput>;
};

export type StripeStringOrPostProductsIdPackageDimensionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostProductsIdPackageDimensionsInput?: InputMaybe<StripePostProductsIdPackageDimensionsInput>;
};

export type StripeStringOrPostQuotesDiscountsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostQuotesDiscountsInput?: InputMaybe<StripePostQuotesDiscountsInput>;
};

export type StripeStringOrPostQuotesQuoteDiscountsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostQuotesQuoteDiscountsInput?: InputMaybe<StripePostQuotesQuoteDiscountsInput>;
};

export type StripeStringOrPostQuotesQuoteTransferDataUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostQuotesQuoteTransferDataInput?: InputMaybe<StripePostQuotesQuoteTransferDataInput>;
};

export type StripeStringOrPostQuotesTransferDataUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostQuotesTransferDataInput?: InputMaybe<StripePostQuotesTransferDataInput>;
};

export type StripeStringOrPostSetupIntentsAddressBillingDetailsPaymentMethodDataUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostSetupIntentsAddressBillingDetailsPaymentMethodDataInput?: InputMaybe<StripePostSetupIntentsAddressBillingDetailsPaymentMethodDataInput>;
};

export type StripeStringOrPostSetupIntentsIntentAddressBillingDetailsPaymentMethodDataUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostSetupIntentsIntentAddressBillingDetailsPaymentMethodDataInput?: InputMaybe<StripePostSetupIntentsIntentAddressBillingDetailsPaymentMethodDataInput>;
};

export type StripeStringOrPostSetupIntentsIntentConfirmAddressBillingDetailsPaymentMethodDataUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostSetupIntentsIntentConfirmAddressBillingDetailsPaymentMethodDataInput?: InputMaybe<StripePostSetupIntentsIntentConfirmAddressBillingDetailsPaymentMethodDataInput>;
};

export type StripeStringOrPostSubscriptionItemsBillingThresholdsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostSubscriptionItemsBillingThresholdsInput?: InputMaybe<StripePostSubscriptionItemsBillingThresholdsInput>;
};

export type StripeStringOrPostSubscriptionItemsItemBillingThresholdsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostSubscriptionItemsItemBillingThresholdsInput?: InputMaybe<StripePostSubscriptionItemsItemBillingThresholdsInput>;
};

export type StripeStringOrPostSubscriptionSchedulesBillingThresholdsDefaultSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostSubscriptionSchedulesBillingThresholdsDefaultSettingsInput?: InputMaybe<StripePostSubscriptionSchedulesBillingThresholdsDefaultSettingsInput>;
};

export type StripeStringOrPostSubscriptionSchedulesBillingThresholdsItemsPhasesUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostSubscriptionSchedulesBillingThresholdsItemsPhasesInput?: InputMaybe<StripePostSubscriptionSchedulesBillingThresholdsItemsPhasesInput>;
};

export type StripeStringOrPostSubscriptionSchedulesBillingThresholdsPhasesUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostSubscriptionSchedulesBillingThresholdsPhasesInput?: InputMaybe<StripePostSubscriptionSchedulesBillingThresholdsPhasesInput>;
};

export type StripeStringOrPostSubscriptionSchedulesScheduleBillingThresholdsDefaultSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostSubscriptionSchedulesScheduleBillingThresholdsDefaultSettingsInput?: InputMaybe<StripePostSubscriptionSchedulesScheduleBillingThresholdsDefaultSettingsInput>;
};

export type StripeStringOrPostSubscriptionSchedulesScheduleBillingThresholdsItemsPhasesUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostSubscriptionSchedulesScheduleBillingThresholdsItemsPhasesInput?: InputMaybe<StripePostSubscriptionSchedulesScheduleBillingThresholdsItemsPhasesInput>;
};

export type StripeStringOrPostSubscriptionSchedulesScheduleBillingThresholdsPhasesUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostSubscriptionSchedulesScheduleBillingThresholdsPhasesInput?: InputMaybe<StripePostSubscriptionSchedulesScheduleBillingThresholdsPhasesInput>;
};

export type StripeStringOrPostSubscriptionSchedulesScheduleTransferDataDefaultSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostSubscriptionSchedulesScheduleTransferDataDefaultSettingsInput?: InputMaybe<StripePostSubscriptionSchedulesScheduleTransferDataDefaultSettingsInput>;
};

export type StripeStringOrPostSubscriptionSchedulesTransferDataDefaultSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostSubscriptionSchedulesTransferDataDefaultSettingsInput?: InputMaybe<StripePostSubscriptionSchedulesTransferDataDefaultSettingsInput>;
};

export type StripeStringOrPostSubscriptionsAcssDebitPaymentMethodOptionsPaymentSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostSubscriptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput?: InputMaybe<StripePostSubscriptionsAcssDebitPaymentMethodOptionsPaymentSettingsInput>;
};

export type StripeStringOrPostSubscriptionsBancontactPaymentMethodOptionsPaymentSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostSubscriptionsBancontactPaymentMethodOptionsPaymentSettingsInput?: InputMaybe<StripePostSubscriptionsBancontactPaymentMethodOptionsPaymentSettingsInput>;
};

export type StripeStringOrPostSubscriptionsBillingThresholdsItemsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostSubscriptionsBillingThresholdsItemsInput?: InputMaybe<StripePostSubscriptionsBillingThresholdsItemsInput>;
};

export type StripeStringOrPostSubscriptionsBillingThresholdsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostSubscriptionsBillingThresholdsInput?: InputMaybe<StripePostSubscriptionsBillingThresholdsInput>;
};

export type StripeStringOrPostSubscriptionsCardPaymentMethodOptionsPaymentSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostSubscriptionsCardPaymentMethodOptionsPaymentSettingsInput?: InputMaybe<StripePostSubscriptionsCardPaymentMethodOptionsPaymentSettingsInput>;
};

export type StripeStringOrPostSubscriptionsCustomerBalancePaymentMethodOptionsPaymentSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostSubscriptionsCustomerBalancePaymentMethodOptionsPaymentSettingsInput?: InputMaybe<StripePostSubscriptionsCustomerBalancePaymentMethodOptionsPaymentSettingsInput>;
};

export type StripeStringOrPostSubscriptionsPendingInvoiceItemIntervalUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostSubscriptionsPendingInvoiceItemIntervalInput?: InputMaybe<StripePostSubscriptionsPendingInvoiceItemIntervalInput>;
};

export type StripeStringOrPostSubscriptionsSubscriptionExposedIdAcssDebitPaymentMethodOptionsPaymentSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostSubscriptionsSubscriptionExposedIdAcssDebitPaymentMethodOptionsPaymentSettingsInput?: InputMaybe<StripePostSubscriptionsSubscriptionExposedIdAcssDebitPaymentMethodOptionsPaymentSettingsInput>;
};

export type StripeStringOrPostSubscriptionsSubscriptionExposedIdBancontactPaymentMethodOptionsPaymentSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostSubscriptionsSubscriptionExposedIdBancontactPaymentMethodOptionsPaymentSettingsInput?: InputMaybe<StripePostSubscriptionsSubscriptionExposedIdBancontactPaymentMethodOptionsPaymentSettingsInput>;
};

export type StripeStringOrPostSubscriptionsSubscriptionExposedIdBillingThresholdsItemsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostSubscriptionsSubscriptionExposedIdBillingThresholdsItemsInput?: InputMaybe<StripePostSubscriptionsSubscriptionExposedIdBillingThresholdsItemsInput>;
};

export type StripeStringOrPostSubscriptionsSubscriptionExposedIdBillingThresholdsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostSubscriptionsSubscriptionExposedIdBillingThresholdsInput?: InputMaybe<StripePostSubscriptionsSubscriptionExposedIdBillingThresholdsInput>;
};

export type StripeStringOrPostSubscriptionsSubscriptionExposedIdCardPaymentMethodOptionsPaymentSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostSubscriptionsSubscriptionExposedIdCardPaymentMethodOptionsPaymentSettingsInput?: InputMaybe<StripePostSubscriptionsSubscriptionExposedIdCardPaymentMethodOptionsPaymentSettingsInput>;
};

export type StripeStringOrPostSubscriptionsSubscriptionExposedIdCustomerBalancePaymentMethodOptionsPaymentSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostSubscriptionsSubscriptionExposedIdCustomerBalancePaymentMethodOptionsPaymentSettingsInput?: InputMaybe<StripePostSubscriptionsSubscriptionExposedIdCustomerBalancePaymentMethodOptionsPaymentSettingsInput>;
};

export type StripeStringOrPostSubscriptionsSubscriptionExposedIdPauseCollectionUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostSubscriptionsSubscriptionExposedIdPauseCollectionInput?: InputMaybe<StripePostSubscriptionsSubscriptionExposedIdPauseCollectionInput>;
};

export type StripeStringOrPostSubscriptionsSubscriptionExposedIdPendingInvoiceItemIntervalUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostSubscriptionsSubscriptionExposedIdPendingInvoiceItemIntervalInput?: InputMaybe<StripePostSubscriptionsSubscriptionExposedIdPendingInvoiceItemIntervalInput>;
};

export type StripeStringOrPostSubscriptionsSubscriptionExposedIdTransferDataUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostSubscriptionsSubscriptionExposedIdTransferDataInput?: InputMaybe<StripePostSubscriptionsSubscriptionExposedIdTransferDataInput>;
};

export type StripeStringOrPostSubscriptionsSubscriptionExposedIdUsBankAccountPaymentMethodOptionsPaymentSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostSubscriptionsSubscriptionExposedIdUsBankAccountPaymentMethodOptionsPaymentSettingsInput?: InputMaybe<StripePostSubscriptionsSubscriptionExposedIdUsBankAccountPaymentMethodOptionsPaymentSettingsInput>;
};

export type StripeStringOrPostSubscriptionsUsBankAccountPaymentMethodOptionsPaymentSettingsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostSubscriptionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput?: InputMaybe<StripePostSubscriptionsUsBankAccountPaymentMethodOptionsPaymentSettingsInput>;
};

export type StripeStringOrPostTerminalConfigurationsConfigurationBbposWiseposEUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostTerminalConfigurationsConfigurationBbposWiseposEInput?: InputMaybe<StripePostTerminalConfigurationsConfigurationBbposWiseposEInput>;
};

export type StripeStringOrPostTerminalConfigurationsConfigurationTippingUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostTerminalConfigurationsConfigurationTippingInput?: InputMaybe<StripePostTerminalConfigurationsConfigurationTippingInput>;
};

export type StripeStringOrPostTerminalConfigurationsConfigurationVerifoneP400UnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostTerminalConfigurationsConfigurationVerifoneP400Input?: InputMaybe<StripePostTerminalConfigurationsConfigurationVerifoneP400Input>;
};

export type StripeStringOrPostTerminalConfigurationsTippingUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostTerminalConfigurationsTippingInput?: InputMaybe<StripePostTerminalConfigurationsTippingInput>;
};

export type StripeStringOrPostTokensCardUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostTokensCardInput?: InputMaybe<StripePostTokensCardInput>;
};

export type StripeStringOrPostTokensDobIndividualAccountUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostTokensDobIndividualAccountInput?: InputMaybe<StripePostTokensDobIndividualAccountInput>;
};

export type StripeStringOrPostTokensDobPersonUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostTokensDobPersonInput?: InputMaybe<StripePostTokensDobPersonInput>;
};

export type StripeStringOrPostTreasuryOutboundPaymentsAddressBillingDetailsDestinationPaymentMethodDataUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostTreasuryOutboundPaymentsAddressBillingDetailsDestinationPaymentMethodDataInput?: InputMaybe<StripePostTreasuryOutboundPaymentsAddressBillingDetailsDestinationPaymentMethodDataInput>;
};

export type StripeStringOrPostTreasuryOutboundPaymentsUsBankAccountDestinationPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostTreasuryOutboundPaymentsUsBankAccountDestinationPaymentMethodOptionsInput?: InputMaybe<StripePostTreasuryOutboundPaymentsUsBankAccountDestinationPaymentMethodOptionsInput>;
};

export type StripeStringOrPostTreasuryOutboundTransfersUsBankAccountDestinationPaymentMethodOptionsUnionInput = {
  string?: InputMaybe<Scalars['String']>;
  stripePostTreasuryOutboundTransfersUsBankAccountDestinationPaymentMethodOptionsInput?: InputMaybe<StripePostTreasuryOutboundTransfersUsBankAccountDestinationPaymentMethodOptionsInput>;
};

export type StripeStringOrPriceUnion = StripePrice | StripeString;

export type StripeStringOrPromotionCodeUnion = StripePromotionCode | StripeString;

export type StripeStringOrQuoteUnion = StripeQuote | StripeString;

export type StripeStringOrRefundUnion = StripeRefund | StripeString;

export type StripeStringOrReviewUnion = StripeReview | StripeString;

export type StripeStringOrRuleUnion = StripeRule | StripeString;

export type StripeStringOrSetupAttemptUnion = StripeSetupAttempt | StripeString;

export type StripeStringOrSetupIntentUnion = StripeSetupIntent | StripeString;

export type StripeStringOrShippingRateUnion = StripeShippingRate | StripeString;

export type StripeStringOrSourceOrCardOrBankAccountUnion = StripeBankAccount | StripeCard | StripeSource | StripeString;

export type StripeStringOrStringUnionInput = {
  string?: InputMaybe<Scalars['String']>;
};

export type StripeStringOrSubscriptionItemUnion = StripeString | StripeSubscriptionItem;

export type StripeStringOrSubscriptionScheduleUnion = StripeString | StripeSubscriptionSchedule;

export type StripeStringOrSubscriptionUnion = StripeString | StripeSubscription;

export type StripeStringOrTaxCodeUnion = StripeString | StripeTaxCode;

export type StripeStringOrTaxRateUnion = StripeString | StripeTaxRate;

export type StripeStringOrTerminalLocationUnion = StripeString | StripeTerminalLocation;

export type StripeStringOrTestHelpersTestClockUnion = StripeString | StripeTestHelpersTestClock;

export type StripeStringOrTransferReversalOrTransferOrTopupOrTaxDeductedAtSourceOrReserveTransactionOrRefundOrPlatformTaxFeeOrPayoutOrIssuingTransactionOrIssuingDisputeOrIssuingAuthorizationOrFeeRefundOrDisputeOrConnectCollectionTransferOrChargeOrApplicationFeeUnion = StripeApplicationFee | StripeCharge | StripeConnectCollectionTransfer | StripeDispute | StripeFeeRefund | StripeIssuingAuthorization | StripeIssuingDispute | StripeIssuingTransaction | StripePayout | StripePlatformTaxFee | StripeRefund | StripeReserveTransaction | StripeString | StripeTaxDeductedAtSource | StripeTopup | StripeTransfer | StripeTransferReversal;

export type StripeStringOrTransferReversalUnion = StripeString | StripeTransferReversal;

export type StripeStringOrTransferUnion = StripeString | StripeTransfer;

export type StripeStringOrTreasuryTransactionUnion = StripeString | StripeTreasuryTransaction;

export type StripeSubscription = {
  __typename?: 'StripeSubscription';
  application?: Maybe<StripeStringOrDeletedApplicationOrApplicationUnion>;
  applicationFeePercent?: Maybe<Scalars['Float']>;
  automaticTax: StripeSubscriptionAutomaticTax;
  billingCycleAnchor: Scalars['Int'];
  billingThresholds?: Maybe<StripeSubscriptionBillingThresholds>;
  cancelAt?: Maybe<Scalars['Int']>;
  cancelAtPeriodEnd: Scalars['Boolean'];
  canceledAt?: Maybe<Scalars['Int']>;
  cancellationDetails?: Maybe<StripeCancellationDetails>;
  collectionMethod: StripeSubscriptionCollectionMethod;
  created: Scalars['Int'];
  currency: Scalars['String'];
  currentPeriodEnd: Scalars['Int'];
  currentPeriodStart: Scalars['Int'];
  customer: StripeStringOrDeletedCustomerOrCustomerUnion;
  daysUntilDue?: Maybe<Scalars['Int']>;
  defaultPaymentMethod?: Maybe<StripeStringOrPaymentMethodUnion>;
  defaultSource?: Maybe<StripeStringOrSourceOrCardOrBankAccountUnion>;
  defaultTaxRates?: Maybe<Array<StripeTaxRate>>;
  description?: Maybe<Scalars['String']>;
  discount?: Maybe<StripeDiscount>;
  endedAt?: Maybe<Scalars['Int']>;
  id: Scalars['String'];
  items: StripeSubscriptionItems;
  latestInvoice?: Maybe<StripeStringOrInvoiceUnion>;
  livemode: Scalars['Boolean'];
  metadata: Scalars['JSON'];
  nextPendingInvoiceItemInvoice?: Maybe<Scalars['Int']>;
  object: StripeSubscriptionObject;
  onBehalfOf?: Maybe<StripeStringOrAccountUnion>;
  pauseCollection?: Maybe<StripeSubscriptionsResourcePauseCollection>;
  paymentSettings?: Maybe<StripeSubscriptionsResourcePaymentSettings>;
  pendingInvoiceItemInterval?: Maybe<StripeSubscriptionPendingInvoiceItemInterval>;
  pendingSetupIntent?: Maybe<StripeStringOrSetupIntentUnion>;
  pendingUpdate?: Maybe<StripeSubscriptionsResourcePendingUpdate>;
  schedule?: Maybe<StripeStringOrSubscriptionScheduleUnion>;
  startDate: Scalars['Int'];
  status: StripeSubscriptionStatus;
  testClock?: Maybe<StripeStringOrTestHelpersTestClockUnion>;
  transferData?: Maybe<StripeSubscriptionTransferData>;
  trialEnd?: Maybe<Scalars['Int']>;
  trialSettings?: Maybe<StripeSubscriptionsTrialsResourceTrialSettings>;
  trialStart?: Maybe<Scalars['Int']>;
};

export type StripeSubscriptionAutomaticTax = {
  __typename?: 'StripeSubscriptionAutomaticTax';
  enabled: Scalars['Boolean'];
};

export type StripeSubscriptionBillingThresholds = {
  __typename?: 'StripeSubscriptionBillingThresholds';
  amountGte?: Maybe<Scalars['Int']>;
  resetBillingCycleAnchor?: Maybe<Scalars['Boolean']>;
};

export enum StripeSubscriptionCollectionMethod {
  ChargeAutomatically = 'CHARGE_AUTOMATICALLY',
  SendInvoice = 'SEND_INVOICE'
}

export type StripeSubscriptionItem = {
  __typename?: 'StripeSubscriptionItem';
  billingThresholds?: Maybe<StripeSubscriptionItemBillingThresholds>;
  created: Scalars['Int'];
  id: Scalars['String'];
  metadata: Scalars['JSON'];
  object: StripeSubscriptionItemObject;
  price: StripePrice;
  quantity?: Maybe<Scalars['Int']>;
  subscription: Scalars['String'];
  taxRates?: Maybe<Array<StripeTaxRate>>;
};

export type StripeSubscriptionItemBillingThresholds = {
  __typename?: 'StripeSubscriptionItemBillingThresholds';
  usageGte?: Maybe<Scalars['Int']>;
};

export enum StripeSubscriptionItemObject {
  SubscriptionItem = 'SUBSCRIPTION_ITEM'
}

export type StripeSubscriptionItems = {
  __typename?: 'StripeSubscriptionItems';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeSubscriptionItem>;
  object: StripeSubscriptionObjectItems;
  url: Scalars['String'];
};

export enum StripeSubscriptionObject {
  Subscription = 'SUBSCRIPTION'
}

export enum StripeSubscriptionObjectItems {
  List = 'LIST'
}

export type StripeSubscriptionPaymentMethodOptionsCard = {
  __typename?: 'StripeSubscriptionPaymentMethodOptionsCard';
  mandateOptions?: Maybe<StripeInvoiceMandateOptionsCard>;
  network?: Maybe<StripeSubscriptionPaymentMethodOptionsCardNetwork>;
  requestThreeDSecure?: Maybe<StripeSubscriptionPaymentMethodOptionsCardRequestThreeDSecure>;
};

export enum StripeSubscriptionPaymentMethodOptionsCardNetwork {
  Amex = 'AMEX',
  CartesBancaires = 'CARTES_BANCAIRES',
  Diners = 'DINERS',
  Discover = 'DISCOVER',
  EftposAu = 'EFTPOS_AU',
  Interac = 'INTERAC',
  Jcb = 'JCB',
  Mastercard = 'MASTERCARD',
  Unionpay = 'UNIONPAY',
  Unknown = 'UNKNOWN',
  Visa = 'VISA'
}

export enum StripeSubscriptionPaymentMethodOptionsCardRequestThreeDSecure {
  Any = 'ANY',
  Automatic = 'AUTOMATIC'
}

export type StripeSubscriptionPendingInvoiceItemInterval = {
  __typename?: 'StripeSubscriptionPendingInvoiceItemInterval';
  interval: StripeSubscriptionPendingInvoiceItemIntervalInterval;
  intervalCount: Scalars['Int'];
};

export enum StripeSubscriptionPendingInvoiceItemIntervalInterval {
  Day = 'DAY',
  Month = 'MONTH',
  Week = 'WEEK',
  Year = 'YEAR'
}

export type StripeSubscriptionSchedule = {
  __typename?: 'StripeSubscriptionSchedule';
  application?: Maybe<StripeStringOrDeletedApplicationOrApplicationUnion>;
  canceledAt?: Maybe<Scalars['Int']>;
  completedAt?: Maybe<Scalars['Int']>;
  created: Scalars['Int'];
  currentPhase?: Maybe<StripeSubscriptionScheduleCurrentPhase>;
  customer: StripeStringOrDeletedCustomerOrCustomerUnion;
  defaultSettings: StripeSubscriptionSchedulesResourceDefaultSettings;
  endBehavior: StripeSubscriptionScheduleEndBehavior;
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  metadata?: Maybe<Scalars['JSON']>;
  object: StripeSubscriptionScheduleObject;
  phases: Array<StripeSubscriptionSchedulePhaseConfiguration>;
  releasedAt?: Maybe<Scalars['Int']>;
  releasedSubscription?: Maybe<Scalars['String']>;
  status: StripeSubscriptionScheduleStatus;
  subscription?: Maybe<StripeStringOrSubscriptionUnion>;
  testClock?: Maybe<StripeStringOrTestHelpersTestClockUnion>;
};

export type StripeSubscriptionScheduleAddInvoiceItem = {
  __typename?: 'StripeSubscriptionScheduleAddInvoiceItem';
  price: StripeStringOrDeletedPriceOrPriceUnion;
  quantity?: Maybe<Scalars['Int']>;
  taxRates?: Maybe<Array<StripeTaxRate>>;
};

export type StripeSubscriptionScheduleConfigurationItem = {
  __typename?: 'StripeSubscriptionScheduleConfigurationItem';
  billingThresholds?: Maybe<StripeSubscriptionItemBillingThresholds>;
  metadata?: Maybe<Scalars['JSON']>;
  price: StripeStringOrDeletedPriceOrPriceUnion;
  quantity?: Maybe<Scalars['Int']>;
  taxRates?: Maybe<Array<StripeTaxRate>>;
};

export type StripeSubscriptionScheduleCurrentPhase = {
  __typename?: 'StripeSubscriptionScheduleCurrentPhase';
  endDate: Scalars['Int'];
  startDate: Scalars['Int'];
};

export enum StripeSubscriptionScheduleEndBehavior {
  Cancel = 'CANCEL',
  None = 'NONE',
  Release = 'RELEASE',
  Renew = 'RENEW'
}

export enum StripeSubscriptionScheduleObject {
  SubscriptionSchedule = 'SUBSCRIPTION_SCHEDULE'
}

export type StripeSubscriptionSchedulePhaseConfiguration = {
  __typename?: 'StripeSubscriptionSchedulePhaseConfiguration';
  addInvoiceItems: Array<StripeSubscriptionScheduleAddInvoiceItem>;
  applicationFeePercent?: Maybe<Scalars['Float']>;
  automaticTax?: Maybe<StripeSchedulesPhaseAutomaticTax>;
  billingCycleAnchor?: Maybe<StripeSubscriptionSchedulePhaseConfigurationBillingCycleAnchor>;
  billingThresholds?: Maybe<StripeSubscriptionBillingThresholds>;
  collectionMethod?: Maybe<StripeSubscriptionSchedulePhaseConfigurationCollectionMethod>;
  coupon?: Maybe<StripeStringOrDeletedCouponOrCouponUnion>;
  currency: Scalars['String'];
  defaultPaymentMethod?: Maybe<StripeStringOrPaymentMethodUnion>;
  defaultTaxRates?: Maybe<Array<StripeTaxRate>>;
  description?: Maybe<Scalars['String']>;
  endDate: Scalars['Int'];
  invoiceSettings?: Maybe<StripeInvoiceSettingPhaseSetting>;
  items: Array<StripeSubscriptionScheduleConfigurationItem>;
  metadata?: Maybe<Scalars['JSON']>;
  onBehalfOf?: Maybe<StripeStringOrAccountUnion>;
  prorationBehavior: StripeSubscriptionSchedulePhaseConfigurationProrationBehavior;
  startDate: Scalars['Int'];
  transferData?: Maybe<StripeSubscriptionTransferData>;
  trialEnd?: Maybe<Scalars['Int']>;
};

export enum StripeSubscriptionSchedulePhaseConfigurationBillingCycleAnchor {
  Automatic = 'AUTOMATIC',
  PhaseStart = 'PHASE_START'
}

export enum StripeSubscriptionSchedulePhaseConfigurationCollectionMethod {
  ChargeAutomatically = 'CHARGE_AUTOMATICALLY',
  SendInvoice = 'SEND_INVOICE'
}

export enum StripeSubscriptionSchedulePhaseConfigurationProrationBehavior {
  AlwaysInvoice = 'ALWAYS_INVOICE',
  CreateProrations = 'CREATE_PRORATIONS',
  None = 'NONE'
}

export enum StripeSubscriptionScheduleStatus {
  Active = 'ACTIVE',
  Canceled = 'CANCELED',
  Completed = 'COMPLETED',
  NotStarted = 'NOT_STARTED',
  Released = 'RELEASED'
}

export type StripeSubscriptionSchedulesResourceDefaultSettings = {
  __typename?: 'StripeSubscriptionSchedulesResourceDefaultSettings';
  applicationFeePercent?: Maybe<Scalars['Float']>;
  automaticTax?: Maybe<StripeSubscriptionSchedulesResourceDefaultSettingsAutomaticTax>;
  billingCycleAnchor: StripeSubscriptionSchedulesResourceDefaultSettingsBillingCycleAnchor;
  billingThresholds?: Maybe<StripeSubscriptionBillingThresholds>;
  collectionMethod?: Maybe<StripeSubscriptionSchedulesResourceDefaultSettingsCollectionMethod>;
  defaultPaymentMethod?: Maybe<StripeStringOrPaymentMethodUnion>;
  description?: Maybe<Scalars['String']>;
  invoiceSettings?: Maybe<StripeInvoiceSettingSubscriptionScheduleSetting>;
  onBehalfOf?: Maybe<StripeStringOrAccountUnion>;
  transferData?: Maybe<StripeSubscriptionTransferData>;
};

export type StripeSubscriptionSchedulesResourceDefaultSettingsAutomaticTax = {
  __typename?: 'StripeSubscriptionSchedulesResourceDefaultSettingsAutomaticTax';
  enabled: Scalars['Boolean'];
};

export enum StripeSubscriptionSchedulesResourceDefaultSettingsBillingCycleAnchor {
  Automatic = 'AUTOMATIC',
  PhaseStart = 'PHASE_START'
}

export enum StripeSubscriptionSchedulesResourceDefaultSettingsCollectionMethod {
  ChargeAutomatically = 'CHARGE_AUTOMATICALLY',
  SendInvoice = 'SEND_INVOICE'
}

export enum StripeSubscriptionStatus {
  Active = 'ACTIVE',
  Canceled = 'CANCELED',
  Incomplete = 'INCOMPLETE',
  IncompleteExpired = 'INCOMPLETE_EXPIRED',
  PastDue = 'PAST_DUE',
  Paused = 'PAUSED',
  Trialing = 'TRIALING',
  Unpaid = 'UNPAID'
}

export type StripeSubscriptionTransferData = {
  __typename?: 'StripeSubscriptionTransferData';
  amountPercent?: Maybe<Scalars['Float']>;
  destination: StripeStringOrAccountUnion;
};

export type StripeSubscriptionsResourcePauseCollection = {
  __typename?: 'StripeSubscriptionsResourcePauseCollection';
  behavior: StripeSubscriptionsResourcePauseCollectionBehavior;
  resumesAt?: Maybe<Scalars['Int']>;
};

export enum StripeSubscriptionsResourcePauseCollectionBehavior {
  KeepAsDraft = 'KEEP_AS_DRAFT',
  MarkUncollectible = 'MARK_UNCOLLECTIBLE',
  Void = 'VOID'
}

export type StripeSubscriptionsResourcePaymentMethodOptions = {
  __typename?: 'StripeSubscriptionsResourcePaymentMethodOptions';
  acssDebit?: Maybe<StripeInvoicePaymentMethodOptionsAcssDebit>;
  bancontact?: Maybe<StripeInvoicePaymentMethodOptionsBancontact>;
  card?: Maybe<StripeSubscriptionPaymentMethodOptionsCard>;
  customerBalance?: Maybe<StripeInvoicePaymentMethodOptionsCustomerBalance>;
  konbini?: Maybe<Scalars['JSON']>;
  usBankAccount?: Maybe<StripeInvoicePaymentMethodOptionsUsBankAccount>;
};

export type StripeSubscriptionsResourcePaymentSettings = {
  __typename?: 'StripeSubscriptionsResourcePaymentSettings';
  paymentMethodOptions?: Maybe<StripeSubscriptionsResourcePaymentMethodOptions>;
  paymentMethodTypes?: Maybe<Array<StripeSubscriptionsResourcePaymentSettingsPaymentMethodTypes>>;
  saveDefaultPaymentMethod?: Maybe<StripeSubscriptionsResourcePaymentSettingsSaveDefaultPaymentMethod>;
};

export enum StripeSubscriptionsResourcePaymentSettingsPaymentMethodTypes {
  AchCreditTransfer = 'ACH_CREDIT_TRANSFER',
  AchDebit = 'ACH_DEBIT',
  AcssDebit = 'ACSS_DEBIT',
  AuBecsDebit = 'AU_BECS_DEBIT',
  BacsDebit = 'BACS_DEBIT',
  Bancontact = 'BANCONTACT',
  Boleto = 'BOLETO',
  Card = 'CARD',
  Cashapp = 'CASHAPP',
  CustomerBalance = 'CUSTOMER_BALANCE',
  Fpx = 'FPX',
  Giropay = 'GIROPAY',
  Grabpay = 'GRABPAY',
  Ideal = 'IDEAL',
  Konbini = 'KONBINI',
  Link = 'LINK',
  Paynow = 'PAYNOW',
  Paypal = 'PAYPAL',
  Promptpay = 'PROMPTPAY',
  SepaDebit = 'SEPA_DEBIT',
  Sofort = 'SOFORT',
  UsBankAccount = 'US_BANK_ACCOUNT',
  WechatPay = 'WECHAT_PAY'
}

export enum StripeSubscriptionsResourcePaymentSettingsSaveDefaultPaymentMethod {
  Off = 'OFF',
  OnSubscription = 'ON_SUBSCRIPTION'
}

export type StripeSubscriptionsResourcePendingUpdate = {
  __typename?: 'StripeSubscriptionsResourcePendingUpdate';
  billingCycleAnchor?: Maybe<Scalars['Int']>;
  expiresAt: Scalars['Int'];
  subscriptionItems?: Maybe<Array<StripeSubscriptionItem>>;
  trialEnd?: Maybe<Scalars['Int']>;
  trialFromPlan?: Maybe<Scalars['Boolean']>;
};

export type StripeSubscriptionsTrialsResourceEndBehavior = {
  __typename?: 'StripeSubscriptionsTrialsResourceEndBehavior';
  missingPaymentMethod: StripeSubscriptionsTrialsResourceEndBehaviorMissingPaymentMethod;
};

export enum StripeSubscriptionsTrialsResourceEndBehaviorMissingPaymentMethod {
  Cancel = 'CANCEL',
  CreateInvoice = 'CREATE_INVOICE',
  Pause = 'PAUSE'
}

export type StripeSubscriptionsTrialsResourceTrialSettings = {
  __typename?: 'StripeSubscriptionsTrialsResourceTrialSettings';
  endBehavior: StripeSubscriptionsTrialsResourceEndBehavior;
};

export type StripeTaxCalculation = {
  __typename?: 'StripeTaxCalculation';
  amountTotal: Scalars['Int'];
  currency: Scalars['String'];
  customer?: Maybe<Scalars['String']>;
  customerDetails: StripeTaxProductResourceCustomerDetails;
  expiresAt?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['String']>;
  lineItems?: Maybe<StripeTaxCalculationLineItems>;
  livemode: Scalars['Boolean'];
  object: StripeTaxCalculationObject;
  shippingCost?: Maybe<StripeTaxProductResourceTaxCalculationShippingCost>;
  taxAmountExclusive: Scalars['Int'];
  taxAmountInclusive: Scalars['Int'];
  taxBreakdown: Array<StripeTaxProductResourceTaxBreakdown>;
  taxDate: Scalars['Int'];
};

export type StripeTaxCalculationLineItem = {
  __typename?: 'StripeTaxCalculationLineItem';
  amount: Scalars['Int'];
  amountTax: Scalars['Int'];
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  object: StripeTaxCalculationLineItemObject;
  product?: Maybe<Scalars['String']>;
  quantity: Scalars['Int'];
  reference?: Maybe<Scalars['String']>;
  taxBehavior: StripeTaxCalculationLineItemTaxBehavior;
  taxBreakdown?: Maybe<Array<StripeTaxProductResourceLineItemTaxBreakdown>>;
  taxCode: Scalars['String'];
};

export enum StripeTaxCalculationLineItemObject {
  TaxCalculationLineItem = 'TAX_CALCULATION_LINE_ITEM'
}

export enum StripeTaxCalculationLineItemTaxBehavior {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE'
}

export type StripeTaxCalculationLineItems = {
  __typename?: 'StripeTaxCalculationLineItems';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeTaxCalculationLineItem>;
  object: StripeTaxCalculationObjectLineItems;
  url: Scalars['String'];
};

export enum StripeTaxCalculationObject {
  TaxCalculation = 'TAX_CALCULATION'
}

export enum StripeTaxCalculationObjectLineItems {
  List = 'LIST'
}

export type StripeTaxCode = {
  __typename?: 'StripeTaxCode';
  description: Scalars['String'];
  id: Scalars['String'];
  name: Scalars['String'];
  object: StripeTaxCodeObject;
};

export enum StripeTaxCodeObject {
  TaxCode = 'TAX_CODE'
}

export type StripeTaxDeductedAtSource = {
  __typename?: 'StripeTaxDeductedAtSource';
  id: Scalars['String'];
  object: StripeTaxDeductedAtSourceObject;
  periodEnd: Scalars['Int'];
  periodStart: Scalars['Int'];
  taxDeductionAccountNumber: Scalars['String'];
};

export enum StripeTaxDeductedAtSourceObject {
  TaxDeductedAtSource = 'TAX_DEDUCTED_AT_SOURCE'
}

export type StripeTaxId = {
  __typename?: 'StripeTaxId';
  country?: Maybe<Scalars['String']>;
  created: Scalars['Int'];
  customer?: Maybe<StripeStringOrCustomerUnion>;
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  object: StripeTaxIdObject;
  type: StripeTaxIdType;
  value: Scalars['String'];
  verification?: Maybe<StripeTaxIdVerification>;
};

export enum StripeTaxIdObject {
  TaxId = 'TAX_ID'
}

export enum StripeTaxIdType {
  AeTrn = 'AE_TRN',
  AuAbn = 'AU_ABN',
  AuArn = 'AU_ARN',
  BgUic = 'BG_UIC',
  BrCnpj = 'BR_CNPJ',
  BrCpf = 'BR_CPF',
  CaBn = 'CA_BN',
  CaGstHst = 'CA_GST_HST',
  CaPstBc = 'CA_PST_BC',
  CaPstMb = 'CA_PST_MB',
  CaPstSk = 'CA_PST_SK',
  CaQst = 'CA_QST',
  ChVat = 'CH_VAT',
  ClTin = 'CL_TIN',
  EgTin = 'EG_TIN',
  EsCif = 'ES_CIF',
  EuOssVat = 'EU_OSS_VAT',
  EuVat = 'EU_VAT',
  GbVat = 'GB_VAT',
  GeVat = 'GE_VAT',
  HkBr = 'HK_BR',
  HuTin = 'HU_TIN',
  IdNpwp = 'ID_NPWP',
  IlVat = 'IL_VAT',
  InGst = 'IN_GST',
  IsVat = 'IS_VAT',
  JpCn = 'JP_CN',
  JpRn = 'JP_RN',
  JpTrn = 'JP_TRN',
  KePin = 'KE_PIN',
  KrBrn = 'KR_BRN',
  LiUid = 'LI_UID',
  MxRfc = 'MX_RFC',
  MyFrp = 'MY_FRP',
  MyItn = 'MY_ITN',
  MySst = 'MY_SST',
  NoVat = 'NO_VAT',
  NzGst = 'NZ_GST',
  PhTin = 'PH_TIN',
  RuInn = 'RU_INN',
  RuKpp = 'RU_KPP',
  SaVat = 'SA_VAT',
  SgGst = 'SG_GST',
  SgUen = 'SG_UEN',
  SiTin = 'SI_TIN',
  ThVat = 'TH_VAT',
  TrTin = 'TR_TIN',
  TwVat = 'TW_VAT',
  UaVat = 'UA_VAT',
  Unknown = 'UNKNOWN',
  UsEin = 'US_EIN',
  ZaVat = 'ZA_VAT'
}

export type StripeTaxIdVerification = {
  __typename?: 'StripeTaxIdVerification';
  status: StripeTaxIdVerificationStatus;
  verifiedAddress?: Maybe<Scalars['String']>;
  verifiedName?: Maybe<Scalars['String']>;
};

export enum StripeTaxIdVerificationStatus {
  Pending = 'PENDING',
  Unavailable = 'UNAVAILABLE',
  Unverified = 'UNVERIFIED',
  Verified = 'VERIFIED'
}

export type StripeTaxProductResourceCustomerDetails = {
  __typename?: 'StripeTaxProductResourceCustomerDetails';
  address?: Maybe<StripeTaxProductResourcePostalAddress>;
  addressSource?: Maybe<StripeTaxProductResourceCustomerDetailsAddressSource>;
  ipAddress?: Maybe<Scalars['String']>;
  taxIds: Array<StripeTaxProductResourceCustomerDetailsResourceTaxId>;
  taxabilityOverride: StripeTaxProductResourceCustomerDetailsTaxabilityOverride;
};

export enum StripeTaxProductResourceCustomerDetailsAddressSource {
  Billing = 'BILLING',
  Shipping = 'SHIPPING'
}

export type StripeTaxProductResourceCustomerDetailsResourceTaxId = {
  __typename?: 'StripeTaxProductResourceCustomerDetailsResourceTaxId';
  type: StripeTaxProductResourceCustomerDetailsResourceTaxIdType;
  value: Scalars['String'];
};

export enum StripeTaxProductResourceCustomerDetailsResourceTaxIdType {
  AeTrn = 'AE_TRN',
  AuAbn = 'AU_ABN',
  AuArn = 'AU_ARN',
  BgUic = 'BG_UIC',
  BrCnpj = 'BR_CNPJ',
  BrCpf = 'BR_CPF',
  CaBn = 'CA_BN',
  CaGstHst = 'CA_GST_HST',
  CaPstBc = 'CA_PST_BC',
  CaPstMb = 'CA_PST_MB',
  CaPstSk = 'CA_PST_SK',
  CaQst = 'CA_QST',
  ChVat = 'CH_VAT',
  ClTin = 'CL_TIN',
  EgTin = 'EG_TIN',
  EsCif = 'ES_CIF',
  EuOssVat = 'EU_OSS_VAT',
  EuVat = 'EU_VAT',
  GbVat = 'GB_VAT',
  GeVat = 'GE_VAT',
  HkBr = 'HK_BR',
  HuTin = 'HU_TIN',
  IdNpwp = 'ID_NPWP',
  IlVat = 'IL_VAT',
  InGst = 'IN_GST',
  IsVat = 'IS_VAT',
  JpCn = 'JP_CN',
  JpRn = 'JP_RN',
  JpTrn = 'JP_TRN',
  KePin = 'KE_PIN',
  KrBrn = 'KR_BRN',
  LiUid = 'LI_UID',
  MxRfc = 'MX_RFC',
  MyFrp = 'MY_FRP',
  MyItn = 'MY_ITN',
  MySst = 'MY_SST',
  NoVat = 'NO_VAT',
  NzGst = 'NZ_GST',
  PhTin = 'PH_TIN',
  RuInn = 'RU_INN',
  RuKpp = 'RU_KPP',
  SaVat = 'SA_VAT',
  SgGst = 'SG_GST',
  SgUen = 'SG_UEN',
  SiTin = 'SI_TIN',
  ThVat = 'TH_VAT',
  TrTin = 'TR_TIN',
  TwVat = 'TW_VAT',
  UaVat = 'UA_VAT',
  Unknown = 'UNKNOWN',
  UsEin = 'US_EIN',
  ZaVat = 'ZA_VAT'
}

export enum StripeTaxProductResourceCustomerDetailsTaxabilityOverride {
  CustomerExempt = 'CUSTOMER_EXEMPT',
  None = 'NONE',
  ReverseCharge = 'REVERSE_CHARGE'
}

export type StripeTaxProductResourceJurisdiction = {
  __typename?: 'StripeTaxProductResourceJurisdiction';
  country: Scalars['String'];
  displayName: Scalars['String'];
  level: StripeTaxProductResourceJurisdictionLevel;
  state?: Maybe<Scalars['String']>;
};

export enum StripeTaxProductResourceJurisdictionLevel {
  City = 'CITY',
  Country = 'COUNTRY',
  County = 'COUNTY',
  District = 'DISTRICT',
  State = 'STATE'
}

export type StripeTaxProductResourceLineItemTaxBreakdown = {
  __typename?: 'StripeTaxProductResourceLineItemTaxBreakdown';
  amount: Scalars['Int'];
  jurisdiction: StripeTaxProductResourceJurisdiction;
  sourcing: StripeTaxProductResourceLineItemTaxBreakdownSourcing;
  taxRateDetails?: Maybe<StripeTaxProductResourceLineItemTaxRateDetails>;
  taxabilityReason: StripeTaxProductResourceLineItemTaxBreakdownTaxabilityReason;
  taxableAmount: Scalars['Int'];
};

export enum StripeTaxProductResourceLineItemTaxBreakdownSourcing {
  Destination = 'DESTINATION',
  Origin = 'ORIGIN'
}

export enum StripeTaxProductResourceLineItemTaxBreakdownTaxabilityReason {
  CustomerExempt = 'CUSTOMER_EXEMPT',
  NotCollecting = 'NOT_COLLECTING',
  NotSubjectToTax = 'NOT_SUBJECT_TO_TAX',
  NotSupported = 'NOT_SUPPORTED',
  PortionProductExempt = 'PORTION_PRODUCT_EXEMPT',
  PortionReducedRated = 'PORTION_REDUCED_RATED',
  PortionStandardRated = 'PORTION_STANDARD_RATED',
  ProductExempt = 'PRODUCT_EXEMPT',
  ProductExemptHoliday = 'PRODUCT_EXEMPT_HOLIDAY',
  ProportionallyRated = 'PROPORTIONALLY_RATED',
  ReducedRated = 'REDUCED_RATED',
  ReverseCharge = 'REVERSE_CHARGE',
  StandardRated = 'STANDARD_RATED',
  TaxableBasisReduced = 'TAXABLE_BASIS_REDUCED',
  ZeroRated = 'ZERO_RATED'
}

export type StripeTaxProductResourceLineItemTaxRateDetails = {
  __typename?: 'StripeTaxProductResourceLineItemTaxRateDetails';
  displayName: Scalars['String'];
  percentageDecimal: Scalars['String'];
  taxType: StripeTaxProductResourceLineItemTaxRateDetailsTaxType;
};

export enum StripeTaxProductResourceLineItemTaxRateDetailsTaxType {
  Gst = 'GST',
  Hst = 'HST',
  Igst = 'IGST',
  Jct = 'JCT',
  LeaseTax = 'LEASE_TAX',
  Pst = 'PST',
  Qst = 'QST',
  Rst = 'RST',
  SalesTax = 'SALES_TAX',
  Vat = 'VAT'
}

export type StripeTaxProductResourcePostalAddress = {
  __typename?: 'StripeTaxProductResourcePostalAddress';
  city?: Maybe<Scalars['String']>;
  country: Scalars['String'];
  line1?: Maybe<Scalars['String']>;
  line2?: Maybe<Scalars['String']>;
  postalCode?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
};

export type StripeTaxProductResourceTaxBreakdown = {
  __typename?: 'StripeTaxProductResourceTaxBreakdown';
  amount: Scalars['Int'];
  inclusive: Scalars['Boolean'];
  taxRateDetails: StripeTaxProductResourceTaxRateDetails;
  taxableAmount: Scalars['Int'];
};

export type StripeTaxProductResourceTaxCalculationShippingCost = {
  __typename?: 'StripeTaxProductResourceTaxCalculationShippingCost';
  amount: Scalars['Int'];
  amountTax: Scalars['Int'];
  shippingRate?: Maybe<Scalars['String']>;
  taxBehavior: StripeTaxProductResourceTaxCalculationShippingCostTaxBehavior;
  taxBreakdown?: Maybe<Array<StripeTaxProductResourceLineItemTaxBreakdown>>;
  taxCode: Scalars['String'];
};

export enum StripeTaxProductResourceTaxCalculationShippingCostTaxBehavior {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE'
}

export type StripeTaxProductResourceTaxRateDetails = {
  __typename?: 'StripeTaxProductResourceTaxRateDetails';
  country?: Maybe<Scalars['String']>;
  percentageDecimal: Scalars['String'];
  state?: Maybe<Scalars['String']>;
  taxType?: Maybe<StripeTaxProductResourceTaxRateDetailsTaxType>;
};

export enum StripeTaxProductResourceTaxRateDetailsTaxType {
  Gst = 'GST',
  Hst = 'HST',
  Igst = 'IGST',
  Jct = 'JCT',
  LeaseTax = 'LEASE_TAX',
  Pst = 'PST',
  Qst = 'QST',
  Rst = 'RST',
  SalesTax = 'SALES_TAX',
  Vat = 'VAT'
}

export type StripeTaxProductResourceTaxTransactionLineItemResourceReversal = {
  __typename?: 'StripeTaxProductResourceTaxTransactionLineItemResourceReversal';
  originalLineItem: Scalars['String'];
};

export type StripeTaxProductResourceTaxTransactionResourceReversal = {
  __typename?: 'StripeTaxProductResourceTaxTransactionResourceReversal';
  originalTransaction?: Maybe<Scalars['String']>;
};

export type StripeTaxProductResourceTaxTransactionShippingCost = {
  __typename?: 'StripeTaxProductResourceTaxTransactionShippingCost';
  amount: Scalars['Int'];
  amountTax: Scalars['Int'];
  taxBehavior: StripeTaxProductResourceTaxTransactionShippingCostTaxBehavior;
  taxCode: Scalars['String'];
};

export enum StripeTaxProductResourceTaxTransactionShippingCostTaxBehavior {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE'
}

export type StripeTaxRate = {
  __typename?: 'StripeTaxRate';
  active: Scalars['Boolean'];
  country?: Maybe<Scalars['String']>;
  created: Scalars['Int'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  effectivePercentage?: Maybe<Scalars['Float']>;
  id: Scalars['String'];
  inclusive: Scalars['Boolean'];
  jurisdiction?: Maybe<Scalars['String']>;
  livemode: Scalars['Boolean'];
  metadata?: Maybe<Scalars['JSON']>;
  object: StripeTaxRateObject;
  percentage: Scalars['Float'];
  state?: Maybe<Scalars['String']>;
  taxType?: Maybe<StripeTaxRateTaxType>;
};

export enum StripeTaxRateObject {
  TaxRate = 'TAX_RATE'
}

export enum StripeTaxRateTaxType {
  AmusementTax = 'AMUSEMENT_TAX',
  CommunicationsTax = 'COMMUNICATIONS_TAX',
  Gst = 'GST',
  Hst = 'HST',
  Igst = 'IGST',
  Jct = 'JCT',
  LeaseTax = 'LEASE_TAX',
  Pst = 'PST',
  Qst = 'QST',
  Rst = 'RST',
  SalesTax = 'SALES_TAX',
  Vat = 'VAT'
}

export type StripeTaxTransaction = {
  __typename?: 'StripeTaxTransaction';
  created: Scalars['Int'];
  currency: Scalars['String'];
  customer?: Maybe<Scalars['String']>;
  customerDetails: StripeTaxProductResourceCustomerDetails;
  id: Scalars['String'];
  lineItems?: Maybe<StripeTaxTransactionLineItems>;
  livemode: Scalars['Boolean'];
  metadata?: Maybe<Scalars['JSON']>;
  object: StripeTaxTransactionObject;
  reference: Scalars['String'];
  reversal?: Maybe<StripeTaxProductResourceTaxTransactionResourceReversal>;
  shippingCost?: Maybe<StripeTaxProductResourceTaxTransactionShippingCost>;
  taxDate: Scalars['Int'];
  type: StripeTaxTransactionType;
};

export type StripeTaxTransactionLineItem = {
  __typename?: 'StripeTaxTransactionLineItem';
  amount: Scalars['Int'];
  amountTax: Scalars['Int'];
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  metadata?: Maybe<Scalars['JSON']>;
  object: StripeTaxTransactionLineItemObject;
  quantity: Scalars['Int'];
  reference: Scalars['String'];
  reversal?: Maybe<StripeTaxProductResourceTaxTransactionLineItemResourceReversal>;
  taxBehavior: StripeTaxTransactionLineItemTaxBehavior;
  taxCode: Scalars['String'];
  type: StripeTaxTransactionLineItemType;
};

export enum StripeTaxTransactionLineItemObject {
  TaxTransactionLineItem = 'TAX_TRANSACTION_LINE_ITEM'
}

export enum StripeTaxTransactionLineItemTaxBehavior {
  Exclusive = 'EXCLUSIVE',
  Inclusive = 'INCLUSIVE'
}

export enum StripeTaxTransactionLineItemType {
  Reversal = 'REVERSAL',
  Transaction = 'TRANSACTION'
}

export type StripeTaxTransactionLineItems = {
  __typename?: 'StripeTaxTransactionLineItems';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeTaxTransactionLineItem>;
  object: StripeTaxTransactionObjectLineItems;
  url: Scalars['String'];
};

export enum StripeTaxTransactionObject {
  TaxTransaction = 'TAX_TRANSACTION'
}

export enum StripeTaxTransactionObjectLineItems {
  List = 'LIST'
}

export enum StripeTaxTransactionType {
  Reversal = 'REVERSAL',
  Transaction = 'TRANSACTION'
}

export type StripeTerminalConfiguration = {
  __typename?: 'StripeTerminalConfiguration';
  bbposWiseposE?: Maybe<StripeTerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig>;
  id: Scalars['String'];
  isAccountDefault?: Maybe<Scalars['Boolean']>;
  livemode: Scalars['Boolean'];
  object: StripeTerminalConfigurationObject;
  tipping?: Maybe<StripeTerminalConfigurationConfigurationResourceTipping>;
  verifoneP400?: Maybe<StripeTerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig>;
};

export type StripeTerminalConfigurationConfigurationResourceCurrencySpecificConfig = {
  __typename?: 'StripeTerminalConfigurationConfigurationResourceCurrencySpecificConfig';
  fixedAmounts?: Maybe<Array<Scalars['Int']>>;
  percentages?: Maybe<Array<Scalars['Int']>>;
  smartTipThreshold?: Maybe<Scalars['Int']>;
};

export type StripeTerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig = {
  __typename?: 'StripeTerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig';
  splashscreen?: Maybe<StripeStringOrFileUnion>;
};

export type StripeTerminalConfigurationConfigurationResourceTipping = {
  __typename?: 'StripeTerminalConfigurationConfigurationResourceTipping';
  aud?: Maybe<StripeTerminalConfigurationConfigurationResourceCurrencySpecificConfig>;
  cad?: Maybe<StripeTerminalConfigurationConfigurationResourceCurrencySpecificConfig>;
  chf?: Maybe<StripeTerminalConfigurationConfigurationResourceCurrencySpecificConfig>;
  czk?: Maybe<StripeTerminalConfigurationConfigurationResourceCurrencySpecificConfig>;
  dkk?: Maybe<StripeTerminalConfigurationConfigurationResourceCurrencySpecificConfig>;
  eur?: Maybe<StripeTerminalConfigurationConfigurationResourceCurrencySpecificConfig>;
  gbp?: Maybe<StripeTerminalConfigurationConfigurationResourceCurrencySpecificConfig>;
  hkd?: Maybe<StripeTerminalConfigurationConfigurationResourceCurrencySpecificConfig>;
  myr?: Maybe<StripeTerminalConfigurationConfigurationResourceCurrencySpecificConfig>;
  nok?: Maybe<StripeTerminalConfigurationConfigurationResourceCurrencySpecificConfig>;
  nzd?: Maybe<StripeTerminalConfigurationConfigurationResourceCurrencySpecificConfig>;
  sek?: Maybe<StripeTerminalConfigurationConfigurationResourceCurrencySpecificConfig>;
  sgd?: Maybe<StripeTerminalConfigurationConfigurationResourceCurrencySpecificConfig>;
  usd?: Maybe<StripeTerminalConfigurationConfigurationResourceCurrencySpecificConfig>;
};

export enum StripeTerminalConfigurationObject {
  TerminalConfiguration = 'TERMINAL_CONFIGURATION'
}

export type StripeTerminalConnectionToken = {
  __typename?: 'StripeTerminalConnectionToken';
  location?: Maybe<Scalars['String']>;
  object: StripeTerminalConnectionTokenObject;
  secret: Scalars['String'];
};

export enum StripeTerminalConnectionTokenObject {
  TerminalConnectionToken = 'TERMINAL_CONNECTION_TOKEN'
}

export type StripeTerminalLocation = {
  __typename?: 'StripeTerminalLocation';
  address: StripeAddress;
  configurationOverrides?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  metadata: Scalars['JSON'];
  object: StripeTerminalLocationObject;
};

export enum StripeTerminalLocationObject {
  TerminalLocation = 'TERMINAL_LOCATION'
}

export type StripeTerminalReader = {
  __typename?: 'StripeTerminalReader';
  action?: Maybe<StripeTerminalReaderReaderResourceReaderAction>;
  deviceSwVersion?: Maybe<Scalars['String']>;
  deviceType: StripeTerminalReaderDeviceType;
  id: Scalars['String'];
  ipAddress?: Maybe<Scalars['String']>;
  label: Scalars['String'];
  livemode: Scalars['Boolean'];
  location?: Maybe<StripeStringOrTerminalLocationUnion>;
  metadata: Scalars['JSON'];
  object: StripeTerminalReaderObject;
  serialNumber: Scalars['String'];
  status?: Maybe<Scalars['String']>;
};

export enum StripeTerminalReaderDeviceType {
  BbposChipper_2X = 'BBPOS_CHIPPER_2X',
  BbposWisepad_3 = 'BBPOS_WISEPAD_3',
  BbposWiseposE = 'BBPOS_WISEPOS_E',
  SimulatedWiseposE = 'SIMULATED_WISEPOS_E',
  StripeM_2 = 'STRIPE_M_2',
  VerifoneP400 = 'VERIFONE_P400'
}

export enum StripeTerminalReaderObject {
  TerminalReader = 'TERMINAL_READER'
}

export type StripeTerminalReaderReaderResourceCart = {
  __typename?: 'StripeTerminalReaderReaderResourceCart';
  currency: Scalars['String'];
  lineItems: Array<StripeTerminalReaderReaderResourceLineItem>;
  tax?: Maybe<Scalars['Int']>;
  total: Scalars['Int'];
};

export type StripeTerminalReaderReaderResourceLineItem = {
  __typename?: 'StripeTerminalReaderReaderResourceLineItem';
  amount: Scalars['Int'];
  description: Scalars['String'];
  quantity: Scalars['Int'];
};

export type StripeTerminalReaderReaderResourceProcessConfig = {
  __typename?: 'StripeTerminalReaderReaderResourceProcessConfig';
  skipTipping?: Maybe<Scalars['Boolean']>;
  tipping?: Maybe<StripeTerminalReaderReaderResourceTippingConfig>;
};

export type StripeTerminalReaderReaderResourceProcessPaymentIntentAction = {
  __typename?: 'StripeTerminalReaderReaderResourceProcessPaymentIntentAction';
  paymentIntent: StripeStringOrPaymentIntentUnion;
  processConfig?: Maybe<StripeTerminalReaderReaderResourceProcessConfig>;
};

export type StripeTerminalReaderReaderResourceProcessSetupIntentAction = {
  __typename?: 'StripeTerminalReaderReaderResourceProcessSetupIntentAction';
  generatedCard?: Maybe<Scalars['String']>;
  setupIntent: StripeStringOrSetupIntentUnion;
};

export type StripeTerminalReaderReaderResourceReaderAction = {
  __typename?: 'StripeTerminalReaderReaderResourceReaderAction';
  failureCode?: Maybe<Scalars['String']>;
  failureMessage?: Maybe<Scalars['String']>;
  processPaymentIntent?: Maybe<StripeTerminalReaderReaderResourceProcessPaymentIntentAction>;
  processSetupIntent?: Maybe<StripeTerminalReaderReaderResourceProcessSetupIntentAction>;
  refundPayment?: Maybe<StripeTerminalReaderReaderResourceRefundPaymentAction>;
  setReaderDisplay?: Maybe<StripeTerminalReaderReaderResourceSetReaderDisplayAction>;
  status: StripeTerminalReaderReaderResourceReaderActionStatus;
  type: StripeTerminalReaderReaderResourceReaderActionType;
};

export enum StripeTerminalReaderReaderResourceReaderActionStatus {
  Failed = 'FAILED',
  InProgress = 'IN_PROGRESS',
  Succeeded = 'SUCCEEDED'
}

export enum StripeTerminalReaderReaderResourceReaderActionType {
  ProcessPaymentIntent = 'PROCESS_PAYMENT_INTENT',
  ProcessSetupIntent = 'PROCESS_SETUP_INTENT',
  RefundPayment = 'REFUND_PAYMENT',
  SetReaderDisplay = 'SET_READER_DISPLAY'
}

export type StripeTerminalReaderReaderResourceRefundPaymentAction = {
  __typename?: 'StripeTerminalReaderReaderResourceRefundPaymentAction';
  amount?: Maybe<Scalars['Int']>;
  charge?: Maybe<StripeStringOrChargeUnion>;
  metadata?: Maybe<Scalars['JSON']>;
  paymentIntent?: Maybe<StripeStringOrPaymentIntentUnion>;
  reason?: Maybe<StripeTerminalReaderReaderResourceRefundPaymentActionReason>;
  refund?: Maybe<StripeStringOrRefundUnion>;
  refundApplicationFee?: Maybe<Scalars['Boolean']>;
  reverseTransfer?: Maybe<Scalars['Boolean']>;
};

export enum StripeTerminalReaderReaderResourceRefundPaymentActionReason {
  Duplicate = 'DUPLICATE',
  Fraudulent = 'FRAUDULENT',
  RequestedByCustomer = 'REQUESTED_BY_CUSTOMER'
}

export type StripeTerminalReaderReaderResourceSetReaderDisplayAction = {
  __typename?: 'StripeTerminalReaderReaderResourceSetReaderDisplayAction';
  cart?: Maybe<StripeTerminalReaderReaderResourceCart>;
  type: StripeTerminalReaderReaderResourceSetReaderDisplayActionType;
};

export enum StripeTerminalReaderReaderResourceSetReaderDisplayActionType {
  Cart = 'CART'
}

export type StripeTerminalReaderReaderResourceTippingConfig = {
  __typename?: 'StripeTerminalReaderReaderResourceTippingConfig';
  amountEligible?: Maybe<Scalars['Int']>;
};

export type StripeTestHelpersTestClock = {
  __typename?: 'StripeTestHelpersTestClock';
  created: Scalars['Int'];
  deletesAfter: Scalars['Int'];
  frozenTime: Scalars['Int'];
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  name?: Maybe<Scalars['String']>;
  object: StripeTestHelpersTestClockObject;
  status: StripeTestHelpersTestClockStatus;
};

export enum StripeTestHelpersTestClockObject {
  TestHelpersTestClock = 'TEST_HELPERS_TEST_CLOCK'
}

export enum StripeTestHelpersTestClockStatus {
  Advancing = 'ADVANCING',
  InternalFailure = 'INTERNAL_FAILURE',
  Ready = 'READY'
}

export type StripeThreeDSecureDetails = {
  __typename?: 'StripeThreeDSecureDetails';
  authenticationFlow?: Maybe<StripeThreeDSecureDetailsAuthenticationFlow>;
  result?: Maybe<StripeThreeDSecureDetailsResult>;
  resultReason?: Maybe<StripeThreeDSecureDetailsResultReason>;
  version?: Maybe<Scalars['String']>;
};

export enum StripeThreeDSecureDetailsAuthenticationFlow {
  Challenge = 'CHALLENGE',
  Frictionless = 'FRICTIONLESS'
}

export enum StripeThreeDSecureDetailsResult {
  AttemptAcknowledged = 'ATTEMPT_ACKNOWLEDGED',
  Authenticated = 'AUTHENTICATED',
  Exempted = 'EXEMPTED',
  Failed = 'FAILED',
  NotSupported = 'NOT_SUPPORTED',
  ProcessingError = 'PROCESSING_ERROR'
}

export enum StripeThreeDSecureDetailsResultReason {
  Abandoned = 'ABANDONED',
  Bypassed = 'BYPASSED',
  Canceled = 'CANCELED',
  CardNotEnrolled = 'CARD_NOT_ENROLLED',
  NetworkNotSupported = 'NETWORK_NOT_SUPPORTED',
  ProtocolError = 'PROTOCOL_ERROR',
  Rejected = 'REJECTED'
}

export type StripeThreeDSecureUsage = {
  __typename?: 'StripeThreeDSecureUsage';
  supported: Scalars['Boolean'];
};

export type StripeToken = {
  __typename?: 'StripeToken';
  bankAccount?: Maybe<StripeBankAccount>;
  card?: Maybe<StripeCard>;
  clientIp?: Maybe<Scalars['String']>;
  created: Scalars['Int'];
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  object: StripeTokenObject;
  type: Scalars['String'];
  used: Scalars['Boolean'];
};

export enum StripeTokenObject {
  Token = 'TOKEN'
}

export type StripeTopup = {
  __typename?: 'StripeTopup';
  amount: Scalars['Int'];
  balanceTransaction?: Maybe<StripeStringOrBalanceTransactionUnion>;
  created: Scalars['Int'];
  currency: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  expectedAvailabilityDate?: Maybe<Scalars['Int']>;
  failureCode?: Maybe<Scalars['String']>;
  failureMessage?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  metadata: Scalars['JSON'];
  object: StripeTopupObject;
  source?: Maybe<StripeSource>;
  statementDescriptor?: Maybe<Scalars['String']>;
  status: StripeTopupStatus;
  transferGroup?: Maybe<Scalars['String']>;
};

export enum StripeTopupObject {
  Topup = 'TOPUP'
}

export enum StripeTopupStatus {
  Canceled = 'CANCELED',
  Failed = 'FAILED',
  Pending = 'PENDING',
  Reversed = 'REVERSED',
  Succeeded = 'SUCCEEDED'
}

export type StripeTransfer = {
  __typename?: 'StripeTransfer';
  amount: Scalars['Int'];
  amountReversed: Scalars['Int'];
  balanceTransaction?: Maybe<StripeStringOrBalanceTransactionUnion>;
  created: Scalars['Int'];
  currency: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  destination?: Maybe<StripeStringOrAccountUnion>;
  destinationPayment?: Maybe<StripeStringOrChargeUnion>;
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  metadata: Scalars['JSON'];
  object: StripeTransferObject;
  reversals: StripeTransferReversals;
  reversed: Scalars['Boolean'];
  sourceTransaction?: Maybe<StripeStringOrChargeUnion>;
  sourceType?: Maybe<Scalars['String']>;
  transferGroup?: Maybe<Scalars['String']>;
};

export type StripeTransferData = {
  __typename?: 'StripeTransferData';
  amount?: Maybe<Scalars['Int']>;
  destination: StripeStringOrAccountUnion;
};

export enum StripeTransferObject {
  Transfer = 'TRANSFER'
}

export enum StripeTransferObjectReversals {
  List = 'LIST'
}

export type StripeTransferReversal = {
  __typename?: 'StripeTransferReversal';
  amount: Scalars['Int'];
  balanceTransaction?: Maybe<StripeStringOrBalanceTransactionUnion>;
  created: Scalars['Int'];
  currency: Scalars['String'];
  destinationPaymentRefund?: Maybe<StripeStringOrRefundUnion>;
  id: Scalars['String'];
  metadata?: Maybe<Scalars['JSON']>;
  object: StripeTransferReversalObject;
  sourceRefund?: Maybe<StripeStringOrRefundUnion>;
  transfer: StripeStringOrTransferUnion;
};

export enum StripeTransferReversalObject {
  TransferReversal = 'TRANSFER_REVERSAL'
}

export type StripeTransferReversals = {
  __typename?: 'StripeTransferReversals';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeTransferReversal>;
  object: StripeTransferObjectReversals;
  url: Scalars['String'];
};

export type StripeTransferSchedule = {
  __typename?: 'StripeTransferSchedule';
  delayDays: Scalars['Int'];
  interval: Scalars['String'];
  monthlyAnchor?: Maybe<Scalars['Int']>;
  weeklyAnchor?: Maybe<Scalars['String']>;
};

export type StripeTransformQuantity = {
  __typename?: 'StripeTransformQuantity';
  divideBy: Scalars['Int'];
  round: StripeTransformQuantityRound;
};

export enum StripeTransformQuantityRound {
  Down = 'DOWN',
  Up = 'UP'
}

export type StripeTransformUsage = {
  __typename?: 'StripeTransformUsage';
  divideBy: Scalars['Int'];
  round: StripeTransformUsageRound;
};

export enum StripeTransformUsageRound {
  Down = 'DOWN',
  Up = 'UP'
}

export type StripeTreasuryCreditReversal = {
  __typename?: 'StripeTreasuryCreditReversal';
  amount: Scalars['Int'];
  created: Scalars['Int'];
  currency: Scalars['String'];
  financialAccount: Scalars['String'];
  hostedRegulatoryReceiptUrl?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  metadata: Scalars['JSON'];
  network: StripeTreasuryCreditReversalNetwork;
  object: StripeTreasuryCreditReversalObject;
  receivedCredit: Scalars['String'];
  status: StripeTreasuryCreditReversalStatus;
  statusTransitions: StripeTreasuryReceivedCreditsResourceStatusTransitions;
  transaction?: Maybe<StripeStringOrTreasuryTransactionUnion>;
};

export enum StripeTreasuryCreditReversalNetwork {
  Ach = 'ACH',
  Stripe = 'STRIPE'
}

export enum StripeTreasuryCreditReversalObject {
  TreasuryCreditReversal = 'TREASURY_CREDIT_REVERSAL'
}

export enum StripeTreasuryCreditReversalStatus {
  Canceled = 'CANCELED',
  Posted = 'POSTED',
  Processing = 'PROCESSING'
}

export type StripeTreasuryDebitReversal = {
  __typename?: 'StripeTreasuryDebitReversal';
  amount: Scalars['Int'];
  created: Scalars['Int'];
  currency: Scalars['String'];
  financialAccount?: Maybe<Scalars['String']>;
  hostedRegulatoryReceiptUrl?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  linkedFlows?: Maybe<StripeTreasuryReceivedDebitsResourceDebitReversalLinkedFlows>;
  livemode: Scalars['Boolean'];
  metadata: Scalars['JSON'];
  network: StripeTreasuryDebitReversalNetwork;
  object: StripeTreasuryDebitReversalObject;
  receivedDebit: Scalars['String'];
  status: StripeTreasuryDebitReversalStatus;
  statusTransitions: StripeTreasuryReceivedDebitsResourceStatusTransitions;
  transaction?: Maybe<StripeStringOrTreasuryTransactionUnion>;
};

export enum StripeTreasuryDebitReversalNetwork {
  Ach = 'ACH',
  Card = 'CARD'
}

export enum StripeTreasuryDebitReversalObject {
  TreasuryDebitReversal = 'TREASURY_DEBIT_REVERSAL'
}

export enum StripeTreasuryDebitReversalStatus {
  Failed = 'FAILED',
  Processing = 'PROCESSING',
  Succeeded = 'SUCCEEDED'
}

export type StripeTreasuryFinancialAccount = {
  __typename?: 'StripeTreasuryFinancialAccount';
  activeFeatures?: Maybe<Array<StripeTreasuryFinancialAccountActiveFeatures>>;
  balance: StripeTreasuryFinancialAccountsResourceBalance;
  country: Scalars['String'];
  created: Scalars['Int'];
  features?: Maybe<StripeTreasuryFinancialAccountFeatures>;
  financialAddresses: Array<StripeTreasuryFinancialAccountsResourceFinancialAddress>;
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  metadata?: Maybe<Scalars['JSON']>;
  object: StripeTreasuryFinancialAccountObject;
  pendingFeatures?: Maybe<Array<StripeTreasuryFinancialAccountPendingFeatures>>;
  platformRestrictions?: Maybe<StripeTreasuryFinancialAccountsResourcePlatformRestrictions>;
  restrictedFeatures?: Maybe<Array<StripeTreasuryFinancialAccountRestrictedFeatures>>;
  status: StripeTreasuryFinancialAccountStatus;
  statusDetails: StripeTreasuryFinancialAccountsResourceStatusDetails;
  supportedCurrencies: Array<Scalars['String']>;
};

export enum StripeTreasuryFinancialAccountActiveFeatures {
  CardIssuing = 'CARD_ISSUING',
  DepositInsurance = 'DEPOSIT_INSURANCE',
  FinancialAddressesAba = 'FINANCIAL_ADDRESSES_ABA',
  InboundTransfersAch = 'INBOUND_TRANSFERS_ACH',
  IntraStripeFlows = 'INTRA_STRIPE_FLOWS',
  OutboundPaymentsAch = 'OUTBOUND_PAYMENTS_ACH',
  OutboundPaymentsUsDomesticWire = 'OUTBOUND_PAYMENTS_US_DOMESTIC_WIRE',
  OutboundTransfersAch = 'OUTBOUND_TRANSFERS_ACH',
  OutboundTransfersUsDomesticWire = 'OUTBOUND_TRANSFERS_US_DOMESTIC_WIRE',
  RemoteDepositCapture = 'REMOTE_DEPOSIT_CAPTURE'
}

export type StripeTreasuryFinancialAccountFeatures = {
  __typename?: 'StripeTreasuryFinancialAccountFeatures';
  cardIssuing?: Maybe<StripeTreasuryFinancialAccountsResourceToggleSettings>;
  depositInsurance?: Maybe<StripeTreasuryFinancialAccountsResourceToggleSettings>;
  financialAddresses?: Maybe<StripeTreasuryFinancialAccountsResourceFinancialAddressesFeatures>;
  inboundTransfers?: Maybe<StripeTreasuryFinancialAccountsResourceInboundTransfers>;
  intraStripeFlows?: Maybe<StripeTreasuryFinancialAccountsResourceToggleSettings>;
  object: StripeTreasuryFinancialAccountFeaturesObject;
  outboundPayments?: Maybe<StripeTreasuryFinancialAccountsResourceOutboundPayments>;
  outboundTransfers?: Maybe<StripeTreasuryFinancialAccountsResourceOutboundTransfers>;
};

export enum StripeTreasuryFinancialAccountFeaturesObject {
  TreasuryFinancialAccountFeatures = 'TREASURY_FINANCIAL_ACCOUNT_FEATURES'
}

export enum StripeTreasuryFinancialAccountObject {
  TreasuryFinancialAccount = 'TREASURY_FINANCIAL_ACCOUNT'
}

export enum StripeTreasuryFinancialAccountPendingFeatures {
  CardIssuing = 'CARD_ISSUING',
  DepositInsurance = 'DEPOSIT_INSURANCE',
  FinancialAddressesAba = 'FINANCIAL_ADDRESSES_ABA',
  InboundTransfersAch = 'INBOUND_TRANSFERS_ACH',
  IntraStripeFlows = 'INTRA_STRIPE_FLOWS',
  OutboundPaymentsAch = 'OUTBOUND_PAYMENTS_ACH',
  OutboundPaymentsUsDomesticWire = 'OUTBOUND_PAYMENTS_US_DOMESTIC_WIRE',
  OutboundTransfersAch = 'OUTBOUND_TRANSFERS_ACH',
  OutboundTransfersUsDomesticWire = 'OUTBOUND_TRANSFERS_US_DOMESTIC_WIRE',
  RemoteDepositCapture = 'REMOTE_DEPOSIT_CAPTURE'
}

export enum StripeTreasuryFinancialAccountRestrictedFeatures {
  CardIssuing = 'CARD_ISSUING',
  DepositInsurance = 'DEPOSIT_INSURANCE',
  FinancialAddressesAba = 'FINANCIAL_ADDRESSES_ABA',
  InboundTransfersAch = 'INBOUND_TRANSFERS_ACH',
  IntraStripeFlows = 'INTRA_STRIPE_FLOWS',
  OutboundPaymentsAch = 'OUTBOUND_PAYMENTS_ACH',
  OutboundPaymentsUsDomesticWire = 'OUTBOUND_PAYMENTS_US_DOMESTIC_WIRE',
  OutboundTransfersAch = 'OUTBOUND_TRANSFERS_ACH',
  OutboundTransfersUsDomesticWire = 'OUTBOUND_TRANSFERS_US_DOMESTIC_WIRE',
  RemoteDepositCapture = 'REMOTE_DEPOSIT_CAPTURE'
}

export enum StripeTreasuryFinancialAccountStatus {
  Closed = 'CLOSED',
  Open = 'OPEN'
}

export type StripeTreasuryFinancialAccountsResourceAbaRecord = {
  __typename?: 'StripeTreasuryFinancialAccountsResourceAbaRecord';
  accountHolderName: Scalars['String'];
  accountNumber?: Maybe<Scalars['String']>;
  accountNumberLast4: Scalars['String'];
  bankName: Scalars['String'];
  routingNumber: Scalars['String'];
};

export type StripeTreasuryFinancialAccountsResourceAchToggleSettings = {
  __typename?: 'StripeTreasuryFinancialAccountsResourceAchToggleSettings';
  requested: Scalars['Boolean'];
  status: StripeTreasuryFinancialAccountsResourceAchToggleSettingsStatus;
  statusDetails: Array<StripeTreasuryFinancialAccountsResourceTogglesSettingStatusDetails>;
};

export enum StripeTreasuryFinancialAccountsResourceAchToggleSettingsStatus {
  Active = 'ACTIVE',
  Pending = 'PENDING',
  Restricted = 'RESTRICTED'
}

export type StripeTreasuryFinancialAccountsResourceBalance = {
  __typename?: 'StripeTreasuryFinancialAccountsResourceBalance';
  cash: Scalars['JSON'];
  inboundPending: Scalars['JSON'];
  outboundPending: Scalars['JSON'];
};

export type StripeTreasuryFinancialAccountsResourceClosedStatusDetails = {
  __typename?: 'StripeTreasuryFinancialAccountsResourceClosedStatusDetails';
  reasons: Array<StripeTreasuryFinancialAccountsResourceClosedStatusDetailsReasons>;
};

export enum StripeTreasuryFinancialAccountsResourceClosedStatusDetailsReasons {
  AccountRejected = 'ACCOUNT_REJECTED',
  ClosedByPlatform = 'CLOSED_BY_PLATFORM',
  Other = 'OTHER'
}

export type StripeTreasuryFinancialAccountsResourceFinancialAddress = {
  __typename?: 'StripeTreasuryFinancialAccountsResourceFinancialAddress';
  aba?: Maybe<StripeTreasuryFinancialAccountsResourceAbaRecord>;
  supportedNetworks?: Maybe<Array<StripeTreasuryFinancialAccountsResourceFinancialAddressSupportedNetworks>>;
  type: StripeTreasuryFinancialAccountsResourceFinancialAddressType;
};

export enum StripeTreasuryFinancialAccountsResourceFinancialAddressSupportedNetworks {
  Ach = 'ACH',
  UsDomesticWire = 'US_DOMESTIC_WIRE'
}

export enum StripeTreasuryFinancialAccountsResourceFinancialAddressType {
  Aba = 'ABA'
}

export type StripeTreasuryFinancialAccountsResourceFinancialAddressesFeatures = {
  __typename?: 'StripeTreasuryFinancialAccountsResourceFinancialAddressesFeatures';
  aba?: Maybe<StripeTreasuryFinancialAccountsResourceToggleSettings>;
};

export type StripeTreasuryFinancialAccountsResourceInboundTransfers = {
  __typename?: 'StripeTreasuryFinancialAccountsResourceInboundTransfers';
  ach?: Maybe<StripeTreasuryFinancialAccountsResourceAchToggleSettings>;
};

export type StripeTreasuryFinancialAccountsResourceOutboundPayments = {
  __typename?: 'StripeTreasuryFinancialAccountsResourceOutboundPayments';
  ach?: Maybe<StripeTreasuryFinancialAccountsResourceAchToggleSettings>;
  usDomesticWire?: Maybe<StripeTreasuryFinancialAccountsResourceToggleSettings>;
};

export type StripeTreasuryFinancialAccountsResourceOutboundTransfers = {
  __typename?: 'StripeTreasuryFinancialAccountsResourceOutboundTransfers';
  ach?: Maybe<StripeTreasuryFinancialAccountsResourceAchToggleSettings>;
  usDomesticWire?: Maybe<StripeTreasuryFinancialAccountsResourceToggleSettings>;
};

export type StripeTreasuryFinancialAccountsResourcePlatformRestrictions = {
  __typename?: 'StripeTreasuryFinancialAccountsResourcePlatformRestrictions';
  inboundFlows?: Maybe<StripeTreasuryFinancialAccountsResourcePlatformRestrictionsInboundFlows>;
  outboundFlows?: Maybe<StripeTreasuryFinancialAccountsResourcePlatformRestrictionsOutboundFlows>;
};

export enum StripeTreasuryFinancialAccountsResourcePlatformRestrictionsInboundFlows {
  Restricted = 'RESTRICTED',
  Unrestricted = 'UNRESTRICTED'
}

export enum StripeTreasuryFinancialAccountsResourcePlatformRestrictionsOutboundFlows {
  Restricted = 'RESTRICTED',
  Unrestricted = 'UNRESTRICTED'
}

export type StripeTreasuryFinancialAccountsResourceStatusDetails = {
  __typename?: 'StripeTreasuryFinancialAccountsResourceStatusDetails';
  closed?: Maybe<StripeTreasuryFinancialAccountsResourceClosedStatusDetails>;
};

export type StripeTreasuryFinancialAccountsResourceToggleSettings = {
  __typename?: 'StripeTreasuryFinancialAccountsResourceToggleSettings';
  requested: Scalars['Boolean'];
  status: StripeTreasuryFinancialAccountsResourceToggleSettingsStatus;
  statusDetails: Array<StripeTreasuryFinancialAccountsResourceTogglesSettingStatusDetails>;
};

export enum StripeTreasuryFinancialAccountsResourceToggleSettingsStatus {
  Active = 'ACTIVE',
  Pending = 'PENDING',
  Restricted = 'RESTRICTED'
}

export type StripeTreasuryFinancialAccountsResourceTogglesSettingStatusDetails = {
  __typename?: 'StripeTreasuryFinancialAccountsResourceTogglesSettingStatusDetails';
  code: StripeTreasuryFinancialAccountsResourceTogglesSettingStatusDetailsCode;
  resolution?: Maybe<StripeTreasuryFinancialAccountsResourceTogglesSettingStatusDetailsResolution>;
  restriction?: Maybe<StripeTreasuryFinancialAccountsResourceTogglesSettingStatusDetailsRestriction>;
};

export enum StripeTreasuryFinancialAccountsResourceTogglesSettingStatusDetailsCode {
  Activating = 'ACTIVATING',
  CapabilityNotRequested = 'CAPABILITY_NOT_REQUESTED',
  FinancialAccountClosed = 'FINANCIAL_ACCOUNT_CLOSED',
  RejectedOther = 'REJECTED_OTHER',
  RejectedUnsupportedBusiness = 'REJECTED_UNSUPPORTED_BUSINESS',
  RequirementsPastDue = 'REQUIREMENTS_PAST_DUE',
  RequirementsPendingVerification = 'REQUIREMENTS_PENDING_VERIFICATION',
  RestrictedByPlatform = 'RESTRICTED_BY_PLATFORM',
  RestrictedOther = 'RESTRICTED_OTHER'
}

export enum StripeTreasuryFinancialAccountsResourceTogglesSettingStatusDetailsResolution {
  ContactStripe = 'CONTACT_STRIPE',
  ProvideInformation = 'PROVIDE_INFORMATION',
  RemoveRestriction = 'REMOVE_RESTRICTION'
}

export enum StripeTreasuryFinancialAccountsResourceTogglesSettingStatusDetailsRestriction {
  InboundFlows = 'INBOUND_FLOWS',
  OutboundFlows = 'OUTBOUND_FLOWS'
}

export type StripeTreasuryInboundTransfer = {
  __typename?: 'StripeTreasuryInboundTransfer';
  amount: Scalars['Int'];
  cancelable: Scalars['Boolean'];
  created: Scalars['Int'];
  currency: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  failureDetails?: Maybe<StripeTreasuryInboundTransfersResourceFailureDetails>;
  financialAccount: Scalars['String'];
  hostedRegulatoryReceiptUrl?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  linkedFlows: StripeTreasuryInboundTransfersResourceInboundTransferResourceLinkedFlows;
  livemode: Scalars['Boolean'];
  metadata: Scalars['JSON'];
  object: StripeTreasuryInboundTransferObject;
  originPaymentMethod: Scalars['String'];
  originPaymentMethodDetails?: Maybe<StripeInboundTransfers>;
  returned?: Maybe<Scalars['Boolean']>;
  statementDescriptor: Scalars['String'];
  status: StripeTreasuryInboundTransferStatus;
  statusTransitions: StripeTreasuryInboundTransfersResourceInboundTransferResourceStatusTransitions;
  transaction?: Maybe<StripeStringOrTreasuryTransactionUnion>;
};

export enum StripeTreasuryInboundTransferObject {
  TreasuryInboundTransfer = 'TREASURY_INBOUND_TRANSFER'
}

export enum StripeTreasuryInboundTransferStatus {
  Canceled = 'CANCELED',
  Failed = 'FAILED',
  Processing = 'PROCESSING',
  Succeeded = 'SUCCEEDED'
}

export type StripeTreasuryInboundTransfersResourceFailureDetails = {
  __typename?: 'StripeTreasuryInboundTransfersResourceFailureDetails';
  code: StripeTreasuryInboundTransfersResourceFailureDetailsCode;
};

export enum StripeTreasuryInboundTransfersResourceFailureDetailsCode {
  AccountClosed = 'ACCOUNT_CLOSED',
  AccountFrozen = 'ACCOUNT_FROZEN',
  BankAccountRestricted = 'BANK_ACCOUNT_RESTRICTED',
  BankOwnershipChanged = 'BANK_OWNERSHIP_CHANGED',
  DebitNotAuthorized = 'DEBIT_NOT_AUTHORIZED',
  IncorrectAccountHolderAddress = 'INCORRECT_ACCOUNT_HOLDER_ADDRESS',
  IncorrectAccountHolderName = 'INCORRECT_ACCOUNT_HOLDER_NAME',
  IncorrectAccountHolderTaxId = 'INCORRECT_ACCOUNT_HOLDER_TAX_ID',
  InsufficientFunds = 'INSUFFICIENT_FUNDS',
  InvalidAccountNumber = 'INVALID_ACCOUNT_NUMBER',
  InvalidCurrency = 'INVALID_CURRENCY',
  NoAccount = 'NO_ACCOUNT',
  Other = 'OTHER'
}

export type StripeTreasuryInboundTransfersResourceInboundTransferResourceLinkedFlows = {
  __typename?: 'StripeTreasuryInboundTransfersResourceInboundTransferResourceLinkedFlows';
  receivedDebit?: Maybe<Scalars['String']>;
};

export type StripeTreasuryInboundTransfersResourceInboundTransferResourceStatusTransitions = {
  __typename?: 'StripeTreasuryInboundTransfersResourceInboundTransferResourceStatusTransitions';
  canceledAt?: Maybe<Scalars['Int']>;
  failedAt?: Maybe<Scalars['Int']>;
  succeededAt?: Maybe<Scalars['Int']>;
};

export type StripeTreasuryOutboundPayment = {
  __typename?: 'StripeTreasuryOutboundPayment';
  amount: Scalars['Int'];
  cancelable: Scalars['Boolean'];
  created: Scalars['Int'];
  currency: Scalars['String'];
  customer?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  destinationPaymentMethod?: Maybe<Scalars['String']>;
  destinationPaymentMethodDetails?: Maybe<StripeOutboundPaymentsPaymentMethodDetails>;
  endUserDetails?: Maybe<StripeTreasuryOutboundPaymentsResourceOutboundPaymentResourceEndUserDetails>;
  expectedArrivalDate: Scalars['Int'];
  financialAccount: Scalars['String'];
  hostedRegulatoryReceiptUrl?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  metadata: Scalars['JSON'];
  object: StripeTreasuryOutboundPaymentObject;
  returnedDetails?: Maybe<StripeTreasuryOutboundPaymentsResourceReturnedStatus>;
  statementDescriptor: Scalars['String'];
  status: StripeTreasuryOutboundPaymentStatus;
  statusTransitions: StripeTreasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitions;
  transaction: StripeStringOrTreasuryTransactionUnion;
};

export enum StripeTreasuryOutboundPaymentObject {
  TreasuryOutboundPayment = 'TREASURY_OUTBOUND_PAYMENT'
}

export enum StripeTreasuryOutboundPaymentStatus {
  Canceled = 'CANCELED',
  Failed = 'FAILED',
  Posted = 'POSTED',
  Processing = 'PROCESSING',
  Returned = 'RETURNED'
}

export type StripeTreasuryOutboundPaymentsResourceOutboundPaymentResourceEndUserDetails = {
  __typename?: 'StripeTreasuryOutboundPaymentsResourceOutboundPaymentResourceEndUserDetails';
  ipAddress?: Maybe<Scalars['String']>;
  present: Scalars['Boolean'];
};

export type StripeTreasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitions = {
  __typename?: 'StripeTreasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitions';
  canceledAt?: Maybe<Scalars['Int']>;
  failedAt?: Maybe<Scalars['Int']>;
  postedAt?: Maybe<Scalars['Int']>;
  returnedAt?: Maybe<Scalars['Int']>;
};

export type StripeTreasuryOutboundPaymentsResourceReturnedStatus = {
  __typename?: 'StripeTreasuryOutboundPaymentsResourceReturnedStatus';
  code: StripeTreasuryOutboundPaymentsResourceReturnedStatusCode;
  transaction: StripeStringOrTreasuryTransactionUnion;
};

export enum StripeTreasuryOutboundPaymentsResourceReturnedStatusCode {
  AccountClosed = 'ACCOUNT_CLOSED',
  AccountFrozen = 'ACCOUNT_FROZEN',
  BankAccountRestricted = 'BANK_ACCOUNT_RESTRICTED',
  BankOwnershipChanged = 'BANK_OWNERSHIP_CHANGED',
  Declined = 'DECLINED',
  IncorrectAccountHolderName = 'INCORRECT_ACCOUNT_HOLDER_NAME',
  InvalidAccountNumber = 'INVALID_ACCOUNT_NUMBER',
  InvalidCurrency = 'INVALID_CURRENCY',
  NoAccount = 'NO_ACCOUNT',
  Other = 'OTHER'
}

export type StripeTreasuryOutboundTransfer = {
  __typename?: 'StripeTreasuryOutboundTransfer';
  amount: Scalars['Int'];
  cancelable: Scalars['Boolean'];
  created: Scalars['Int'];
  currency: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  destinationPaymentMethod?: Maybe<Scalars['String']>;
  destinationPaymentMethodDetails: StripeOutboundTransfersPaymentMethodDetails;
  expectedArrivalDate: Scalars['Int'];
  financialAccount: Scalars['String'];
  hostedRegulatoryReceiptUrl?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  metadata: Scalars['JSON'];
  object: StripeTreasuryOutboundTransferObject;
  returnedDetails?: Maybe<StripeTreasuryOutboundTransfersResourceReturnedDetails>;
  statementDescriptor: Scalars['String'];
  status: StripeTreasuryOutboundTransferStatus;
  statusTransitions: StripeTreasuryOutboundTransfersResourceStatusTransitions;
  transaction: StripeStringOrTreasuryTransactionUnion;
};

export enum StripeTreasuryOutboundTransferObject {
  TreasuryOutboundTransfer = 'TREASURY_OUTBOUND_TRANSFER'
}

export enum StripeTreasuryOutboundTransferStatus {
  Canceled = 'CANCELED',
  Failed = 'FAILED',
  Posted = 'POSTED',
  Processing = 'PROCESSING',
  Returned = 'RETURNED'
}

export type StripeTreasuryOutboundTransfersResourceReturnedDetails = {
  __typename?: 'StripeTreasuryOutboundTransfersResourceReturnedDetails';
  code: StripeTreasuryOutboundTransfersResourceReturnedDetailsCode;
  transaction: StripeStringOrTreasuryTransactionUnion;
};

export enum StripeTreasuryOutboundTransfersResourceReturnedDetailsCode {
  AccountClosed = 'ACCOUNT_CLOSED',
  AccountFrozen = 'ACCOUNT_FROZEN',
  BankAccountRestricted = 'BANK_ACCOUNT_RESTRICTED',
  BankOwnershipChanged = 'BANK_OWNERSHIP_CHANGED',
  Declined = 'DECLINED',
  IncorrectAccountHolderName = 'INCORRECT_ACCOUNT_HOLDER_NAME',
  InvalidAccountNumber = 'INVALID_ACCOUNT_NUMBER',
  InvalidCurrency = 'INVALID_CURRENCY',
  NoAccount = 'NO_ACCOUNT',
  Other = 'OTHER'
}

export type StripeTreasuryOutboundTransfersResourceStatusTransitions = {
  __typename?: 'StripeTreasuryOutboundTransfersResourceStatusTransitions';
  canceledAt?: Maybe<Scalars['Int']>;
  failedAt?: Maybe<Scalars['Int']>;
  postedAt?: Maybe<Scalars['Int']>;
  returnedAt?: Maybe<Scalars['Int']>;
};

export type StripeTreasuryReceivedCredit = {
  __typename?: 'StripeTreasuryReceivedCredit';
  amount: Scalars['Int'];
  created: Scalars['Int'];
  currency: Scalars['String'];
  description: Scalars['String'];
  failureCode?: Maybe<StripeTreasuryReceivedCreditFailureCode>;
  financialAccount?: Maybe<Scalars['String']>;
  hostedRegulatoryReceiptUrl?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  initiatingPaymentMethodDetails: StripeTreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails;
  linkedFlows: StripeTreasuryReceivedCreditsResourceLinkedFlows;
  livemode: Scalars['Boolean'];
  network: StripeTreasuryReceivedCreditNetwork;
  object: StripeTreasuryReceivedCreditObject;
  reversalDetails?: Maybe<StripeTreasuryReceivedCreditsResourceReversalDetails>;
  status: StripeTreasuryReceivedCreditStatus;
  transaction?: Maybe<StripeStringOrTreasuryTransactionUnion>;
};

export enum StripeTreasuryReceivedCreditFailureCode {
  AccountClosed = 'ACCOUNT_CLOSED',
  AccountFrozen = 'ACCOUNT_FROZEN',
  Other = 'OTHER'
}

export enum StripeTreasuryReceivedCreditNetwork {
  Ach = 'ACH',
  Card = 'CARD',
  Stripe = 'STRIPE',
  UsDomesticWire = 'US_DOMESTIC_WIRE'
}

export enum StripeTreasuryReceivedCreditObject {
  TreasuryReceivedCredit = 'TREASURY_RECEIVED_CREDIT'
}

export enum StripeTreasuryReceivedCreditStatus {
  Failed = 'FAILED',
  Succeeded = 'SUCCEEDED'
}

export type StripeTreasuryReceivedCreditsResourceLinkedFlows = {
  __typename?: 'StripeTreasuryReceivedCreditsResourceLinkedFlows';
  creditReversal?: Maybe<Scalars['String']>;
  issuingAuthorization?: Maybe<Scalars['String']>;
  issuingTransaction?: Maybe<Scalars['String']>;
  sourceFlow?: Maybe<Scalars['String']>;
  sourceFlowDetails?: Maybe<StripeTreasuryReceivedCreditsResourceSourceFlowsDetails>;
  sourceFlowType?: Maybe<Scalars['String']>;
};

export type StripeTreasuryReceivedCreditsResourceReversalDetails = {
  __typename?: 'StripeTreasuryReceivedCreditsResourceReversalDetails';
  deadline?: Maybe<Scalars['Int']>;
  restrictedReason?: Maybe<StripeTreasuryReceivedCreditsResourceReversalDetailsRestrictedReason>;
};

export enum StripeTreasuryReceivedCreditsResourceReversalDetailsRestrictedReason {
  AlreadyReversed = 'ALREADY_REVERSED',
  DeadlinePassed = 'DEADLINE_PASSED',
  NetworkRestricted = 'NETWORK_RESTRICTED',
  Other = 'OTHER',
  SourceFlowRestricted = 'SOURCE_FLOW_RESTRICTED'
}

export type StripeTreasuryReceivedCreditsResourceSourceFlowsDetails = {
  __typename?: 'StripeTreasuryReceivedCreditsResourceSourceFlowsDetails';
  creditReversal?: Maybe<StripeTreasuryCreditReversal>;
  outboundPayment?: Maybe<StripeTreasuryOutboundPayment>;
  payout?: Maybe<StripePayout>;
  type: StripeTreasuryReceivedCreditsResourceSourceFlowsDetailsType;
};

export enum StripeTreasuryReceivedCreditsResourceSourceFlowsDetailsType {
  CreditReversal = 'CREDIT_REVERSAL',
  Other = 'OTHER',
  OutboundPayment = 'OUTBOUND_PAYMENT',
  Payout = 'PAYOUT'
}

export type StripeTreasuryReceivedCreditsResourceStatusTransitions = {
  __typename?: 'StripeTreasuryReceivedCreditsResourceStatusTransitions';
  postedAt?: Maybe<Scalars['Int']>;
};

export type StripeTreasuryReceivedDebit = {
  __typename?: 'StripeTreasuryReceivedDebit';
  amount: Scalars['Int'];
  created: Scalars['Int'];
  currency: Scalars['String'];
  description: Scalars['String'];
  failureCode?: Maybe<StripeTreasuryReceivedDebitFailureCode>;
  financialAccount?: Maybe<Scalars['String']>;
  hostedRegulatoryReceiptUrl?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  initiatingPaymentMethodDetails?: Maybe<StripeTreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails>;
  linkedFlows: StripeTreasuryReceivedDebitsResourceLinkedFlows;
  livemode: Scalars['Boolean'];
  network: StripeTreasuryReceivedDebitNetwork;
  object: StripeTreasuryReceivedDebitObject;
  reversalDetails?: Maybe<StripeTreasuryReceivedDebitsResourceReversalDetails>;
  status: StripeTreasuryReceivedDebitStatus;
  transaction?: Maybe<StripeStringOrTreasuryTransactionUnion>;
};

export enum StripeTreasuryReceivedDebitFailureCode {
  AccountClosed = 'ACCOUNT_CLOSED',
  AccountFrozen = 'ACCOUNT_FROZEN',
  InsufficientFunds = 'INSUFFICIENT_FUNDS',
  Other = 'OTHER'
}

export enum StripeTreasuryReceivedDebitNetwork {
  Ach = 'ACH',
  Card = 'CARD',
  Stripe = 'STRIPE'
}

export enum StripeTreasuryReceivedDebitObject {
  TreasuryReceivedDebit = 'TREASURY_RECEIVED_DEBIT'
}

export enum StripeTreasuryReceivedDebitStatus {
  Failed = 'FAILED',
  Succeeded = 'SUCCEEDED'
}

export type StripeTreasuryReceivedDebitsResourceDebitReversalLinkedFlows = {
  __typename?: 'StripeTreasuryReceivedDebitsResourceDebitReversalLinkedFlows';
  issuingDispute?: Maybe<Scalars['String']>;
};

export type StripeTreasuryReceivedDebitsResourceLinkedFlows = {
  __typename?: 'StripeTreasuryReceivedDebitsResourceLinkedFlows';
  debitReversal?: Maybe<Scalars['String']>;
  inboundTransfer?: Maybe<Scalars['String']>;
  issuingAuthorization?: Maybe<Scalars['String']>;
  issuingTransaction?: Maybe<Scalars['String']>;
};

export type StripeTreasuryReceivedDebitsResourceReversalDetails = {
  __typename?: 'StripeTreasuryReceivedDebitsResourceReversalDetails';
  deadline?: Maybe<Scalars['Int']>;
  restrictedReason?: Maybe<StripeTreasuryReceivedDebitsResourceReversalDetailsRestrictedReason>;
};

export enum StripeTreasuryReceivedDebitsResourceReversalDetailsRestrictedReason {
  AlreadyReversed = 'ALREADY_REVERSED',
  DeadlinePassed = 'DEADLINE_PASSED',
  NetworkRestricted = 'NETWORK_RESTRICTED',
  Other = 'OTHER',
  SourceFlowRestricted = 'SOURCE_FLOW_RESTRICTED'
}

export type StripeTreasuryReceivedDebitsResourceStatusTransitions = {
  __typename?: 'StripeTreasuryReceivedDebitsResourceStatusTransitions';
  completedAt?: Maybe<Scalars['Int']>;
};

export type StripeTreasurySharedResourceBillingDetails = {
  __typename?: 'StripeTreasurySharedResourceBillingDetails';
  address: StripeAddress;
  email?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type StripeTreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails = {
  __typename?: 'StripeTreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails';
  balance?: Maybe<StripeTreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetailsBalance>;
  billingDetails: StripeTreasurySharedResourceBillingDetails;
  financialAccount?: Maybe<StripeReceivedPaymentMethodDetailsFinancialAccount>;
  issuingCard?: Maybe<Scalars['String']>;
  type: StripeTreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetailsType;
  usBankAccount?: Maybe<StripeTreasurySharedResourceInitiatingPaymentMethodDetailsUsBankAccount>;
};

export enum StripeTreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetailsBalance {
  Payments = 'PAYMENTS'
}

export enum StripeTreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetailsType {
  Balance = 'BALANCE',
  FinancialAccount = 'FINANCIAL_ACCOUNT',
  IssuingCard = 'ISSUING_CARD',
  Stripe = 'STRIPE',
  UsBankAccount = 'US_BANK_ACCOUNT'
}

export type StripeTreasurySharedResourceInitiatingPaymentMethodDetailsUsBankAccount = {
  __typename?: 'StripeTreasurySharedResourceInitiatingPaymentMethodDetailsUsBankAccount';
  bankName?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  routingNumber?: Maybe<Scalars['String']>;
};

export type StripeTreasuryTransaction = {
  __typename?: 'StripeTreasuryTransaction';
  amount: Scalars['Int'];
  balanceImpact: StripeTreasuryTransactionsResourceBalanceImpact;
  created: Scalars['Int'];
  currency: Scalars['String'];
  description: Scalars['String'];
  entries?: Maybe<StripeTreasuryTransactionEntries>;
  financialAccount: Scalars['String'];
  flow?: Maybe<Scalars['String']>;
  flowDetails?: Maybe<StripeTreasuryTransactionsResourceFlowDetails>;
  flowType: StripeTreasuryTransactionFlowType;
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  object: StripeTreasuryTransactionObject;
  status: StripeTreasuryTransactionStatus;
  statusTransitions: StripeTreasuryTransactionsResourceAbstractTransactionResourceStatusTransitions;
};

export type StripeTreasuryTransactionEntries = {
  __typename?: 'StripeTreasuryTransactionEntries';
  hasMore: Scalars['Boolean'];
  nodes: Array<StripeTreasuryTransactionEntry>;
  object: StripeTreasuryTransactionObjectEntries;
  url: Scalars['String'];
};

export type StripeTreasuryTransactionEntry = {
  __typename?: 'StripeTreasuryTransactionEntry';
  balanceImpact: StripeTreasuryTransactionsResourceBalanceImpact;
  created: Scalars['Int'];
  currency: Scalars['String'];
  effectiveAt: Scalars['Int'];
  financialAccount: Scalars['String'];
  flow?: Maybe<Scalars['String']>;
  flowDetails?: Maybe<StripeTreasuryTransactionsResourceFlowDetails>;
  flowType: StripeTreasuryTransactionEntryFlowType;
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  object: StripeTreasuryTransactionEntryObject;
  transaction: StripeStringOrTreasuryTransactionUnion;
  type: StripeTreasuryTransactionEntryType;
};

export enum StripeTreasuryTransactionEntryFlowType {
  CreditReversal = 'CREDIT_REVERSAL',
  DebitReversal = 'DEBIT_REVERSAL',
  InboundTransfer = 'INBOUND_TRANSFER',
  IssuingAuthorization = 'ISSUING_AUTHORIZATION',
  Other = 'OTHER',
  OutboundPayment = 'OUTBOUND_PAYMENT',
  OutboundTransfer = 'OUTBOUND_TRANSFER',
  ReceivedCredit = 'RECEIVED_CREDIT',
  ReceivedDebit = 'RECEIVED_DEBIT'
}

export enum StripeTreasuryTransactionEntryObject {
  TreasuryTransactionEntry = 'TREASURY_TRANSACTION_ENTRY'
}

export enum StripeTreasuryTransactionEntryType {
  CreditReversal = 'CREDIT_REVERSAL',
  CreditReversalPosting = 'CREDIT_REVERSAL_POSTING',
  DebitReversal = 'DEBIT_REVERSAL',
  InboundTransfer = 'INBOUND_TRANSFER',
  InboundTransferReturn = 'INBOUND_TRANSFER_RETURN',
  IssuingAuthorizationHold = 'ISSUING_AUTHORIZATION_HOLD',
  IssuingAuthorizationRelease = 'ISSUING_AUTHORIZATION_RELEASE',
  Other = 'OTHER',
  OutboundPayment = 'OUTBOUND_PAYMENT',
  OutboundPaymentCancellation = 'OUTBOUND_PAYMENT_CANCELLATION',
  OutboundPaymentFailure = 'OUTBOUND_PAYMENT_FAILURE',
  OutboundPaymentPosting = 'OUTBOUND_PAYMENT_POSTING',
  OutboundPaymentReturn = 'OUTBOUND_PAYMENT_RETURN',
  OutboundTransfer = 'OUTBOUND_TRANSFER',
  OutboundTransferCancellation = 'OUTBOUND_TRANSFER_CANCELLATION',
  OutboundTransferFailure = 'OUTBOUND_TRANSFER_FAILURE',
  OutboundTransferPosting = 'OUTBOUND_TRANSFER_POSTING',
  OutboundTransferReturn = 'OUTBOUND_TRANSFER_RETURN',
  ReceivedCredit = 'RECEIVED_CREDIT',
  ReceivedDebit = 'RECEIVED_DEBIT'
}

export enum StripeTreasuryTransactionFlowType {
  CreditReversal = 'CREDIT_REVERSAL',
  DebitReversal = 'DEBIT_REVERSAL',
  InboundTransfer = 'INBOUND_TRANSFER',
  IssuingAuthorization = 'ISSUING_AUTHORIZATION',
  Other = 'OTHER',
  OutboundPayment = 'OUTBOUND_PAYMENT',
  OutboundTransfer = 'OUTBOUND_TRANSFER',
  ReceivedCredit = 'RECEIVED_CREDIT',
  ReceivedDebit = 'RECEIVED_DEBIT'
}

export enum StripeTreasuryTransactionObject {
  TreasuryTransaction = 'TREASURY_TRANSACTION'
}

export enum StripeTreasuryTransactionObjectEntries {
  List = 'LIST'
}

export enum StripeTreasuryTransactionStatus {
  Open = 'OPEN',
  Posted = 'POSTED',
  Void = 'VOID'
}

export type StripeTreasuryTransactionsResourceAbstractTransactionResourceStatusTransitions = {
  __typename?: 'StripeTreasuryTransactionsResourceAbstractTransactionResourceStatusTransitions';
  postedAt?: Maybe<Scalars['Int']>;
  voidAt?: Maybe<Scalars['Int']>;
};

export type StripeTreasuryTransactionsResourceBalanceImpact = {
  __typename?: 'StripeTreasuryTransactionsResourceBalanceImpact';
  cash: Scalars['Int'];
  inboundPending: Scalars['Int'];
  outboundPending: Scalars['Int'];
};

export type StripeTreasuryTransactionsResourceFlowDetails = {
  __typename?: 'StripeTreasuryTransactionsResourceFlowDetails';
  creditReversal?: Maybe<StripeTreasuryCreditReversal>;
  debitReversal?: Maybe<StripeTreasuryDebitReversal>;
  inboundTransfer?: Maybe<StripeTreasuryInboundTransfer>;
  issuingAuthorization?: Maybe<StripeIssuingAuthorization>;
  outboundPayment?: Maybe<StripeTreasuryOutboundPayment>;
  outboundTransfer?: Maybe<StripeTreasuryOutboundTransfer>;
  receivedCredit?: Maybe<StripeTreasuryReceivedCredit>;
  receivedDebit?: Maybe<StripeTreasuryReceivedDebit>;
  type: StripeTreasuryTransactionsResourceFlowDetailsType;
};

export enum StripeTreasuryTransactionsResourceFlowDetailsType {
  CreditReversal = 'CREDIT_REVERSAL',
  DebitReversal = 'DEBIT_REVERSAL',
  InboundTransfer = 'INBOUND_TRANSFER',
  IssuingAuthorization = 'ISSUING_AUTHORIZATION',
  Other = 'OTHER',
  OutboundPayment = 'OUTBOUND_PAYMENT',
  OutboundTransfer = 'OUTBOUND_TRANSFER',
  ReceivedCredit = 'RECEIVED_CREDIT',
  ReceivedDebit = 'RECEIVED_DEBIT'
}

export type StripeUsBankAccountNetworks = {
  __typename?: 'StripeUsBankAccountNetworks';
  preferred?: Maybe<Scalars['String']>;
  supported: Array<StripeUsBankAccountNetworksSupported>;
};

export enum StripeUsBankAccountNetworksSupported {
  Ach = 'ACH',
  UsDomesticWire = 'US_DOMESTIC_WIRE'
}

export type StripeUsageRecord = {
  __typename?: 'StripeUsageRecord';
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  object: StripeUsageRecordObject;
  quantity: Scalars['Int'];
  subscriptionItem: Scalars['String'];
  timestamp: Scalars['Int'];
};

export enum StripeUsageRecordObject {
  UsageRecord = 'USAGE_RECORD'
}

export type StripeUsageRecordSummary = {
  __typename?: 'StripeUsageRecordSummary';
  id: Scalars['String'];
  invoice?: Maybe<Scalars['String']>;
  livemode: Scalars['Boolean'];
  object: StripeUsageRecordSummaryObject;
  period: StripePeriod;
  subscriptionItem: Scalars['String'];
  totalUsage: Scalars['Int'];
};

export enum StripeUsageRecordSummaryObject {
  UsageRecordSummary = 'USAGE_RECORD_SUMMARY'
}

export type StripeVerificationSessionRedaction = {
  __typename?: 'StripeVerificationSessionRedaction';
  status: StripeVerificationSessionRedactionStatus;
};

export enum StripeVerificationSessionRedactionStatus {
  Processing = 'PROCESSING',
  Redacted = 'REDACTED'
}

export type StripeWebhookEndpoint = {
  __typename?: 'StripeWebhookEndpoint';
  apiVersion?: Maybe<Scalars['String']>;
  application?: Maybe<Scalars['String']>;
  created: Scalars['Int'];
  description?: Maybe<Scalars['String']>;
  enabledEvents: Array<Scalars['String']>;
  id: Scalars['String'];
  livemode: Scalars['Boolean'];
  metadata: Scalars['JSON'];
  object: StripeWebhookEndpointObject;
  secret?: Maybe<Scalars['String']>;
  status: Scalars['String'];
  url: Scalars['String'];
};

export enum StripeWebhookEndpointObject {
  WebhookEndpoint = 'WEBHOOK_ENDPOINT'
}

export type TemplateData = {
  __typename?: 'TemplateData';
  /** when the model was created */
  createdAt: Scalars['DateTime'];
  data: Scalars['JSON'];
  /** Unique identifier */
  id: Scalars['ID'];
  site: Site;
  /** when the model was updated */
  updatedAt: Scalars['DateTime'];
};

export type TemplateDataByInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type TemplateDataConnection = {
  __typename?: 'TemplateDataConnection';
  edges?: Maybe<Array<Maybe<TemplateDataEdge>>>;
  /** Information to aid in pagination */
  pageInfo: PageInfo;
};

/** Input to create a TemplateData */
export type TemplateDataCreateInput = {
  data: Scalars['JSON'];
  site: SiteToTemplateDataCreateSiteRelation;
};

export type TemplateDataCreatePayload = {
  __typename?: 'TemplateDataCreatePayload';
  templateData?: Maybe<TemplateData>;
};

export type TemplateDataDeletePayload = {
  __typename?: 'TemplateDataDeletePayload';
  deletedId: Scalars['ID'];
};

export type TemplateDataEdge = {
  __typename?: 'TemplateDataEdge';
  cursor: Scalars['String'];
  node: TemplateData;
};

export type TemplateDataOrderByInput = {
  createdAt?: InputMaybe<OrderByDirection>;
};

/** Input to update a TemplateData */
export type TemplateDataUpdateInput = {
  data?: InputMaybe<Scalars['JSON']>;
  site?: InputMaybe<SiteToTemplateDataUpdateSiteRelation>;
};

export type TemplateDataUpdatePayload = {
  __typename?: 'TemplateDataUpdatePayload';
  templateData?: Maybe<TemplateData>;
};

export type User = {
  __typename?: 'User';
  cognitoUser?: Maybe<CognitoUser>;
  /** when the model was created */
  createdAt: Scalars['DateTime'];
  customer?: Maybe<StripeCustomer>;
  email: Scalars['Email'];
  /** Unique identifier */
  id: Scalars['ID'];
  identities?: Maybe<IdentityConnection>;
  name?: Maybe<Scalars['String']>;
  sites?: Maybe<SiteConnection>;
  /** when the model was updated */
  updatedAt: Scalars['DateTime'];
};


export type UserIdentitiesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<UserOrderByInput>;
};


export type UserSitesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<UserOrderByInput>;
};

export type UserByInput = {
  email?: InputMaybe<Scalars['Email']>;
  id?: InputMaybe<Scalars['ID']>;
};

export type UserConnection = {
  __typename?: 'UserConnection';
  edges?: Maybe<Array<Maybe<UserEdge>>>;
  /** Information to aid in pagination */
  pageInfo: PageInfo;
};

/** Input to create a User */
export type UserCreateInput = {
  email: Scalars['Email'];
  identities?: InputMaybe<Array<IdentityToUserCreateIdentityRelation>>;
  name?: InputMaybe<Scalars['String']>;
  sites?: InputMaybe<Array<InputMaybe<SiteToUserCreateSiteRelation>>>;
};

export type UserCreatePayload = {
  __typename?: 'UserCreatePayload';
  user?: Maybe<User>;
};

export type UserDeletePayload = {
  __typename?: 'UserDeletePayload';
  deletedId: Scalars['ID'];
};

export type UserEdge = {
  __typename?: 'UserEdge';
  cursor: Scalars['String'];
  node: User;
};

export type UserOrderByInput = {
  createdAt?: InputMaybe<OrderByDirection>;
};

/** Input to update a User */
export type UserUpdateInput = {
  email?: InputMaybe<Scalars['Email']>;
  identities?: InputMaybe<Array<IdentityToUserUpdateIdentityRelation>>;
  name?: InputMaybe<Scalars['String']>;
  sites?: InputMaybe<Array<InputMaybe<SiteToUserUpdateSiteRelation>>>;
};

export type UserUpdatePayload = {
  __typename?: 'UserUpdatePayload';
  user?: Maybe<User>;
};

export type AddressPartsFragment = { __typename?: 'StripeAddress', city?: string | null, country?: string | null, line1?: string | null, postalCode?: string | null, state?: string | null };

export type IdentityPartsFragment = { __typename?: 'Identity', id: string, sub: string, type: IdentityType };

export type ProductPartsFragment = { __typename?: 'StripeProduct', id: string, active: boolean, created: number, description?: string | null, images: Array<string>, livemode: boolean, metadata: any, name: string, object: StripeProductObject, shippable?: boolean | null, statementDescriptor?: string | null, unitLabel?: string | null, updated: number, url?: string | null };

export type SitePartsFragment = { __typename?: 'Site', id: string, name: string, description: string, logo?: string | null, font?: string | null, image?: string | null, imageBlurhash?: string | null, subdomain: string, customDomain: string, templateData?: { __typename?: 'TemplateData', id: string, data: any } | null };

export type UserPartsFragment = { __typename?: 'User', id: string, email: string, name?: string | null };

export type IdentityByIdQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type IdentityByIdQuery = { __typename?: 'Query', identity?: { __typename?: 'Identity', createdAt: any, updatedAt: any, id: string, sub: string, type: IdentityType, user: { __typename?: 'User', id: string, email: string, name?: string | null } } | null };

export type IdentityBySubQueryVariables = Exact<{
  sub: Scalars['String'];
}>;


export type IdentityBySubQuery = { __typename?: 'Query', identity?: { __typename?: 'Identity', createdAt: any, updatedAt: any, id: string, sub: string, type: IdentityType, user: { __typename?: 'User', id: string, email: string, name?: string | null } } | null };

export type IdentityCollectionQueryVariables = Exact<{
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
}>;


export type IdentityCollectionQuery = { __typename?: 'Query', identityCollection?: { __typename?: 'IdentityConnection', edges?: Array<{ __typename?: 'IdentityEdge', cursor: string, node: { __typename?: 'Identity', createdAt: any, updatedAt: any, id: string, sub: string, type: IdentityType, user: { __typename?: 'User', id: string, email: string, name?: string | null } } } | null> | null, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, endCursor?: string | null, startCursor?: string | null } } | null };

export type SiteByCustomDomainQueryVariables = Exact<{
  domain: Scalars['String'];
}>;


export type SiteByCustomDomainQuery = { __typename?: 'Query', site?: { __typename?: 'Site', createdAt: any, updatedAt: any, id: string, name: string, description: string, logo?: string | null, font?: string | null, image?: string | null, imageBlurhash?: string | null, subdomain: string, customDomain: string, user?: { __typename?: 'User', id: string, email: string, name?: string | null } | null, templateData?: { __typename?: 'TemplateData', id: string, data: any } | null } | null };

export type SiteBySubdomainQueryVariables = Exact<{
  sub: Scalars['String'];
}>;


export type SiteBySubdomainQuery = { __typename?: 'Query', site?: { __typename?: 'Site', createdAt: any, updatedAt: any, id: string, name: string, description: string, logo?: string | null, font?: string | null, image?: string | null, imageBlurhash?: string | null, subdomain: string, customDomain: string, user?: { __typename?: 'User', id: string, email: string, name?: string | null } | null, templateData?: { __typename?: 'TemplateData', id: string, data: any } | null } | null };

export type UserByEmailQueryVariables = Exact<{
  email: Scalars['Email'];
}>;


export type UserByEmailQuery = { __typename?: 'Query', user?: { __typename?: 'User', createdAt: any, updatedAt: any, id: string, email: string, name?: string | null, customer?: { __typename?: 'StripeCustomer', id: string } | null, identities?: { __typename?: 'IdentityConnection', edges?: Array<{ __typename?: 'IdentityEdge', node: { __typename?: 'Identity', id: string, sub: string, type: IdentityType } } | null> | null } | null } | null };

export type UserByIdQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type UserByIdQuery = { __typename?: 'Query', user?: { __typename?: 'User', createdAt: any, updatedAt: any, id: string, email: string, name?: string | null, customer?: { __typename?: 'StripeCustomer', id: string } | null, identities?: { __typename?: 'IdentityConnection', edges?: Array<{ __typename?: 'IdentityEdge', node: { __typename?: 'Identity', id: string, sub: string, type: IdentityType } } | null> | null } | null } | null };

export type UserCollectionQueryVariables = Exact<{
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
}>;


export type UserCollectionQuery = { __typename?: 'Query', userCollection?: { __typename?: 'UserConnection', edges?: Array<{ __typename?: 'UserEdge', node: { __typename?: 'User', createdAt: any, updatedAt: any, id: string, email: string, name?: string | null, customer?: { __typename?: 'StripeCustomer', id: string } | null, identities?: { __typename?: 'IdentityConnection', edges?: Array<{ __typename?: 'IdentityEdge', cursor: string, node: { __typename?: 'Identity', id: string, sub: string, type: IdentityType } } | null> | null, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, endCursor?: string | null, startCursor?: string | null } } | null } } | null> | null } | null };

export type UserSubscriptionsQueryVariables = Exact<{
  email: Scalars['Email'];
}>;


export type UserSubscriptionsQuery = { __typename?: 'Query', user?: { __typename?: 'User', id: string, email: string, name?: string | null, customer?: { __typename?: 'StripeCustomer', id: string, subscriptions?: { __typename?: 'StripeCustomerSubscriptions', nodes: Array<{ __typename?: 'StripeSubscription', id: string, items: { __typename?: 'StripeSubscriptionItems', nodes: Array<{ __typename?: 'StripeSubscriptionItem', id: string, quantity?: number | null, price: { __typename?: 'StripePrice', id: string, active: boolean, currency: string, unitAmount?: number | null, recurring?: { __typename?: 'StripeRecurring', interval: StripeRecurringInterval } | null, product: { __typename: 'StripeDeletedProduct', id: string, deleted: boolean } | { __typename: 'StripeProduct', id: string, active: boolean, created: number, description?: string | null, images: Array<string>, livemode: boolean, metadata: any, name: string, object: StripeProductObject, shippable?: boolean | null, statementDescriptor?: string | null, unitLabel?: string | null, updated: number, url?: string | null } | { __typename: 'StripeString' } } }> } }> } | null } | null } | null };

export const AddressPartsFragmentDoc = `
    fragment AddressParts on StripeAddress {
  city
  country
  line1
  line1
  postalCode
  state
}
    `;
export const IdentityPartsFragmentDoc = `
    fragment IdentityParts on Identity {
  id
  sub
  type
}
    `;
export const ProductPartsFragmentDoc = `
    fragment ProductParts on StripeProduct {
  id
  active
  created
  description
  images
  livemode
  metadata
  name
  object
  shippable
  statementDescriptor
  unitLabel
  updated
  url
}
    `;
export const SitePartsFragmentDoc = `
    fragment SiteParts on Site {
  id
  name
  description
  logo
  font
  image
  imageBlurhash
  subdomain
  customDomain
  templateData {
    id
    data
  }
}
    `;
export const UserPartsFragmentDoc = `
    fragment UserParts on User {
  id
  email
  name
}
    `;
export const IdentityByIdDocument = `
    query IdentityById($id: ID!) {
  identity(by: {id: $id}) {
    ...IdentityParts
    createdAt
    updatedAt
    user {
      ...UserParts
    }
  }
}
    ${IdentityPartsFragmentDoc}
${UserPartsFragmentDoc}`;
export const useIdentityByIdQuery = <
      TData = IdentityByIdQuery,
      TError = unknown
    >(
      client: GraphQLClient,
      variables: IdentityByIdQueryVariables,
      options?: UseQueryOptions<IdentityByIdQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useQuery<IdentityByIdQuery, TError, TData>(
      ['IdentityById', variables],
      fetcher<IdentityByIdQuery, IdentityByIdQueryVariables>(client, IdentityByIdDocument, variables, headers),
      options
    );
export const IdentityBySubDocument = `
    query IdentityBySub($sub: String!) {
  identity(by: {sub: $sub}) {
    ...IdentityParts
    createdAt
    updatedAt
    user {
      ...UserParts
    }
  }
}
    ${IdentityPartsFragmentDoc}
${UserPartsFragmentDoc}`;
export const useIdentityBySubQuery = <
      TData = IdentityBySubQuery,
      TError = unknown
    >(
      client: GraphQLClient,
      variables: IdentityBySubQueryVariables,
      options?: UseQueryOptions<IdentityBySubQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useQuery<IdentityBySubQuery, TError, TData>(
      ['IdentityBySub', variables],
      fetcher<IdentityBySubQuery, IdentityBySubQueryVariables>(client, IdentityBySubDocument, variables, headers),
      options
    );
export const IdentityCollectionDocument = `
    query IdentityCollection($first: Int, $last: Int, $before: String, $after: String) {
  identityCollection(first: $first, last: $last, before: $before, after: $after) {
    edges {
      node {
        ...IdentityParts
        createdAt
        updatedAt
        user {
          ...UserParts
        }
      }
      cursor
    }
    pageInfo {
      hasPreviousPage
      hasNextPage
      endCursor
      startCursor
    }
  }
}
    ${IdentityPartsFragmentDoc}
${UserPartsFragmentDoc}`;
export const useIdentityCollectionQuery = <
      TData = IdentityCollectionQuery,
      TError = unknown
    >(
      client: GraphQLClient,
      variables?: IdentityCollectionQueryVariables,
      options?: UseQueryOptions<IdentityCollectionQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useQuery<IdentityCollectionQuery, TError, TData>(
      variables === undefined ? ['IdentityCollection'] : ['IdentityCollection', variables],
      fetcher<IdentityCollectionQuery, IdentityCollectionQueryVariables>(client, IdentityCollectionDocument, variables, headers),
      options
    );
export const SiteByCustomDomainDocument = `
    query SiteByCustomDomain($domain: String!) {
  site(by: {customDomain: $domain}) {
    ...SiteParts
    createdAt
    updatedAt
    user {
      ...UserParts
    }
  }
}
    ${SitePartsFragmentDoc}
${UserPartsFragmentDoc}`;
export const useSiteByCustomDomainQuery = <
      TData = SiteByCustomDomainQuery,
      TError = unknown
    >(
      client: GraphQLClient,
      variables: SiteByCustomDomainQueryVariables,
      options?: UseQueryOptions<SiteByCustomDomainQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useQuery<SiteByCustomDomainQuery, TError, TData>(
      ['SiteByCustomDomain', variables],
      fetcher<SiteByCustomDomainQuery, SiteByCustomDomainQueryVariables>(client, SiteByCustomDomainDocument, variables, headers),
      options
    );
export const SiteBySubdomainDocument = `
    query SiteBySubdomain($sub: String!) {
  site(by: {subdomain: $sub}) {
    ...SiteParts
    createdAt
    updatedAt
    user {
      ...UserParts
    }
  }
}
    ${SitePartsFragmentDoc}
${UserPartsFragmentDoc}`;
export const useSiteBySubdomainQuery = <
      TData = SiteBySubdomainQuery,
      TError = unknown
    >(
      client: GraphQLClient,
      variables: SiteBySubdomainQueryVariables,
      options?: UseQueryOptions<SiteBySubdomainQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useQuery<SiteBySubdomainQuery, TError, TData>(
      ['SiteBySubdomain', variables],
      fetcher<SiteBySubdomainQuery, SiteBySubdomainQueryVariables>(client, SiteBySubdomainDocument, variables, headers),
      options
    );
export const UserByEmailDocument = `
    query UserByEmail($email: Email!) {
  user(by: {email: $email}) {
    ...UserParts
    createdAt
    updatedAt
    customer {
      id
    }
    identities(first: 100) {
      edges {
        node {
          ...IdentityParts
        }
      }
    }
  }
}
    ${UserPartsFragmentDoc}
${IdentityPartsFragmentDoc}`;
export const useUserByEmailQuery = <
      TData = UserByEmailQuery,
      TError = unknown
    >(
      client: GraphQLClient,
      variables: UserByEmailQueryVariables,
      options?: UseQueryOptions<UserByEmailQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useQuery<UserByEmailQuery, TError, TData>(
      ['UserByEmail', variables],
      fetcher<UserByEmailQuery, UserByEmailQueryVariables>(client, UserByEmailDocument, variables, headers),
      options
    );
export const UserByIdDocument = `
    query UserByID($id: ID!) {
  user(by: {id: $id}) {
    ...UserParts
    createdAt
    updatedAt
    customer {
      id
    }
    identities(first: 100) {
      edges {
        node {
          ...IdentityParts
        }
      }
    }
  }
}
    ${UserPartsFragmentDoc}
${IdentityPartsFragmentDoc}`;
export const useUserByIdQuery = <
      TData = UserByIdQuery,
      TError = unknown
    >(
      client: GraphQLClient,
      variables: UserByIdQueryVariables,
      options?: UseQueryOptions<UserByIdQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useQuery<UserByIdQuery, TError, TData>(
      ['UserByID', variables],
      fetcher<UserByIdQuery, UserByIdQueryVariables>(client, UserByIdDocument, variables, headers),
      options
    );
export const UserCollectionDocument = `
    query UserCollection($first: Int, $last: Int, $before: String, $after: String) {
  userCollection(first: $first, last: $last, before: $before, after: $after) {
    edges {
      node {
        ...UserParts
        createdAt
        updatedAt
        customer {
          id
        }
        identities(first: 100) {
          edges {
            node {
              ...IdentityParts
            }
            cursor
          }
          pageInfo {
            hasPreviousPage
            hasNextPage
            endCursor
            startCursor
          }
        }
      }
    }
  }
}
    ${UserPartsFragmentDoc}
${IdentityPartsFragmentDoc}`;
export const useUserCollectionQuery = <
      TData = UserCollectionQuery,
      TError = unknown
    >(
      client: GraphQLClient,
      variables?: UserCollectionQueryVariables,
      options?: UseQueryOptions<UserCollectionQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useQuery<UserCollectionQuery, TError, TData>(
      variables === undefined ? ['UserCollection'] : ['UserCollection', variables],
      fetcher<UserCollectionQuery, UserCollectionQueryVariables>(client, UserCollectionDocument, variables, headers),
      options
    );
export const UserSubscriptionsDocument = `
    query UserSubscriptions($email: Email!) {
  user(by: {email: $email}) {
    ...UserParts
    customer {
      id
      subscriptions {
        nodes {
          id
          items {
            nodes {
              id
              quantity
              price {
                id
                active
                currency
                recurring {
                  interval
                }
                unitAmount
                product {
                  ... on StripeProduct {
                    ...ProductParts
                  }
                  ... on StripeDeletedProduct {
                    id
                    deleted
                  }
                  __typename
                }
              }
            }
          }
        }
      }
    }
  }
}
    ${UserPartsFragmentDoc}
${ProductPartsFragmentDoc}`;
export const useUserSubscriptionsQuery = <
      TData = UserSubscriptionsQuery,
      TError = unknown
    >(
      client: GraphQLClient,
      variables: UserSubscriptionsQueryVariables,
      options?: UseQueryOptions<UserSubscriptionsQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useQuery<UserSubscriptionsQuery, TError, TData>(
      ['UserSubscriptions', variables],
      fetcher<UserSubscriptionsQuery, UserSubscriptionsQueryVariables>(client, UserSubscriptionsDocument, variables, headers),
      options
    );